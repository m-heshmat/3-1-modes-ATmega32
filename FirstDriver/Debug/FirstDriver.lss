
FirstDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000056cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001d8  00800060  000056cc  00005760  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800238  00800238  00005938  2**0
                  ALLOC
  3 .stab         00003780  00000000  00000000  00005938  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001472  00000000  00000000  000090b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000a52a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  0000a6aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  0000a87b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  0000c88b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  0000d9ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000e9f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000eb90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000ee4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f75c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 30 00 	jmp	0x60	; 0x60 <__ctors_end>
       4:	0c 94 7a 12 	jmp	0x24f4	; 0x24f4 <__vector_1>
       8:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <__vector_2>
       c:	0c 94 08 13 	jmp	0x2610	; 0x2610 <__vector_3>
      10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>

00000054 <__c.1988>:
      54:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

00000060 <__ctors_end>:
      60:	11 24       	eor	r1, r1
      62:	1f be       	out	0x3f, r1	; 63
      64:	cf e5       	ldi	r28, 0x5F	; 95
      66:	d8 e0       	ldi	r29, 0x08	; 8
      68:	de bf       	out	0x3e, r29	; 62
      6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_copy_data>:
      6c:	12 e0       	ldi	r17, 0x02	; 2
      6e:	a0 e6       	ldi	r26, 0x60	; 96
      70:	b0 e0       	ldi	r27, 0x00	; 0
      72:	ec ec       	ldi	r30, 0xCC	; 204
      74:	f6 e5       	ldi	r31, 0x56	; 86
      76:	02 c0       	rjmp	.+4      	; 0x7c <.do_copy_data_start>

00000078 <.do_copy_data_loop>:
      78:	05 90       	lpm	r0, Z+
      7a:	0d 92       	st	X+, r0

0000007c <.do_copy_data_start>:
      7c:	a8 33       	cpi	r26, 0x38	; 56
      7e:	b1 07       	cpc	r27, r17
      80:	d9 f7       	brne	.-10     	; 0x78 <.do_copy_data_loop>

00000082 <__do_clear_bss>:
      82:	12 e0       	ldi	r17, 0x02	; 2
      84:	a8 e3       	ldi	r26, 0x38	; 56
      86:	b2 e0       	ldi	r27, 0x02	; 2
      88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
      8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
      8c:	a2 34       	cpi	r26, 0x42	; 66
      8e:	b1 07       	cpc	r27, r17
      90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
      92:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <main>
      96:	0c 94 64 2b 	jmp	0x56c8	; 0x56c8 <_exit>

0000009a <__bad_interrupt>:
      9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <__fixunssfsi>:
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
      a6:	7b 01       	movw	r14, r22
      a8:	8c 01       	movw	r16, r24
      aa:	20 e0       	ldi	r18, 0x00	; 0
      ac:	30 e0       	ldi	r19, 0x00	; 0
      ae:	40 e0       	ldi	r20, 0x00	; 0
      b0:	5f e4       	ldi	r21, 0x4F	; 79
      b2:	0e 94 4f 03 	call	0x69e	; 0x69e <__gesf2>
      b6:	88 23       	and	r24, r24
      b8:	8c f0       	brlt	.+34     	; 0xdc <__fixunssfsi+0x3e>
      ba:	c8 01       	movw	r24, r16
      bc:	b7 01       	movw	r22, r14
      be:	20 e0       	ldi	r18, 0x00	; 0
      c0:	30 e0       	ldi	r19, 0x00	; 0
      c2:	40 e0       	ldi	r20, 0x00	; 0
      c4:	5f e4       	ldi	r21, 0x4F	; 79
      c6:	0e 94 c7 01 	call	0x38e	; 0x38e <__subsf3>
      ca:	0e 94 0d 04 	call	0x81a	; 0x81a <__fixsfsi>
      ce:	9b 01       	movw	r18, r22
      d0:	ac 01       	movw	r20, r24
      d2:	20 50       	subi	r18, 0x00	; 0
      d4:	30 40       	sbci	r19, 0x00	; 0
      d6:	40 40       	sbci	r20, 0x00	; 0
      d8:	50 48       	sbci	r21, 0x80	; 128
      da:	06 c0       	rjmp	.+12     	; 0xe8 <__fixunssfsi+0x4a>
      dc:	c8 01       	movw	r24, r16
      de:	b7 01       	movw	r22, r14
      e0:	0e 94 0d 04 	call	0x81a	; 0x81a <__fixsfsi>
      e4:	9b 01       	movw	r18, r22
      e6:	ac 01       	movw	r20, r24
      e8:	b9 01       	movw	r22, r18
      ea:	ca 01       	movw	r24, r20
      ec:	1f 91       	pop	r17
      ee:	0f 91       	pop	r16
      f0:	ff 90       	pop	r15
      f2:	ef 90       	pop	r14
      f4:	08 95       	ret

000000f6 <_fpadd_parts>:
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b0 e0       	ldi	r27, 0x00	; 0
      fa:	e1 e8       	ldi	r30, 0x81	; 129
      fc:	f0 e0       	ldi	r31, 0x00	; 0
      fe:	0c 94 fb 24 	jmp	0x49f6	; 0x49f6 <__prologue_saves__>
     102:	dc 01       	movw	r26, r24
     104:	2b 01       	movw	r4, r22
     106:	fa 01       	movw	r30, r20
     108:	9c 91       	ld	r25, X
     10a:	92 30       	cpi	r25, 0x02	; 2
     10c:	08 f4       	brcc	.+2      	; 0x110 <_fpadd_parts+0x1a>
     10e:	39 c1       	rjmp	.+626    	; 0x382 <_fpadd_parts+0x28c>
     110:	eb 01       	movw	r28, r22
     112:	88 81       	ld	r24, Y
     114:	82 30       	cpi	r24, 0x02	; 2
     116:	08 f4       	brcc	.+2      	; 0x11a <_fpadd_parts+0x24>
     118:	33 c1       	rjmp	.+614    	; 0x380 <_fpadd_parts+0x28a>
     11a:	94 30       	cpi	r25, 0x04	; 4
     11c:	69 f4       	brne	.+26     	; 0x138 <_fpadd_parts+0x42>
     11e:	84 30       	cpi	r24, 0x04	; 4
     120:	09 f0       	breq	.+2      	; 0x124 <_fpadd_parts+0x2e>
     122:	2f c1       	rjmp	.+606    	; 0x382 <_fpadd_parts+0x28c>
     124:	11 96       	adiw	r26, 0x01	; 1
     126:	9c 91       	ld	r25, X
     128:	11 97       	sbiw	r26, 0x01	; 1
     12a:	89 81       	ldd	r24, Y+1	; 0x01
     12c:	98 17       	cp	r25, r24
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x3c>
     130:	28 c1       	rjmp	.+592    	; 0x382 <_fpadd_parts+0x28c>
     132:	a8 e1       	ldi	r26, 0x18	; 24
     134:	b1 e0       	ldi	r27, 0x01	; 1
     136:	25 c1       	rjmp	.+586    	; 0x382 <_fpadd_parts+0x28c>
     138:	84 30       	cpi	r24, 0x04	; 4
     13a:	09 f4       	brne	.+2      	; 0x13e <_fpadd_parts+0x48>
     13c:	21 c1       	rjmp	.+578    	; 0x380 <_fpadd_parts+0x28a>
     13e:	82 30       	cpi	r24, 0x02	; 2
     140:	a9 f4       	brne	.+42     	; 0x16c <_fpadd_parts+0x76>
     142:	92 30       	cpi	r25, 0x02	; 2
     144:	09 f0       	breq	.+2      	; 0x148 <_fpadd_parts+0x52>
     146:	1d c1       	rjmp	.+570    	; 0x382 <_fpadd_parts+0x28c>
     148:	9a 01       	movw	r18, r20
     14a:	ad 01       	movw	r20, r26
     14c:	88 e0       	ldi	r24, 0x08	; 8
     14e:	ea 01       	movw	r28, r20
     150:	09 90       	ld	r0, Y+
     152:	ae 01       	movw	r20, r28
     154:	e9 01       	movw	r28, r18
     156:	09 92       	st	Y+, r0
     158:	9e 01       	movw	r18, r28
     15a:	81 50       	subi	r24, 0x01	; 1
     15c:	c1 f7       	brne	.-16     	; 0x14e <_fpadd_parts+0x58>
     15e:	e2 01       	movw	r28, r4
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	11 96       	adiw	r26, 0x01	; 1
     164:	9c 91       	ld	r25, X
     166:	89 23       	and	r24, r25
     168:	81 83       	std	Z+1, r24	; 0x01
     16a:	08 c1       	rjmp	.+528    	; 0x37c <_fpadd_parts+0x286>
     16c:	92 30       	cpi	r25, 0x02	; 2
     16e:	09 f4       	brne	.+2      	; 0x172 <_fpadd_parts+0x7c>
     170:	07 c1       	rjmp	.+526    	; 0x380 <_fpadd_parts+0x28a>
     172:	12 96       	adiw	r26, 0x02	; 2
     174:	2d 90       	ld	r2, X+
     176:	3c 90       	ld	r3, X
     178:	13 97       	sbiw	r26, 0x03	; 3
     17a:	eb 01       	movw	r28, r22
     17c:	8a 81       	ldd	r24, Y+2	; 0x02
     17e:	9b 81       	ldd	r25, Y+3	; 0x03
     180:	14 96       	adiw	r26, 0x04	; 4
     182:	ad 90       	ld	r10, X+
     184:	bd 90       	ld	r11, X+
     186:	cd 90       	ld	r12, X+
     188:	dc 90       	ld	r13, X
     18a:	17 97       	sbiw	r26, 0x07	; 7
     18c:	ec 80       	ldd	r14, Y+4	; 0x04
     18e:	fd 80       	ldd	r15, Y+5	; 0x05
     190:	0e 81       	ldd	r16, Y+6	; 0x06
     192:	1f 81       	ldd	r17, Y+7	; 0x07
     194:	91 01       	movw	r18, r2
     196:	28 1b       	sub	r18, r24
     198:	39 0b       	sbc	r19, r25
     19a:	b9 01       	movw	r22, r18
     19c:	37 ff       	sbrs	r19, 7
     19e:	04 c0       	rjmp	.+8      	; 0x1a8 <_fpadd_parts+0xb2>
     1a0:	66 27       	eor	r22, r22
     1a2:	77 27       	eor	r23, r23
     1a4:	62 1b       	sub	r22, r18
     1a6:	73 0b       	sbc	r23, r19
     1a8:	60 32       	cpi	r22, 0x20	; 32
     1aa:	71 05       	cpc	r23, r1
     1ac:	0c f0       	brlt	.+2      	; 0x1b0 <_fpadd_parts+0xba>
     1ae:	61 c0       	rjmp	.+194    	; 0x272 <_fpadd_parts+0x17c>
     1b0:	12 16       	cp	r1, r18
     1b2:	13 06       	cpc	r1, r19
     1b4:	6c f5       	brge	.+90     	; 0x210 <_fpadd_parts+0x11a>
     1b6:	37 01       	movw	r6, r14
     1b8:	48 01       	movw	r8, r16
     1ba:	06 2e       	mov	r0, r22
     1bc:	04 c0       	rjmp	.+8      	; 0x1c6 <_fpadd_parts+0xd0>
     1be:	96 94       	lsr	r9
     1c0:	87 94       	ror	r8
     1c2:	77 94       	ror	r7
     1c4:	67 94       	ror	r6
     1c6:	0a 94       	dec	r0
     1c8:	d2 f7       	brpl	.-12     	; 0x1be <_fpadd_parts+0xc8>
     1ca:	21 e0       	ldi	r18, 0x01	; 1
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	40 e0       	ldi	r20, 0x00	; 0
     1d0:	50 e0       	ldi	r21, 0x00	; 0
     1d2:	04 c0       	rjmp	.+8      	; 0x1dc <_fpadd_parts+0xe6>
     1d4:	22 0f       	add	r18, r18
     1d6:	33 1f       	adc	r19, r19
     1d8:	44 1f       	adc	r20, r20
     1da:	55 1f       	adc	r21, r21
     1dc:	6a 95       	dec	r22
     1de:	d2 f7       	brpl	.-12     	; 0x1d4 <_fpadd_parts+0xde>
     1e0:	21 50       	subi	r18, 0x01	; 1
     1e2:	30 40       	sbci	r19, 0x00	; 0
     1e4:	40 40       	sbci	r20, 0x00	; 0
     1e6:	50 40       	sbci	r21, 0x00	; 0
     1e8:	2e 21       	and	r18, r14
     1ea:	3f 21       	and	r19, r15
     1ec:	40 23       	and	r20, r16
     1ee:	51 23       	and	r21, r17
     1f0:	21 15       	cp	r18, r1
     1f2:	31 05       	cpc	r19, r1
     1f4:	41 05       	cpc	r20, r1
     1f6:	51 05       	cpc	r21, r1
     1f8:	21 f0       	breq	.+8      	; 0x202 <_fpadd_parts+0x10c>
     1fa:	21 e0       	ldi	r18, 0x01	; 1
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	40 e0       	ldi	r20, 0x00	; 0
     200:	50 e0       	ldi	r21, 0x00	; 0
     202:	79 01       	movw	r14, r18
     204:	8a 01       	movw	r16, r20
     206:	e6 28       	or	r14, r6
     208:	f7 28       	or	r15, r7
     20a:	08 29       	or	r16, r8
     20c:	19 29       	or	r17, r9
     20e:	3c c0       	rjmp	.+120    	; 0x288 <_fpadd_parts+0x192>
     210:	23 2b       	or	r18, r19
     212:	d1 f1       	breq	.+116    	; 0x288 <_fpadd_parts+0x192>
     214:	26 0e       	add	r2, r22
     216:	37 1e       	adc	r3, r23
     218:	35 01       	movw	r6, r10
     21a:	46 01       	movw	r8, r12
     21c:	06 2e       	mov	r0, r22
     21e:	04 c0       	rjmp	.+8      	; 0x228 <_fpadd_parts+0x132>
     220:	96 94       	lsr	r9
     222:	87 94       	ror	r8
     224:	77 94       	ror	r7
     226:	67 94       	ror	r6
     228:	0a 94       	dec	r0
     22a:	d2 f7       	brpl	.-12     	; 0x220 <_fpadd_parts+0x12a>
     22c:	21 e0       	ldi	r18, 0x01	; 1
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	40 e0       	ldi	r20, 0x00	; 0
     232:	50 e0       	ldi	r21, 0x00	; 0
     234:	04 c0       	rjmp	.+8      	; 0x23e <_fpadd_parts+0x148>
     236:	22 0f       	add	r18, r18
     238:	33 1f       	adc	r19, r19
     23a:	44 1f       	adc	r20, r20
     23c:	55 1f       	adc	r21, r21
     23e:	6a 95       	dec	r22
     240:	d2 f7       	brpl	.-12     	; 0x236 <_fpadd_parts+0x140>
     242:	21 50       	subi	r18, 0x01	; 1
     244:	30 40       	sbci	r19, 0x00	; 0
     246:	40 40       	sbci	r20, 0x00	; 0
     248:	50 40       	sbci	r21, 0x00	; 0
     24a:	2a 21       	and	r18, r10
     24c:	3b 21       	and	r19, r11
     24e:	4c 21       	and	r20, r12
     250:	5d 21       	and	r21, r13
     252:	21 15       	cp	r18, r1
     254:	31 05       	cpc	r19, r1
     256:	41 05       	cpc	r20, r1
     258:	51 05       	cpc	r21, r1
     25a:	21 f0       	breq	.+8      	; 0x264 <_fpadd_parts+0x16e>
     25c:	21 e0       	ldi	r18, 0x01	; 1
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	40 e0       	ldi	r20, 0x00	; 0
     262:	50 e0       	ldi	r21, 0x00	; 0
     264:	59 01       	movw	r10, r18
     266:	6a 01       	movw	r12, r20
     268:	a6 28       	or	r10, r6
     26a:	b7 28       	or	r11, r7
     26c:	c8 28       	or	r12, r8
     26e:	d9 28       	or	r13, r9
     270:	0b c0       	rjmp	.+22     	; 0x288 <_fpadd_parts+0x192>
     272:	82 15       	cp	r24, r2
     274:	93 05       	cpc	r25, r3
     276:	2c f0       	brlt	.+10     	; 0x282 <_fpadd_parts+0x18c>
     278:	1c 01       	movw	r2, r24
     27a:	aa 24       	eor	r10, r10
     27c:	bb 24       	eor	r11, r11
     27e:	65 01       	movw	r12, r10
     280:	03 c0       	rjmp	.+6      	; 0x288 <_fpadd_parts+0x192>
     282:	ee 24       	eor	r14, r14
     284:	ff 24       	eor	r15, r15
     286:	87 01       	movw	r16, r14
     288:	11 96       	adiw	r26, 0x01	; 1
     28a:	9c 91       	ld	r25, X
     28c:	d2 01       	movw	r26, r4
     28e:	11 96       	adiw	r26, 0x01	; 1
     290:	8c 91       	ld	r24, X
     292:	98 17       	cp	r25, r24
     294:	09 f4       	brne	.+2      	; 0x298 <_fpadd_parts+0x1a2>
     296:	45 c0       	rjmp	.+138    	; 0x322 <_fpadd_parts+0x22c>
     298:	99 23       	and	r25, r25
     29a:	39 f0       	breq	.+14     	; 0x2aa <_fpadd_parts+0x1b4>
     29c:	a8 01       	movw	r20, r16
     29e:	97 01       	movw	r18, r14
     2a0:	2a 19       	sub	r18, r10
     2a2:	3b 09       	sbc	r19, r11
     2a4:	4c 09       	sbc	r20, r12
     2a6:	5d 09       	sbc	r21, r13
     2a8:	06 c0       	rjmp	.+12     	; 0x2b6 <_fpadd_parts+0x1c0>
     2aa:	a6 01       	movw	r20, r12
     2ac:	95 01       	movw	r18, r10
     2ae:	2e 19       	sub	r18, r14
     2b0:	3f 09       	sbc	r19, r15
     2b2:	40 0b       	sbc	r20, r16
     2b4:	51 0b       	sbc	r21, r17
     2b6:	57 fd       	sbrc	r21, 7
     2b8:	08 c0       	rjmp	.+16     	; 0x2ca <_fpadd_parts+0x1d4>
     2ba:	11 82       	std	Z+1, r1	; 0x01
     2bc:	33 82       	std	Z+3, r3	; 0x03
     2be:	22 82       	std	Z+2, r2	; 0x02
     2c0:	24 83       	std	Z+4, r18	; 0x04
     2c2:	35 83       	std	Z+5, r19	; 0x05
     2c4:	46 83       	std	Z+6, r20	; 0x06
     2c6:	57 83       	std	Z+7, r21	; 0x07
     2c8:	1d c0       	rjmp	.+58     	; 0x304 <_fpadd_parts+0x20e>
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	81 83       	std	Z+1, r24	; 0x01
     2ce:	33 82       	std	Z+3, r3	; 0x03
     2d0:	22 82       	std	Z+2, r2	; 0x02
     2d2:	88 27       	eor	r24, r24
     2d4:	99 27       	eor	r25, r25
     2d6:	dc 01       	movw	r26, r24
     2d8:	82 1b       	sub	r24, r18
     2da:	93 0b       	sbc	r25, r19
     2dc:	a4 0b       	sbc	r26, r20
     2de:	b5 0b       	sbc	r27, r21
     2e0:	84 83       	std	Z+4, r24	; 0x04
     2e2:	95 83       	std	Z+5, r25	; 0x05
     2e4:	a6 83       	std	Z+6, r26	; 0x06
     2e6:	b7 83       	std	Z+7, r27	; 0x07
     2e8:	0d c0       	rjmp	.+26     	; 0x304 <_fpadd_parts+0x20e>
     2ea:	22 0f       	add	r18, r18
     2ec:	33 1f       	adc	r19, r19
     2ee:	44 1f       	adc	r20, r20
     2f0:	55 1f       	adc	r21, r21
     2f2:	24 83       	std	Z+4, r18	; 0x04
     2f4:	35 83       	std	Z+5, r19	; 0x05
     2f6:	46 83       	std	Z+6, r20	; 0x06
     2f8:	57 83       	std	Z+7, r21	; 0x07
     2fa:	82 81       	ldd	r24, Z+2	; 0x02
     2fc:	93 81       	ldd	r25, Z+3	; 0x03
     2fe:	01 97       	sbiw	r24, 0x01	; 1
     300:	93 83       	std	Z+3, r25	; 0x03
     302:	82 83       	std	Z+2, r24	; 0x02
     304:	24 81       	ldd	r18, Z+4	; 0x04
     306:	35 81       	ldd	r19, Z+5	; 0x05
     308:	46 81       	ldd	r20, Z+6	; 0x06
     30a:	57 81       	ldd	r21, Z+7	; 0x07
     30c:	da 01       	movw	r26, r20
     30e:	c9 01       	movw	r24, r18
     310:	01 97       	sbiw	r24, 0x01	; 1
     312:	a1 09       	sbc	r26, r1
     314:	b1 09       	sbc	r27, r1
     316:	8f 5f       	subi	r24, 0xFF	; 255
     318:	9f 4f       	sbci	r25, 0xFF	; 255
     31a:	af 4f       	sbci	r26, 0xFF	; 255
     31c:	bf 43       	sbci	r27, 0x3F	; 63
     31e:	28 f3       	brcs	.-54     	; 0x2ea <_fpadd_parts+0x1f4>
     320:	0b c0       	rjmp	.+22     	; 0x338 <_fpadd_parts+0x242>
     322:	91 83       	std	Z+1, r25	; 0x01
     324:	33 82       	std	Z+3, r3	; 0x03
     326:	22 82       	std	Z+2, r2	; 0x02
     328:	ea 0c       	add	r14, r10
     32a:	fb 1c       	adc	r15, r11
     32c:	0c 1d       	adc	r16, r12
     32e:	1d 1d       	adc	r17, r13
     330:	e4 82       	std	Z+4, r14	; 0x04
     332:	f5 82       	std	Z+5, r15	; 0x05
     334:	06 83       	std	Z+6, r16	; 0x06
     336:	17 83       	std	Z+7, r17	; 0x07
     338:	83 e0       	ldi	r24, 0x03	; 3
     33a:	80 83       	st	Z, r24
     33c:	24 81       	ldd	r18, Z+4	; 0x04
     33e:	35 81       	ldd	r19, Z+5	; 0x05
     340:	46 81       	ldd	r20, Z+6	; 0x06
     342:	57 81       	ldd	r21, Z+7	; 0x07
     344:	57 ff       	sbrs	r21, 7
     346:	1a c0       	rjmp	.+52     	; 0x37c <_fpadd_parts+0x286>
     348:	c9 01       	movw	r24, r18
     34a:	aa 27       	eor	r26, r26
     34c:	97 fd       	sbrc	r25, 7
     34e:	a0 95       	com	r26
     350:	ba 2f       	mov	r27, r26
     352:	81 70       	andi	r24, 0x01	; 1
     354:	90 70       	andi	r25, 0x00	; 0
     356:	a0 70       	andi	r26, 0x00	; 0
     358:	b0 70       	andi	r27, 0x00	; 0
     35a:	56 95       	lsr	r21
     35c:	47 95       	ror	r20
     35e:	37 95       	ror	r19
     360:	27 95       	ror	r18
     362:	82 2b       	or	r24, r18
     364:	93 2b       	or	r25, r19
     366:	a4 2b       	or	r26, r20
     368:	b5 2b       	or	r27, r21
     36a:	84 83       	std	Z+4, r24	; 0x04
     36c:	95 83       	std	Z+5, r25	; 0x05
     36e:	a6 83       	std	Z+6, r26	; 0x06
     370:	b7 83       	std	Z+7, r27	; 0x07
     372:	82 81       	ldd	r24, Z+2	; 0x02
     374:	93 81       	ldd	r25, Z+3	; 0x03
     376:	01 96       	adiw	r24, 0x01	; 1
     378:	93 83       	std	Z+3, r25	; 0x03
     37a:	82 83       	std	Z+2, r24	; 0x02
     37c:	df 01       	movw	r26, r30
     37e:	01 c0       	rjmp	.+2      	; 0x382 <_fpadd_parts+0x28c>
     380:	d2 01       	movw	r26, r4
     382:	cd 01       	movw	r24, r26
     384:	cd b7       	in	r28, 0x3d	; 61
     386:	de b7       	in	r29, 0x3e	; 62
     388:	e2 e1       	ldi	r30, 0x12	; 18
     38a:	0c 94 17 25 	jmp	0x4a2e	; 0x4a2e <__epilogue_restores__>

0000038e <__subsf3>:
     38e:	a0 e2       	ldi	r26, 0x20	; 32
     390:	b0 e0       	ldi	r27, 0x00	; 0
     392:	ed ec       	ldi	r30, 0xCD	; 205
     394:	f1 e0       	ldi	r31, 0x01	; 1
     396:	0c 94 07 25 	jmp	0x4a0e	; 0x4a0e <__prologue_saves__+0x18>
     39a:	69 83       	std	Y+1, r22	; 0x01
     39c:	7a 83       	std	Y+2, r23	; 0x02
     39e:	8b 83       	std	Y+3, r24	; 0x03
     3a0:	9c 83       	std	Y+4, r25	; 0x04
     3a2:	2d 83       	std	Y+5, r18	; 0x05
     3a4:	3e 83       	std	Y+6, r19	; 0x06
     3a6:	4f 83       	std	Y+7, r20	; 0x07
     3a8:	58 87       	std	Y+8, r21	; 0x08
     3aa:	e9 e0       	ldi	r30, 0x09	; 9
     3ac:	ee 2e       	mov	r14, r30
     3ae:	f1 2c       	mov	r15, r1
     3b0:	ec 0e       	add	r14, r28
     3b2:	fd 1e       	adc	r15, r29
     3b4:	ce 01       	movw	r24, r28
     3b6:	01 96       	adiw	r24, 0x01	; 1
     3b8:	b7 01       	movw	r22, r14
     3ba:	0e 94 85 05 	call	0xb0a	; 0xb0a <__unpack_f>
     3be:	8e 01       	movw	r16, r28
     3c0:	0f 5e       	subi	r16, 0xEF	; 239
     3c2:	1f 4f       	sbci	r17, 0xFF	; 255
     3c4:	ce 01       	movw	r24, r28
     3c6:	05 96       	adiw	r24, 0x05	; 5
     3c8:	b8 01       	movw	r22, r16
     3ca:	0e 94 85 05 	call	0xb0a	; 0xb0a <__unpack_f>
     3ce:	8a 89       	ldd	r24, Y+18	; 0x12
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	89 27       	eor	r24, r25
     3d4:	8a 8b       	std	Y+18, r24	; 0x12
     3d6:	c7 01       	movw	r24, r14
     3d8:	b8 01       	movw	r22, r16
     3da:	ae 01       	movw	r20, r28
     3dc:	47 5e       	subi	r20, 0xE7	; 231
     3de:	5f 4f       	sbci	r21, 0xFF	; 255
     3e0:	0e 94 7b 00 	call	0xf6	; 0xf6 <_fpadd_parts>
     3e4:	0e 94 b0 04 	call	0x960	; 0x960 <__pack_f>
     3e8:	a0 96       	adiw	r28, 0x20	; 32
     3ea:	e6 e0       	ldi	r30, 0x06	; 6
     3ec:	0c 94 23 25 	jmp	0x4a46	; 0x4a46 <__epilogue_restores__+0x18>

000003f0 <__addsf3>:
     3f0:	a0 e2       	ldi	r26, 0x20	; 32
     3f2:	b0 e0       	ldi	r27, 0x00	; 0
     3f4:	ee ef       	ldi	r30, 0xFE	; 254
     3f6:	f1 e0       	ldi	r31, 0x01	; 1
     3f8:	0c 94 07 25 	jmp	0x4a0e	; 0x4a0e <__prologue_saves__+0x18>
     3fc:	69 83       	std	Y+1, r22	; 0x01
     3fe:	7a 83       	std	Y+2, r23	; 0x02
     400:	8b 83       	std	Y+3, r24	; 0x03
     402:	9c 83       	std	Y+4, r25	; 0x04
     404:	2d 83       	std	Y+5, r18	; 0x05
     406:	3e 83       	std	Y+6, r19	; 0x06
     408:	4f 83       	std	Y+7, r20	; 0x07
     40a:	58 87       	std	Y+8, r21	; 0x08
     40c:	f9 e0       	ldi	r31, 0x09	; 9
     40e:	ef 2e       	mov	r14, r31
     410:	f1 2c       	mov	r15, r1
     412:	ec 0e       	add	r14, r28
     414:	fd 1e       	adc	r15, r29
     416:	ce 01       	movw	r24, r28
     418:	01 96       	adiw	r24, 0x01	; 1
     41a:	b7 01       	movw	r22, r14
     41c:	0e 94 85 05 	call	0xb0a	; 0xb0a <__unpack_f>
     420:	8e 01       	movw	r16, r28
     422:	0f 5e       	subi	r16, 0xEF	; 239
     424:	1f 4f       	sbci	r17, 0xFF	; 255
     426:	ce 01       	movw	r24, r28
     428:	05 96       	adiw	r24, 0x05	; 5
     42a:	b8 01       	movw	r22, r16
     42c:	0e 94 85 05 	call	0xb0a	; 0xb0a <__unpack_f>
     430:	c7 01       	movw	r24, r14
     432:	b8 01       	movw	r22, r16
     434:	ae 01       	movw	r20, r28
     436:	47 5e       	subi	r20, 0xE7	; 231
     438:	5f 4f       	sbci	r21, 0xFF	; 255
     43a:	0e 94 7b 00 	call	0xf6	; 0xf6 <_fpadd_parts>
     43e:	0e 94 b0 04 	call	0x960	; 0x960 <__pack_f>
     442:	a0 96       	adiw	r28, 0x20	; 32
     444:	e6 e0       	ldi	r30, 0x06	; 6
     446:	0c 94 23 25 	jmp	0x4a46	; 0x4a46 <__epilogue_restores__+0x18>

0000044a <__mulsf3>:
     44a:	a0 e2       	ldi	r26, 0x20	; 32
     44c:	b0 e0       	ldi	r27, 0x00	; 0
     44e:	eb e2       	ldi	r30, 0x2B	; 43
     450:	f2 e0       	ldi	r31, 0x02	; 2
     452:	0c 94 fb 24 	jmp	0x49f6	; 0x49f6 <__prologue_saves__>
     456:	69 83       	std	Y+1, r22	; 0x01
     458:	7a 83       	std	Y+2, r23	; 0x02
     45a:	8b 83       	std	Y+3, r24	; 0x03
     45c:	9c 83       	std	Y+4, r25	; 0x04
     45e:	2d 83       	std	Y+5, r18	; 0x05
     460:	3e 83       	std	Y+6, r19	; 0x06
     462:	4f 83       	std	Y+7, r20	; 0x07
     464:	58 87       	std	Y+8, r21	; 0x08
     466:	ce 01       	movw	r24, r28
     468:	01 96       	adiw	r24, 0x01	; 1
     46a:	be 01       	movw	r22, r28
     46c:	67 5f       	subi	r22, 0xF7	; 247
     46e:	7f 4f       	sbci	r23, 0xFF	; 255
     470:	0e 94 85 05 	call	0xb0a	; 0xb0a <__unpack_f>
     474:	ce 01       	movw	r24, r28
     476:	05 96       	adiw	r24, 0x05	; 5
     478:	be 01       	movw	r22, r28
     47a:	6f 5e       	subi	r22, 0xEF	; 239
     47c:	7f 4f       	sbci	r23, 0xFF	; 255
     47e:	0e 94 85 05 	call	0xb0a	; 0xb0a <__unpack_f>
     482:	99 85       	ldd	r25, Y+9	; 0x09
     484:	92 30       	cpi	r25, 0x02	; 2
     486:	88 f0       	brcs	.+34     	; 0x4aa <__mulsf3+0x60>
     488:	89 89       	ldd	r24, Y+17	; 0x11
     48a:	82 30       	cpi	r24, 0x02	; 2
     48c:	c8 f0       	brcs	.+50     	; 0x4c0 <__mulsf3+0x76>
     48e:	94 30       	cpi	r25, 0x04	; 4
     490:	19 f4       	brne	.+6      	; 0x498 <__mulsf3+0x4e>
     492:	82 30       	cpi	r24, 0x02	; 2
     494:	51 f4       	brne	.+20     	; 0x4aa <__mulsf3+0x60>
     496:	04 c0       	rjmp	.+8      	; 0x4a0 <__mulsf3+0x56>
     498:	84 30       	cpi	r24, 0x04	; 4
     49a:	29 f4       	brne	.+10     	; 0x4a6 <__mulsf3+0x5c>
     49c:	92 30       	cpi	r25, 0x02	; 2
     49e:	81 f4       	brne	.+32     	; 0x4c0 <__mulsf3+0x76>
     4a0:	88 e1       	ldi	r24, 0x18	; 24
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	c6 c0       	rjmp	.+396    	; 0x632 <__mulsf3+0x1e8>
     4a6:	92 30       	cpi	r25, 0x02	; 2
     4a8:	49 f4       	brne	.+18     	; 0x4bc <__mulsf3+0x72>
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     4ae:	8a 89       	ldd	r24, Y+18	; 0x12
     4b0:	98 13       	cpse	r25, r24
     4b2:	21 e0       	ldi	r18, 0x01	; 1
     4b4:	2a 87       	std	Y+10, r18	; 0x0a
     4b6:	ce 01       	movw	r24, r28
     4b8:	09 96       	adiw	r24, 0x09	; 9
     4ba:	bb c0       	rjmp	.+374    	; 0x632 <__mulsf3+0x1e8>
     4bc:	82 30       	cpi	r24, 0x02	; 2
     4be:	49 f4       	brne	.+18     	; 0x4d2 <__mulsf3+0x88>
     4c0:	20 e0       	ldi	r18, 0x00	; 0
     4c2:	9a 85       	ldd	r25, Y+10	; 0x0a
     4c4:	8a 89       	ldd	r24, Y+18	; 0x12
     4c6:	98 13       	cpse	r25, r24
     4c8:	21 e0       	ldi	r18, 0x01	; 1
     4ca:	2a 8b       	std	Y+18, r18	; 0x12
     4cc:	ce 01       	movw	r24, r28
     4ce:	41 96       	adiw	r24, 0x11	; 17
     4d0:	b0 c0       	rjmp	.+352    	; 0x632 <__mulsf3+0x1e8>
     4d2:	2d 84       	ldd	r2, Y+13	; 0x0d
     4d4:	3e 84       	ldd	r3, Y+14	; 0x0e
     4d6:	4f 84       	ldd	r4, Y+15	; 0x0f
     4d8:	58 88       	ldd	r5, Y+16	; 0x10
     4da:	6d 88       	ldd	r6, Y+21	; 0x15
     4dc:	7e 88       	ldd	r7, Y+22	; 0x16
     4de:	8f 88       	ldd	r8, Y+23	; 0x17
     4e0:	98 8c       	ldd	r9, Y+24	; 0x18
     4e2:	ee 24       	eor	r14, r14
     4e4:	ff 24       	eor	r15, r15
     4e6:	87 01       	movw	r16, r14
     4e8:	aa 24       	eor	r10, r10
     4ea:	bb 24       	eor	r11, r11
     4ec:	65 01       	movw	r12, r10
     4ee:	40 e0       	ldi	r20, 0x00	; 0
     4f0:	50 e0       	ldi	r21, 0x00	; 0
     4f2:	60 e0       	ldi	r22, 0x00	; 0
     4f4:	70 e0       	ldi	r23, 0x00	; 0
     4f6:	e0 e0       	ldi	r30, 0x00	; 0
     4f8:	f0 e0       	ldi	r31, 0x00	; 0
     4fa:	c1 01       	movw	r24, r2
     4fc:	81 70       	andi	r24, 0x01	; 1
     4fe:	90 70       	andi	r25, 0x00	; 0
     500:	89 2b       	or	r24, r25
     502:	e9 f0       	breq	.+58     	; 0x53e <__mulsf3+0xf4>
     504:	e6 0c       	add	r14, r6
     506:	f7 1c       	adc	r15, r7
     508:	08 1d       	adc	r16, r8
     50a:	19 1d       	adc	r17, r9
     50c:	9a 01       	movw	r18, r20
     50e:	ab 01       	movw	r20, r22
     510:	2a 0d       	add	r18, r10
     512:	3b 1d       	adc	r19, r11
     514:	4c 1d       	adc	r20, r12
     516:	5d 1d       	adc	r21, r13
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	a0 e0       	ldi	r26, 0x00	; 0
     51e:	b0 e0       	ldi	r27, 0x00	; 0
     520:	e6 14       	cp	r14, r6
     522:	f7 04       	cpc	r15, r7
     524:	08 05       	cpc	r16, r8
     526:	19 05       	cpc	r17, r9
     528:	20 f4       	brcc	.+8      	; 0x532 <__mulsf3+0xe8>
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	a0 e0       	ldi	r26, 0x00	; 0
     530:	b0 e0       	ldi	r27, 0x00	; 0
     532:	ba 01       	movw	r22, r20
     534:	a9 01       	movw	r20, r18
     536:	48 0f       	add	r20, r24
     538:	59 1f       	adc	r21, r25
     53a:	6a 1f       	adc	r22, r26
     53c:	7b 1f       	adc	r23, r27
     53e:	aa 0c       	add	r10, r10
     540:	bb 1c       	adc	r11, r11
     542:	cc 1c       	adc	r12, r12
     544:	dd 1c       	adc	r13, r13
     546:	97 fe       	sbrs	r9, 7
     548:	08 c0       	rjmp	.+16     	; 0x55a <__mulsf3+0x110>
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	a0 e0       	ldi	r26, 0x00	; 0
     550:	b0 e0       	ldi	r27, 0x00	; 0
     552:	a8 2a       	or	r10, r24
     554:	b9 2a       	or	r11, r25
     556:	ca 2a       	or	r12, r26
     558:	db 2a       	or	r13, r27
     55a:	31 96       	adiw	r30, 0x01	; 1
     55c:	e0 32       	cpi	r30, 0x20	; 32
     55e:	f1 05       	cpc	r31, r1
     560:	49 f0       	breq	.+18     	; 0x574 <__mulsf3+0x12a>
     562:	66 0c       	add	r6, r6
     564:	77 1c       	adc	r7, r7
     566:	88 1c       	adc	r8, r8
     568:	99 1c       	adc	r9, r9
     56a:	56 94       	lsr	r5
     56c:	47 94       	ror	r4
     56e:	37 94       	ror	r3
     570:	27 94       	ror	r2
     572:	c3 cf       	rjmp	.-122    	; 0x4fa <__mulsf3+0xb0>
     574:	fa 85       	ldd	r31, Y+10	; 0x0a
     576:	ea 89       	ldd	r30, Y+18	; 0x12
     578:	2b 89       	ldd	r18, Y+19	; 0x13
     57a:	3c 89       	ldd	r19, Y+20	; 0x14
     57c:	8b 85       	ldd	r24, Y+11	; 0x0b
     57e:	9c 85       	ldd	r25, Y+12	; 0x0c
     580:	28 0f       	add	r18, r24
     582:	39 1f       	adc	r19, r25
     584:	2e 5f       	subi	r18, 0xFE	; 254
     586:	3f 4f       	sbci	r19, 0xFF	; 255
     588:	17 c0       	rjmp	.+46     	; 0x5b8 <__mulsf3+0x16e>
     58a:	ca 01       	movw	r24, r20
     58c:	81 70       	andi	r24, 0x01	; 1
     58e:	90 70       	andi	r25, 0x00	; 0
     590:	89 2b       	or	r24, r25
     592:	61 f0       	breq	.+24     	; 0x5ac <__mulsf3+0x162>
     594:	16 95       	lsr	r17
     596:	07 95       	ror	r16
     598:	f7 94       	ror	r15
     59a:	e7 94       	ror	r14
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	a0 e0       	ldi	r26, 0x00	; 0
     5a2:	b0 e8       	ldi	r27, 0x80	; 128
     5a4:	e8 2a       	or	r14, r24
     5a6:	f9 2a       	or	r15, r25
     5a8:	0a 2b       	or	r16, r26
     5aa:	1b 2b       	or	r17, r27
     5ac:	76 95       	lsr	r23
     5ae:	67 95       	ror	r22
     5b0:	57 95       	ror	r21
     5b2:	47 95       	ror	r20
     5b4:	2f 5f       	subi	r18, 0xFF	; 255
     5b6:	3f 4f       	sbci	r19, 0xFF	; 255
     5b8:	77 fd       	sbrc	r23, 7
     5ba:	e7 cf       	rjmp	.-50     	; 0x58a <__mulsf3+0x140>
     5bc:	0c c0       	rjmp	.+24     	; 0x5d6 <__mulsf3+0x18c>
     5be:	44 0f       	add	r20, r20
     5c0:	55 1f       	adc	r21, r21
     5c2:	66 1f       	adc	r22, r22
     5c4:	77 1f       	adc	r23, r23
     5c6:	17 fd       	sbrc	r17, 7
     5c8:	41 60       	ori	r20, 0x01	; 1
     5ca:	ee 0c       	add	r14, r14
     5cc:	ff 1c       	adc	r15, r15
     5ce:	00 1f       	adc	r16, r16
     5d0:	11 1f       	adc	r17, r17
     5d2:	21 50       	subi	r18, 0x01	; 1
     5d4:	30 40       	sbci	r19, 0x00	; 0
     5d6:	40 30       	cpi	r20, 0x00	; 0
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	59 07       	cpc	r21, r25
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	69 07       	cpc	r22, r25
     5e0:	90 e4       	ldi	r25, 0x40	; 64
     5e2:	79 07       	cpc	r23, r25
     5e4:	60 f3       	brcs	.-40     	; 0x5be <__mulsf3+0x174>
     5e6:	2b 8f       	std	Y+27, r18	; 0x1b
     5e8:	3c 8f       	std	Y+28, r19	; 0x1c
     5ea:	db 01       	movw	r26, r22
     5ec:	ca 01       	movw	r24, r20
     5ee:	8f 77       	andi	r24, 0x7F	; 127
     5f0:	90 70       	andi	r25, 0x00	; 0
     5f2:	a0 70       	andi	r26, 0x00	; 0
     5f4:	b0 70       	andi	r27, 0x00	; 0
     5f6:	80 34       	cpi	r24, 0x40	; 64
     5f8:	91 05       	cpc	r25, r1
     5fa:	a1 05       	cpc	r26, r1
     5fc:	b1 05       	cpc	r27, r1
     5fe:	61 f4       	brne	.+24     	; 0x618 <__mulsf3+0x1ce>
     600:	47 fd       	sbrc	r20, 7
     602:	0a c0       	rjmp	.+20     	; 0x618 <__mulsf3+0x1ce>
     604:	e1 14       	cp	r14, r1
     606:	f1 04       	cpc	r15, r1
     608:	01 05       	cpc	r16, r1
     60a:	11 05       	cpc	r17, r1
     60c:	29 f0       	breq	.+10     	; 0x618 <__mulsf3+0x1ce>
     60e:	40 5c       	subi	r20, 0xC0	; 192
     610:	5f 4f       	sbci	r21, 0xFF	; 255
     612:	6f 4f       	sbci	r22, 0xFF	; 255
     614:	7f 4f       	sbci	r23, 0xFF	; 255
     616:	40 78       	andi	r20, 0x80	; 128
     618:	1a 8e       	std	Y+26, r1	; 0x1a
     61a:	fe 17       	cp	r31, r30
     61c:	11 f0       	breq	.+4      	; 0x622 <__mulsf3+0x1d8>
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	8a 8f       	std	Y+26, r24	; 0x1a
     622:	4d 8f       	std	Y+29, r20	; 0x1d
     624:	5e 8f       	std	Y+30, r21	; 0x1e
     626:	6f 8f       	std	Y+31, r22	; 0x1f
     628:	78 a3       	std	Y+32, r23	; 0x20
     62a:	83 e0       	ldi	r24, 0x03	; 3
     62c:	89 8f       	std	Y+25, r24	; 0x19
     62e:	ce 01       	movw	r24, r28
     630:	49 96       	adiw	r24, 0x19	; 25
     632:	0e 94 b0 04 	call	0x960	; 0x960 <__pack_f>
     636:	a0 96       	adiw	r28, 0x20	; 32
     638:	e2 e1       	ldi	r30, 0x12	; 18
     63a:	0c 94 17 25 	jmp	0x4a2e	; 0x4a2e <__epilogue_restores__>

0000063e <__gtsf2>:
     63e:	a8 e1       	ldi	r26, 0x18	; 24
     640:	b0 e0       	ldi	r27, 0x00	; 0
     642:	e5 e2       	ldi	r30, 0x25	; 37
     644:	f3 e0       	ldi	r31, 0x03	; 3
     646:	0c 94 07 25 	jmp	0x4a0e	; 0x4a0e <__prologue_saves__+0x18>
     64a:	69 83       	std	Y+1, r22	; 0x01
     64c:	7a 83       	std	Y+2, r23	; 0x02
     64e:	8b 83       	std	Y+3, r24	; 0x03
     650:	9c 83       	std	Y+4, r25	; 0x04
     652:	2d 83       	std	Y+5, r18	; 0x05
     654:	3e 83       	std	Y+6, r19	; 0x06
     656:	4f 83       	std	Y+7, r20	; 0x07
     658:	58 87       	std	Y+8, r21	; 0x08
     65a:	89 e0       	ldi	r24, 0x09	; 9
     65c:	e8 2e       	mov	r14, r24
     65e:	f1 2c       	mov	r15, r1
     660:	ec 0e       	add	r14, r28
     662:	fd 1e       	adc	r15, r29
     664:	ce 01       	movw	r24, r28
     666:	01 96       	adiw	r24, 0x01	; 1
     668:	b7 01       	movw	r22, r14
     66a:	0e 94 85 05 	call	0xb0a	; 0xb0a <__unpack_f>
     66e:	8e 01       	movw	r16, r28
     670:	0f 5e       	subi	r16, 0xEF	; 239
     672:	1f 4f       	sbci	r17, 0xFF	; 255
     674:	ce 01       	movw	r24, r28
     676:	05 96       	adiw	r24, 0x05	; 5
     678:	b8 01       	movw	r22, r16
     67a:	0e 94 85 05 	call	0xb0a	; 0xb0a <__unpack_f>
     67e:	89 85       	ldd	r24, Y+9	; 0x09
     680:	82 30       	cpi	r24, 0x02	; 2
     682:	40 f0       	brcs	.+16     	; 0x694 <__gtsf2+0x56>
     684:	89 89       	ldd	r24, Y+17	; 0x11
     686:	82 30       	cpi	r24, 0x02	; 2
     688:	28 f0       	brcs	.+10     	; 0x694 <__gtsf2+0x56>
     68a:	c7 01       	movw	r24, r14
     68c:	b8 01       	movw	r22, r16
     68e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__fpcmp_parts_f>
     692:	01 c0       	rjmp	.+2      	; 0x696 <__gtsf2+0x58>
     694:	8f ef       	ldi	r24, 0xFF	; 255
     696:	68 96       	adiw	r28, 0x18	; 24
     698:	e6 e0       	ldi	r30, 0x06	; 6
     69a:	0c 94 23 25 	jmp	0x4a46	; 0x4a46 <__epilogue_restores__+0x18>

0000069e <__gesf2>:
     69e:	a8 e1       	ldi	r26, 0x18	; 24
     6a0:	b0 e0       	ldi	r27, 0x00	; 0
     6a2:	e5 e5       	ldi	r30, 0x55	; 85
     6a4:	f3 e0       	ldi	r31, 0x03	; 3
     6a6:	0c 94 07 25 	jmp	0x4a0e	; 0x4a0e <__prologue_saves__+0x18>
     6aa:	69 83       	std	Y+1, r22	; 0x01
     6ac:	7a 83       	std	Y+2, r23	; 0x02
     6ae:	8b 83       	std	Y+3, r24	; 0x03
     6b0:	9c 83       	std	Y+4, r25	; 0x04
     6b2:	2d 83       	std	Y+5, r18	; 0x05
     6b4:	3e 83       	std	Y+6, r19	; 0x06
     6b6:	4f 83       	std	Y+7, r20	; 0x07
     6b8:	58 87       	std	Y+8, r21	; 0x08
     6ba:	89 e0       	ldi	r24, 0x09	; 9
     6bc:	e8 2e       	mov	r14, r24
     6be:	f1 2c       	mov	r15, r1
     6c0:	ec 0e       	add	r14, r28
     6c2:	fd 1e       	adc	r15, r29
     6c4:	ce 01       	movw	r24, r28
     6c6:	01 96       	adiw	r24, 0x01	; 1
     6c8:	b7 01       	movw	r22, r14
     6ca:	0e 94 85 05 	call	0xb0a	; 0xb0a <__unpack_f>
     6ce:	8e 01       	movw	r16, r28
     6d0:	0f 5e       	subi	r16, 0xEF	; 239
     6d2:	1f 4f       	sbci	r17, 0xFF	; 255
     6d4:	ce 01       	movw	r24, r28
     6d6:	05 96       	adiw	r24, 0x05	; 5
     6d8:	b8 01       	movw	r22, r16
     6da:	0e 94 85 05 	call	0xb0a	; 0xb0a <__unpack_f>
     6de:	89 85       	ldd	r24, Y+9	; 0x09
     6e0:	82 30       	cpi	r24, 0x02	; 2
     6e2:	40 f0       	brcs	.+16     	; 0x6f4 <__gesf2+0x56>
     6e4:	89 89       	ldd	r24, Y+17	; 0x11
     6e6:	82 30       	cpi	r24, 0x02	; 2
     6e8:	28 f0       	brcs	.+10     	; 0x6f4 <__gesf2+0x56>
     6ea:	c7 01       	movw	r24, r14
     6ec:	b8 01       	movw	r22, r16
     6ee:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__fpcmp_parts_f>
     6f2:	01 c0       	rjmp	.+2      	; 0x6f6 <__gesf2+0x58>
     6f4:	8f ef       	ldi	r24, 0xFF	; 255
     6f6:	68 96       	adiw	r28, 0x18	; 24
     6f8:	e6 e0       	ldi	r30, 0x06	; 6
     6fa:	0c 94 23 25 	jmp	0x4a46	; 0x4a46 <__epilogue_restores__+0x18>

000006fe <__ltsf2>:
     6fe:	a8 e1       	ldi	r26, 0x18	; 24
     700:	b0 e0       	ldi	r27, 0x00	; 0
     702:	e5 e8       	ldi	r30, 0x85	; 133
     704:	f3 e0       	ldi	r31, 0x03	; 3
     706:	0c 94 07 25 	jmp	0x4a0e	; 0x4a0e <__prologue_saves__+0x18>
     70a:	69 83       	std	Y+1, r22	; 0x01
     70c:	7a 83       	std	Y+2, r23	; 0x02
     70e:	8b 83       	std	Y+3, r24	; 0x03
     710:	9c 83       	std	Y+4, r25	; 0x04
     712:	2d 83       	std	Y+5, r18	; 0x05
     714:	3e 83       	std	Y+6, r19	; 0x06
     716:	4f 83       	std	Y+7, r20	; 0x07
     718:	58 87       	std	Y+8, r21	; 0x08
     71a:	89 e0       	ldi	r24, 0x09	; 9
     71c:	e8 2e       	mov	r14, r24
     71e:	f1 2c       	mov	r15, r1
     720:	ec 0e       	add	r14, r28
     722:	fd 1e       	adc	r15, r29
     724:	ce 01       	movw	r24, r28
     726:	01 96       	adiw	r24, 0x01	; 1
     728:	b7 01       	movw	r22, r14
     72a:	0e 94 85 05 	call	0xb0a	; 0xb0a <__unpack_f>
     72e:	8e 01       	movw	r16, r28
     730:	0f 5e       	subi	r16, 0xEF	; 239
     732:	1f 4f       	sbci	r17, 0xFF	; 255
     734:	ce 01       	movw	r24, r28
     736:	05 96       	adiw	r24, 0x05	; 5
     738:	b8 01       	movw	r22, r16
     73a:	0e 94 85 05 	call	0xb0a	; 0xb0a <__unpack_f>
     73e:	89 85       	ldd	r24, Y+9	; 0x09
     740:	82 30       	cpi	r24, 0x02	; 2
     742:	40 f0       	brcs	.+16     	; 0x754 <__ltsf2+0x56>
     744:	89 89       	ldd	r24, Y+17	; 0x11
     746:	82 30       	cpi	r24, 0x02	; 2
     748:	28 f0       	brcs	.+10     	; 0x754 <__ltsf2+0x56>
     74a:	c7 01       	movw	r24, r14
     74c:	b8 01       	movw	r22, r16
     74e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__fpcmp_parts_f>
     752:	01 c0       	rjmp	.+2      	; 0x756 <__ltsf2+0x58>
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	68 96       	adiw	r28, 0x18	; 24
     758:	e6 e0       	ldi	r30, 0x06	; 6
     75a:	0c 94 23 25 	jmp	0x4a46	; 0x4a46 <__epilogue_restores__+0x18>

0000075e <__floatsisf>:
     75e:	a8 e0       	ldi	r26, 0x08	; 8
     760:	b0 e0       	ldi	r27, 0x00	; 0
     762:	e5 eb       	ldi	r30, 0xB5	; 181
     764:	f3 e0       	ldi	r31, 0x03	; 3
     766:	0c 94 04 25 	jmp	0x4a08	; 0x4a08 <__prologue_saves__+0x12>
     76a:	9b 01       	movw	r18, r22
     76c:	ac 01       	movw	r20, r24
     76e:	83 e0       	ldi	r24, 0x03	; 3
     770:	89 83       	std	Y+1, r24	; 0x01
     772:	da 01       	movw	r26, r20
     774:	c9 01       	movw	r24, r18
     776:	88 27       	eor	r24, r24
     778:	b7 fd       	sbrc	r27, 7
     77a:	83 95       	inc	r24
     77c:	99 27       	eor	r25, r25
     77e:	aa 27       	eor	r26, r26
     780:	bb 27       	eor	r27, r27
     782:	b8 2e       	mov	r11, r24
     784:	21 15       	cp	r18, r1
     786:	31 05       	cpc	r19, r1
     788:	41 05       	cpc	r20, r1
     78a:	51 05       	cpc	r21, r1
     78c:	19 f4       	brne	.+6      	; 0x794 <__floatsisf+0x36>
     78e:	82 e0       	ldi	r24, 0x02	; 2
     790:	89 83       	std	Y+1, r24	; 0x01
     792:	3a c0       	rjmp	.+116    	; 0x808 <__floatsisf+0xaa>
     794:	88 23       	and	r24, r24
     796:	a9 f0       	breq	.+42     	; 0x7c2 <__floatsisf+0x64>
     798:	20 30       	cpi	r18, 0x00	; 0
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	38 07       	cpc	r19, r24
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	48 07       	cpc	r20, r24
     7a2:	80 e8       	ldi	r24, 0x80	; 128
     7a4:	58 07       	cpc	r21, r24
     7a6:	29 f4       	brne	.+10     	; 0x7b2 <__floatsisf+0x54>
     7a8:	60 e0       	ldi	r22, 0x00	; 0
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	9f ec       	ldi	r25, 0xCF	; 207
     7b0:	30 c0       	rjmp	.+96     	; 0x812 <__floatsisf+0xb4>
     7b2:	ee 24       	eor	r14, r14
     7b4:	ff 24       	eor	r15, r15
     7b6:	87 01       	movw	r16, r14
     7b8:	e2 1a       	sub	r14, r18
     7ba:	f3 0a       	sbc	r15, r19
     7bc:	04 0b       	sbc	r16, r20
     7be:	15 0b       	sbc	r17, r21
     7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <__floatsisf+0x68>
     7c2:	79 01       	movw	r14, r18
     7c4:	8a 01       	movw	r16, r20
     7c6:	8e e1       	ldi	r24, 0x1E	; 30
     7c8:	c8 2e       	mov	r12, r24
     7ca:	d1 2c       	mov	r13, r1
     7cc:	dc 82       	std	Y+4, r13	; 0x04
     7ce:	cb 82       	std	Y+3, r12	; 0x03
     7d0:	ed 82       	std	Y+5, r14	; 0x05
     7d2:	fe 82       	std	Y+6, r15	; 0x06
     7d4:	0f 83       	std	Y+7, r16	; 0x07
     7d6:	18 87       	std	Y+8, r17	; 0x08
     7d8:	c8 01       	movw	r24, r16
     7da:	b7 01       	movw	r22, r14
     7dc:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__clzsi2>
     7e0:	01 97       	sbiw	r24, 0x01	; 1
     7e2:	18 16       	cp	r1, r24
     7e4:	19 06       	cpc	r1, r25
     7e6:	84 f4       	brge	.+32     	; 0x808 <__floatsisf+0xaa>
     7e8:	08 2e       	mov	r0, r24
     7ea:	04 c0       	rjmp	.+8      	; 0x7f4 <__floatsisf+0x96>
     7ec:	ee 0c       	add	r14, r14
     7ee:	ff 1c       	adc	r15, r15
     7f0:	00 1f       	adc	r16, r16
     7f2:	11 1f       	adc	r17, r17
     7f4:	0a 94       	dec	r0
     7f6:	d2 f7       	brpl	.-12     	; 0x7ec <__floatsisf+0x8e>
     7f8:	ed 82       	std	Y+5, r14	; 0x05
     7fa:	fe 82       	std	Y+6, r15	; 0x06
     7fc:	0f 83       	std	Y+7, r16	; 0x07
     7fe:	18 87       	std	Y+8, r17	; 0x08
     800:	c8 1a       	sub	r12, r24
     802:	d9 0a       	sbc	r13, r25
     804:	dc 82       	std	Y+4, r13	; 0x04
     806:	cb 82       	std	Y+3, r12	; 0x03
     808:	ba 82       	std	Y+2, r11	; 0x02
     80a:	ce 01       	movw	r24, r28
     80c:	01 96       	adiw	r24, 0x01	; 1
     80e:	0e 94 b0 04 	call	0x960	; 0x960 <__pack_f>
     812:	28 96       	adiw	r28, 0x08	; 8
     814:	e9 e0       	ldi	r30, 0x09	; 9
     816:	0c 94 20 25 	jmp	0x4a40	; 0x4a40 <__epilogue_restores__+0x12>

0000081a <__fixsfsi>:
     81a:	ac e0       	ldi	r26, 0x0C	; 12
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e3 e1       	ldi	r30, 0x13	; 19
     820:	f4 e0       	ldi	r31, 0x04	; 4
     822:	0c 94 0b 25 	jmp	0x4a16	; 0x4a16 <__prologue_saves__+0x20>
     826:	69 83       	std	Y+1, r22	; 0x01
     828:	7a 83       	std	Y+2, r23	; 0x02
     82a:	8b 83       	std	Y+3, r24	; 0x03
     82c:	9c 83       	std	Y+4, r25	; 0x04
     82e:	ce 01       	movw	r24, r28
     830:	01 96       	adiw	r24, 0x01	; 1
     832:	be 01       	movw	r22, r28
     834:	6b 5f       	subi	r22, 0xFB	; 251
     836:	7f 4f       	sbci	r23, 0xFF	; 255
     838:	0e 94 85 05 	call	0xb0a	; 0xb0a <__unpack_f>
     83c:	8d 81       	ldd	r24, Y+5	; 0x05
     83e:	82 30       	cpi	r24, 0x02	; 2
     840:	61 f1       	breq	.+88     	; 0x89a <__stack+0x3b>
     842:	82 30       	cpi	r24, 0x02	; 2
     844:	50 f1       	brcs	.+84     	; 0x89a <__stack+0x3b>
     846:	84 30       	cpi	r24, 0x04	; 4
     848:	21 f4       	brne	.+8      	; 0x852 <__fixsfsi+0x38>
     84a:	8e 81       	ldd	r24, Y+6	; 0x06
     84c:	88 23       	and	r24, r24
     84e:	51 f1       	breq	.+84     	; 0x8a4 <__stack+0x45>
     850:	2e c0       	rjmp	.+92     	; 0x8ae <__stack+0x4f>
     852:	2f 81       	ldd	r18, Y+7	; 0x07
     854:	38 85       	ldd	r19, Y+8	; 0x08
     856:	37 fd       	sbrc	r19, 7
     858:	20 c0       	rjmp	.+64     	; 0x89a <__stack+0x3b>
     85a:	6e 81       	ldd	r22, Y+6	; 0x06
     85c:	2f 31       	cpi	r18, 0x1F	; 31
     85e:	31 05       	cpc	r19, r1
     860:	1c f0       	brlt	.+6      	; 0x868 <__stack+0x9>
     862:	66 23       	and	r22, r22
     864:	f9 f0       	breq	.+62     	; 0x8a4 <__stack+0x45>
     866:	23 c0       	rjmp	.+70     	; 0x8ae <__stack+0x4f>
     868:	8e e1       	ldi	r24, 0x1E	; 30
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	82 1b       	sub	r24, r18
     86e:	93 0b       	sbc	r25, r19
     870:	29 85       	ldd	r18, Y+9	; 0x09
     872:	3a 85       	ldd	r19, Y+10	; 0x0a
     874:	4b 85       	ldd	r20, Y+11	; 0x0b
     876:	5c 85       	ldd	r21, Y+12	; 0x0c
     878:	04 c0       	rjmp	.+8      	; 0x882 <__stack+0x23>
     87a:	56 95       	lsr	r21
     87c:	47 95       	ror	r20
     87e:	37 95       	ror	r19
     880:	27 95       	ror	r18
     882:	8a 95       	dec	r24
     884:	d2 f7       	brpl	.-12     	; 0x87a <__stack+0x1b>
     886:	66 23       	and	r22, r22
     888:	b1 f0       	breq	.+44     	; 0x8b6 <__stack+0x57>
     88a:	50 95       	com	r21
     88c:	40 95       	com	r20
     88e:	30 95       	com	r19
     890:	21 95       	neg	r18
     892:	3f 4f       	sbci	r19, 0xFF	; 255
     894:	4f 4f       	sbci	r20, 0xFF	; 255
     896:	5f 4f       	sbci	r21, 0xFF	; 255
     898:	0e c0       	rjmp	.+28     	; 0x8b6 <__stack+0x57>
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	40 e0       	ldi	r20, 0x00	; 0
     8a0:	50 e0       	ldi	r21, 0x00	; 0
     8a2:	09 c0       	rjmp	.+18     	; 0x8b6 <__stack+0x57>
     8a4:	2f ef       	ldi	r18, 0xFF	; 255
     8a6:	3f ef       	ldi	r19, 0xFF	; 255
     8a8:	4f ef       	ldi	r20, 0xFF	; 255
     8aa:	5f e7       	ldi	r21, 0x7F	; 127
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__stack+0x57>
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	40 e0       	ldi	r20, 0x00	; 0
     8b4:	50 e8       	ldi	r21, 0x80	; 128
     8b6:	b9 01       	movw	r22, r18
     8b8:	ca 01       	movw	r24, r20
     8ba:	2c 96       	adiw	r28, 0x0c	; 12
     8bc:	e2 e0       	ldi	r30, 0x02	; 2
     8be:	0c 94 27 25 	jmp	0x4a4e	; 0x4a4e <__epilogue_restores__+0x20>

000008c2 <__clzsi2>:
     8c2:	ef 92       	push	r14
     8c4:	ff 92       	push	r15
     8c6:	0f 93       	push	r16
     8c8:	1f 93       	push	r17
     8ca:	7b 01       	movw	r14, r22
     8cc:	8c 01       	movw	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	e8 16       	cp	r14, r24
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	f8 06       	cpc	r15, r24
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	08 07       	cpc	r16, r24
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	18 07       	cpc	r17, r24
     8de:	88 f4       	brcc	.+34     	; 0x902 <__clzsi2+0x40>
     8e0:	8f ef       	ldi	r24, 0xFF	; 255
     8e2:	e8 16       	cp	r14, r24
     8e4:	f1 04       	cpc	r15, r1
     8e6:	01 05       	cpc	r16, r1
     8e8:	11 05       	cpc	r17, r1
     8ea:	31 f0       	breq	.+12     	; 0x8f8 <__clzsi2+0x36>
     8ec:	28 f0       	brcs	.+10     	; 0x8f8 <__clzsi2+0x36>
     8ee:	88 e0       	ldi	r24, 0x08	; 8
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	a0 e0       	ldi	r26, 0x00	; 0
     8f4:	b0 e0       	ldi	r27, 0x00	; 0
     8f6:	17 c0       	rjmp	.+46     	; 0x926 <__clzsi2+0x64>
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	a0 e0       	ldi	r26, 0x00	; 0
     8fe:	b0 e0       	ldi	r27, 0x00	; 0
     900:	12 c0       	rjmp	.+36     	; 0x926 <__clzsi2+0x64>
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	e8 16       	cp	r14, r24
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	f8 06       	cpc	r15, r24
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	08 07       	cpc	r16, r24
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	18 07       	cpc	r17, r24
     912:	28 f0       	brcs	.+10     	; 0x91e <__clzsi2+0x5c>
     914:	88 e1       	ldi	r24, 0x18	; 24
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	a0 e0       	ldi	r26, 0x00	; 0
     91a:	b0 e0       	ldi	r27, 0x00	; 0
     91c:	04 c0       	rjmp	.+8      	; 0x926 <__clzsi2+0x64>
     91e:	80 e1       	ldi	r24, 0x10	; 16
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	a0 e0       	ldi	r26, 0x00	; 0
     924:	b0 e0       	ldi	r27, 0x00	; 0
     926:	20 e2       	ldi	r18, 0x20	; 32
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	40 e0       	ldi	r20, 0x00	; 0
     92c:	50 e0       	ldi	r21, 0x00	; 0
     92e:	28 1b       	sub	r18, r24
     930:	39 0b       	sbc	r19, r25
     932:	4a 0b       	sbc	r20, r26
     934:	5b 0b       	sbc	r21, r27
     936:	04 c0       	rjmp	.+8      	; 0x940 <__clzsi2+0x7e>
     938:	16 95       	lsr	r17
     93a:	07 95       	ror	r16
     93c:	f7 94       	ror	r15
     93e:	e7 94       	ror	r14
     940:	8a 95       	dec	r24
     942:	d2 f7       	brpl	.-12     	; 0x938 <__clzsi2+0x76>
     944:	f7 01       	movw	r30, r14
     946:	e0 5e       	subi	r30, 0xE0	; 224
     948:	fe 4f       	sbci	r31, 0xFE	; 254
     94a:	80 81       	ld	r24, Z
     94c:	28 1b       	sub	r18, r24
     94e:	31 09       	sbc	r19, r1
     950:	41 09       	sbc	r20, r1
     952:	51 09       	sbc	r21, r1
     954:	c9 01       	movw	r24, r18
     956:	1f 91       	pop	r17
     958:	0f 91       	pop	r16
     95a:	ff 90       	pop	r15
     95c:	ef 90       	pop	r14
     95e:	08 95       	ret

00000960 <__pack_f>:
     960:	df 92       	push	r13
     962:	ef 92       	push	r14
     964:	ff 92       	push	r15
     966:	0f 93       	push	r16
     968:	1f 93       	push	r17
     96a:	fc 01       	movw	r30, r24
     96c:	e4 80       	ldd	r14, Z+4	; 0x04
     96e:	f5 80       	ldd	r15, Z+5	; 0x05
     970:	06 81       	ldd	r16, Z+6	; 0x06
     972:	17 81       	ldd	r17, Z+7	; 0x07
     974:	d1 80       	ldd	r13, Z+1	; 0x01
     976:	80 81       	ld	r24, Z
     978:	82 30       	cpi	r24, 0x02	; 2
     97a:	48 f4       	brcc	.+18     	; 0x98e <__pack_f+0x2e>
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	a0 e1       	ldi	r26, 0x10	; 16
     982:	b0 e0       	ldi	r27, 0x00	; 0
     984:	e8 2a       	or	r14, r24
     986:	f9 2a       	or	r15, r25
     988:	0a 2b       	or	r16, r26
     98a:	1b 2b       	or	r17, r27
     98c:	a5 c0       	rjmp	.+330    	; 0xad8 <__pack_f+0x178>
     98e:	84 30       	cpi	r24, 0x04	; 4
     990:	09 f4       	brne	.+2      	; 0x994 <__pack_f+0x34>
     992:	9f c0       	rjmp	.+318    	; 0xad2 <__pack_f+0x172>
     994:	82 30       	cpi	r24, 0x02	; 2
     996:	21 f4       	brne	.+8      	; 0x9a0 <__pack_f+0x40>
     998:	ee 24       	eor	r14, r14
     99a:	ff 24       	eor	r15, r15
     99c:	87 01       	movw	r16, r14
     99e:	05 c0       	rjmp	.+10     	; 0x9aa <__pack_f+0x4a>
     9a0:	e1 14       	cp	r14, r1
     9a2:	f1 04       	cpc	r15, r1
     9a4:	01 05       	cpc	r16, r1
     9a6:	11 05       	cpc	r17, r1
     9a8:	19 f4       	brne	.+6      	; 0x9b0 <__pack_f+0x50>
     9aa:	e0 e0       	ldi	r30, 0x00	; 0
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	96 c0       	rjmp	.+300    	; 0xadc <__pack_f+0x17c>
     9b0:	62 81       	ldd	r22, Z+2	; 0x02
     9b2:	73 81       	ldd	r23, Z+3	; 0x03
     9b4:	9f ef       	ldi	r25, 0xFF	; 255
     9b6:	62 38       	cpi	r22, 0x82	; 130
     9b8:	79 07       	cpc	r23, r25
     9ba:	0c f0       	brlt	.+2      	; 0x9be <__pack_f+0x5e>
     9bc:	5b c0       	rjmp	.+182    	; 0xa74 <__pack_f+0x114>
     9be:	22 e8       	ldi	r18, 0x82	; 130
     9c0:	3f ef       	ldi	r19, 0xFF	; 255
     9c2:	26 1b       	sub	r18, r22
     9c4:	37 0b       	sbc	r19, r23
     9c6:	2a 31       	cpi	r18, 0x1A	; 26
     9c8:	31 05       	cpc	r19, r1
     9ca:	2c f0       	brlt	.+10     	; 0x9d6 <__pack_f+0x76>
     9cc:	20 e0       	ldi	r18, 0x00	; 0
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	40 e0       	ldi	r20, 0x00	; 0
     9d2:	50 e0       	ldi	r21, 0x00	; 0
     9d4:	2a c0       	rjmp	.+84     	; 0xa2a <__pack_f+0xca>
     9d6:	b8 01       	movw	r22, r16
     9d8:	a7 01       	movw	r20, r14
     9da:	02 2e       	mov	r0, r18
     9dc:	04 c0       	rjmp	.+8      	; 0x9e6 <__pack_f+0x86>
     9de:	76 95       	lsr	r23
     9e0:	67 95       	ror	r22
     9e2:	57 95       	ror	r21
     9e4:	47 95       	ror	r20
     9e6:	0a 94       	dec	r0
     9e8:	d2 f7       	brpl	.-12     	; 0x9de <__pack_f+0x7e>
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	04 c0       	rjmp	.+8      	; 0x9fc <__pack_f+0x9c>
     9f4:	88 0f       	add	r24, r24
     9f6:	99 1f       	adc	r25, r25
     9f8:	aa 1f       	adc	r26, r26
     9fa:	bb 1f       	adc	r27, r27
     9fc:	2a 95       	dec	r18
     9fe:	d2 f7       	brpl	.-12     	; 0x9f4 <__pack_f+0x94>
     a00:	01 97       	sbiw	r24, 0x01	; 1
     a02:	a1 09       	sbc	r26, r1
     a04:	b1 09       	sbc	r27, r1
     a06:	8e 21       	and	r24, r14
     a08:	9f 21       	and	r25, r15
     a0a:	a0 23       	and	r26, r16
     a0c:	b1 23       	and	r27, r17
     a0e:	00 97       	sbiw	r24, 0x00	; 0
     a10:	a1 05       	cpc	r26, r1
     a12:	b1 05       	cpc	r27, r1
     a14:	21 f0       	breq	.+8      	; 0xa1e <__pack_f+0xbe>
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	a0 e0       	ldi	r26, 0x00	; 0
     a1c:	b0 e0       	ldi	r27, 0x00	; 0
     a1e:	9a 01       	movw	r18, r20
     a20:	ab 01       	movw	r20, r22
     a22:	28 2b       	or	r18, r24
     a24:	39 2b       	or	r19, r25
     a26:	4a 2b       	or	r20, r26
     a28:	5b 2b       	or	r21, r27
     a2a:	da 01       	movw	r26, r20
     a2c:	c9 01       	movw	r24, r18
     a2e:	8f 77       	andi	r24, 0x7F	; 127
     a30:	90 70       	andi	r25, 0x00	; 0
     a32:	a0 70       	andi	r26, 0x00	; 0
     a34:	b0 70       	andi	r27, 0x00	; 0
     a36:	80 34       	cpi	r24, 0x40	; 64
     a38:	91 05       	cpc	r25, r1
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	39 f4       	brne	.+14     	; 0xa4e <__pack_f+0xee>
     a40:	27 ff       	sbrs	r18, 7
     a42:	09 c0       	rjmp	.+18     	; 0xa56 <__pack_f+0xf6>
     a44:	20 5c       	subi	r18, 0xC0	; 192
     a46:	3f 4f       	sbci	r19, 0xFF	; 255
     a48:	4f 4f       	sbci	r20, 0xFF	; 255
     a4a:	5f 4f       	sbci	r21, 0xFF	; 255
     a4c:	04 c0       	rjmp	.+8      	; 0xa56 <__pack_f+0xf6>
     a4e:	21 5c       	subi	r18, 0xC1	; 193
     a50:	3f 4f       	sbci	r19, 0xFF	; 255
     a52:	4f 4f       	sbci	r20, 0xFF	; 255
     a54:	5f 4f       	sbci	r21, 0xFF	; 255
     a56:	e0 e0       	ldi	r30, 0x00	; 0
     a58:	f0 e0       	ldi	r31, 0x00	; 0
     a5a:	20 30       	cpi	r18, 0x00	; 0
     a5c:	a0 e0       	ldi	r26, 0x00	; 0
     a5e:	3a 07       	cpc	r19, r26
     a60:	a0 e0       	ldi	r26, 0x00	; 0
     a62:	4a 07       	cpc	r20, r26
     a64:	a0 e4       	ldi	r26, 0x40	; 64
     a66:	5a 07       	cpc	r21, r26
     a68:	10 f0       	brcs	.+4      	; 0xa6e <__pack_f+0x10e>
     a6a:	e1 e0       	ldi	r30, 0x01	; 1
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	79 01       	movw	r14, r18
     a70:	8a 01       	movw	r16, r20
     a72:	27 c0       	rjmp	.+78     	; 0xac2 <__pack_f+0x162>
     a74:	60 38       	cpi	r22, 0x80	; 128
     a76:	71 05       	cpc	r23, r1
     a78:	64 f5       	brge	.+88     	; 0xad2 <__pack_f+0x172>
     a7a:	fb 01       	movw	r30, r22
     a7c:	e1 58       	subi	r30, 0x81	; 129
     a7e:	ff 4f       	sbci	r31, 0xFF	; 255
     a80:	d8 01       	movw	r26, r16
     a82:	c7 01       	movw	r24, r14
     a84:	8f 77       	andi	r24, 0x7F	; 127
     a86:	90 70       	andi	r25, 0x00	; 0
     a88:	a0 70       	andi	r26, 0x00	; 0
     a8a:	b0 70       	andi	r27, 0x00	; 0
     a8c:	80 34       	cpi	r24, 0x40	; 64
     a8e:	91 05       	cpc	r25, r1
     a90:	a1 05       	cpc	r26, r1
     a92:	b1 05       	cpc	r27, r1
     a94:	39 f4       	brne	.+14     	; 0xaa4 <__pack_f+0x144>
     a96:	e7 fe       	sbrs	r14, 7
     a98:	0d c0       	rjmp	.+26     	; 0xab4 <__pack_f+0x154>
     a9a:	80 e4       	ldi	r24, 0x40	; 64
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	a0 e0       	ldi	r26, 0x00	; 0
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	04 c0       	rjmp	.+8      	; 0xaac <__pack_f+0x14c>
     aa4:	8f e3       	ldi	r24, 0x3F	; 63
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	a0 e0       	ldi	r26, 0x00	; 0
     aaa:	b0 e0       	ldi	r27, 0x00	; 0
     aac:	e8 0e       	add	r14, r24
     aae:	f9 1e       	adc	r15, r25
     ab0:	0a 1f       	adc	r16, r26
     ab2:	1b 1f       	adc	r17, r27
     ab4:	17 ff       	sbrs	r17, 7
     ab6:	05 c0       	rjmp	.+10     	; 0xac2 <__pack_f+0x162>
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	31 96       	adiw	r30, 0x01	; 1
     ac2:	87 e0       	ldi	r24, 0x07	; 7
     ac4:	16 95       	lsr	r17
     ac6:	07 95       	ror	r16
     ac8:	f7 94       	ror	r15
     aca:	e7 94       	ror	r14
     acc:	8a 95       	dec	r24
     ace:	d1 f7       	brne	.-12     	; 0xac4 <__pack_f+0x164>
     ad0:	05 c0       	rjmp	.+10     	; 0xadc <__pack_f+0x17c>
     ad2:	ee 24       	eor	r14, r14
     ad4:	ff 24       	eor	r15, r15
     ad6:	87 01       	movw	r16, r14
     ad8:	ef ef       	ldi	r30, 0xFF	; 255
     ada:	f0 e0       	ldi	r31, 0x00	; 0
     adc:	6e 2f       	mov	r22, r30
     ade:	67 95       	ror	r22
     ae0:	66 27       	eor	r22, r22
     ae2:	67 95       	ror	r22
     ae4:	90 2f       	mov	r25, r16
     ae6:	9f 77       	andi	r25, 0x7F	; 127
     ae8:	d7 94       	ror	r13
     aea:	dd 24       	eor	r13, r13
     aec:	d7 94       	ror	r13
     aee:	8e 2f       	mov	r24, r30
     af0:	86 95       	lsr	r24
     af2:	49 2f       	mov	r20, r25
     af4:	46 2b       	or	r20, r22
     af6:	58 2f       	mov	r21, r24
     af8:	5d 29       	or	r21, r13
     afa:	b7 01       	movw	r22, r14
     afc:	ca 01       	movw	r24, r20
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	ff 90       	pop	r15
     b04:	ef 90       	pop	r14
     b06:	df 90       	pop	r13
     b08:	08 95       	ret

00000b0a <__unpack_f>:
     b0a:	fc 01       	movw	r30, r24
     b0c:	db 01       	movw	r26, r22
     b0e:	40 81       	ld	r20, Z
     b10:	51 81       	ldd	r21, Z+1	; 0x01
     b12:	22 81       	ldd	r18, Z+2	; 0x02
     b14:	62 2f       	mov	r22, r18
     b16:	6f 77       	andi	r22, 0x7F	; 127
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	22 1f       	adc	r18, r18
     b1c:	22 27       	eor	r18, r18
     b1e:	22 1f       	adc	r18, r18
     b20:	93 81       	ldd	r25, Z+3	; 0x03
     b22:	89 2f       	mov	r24, r25
     b24:	88 0f       	add	r24, r24
     b26:	82 2b       	or	r24, r18
     b28:	28 2f       	mov	r18, r24
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	99 1f       	adc	r25, r25
     b2e:	99 27       	eor	r25, r25
     b30:	99 1f       	adc	r25, r25
     b32:	11 96       	adiw	r26, 0x01	; 1
     b34:	9c 93       	st	X, r25
     b36:	11 97       	sbiw	r26, 0x01	; 1
     b38:	21 15       	cp	r18, r1
     b3a:	31 05       	cpc	r19, r1
     b3c:	a9 f5       	brne	.+106    	; 0xba8 <__unpack_f+0x9e>
     b3e:	41 15       	cp	r20, r1
     b40:	51 05       	cpc	r21, r1
     b42:	61 05       	cpc	r22, r1
     b44:	71 05       	cpc	r23, r1
     b46:	11 f4       	brne	.+4      	; 0xb4c <__unpack_f+0x42>
     b48:	82 e0       	ldi	r24, 0x02	; 2
     b4a:	37 c0       	rjmp	.+110    	; 0xbba <__unpack_f+0xb0>
     b4c:	82 e8       	ldi	r24, 0x82	; 130
     b4e:	9f ef       	ldi	r25, 0xFF	; 255
     b50:	13 96       	adiw	r26, 0x03	; 3
     b52:	9c 93       	st	X, r25
     b54:	8e 93       	st	-X, r24
     b56:	12 97       	sbiw	r26, 0x02	; 2
     b58:	9a 01       	movw	r18, r20
     b5a:	ab 01       	movw	r20, r22
     b5c:	67 e0       	ldi	r22, 0x07	; 7
     b5e:	22 0f       	add	r18, r18
     b60:	33 1f       	adc	r19, r19
     b62:	44 1f       	adc	r20, r20
     b64:	55 1f       	adc	r21, r21
     b66:	6a 95       	dec	r22
     b68:	d1 f7       	brne	.-12     	; 0xb5e <__unpack_f+0x54>
     b6a:	83 e0       	ldi	r24, 0x03	; 3
     b6c:	8c 93       	st	X, r24
     b6e:	0d c0       	rjmp	.+26     	; 0xb8a <__unpack_f+0x80>
     b70:	22 0f       	add	r18, r18
     b72:	33 1f       	adc	r19, r19
     b74:	44 1f       	adc	r20, r20
     b76:	55 1f       	adc	r21, r21
     b78:	12 96       	adiw	r26, 0x02	; 2
     b7a:	8d 91       	ld	r24, X+
     b7c:	9c 91       	ld	r25, X
     b7e:	13 97       	sbiw	r26, 0x03	; 3
     b80:	01 97       	sbiw	r24, 0x01	; 1
     b82:	13 96       	adiw	r26, 0x03	; 3
     b84:	9c 93       	st	X, r25
     b86:	8e 93       	st	-X, r24
     b88:	12 97       	sbiw	r26, 0x02	; 2
     b8a:	20 30       	cpi	r18, 0x00	; 0
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	38 07       	cpc	r19, r24
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	48 07       	cpc	r20, r24
     b94:	80 e4       	ldi	r24, 0x40	; 64
     b96:	58 07       	cpc	r21, r24
     b98:	58 f3       	brcs	.-42     	; 0xb70 <__unpack_f+0x66>
     b9a:	14 96       	adiw	r26, 0x04	; 4
     b9c:	2d 93       	st	X+, r18
     b9e:	3d 93       	st	X+, r19
     ba0:	4d 93       	st	X+, r20
     ba2:	5c 93       	st	X, r21
     ba4:	17 97       	sbiw	r26, 0x07	; 7
     ba6:	08 95       	ret
     ba8:	2f 3f       	cpi	r18, 0xFF	; 255
     baa:	31 05       	cpc	r19, r1
     bac:	79 f4       	brne	.+30     	; 0xbcc <__unpack_f+0xc2>
     bae:	41 15       	cp	r20, r1
     bb0:	51 05       	cpc	r21, r1
     bb2:	61 05       	cpc	r22, r1
     bb4:	71 05       	cpc	r23, r1
     bb6:	19 f4       	brne	.+6      	; 0xbbe <__unpack_f+0xb4>
     bb8:	84 e0       	ldi	r24, 0x04	; 4
     bba:	8c 93       	st	X, r24
     bbc:	08 95       	ret
     bbe:	64 ff       	sbrs	r22, 4
     bc0:	03 c0       	rjmp	.+6      	; 0xbc8 <__unpack_f+0xbe>
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	8c 93       	st	X, r24
     bc6:	12 c0       	rjmp	.+36     	; 0xbec <__unpack_f+0xe2>
     bc8:	1c 92       	st	X, r1
     bca:	10 c0       	rjmp	.+32     	; 0xbec <__unpack_f+0xe2>
     bcc:	2f 57       	subi	r18, 0x7F	; 127
     bce:	30 40       	sbci	r19, 0x00	; 0
     bd0:	13 96       	adiw	r26, 0x03	; 3
     bd2:	3c 93       	st	X, r19
     bd4:	2e 93       	st	-X, r18
     bd6:	12 97       	sbiw	r26, 0x02	; 2
     bd8:	83 e0       	ldi	r24, 0x03	; 3
     bda:	8c 93       	st	X, r24
     bdc:	87 e0       	ldi	r24, 0x07	; 7
     bde:	44 0f       	add	r20, r20
     be0:	55 1f       	adc	r21, r21
     be2:	66 1f       	adc	r22, r22
     be4:	77 1f       	adc	r23, r23
     be6:	8a 95       	dec	r24
     be8:	d1 f7       	brne	.-12     	; 0xbde <__unpack_f+0xd4>
     bea:	70 64       	ori	r23, 0x40	; 64
     bec:	14 96       	adiw	r26, 0x04	; 4
     bee:	4d 93       	st	X+, r20
     bf0:	5d 93       	st	X+, r21
     bf2:	6d 93       	st	X+, r22
     bf4:	7c 93       	st	X, r23
     bf6:	17 97       	sbiw	r26, 0x07	; 7
     bf8:	08 95       	ret

00000bfa <__fpcmp_parts_f>:
     bfa:	1f 93       	push	r17
     bfc:	dc 01       	movw	r26, r24
     bfe:	fb 01       	movw	r30, r22
     c00:	9c 91       	ld	r25, X
     c02:	92 30       	cpi	r25, 0x02	; 2
     c04:	08 f4       	brcc	.+2      	; 0xc08 <__fpcmp_parts_f+0xe>
     c06:	47 c0       	rjmp	.+142    	; 0xc96 <__fpcmp_parts_f+0x9c>
     c08:	80 81       	ld	r24, Z
     c0a:	82 30       	cpi	r24, 0x02	; 2
     c0c:	08 f4       	brcc	.+2      	; 0xc10 <__fpcmp_parts_f+0x16>
     c0e:	43 c0       	rjmp	.+134    	; 0xc96 <__fpcmp_parts_f+0x9c>
     c10:	94 30       	cpi	r25, 0x04	; 4
     c12:	51 f4       	brne	.+20     	; 0xc28 <__fpcmp_parts_f+0x2e>
     c14:	11 96       	adiw	r26, 0x01	; 1
     c16:	1c 91       	ld	r17, X
     c18:	84 30       	cpi	r24, 0x04	; 4
     c1a:	99 f5       	brne	.+102    	; 0xc82 <__fpcmp_parts_f+0x88>
     c1c:	81 81       	ldd	r24, Z+1	; 0x01
     c1e:	68 2f       	mov	r22, r24
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	61 1b       	sub	r22, r17
     c24:	71 09       	sbc	r23, r1
     c26:	3f c0       	rjmp	.+126    	; 0xca6 <__fpcmp_parts_f+0xac>
     c28:	84 30       	cpi	r24, 0x04	; 4
     c2a:	21 f0       	breq	.+8      	; 0xc34 <__fpcmp_parts_f+0x3a>
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	31 f4       	brne	.+12     	; 0xc3c <__fpcmp_parts_f+0x42>
     c30:	82 30       	cpi	r24, 0x02	; 2
     c32:	b9 f1       	breq	.+110    	; 0xca2 <__fpcmp_parts_f+0xa8>
     c34:	81 81       	ldd	r24, Z+1	; 0x01
     c36:	88 23       	and	r24, r24
     c38:	89 f1       	breq	.+98     	; 0xc9c <__fpcmp_parts_f+0xa2>
     c3a:	2d c0       	rjmp	.+90     	; 0xc96 <__fpcmp_parts_f+0x9c>
     c3c:	11 96       	adiw	r26, 0x01	; 1
     c3e:	1c 91       	ld	r17, X
     c40:	11 97       	sbiw	r26, 0x01	; 1
     c42:	82 30       	cpi	r24, 0x02	; 2
     c44:	f1 f0       	breq	.+60     	; 0xc82 <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	18 17       	cp	r17, r24
     c4a:	d9 f4       	brne	.+54     	; 0xc82 <__fpcmp_parts_f+0x88>
     c4c:	12 96       	adiw	r26, 0x02	; 2
     c4e:	2d 91       	ld	r18, X+
     c50:	3c 91       	ld	r19, X
     c52:	13 97       	sbiw	r26, 0x03	; 3
     c54:	82 81       	ldd	r24, Z+2	; 0x02
     c56:	93 81       	ldd	r25, Z+3	; 0x03
     c58:	82 17       	cp	r24, r18
     c5a:	93 07       	cpc	r25, r19
     c5c:	94 f0       	brlt	.+36     	; 0xc82 <__fpcmp_parts_f+0x88>
     c5e:	28 17       	cp	r18, r24
     c60:	39 07       	cpc	r19, r25
     c62:	bc f0       	brlt	.+46     	; 0xc92 <__fpcmp_parts_f+0x98>
     c64:	14 96       	adiw	r26, 0x04	; 4
     c66:	8d 91       	ld	r24, X+
     c68:	9d 91       	ld	r25, X+
     c6a:	0d 90       	ld	r0, X+
     c6c:	bc 91       	ld	r27, X
     c6e:	a0 2d       	mov	r26, r0
     c70:	24 81       	ldd	r18, Z+4	; 0x04
     c72:	35 81       	ldd	r19, Z+5	; 0x05
     c74:	46 81       	ldd	r20, Z+6	; 0x06
     c76:	57 81       	ldd	r21, Z+7	; 0x07
     c78:	28 17       	cp	r18, r24
     c7a:	39 07       	cpc	r19, r25
     c7c:	4a 07       	cpc	r20, r26
     c7e:	5b 07       	cpc	r21, r27
     c80:	18 f4       	brcc	.+6      	; 0xc88 <__fpcmp_parts_f+0x8e>
     c82:	11 23       	and	r17, r17
     c84:	41 f0       	breq	.+16     	; 0xc96 <__fpcmp_parts_f+0x9c>
     c86:	0a c0       	rjmp	.+20     	; 0xc9c <__fpcmp_parts_f+0xa2>
     c88:	82 17       	cp	r24, r18
     c8a:	93 07       	cpc	r25, r19
     c8c:	a4 07       	cpc	r26, r20
     c8e:	b5 07       	cpc	r27, r21
     c90:	40 f4       	brcc	.+16     	; 0xca2 <__fpcmp_parts_f+0xa8>
     c92:	11 23       	and	r17, r17
     c94:	19 f0       	breq	.+6      	; 0xc9c <__fpcmp_parts_f+0xa2>
     c96:	61 e0       	ldi	r22, 0x01	; 1
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	05 c0       	rjmp	.+10     	; 0xca6 <__fpcmp_parts_f+0xac>
     c9c:	6f ef       	ldi	r22, 0xFF	; 255
     c9e:	7f ef       	ldi	r23, 0xFF	; 255
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <__fpcmp_parts_f+0xac>
     ca2:	60 e0       	ldi	r22, 0x00	; 0
     ca4:	70 e0       	ldi	r23, 0x00	; 0
     ca6:	cb 01       	movw	r24, r22
     ca8:	1f 91       	pop	r17
     caa:	08 95       	ret

00000cac <EXTI_INIT>:
 */
#include "EXTI.h"


void EXTI_INIT(void)
{
     cac:	df 93       	push	r29
     cae:	cf 93       	push	r28
     cb0:	cd b7       	in	r28, 0x3d	; 61
     cb2:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(MCUCR_REG,0);
     cb4:	a5 e5       	ldi	r26, 0x55	; 85
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e5 e5       	ldi	r30, 0x55	; 85
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	8e 7f       	andi	r24, 0xFE	; 254
     cc0:	8c 93       	st	X, r24
	CLR_BIT(MCUCR_REG,1);
     cc2:	a5 e5       	ldi	r26, 0x55	; 85
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e5 e5       	ldi	r30, 0x55	; 85
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8d 7f       	andi	r24, 0xFD	; 253
     cce:	8c 93       	st	X, r24
	CLR_BIT(MCUCR_REG,2);
     cd0:	a5 e5       	ldi	r26, 0x55	; 85
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e5 e5       	ldi	r30, 0x55	; 85
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8b 7f       	andi	r24, 0xFB	; 251
     cdc:	8c 93       	st	X, r24
	CLR_BIT(MCUCR_REG,3);
     cde:	a5 e5       	ldi	r26, 0x55	; 85
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e5 e5       	ldi	r30, 0x55	; 85
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	87 7f       	andi	r24, 0xF7	; 247
     cea:	8c 93       	st	X, r24
	CLR_BIT(MCUCSR_REG,6);
     cec:	a4 e5       	ldi	r26, 0x54	; 84
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e4 e5       	ldi	r30, 0x54	; 84
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	8f 7b       	andi	r24, 0xBF	; 191
     cf8:	8c 93       	st	X, r24


#if		EXTI0_MODE  == EXTI_LOW_LEVEL
	MCUCR_REG |= EXTI_LOW_LEVEL;
     cfa:	a5 e5       	ldi	r26, 0x55	; 85
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e5 e5       	ldi	r30, 0x55	; 85
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8c 93       	st	X, r24
#if		EXTI1_MODE  == EXTI_LOW_LEVEL
	MCUCR_REG |= (EXTI_LOW_LEVEL << 2);
#elif	EXTI1_MODE	== EXTI_ANY_LOGICAL_CHANGE
	MCUCR_REG |= (EXTI_ANY_LOGICAL_CHANGE << 2);
#elif	EXTI1_MODE	== EXTI_FALLING_EDGE
	MCUCR_REG |= (EXTI_FALLING_EDGE<< 2);
     d06:	a5 e5       	ldi	r26, 0x55	; 85
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e5 e5       	ldi	r30, 0x55	; 85
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	88 60       	ori	r24, 0x08	; 8
     d12:	8c 93       	st	X, r24
#elif	EXTI1_MODE	== EXTI_RISING_EDGE
	MCUCR_REG |=(EXTI_RISING_EDGE <<2);
#endif

#if		EXTI2_MODE  == EXTI_INT2_FALLING_EDGE
	MCUCSR_REG |= EXTI_INT2_FALLING_EDGE;
     d14:	a4 e5       	ldi	r26, 0x54	; 84
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e4 e5       	ldi	r30, 0x54	; 84
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	8c 93       	st	X, r24
#elif	EXTI2_MODE	== EXTI_INT2_RISING_EDGE
	MCUCSR_REG |= EXTI_INT2_RISING_EDGE;
#endif
}
     d20:	cf 91       	pop	r28
     d22:	df 91       	pop	r29
     d24:	08 95       	ret

00000d26 <EXTI_ENGlobal>:

void EXTI_ENGlobal(void)  	/*enable Global interrupt*/
{
     d26:	df 93       	push	r29
     d28:	cf 93       	push	r28
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,7);
     d2e:	af e5       	ldi	r26, 0x5F	; 95
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	ef e5       	ldi	r30, 0x5F	; 95
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	80 68       	ori	r24, 0x80	; 128
     d3a:	8c 93       	st	X, r24
}
     d3c:	cf 91       	pop	r28
     d3e:	df 91       	pop	r29
     d40:	08 95       	ret

00000d42 <EXTI_DIGlobal>:

void EXTI_DIGlobal(void) /*Disable Global interrupt*/
{
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG,7);
     d4a:	af e5       	ldi	r26, 0x5F	; 95
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	ef e5       	ldi	r30, 0x5F	; 95
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	8f 77       	andi	r24, 0x7F	; 127
     d56:	8c 93       	st	X, r24
}
     d58:	cf 91       	pop	r28
     d5a:	df 91       	pop	r29
     d5c:	08 95       	ret

00000d5e <EXTI_EN0>:


void EXTI_EN0(void)			/*enable external interrupt*/
{
     d5e:	df 93       	push	r29
     d60:	cf 93       	push	r28
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR_REG,6);
     d66:	ab e5       	ldi	r26, 0x5B	; 91
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	eb e5       	ldi	r30, 0x5B	; 91
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	80 64       	ori	r24, 0x40	; 64
     d72:	8c 93       	st	X, r24
}
     d74:	cf 91       	pop	r28
     d76:	df 91       	pop	r29
     d78:	08 95       	ret

00000d7a <EXTI_DI0>:

void EXTI_DI0(void)			/*disable external interrupt*/
{
     d7a:	df 93       	push	r29
     d7c:	cf 93       	push	r28
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(GICR_REG,6);
     d82:	ab e5       	ldi	r26, 0x5B	; 91
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	eb e5       	ldi	r30, 0x5B	; 91
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	8f 7b       	andi	r24, 0xBF	; 191
     d8e:	8c 93       	st	X, r24

}
     d90:	cf 91       	pop	r28
     d92:	df 91       	pop	r29
     d94:	08 95       	ret

00000d96 <EXTI_SetCallBack>:

void EXTI_SetCallBack( void (*CopyFuncPtr) (void))
{
     d96:	df 93       	push	r29
     d98:	cf 93       	push	r28
     d9a:	00 d0       	rcall	.+0      	; 0xd9c <EXTI_SetCallBack+0x6>
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
     da0:	9a 83       	std	Y+2, r25	; 0x02
     da2:	89 83       	std	Y+1, r24	; 0x01

}
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	08 95       	ret

00000dae <DIO_SetPortDirection>:
#include"bit_math.h"



void DIO_SetPortDirection(DIO_PORT_ID port_ID , DIO_Direction direction)
{
     dae:	df 93       	push	r29
     db0:	cf 93       	push	r28
     db2:	00 d0       	rcall	.+0      	; 0xdb4 <DIO_SetPortDirection+0x6>
     db4:	00 d0       	rcall	.+0      	; 0xdb6 <DIO_SetPortDirection+0x8>
     db6:	00 d0       	rcall	.+0      	; 0xdb8 <DIO_SetPortDirection+0xa>
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	89 83       	std	Y+1, r24	; 0x01
     dbe:	6a 83       	std	Y+2, r22	; 0x02
	if(output == direction)
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	81 30       	cpi	r24, 0x01	; 1
     dc4:	99 f5       	brne	.+102    	; 0xe2c <DIO_SetPortDirection+0x7e>
	{
		switch(port_ID)
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	3e 83       	std	Y+6, r19	; 0x06
     dce:	2d 83       	std	Y+5, r18	; 0x05
     dd0:	8d 81       	ldd	r24, Y+5	; 0x05
     dd2:	9e 81       	ldd	r25, Y+6	; 0x06
     dd4:	81 30       	cpi	r24, 0x01	; 1
     dd6:	91 05       	cpc	r25, r1
     dd8:	d1 f0       	breq	.+52     	; 0xe0e <DIO_SetPortDirection+0x60>
     dda:	2d 81       	ldd	r18, Y+5	; 0x05
     ddc:	3e 81       	ldd	r19, Y+6	; 0x06
     dde:	22 30       	cpi	r18, 0x02	; 2
     de0:	31 05       	cpc	r19, r1
     de2:	2c f4       	brge	.+10     	; 0xdee <DIO_SetPortDirection+0x40>
     de4:	8d 81       	ldd	r24, Y+5	; 0x05
     de6:	9e 81       	ldd	r25, Y+6	; 0x06
     de8:	00 97       	sbiw	r24, 0x00	; 0
     dea:	61 f0       	breq	.+24     	; 0xe04 <DIO_SetPortDirection+0x56>
     dec:	50 c0       	rjmp	.+160    	; 0xe8e <DIO_SetPortDirection+0xe0>
     dee:	2d 81       	ldd	r18, Y+5	; 0x05
     df0:	3e 81       	ldd	r19, Y+6	; 0x06
     df2:	22 30       	cpi	r18, 0x02	; 2
     df4:	31 05       	cpc	r19, r1
     df6:	81 f0       	breq	.+32     	; 0xe18 <DIO_SetPortDirection+0x6a>
     df8:	8d 81       	ldd	r24, Y+5	; 0x05
     dfa:	9e 81       	ldd	r25, Y+6	; 0x06
     dfc:	83 30       	cpi	r24, 0x03	; 3
     dfe:	91 05       	cpc	r25, r1
     e00:	81 f0       	breq	.+32     	; 0xe22 <DIO_SetPortDirection+0x74>
     e02:	45 c0       	rjmp	.+138    	; 0xe8e <DIO_SetPortDirection+0xe0>
		{
		case PORTA: DDRA_REG = 0xFF ; break;
     e04:	ea e3       	ldi	r30, 0x3A	; 58
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	8f ef       	ldi	r24, 0xFF	; 255
     e0a:	80 83       	st	Z, r24
     e0c:	40 c0       	rjmp	.+128    	; 0xe8e <DIO_SetPortDirection+0xe0>
		case PORTB: DDRB_REG = 0xFF ; break;
     e0e:	e7 e3       	ldi	r30, 0x37	; 55
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	8f ef       	ldi	r24, 0xFF	; 255
     e14:	80 83       	st	Z, r24
     e16:	3b c0       	rjmp	.+118    	; 0xe8e <DIO_SetPortDirection+0xe0>
		case PORTC: DDRC_REG = 0xFF ; break;
     e18:	e4 e3       	ldi	r30, 0x34	; 52
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	8f ef       	ldi	r24, 0xFF	; 255
     e1e:	80 83       	st	Z, r24
     e20:	36 c0       	rjmp	.+108    	; 0xe8e <DIO_SetPortDirection+0xe0>
		case PORTD: DDRD_REG = 0xFF ; break;
     e22:	e1 e3       	ldi	r30, 0x31	; 49
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	8f ef       	ldi	r24, 0xFF	; 255
     e28:	80 83       	st	Z, r24
     e2a:	31 c0       	rjmp	.+98     	; 0xe8e <DIO_SetPortDirection+0xe0>
		}
	}
	else if(input == direction)
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	88 23       	and	r24, r24
     e30:	71 f5       	brne	.+92     	; 0xe8e <DIO_SetPortDirection+0xe0>
	{
		switch(port_ID)
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	3c 83       	std	Y+4, r19	; 0x04
     e3a:	2b 83       	std	Y+3, r18	; 0x03
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	9c 81       	ldd	r25, Y+4	; 0x04
     e40:	81 30       	cpi	r24, 0x01	; 1
     e42:	91 05       	cpc	r25, r1
     e44:	c9 f0       	breq	.+50     	; 0xe78 <DIO_SetPortDirection+0xca>
     e46:	2b 81       	ldd	r18, Y+3	; 0x03
     e48:	3c 81       	ldd	r19, Y+4	; 0x04
     e4a:	22 30       	cpi	r18, 0x02	; 2
     e4c:	31 05       	cpc	r19, r1
     e4e:	2c f4       	brge	.+10     	; 0xe5a <DIO_SetPortDirection+0xac>
     e50:	8b 81       	ldd	r24, Y+3	; 0x03
     e52:	9c 81       	ldd	r25, Y+4	; 0x04
     e54:	00 97       	sbiw	r24, 0x00	; 0
     e56:	61 f0       	breq	.+24     	; 0xe70 <DIO_SetPortDirection+0xc2>
     e58:	1a c0       	rjmp	.+52     	; 0xe8e <DIO_SetPortDirection+0xe0>
     e5a:	2b 81       	ldd	r18, Y+3	; 0x03
     e5c:	3c 81       	ldd	r19, Y+4	; 0x04
     e5e:	22 30       	cpi	r18, 0x02	; 2
     e60:	31 05       	cpc	r19, r1
     e62:	71 f0       	breq	.+28     	; 0xe80 <DIO_SetPortDirection+0xd2>
     e64:	8b 81       	ldd	r24, Y+3	; 0x03
     e66:	9c 81       	ldd	r25, Y+4	; 0x04
     e68:	83 30       	cpi	r24, 0x03	; 3
     e6a:	91 05       	cpc	r25, r1
     e6c:	69 f0       	breq	.+26     	; 0xe88 <DIO_SetPortDirection+0xda>
     e6e:	0f c0       	rjmp	.+30     	; 0xe8e <DIO_SetPortDirection+0xe0>
	{
		case PORTA: DDRA_REG = 0x00 ; break;
     e70:	ea e3       	ldi	r30, 0x3A	; 58
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	10 82       	st	Z, r1
     e76:	0b c0       	rjmp	.+22     	; 0xe8e <DIO_SetPortDirection+0xe0>
		case PORTB: DDRB_REG = 0x00 ; break;
     e78:	e7 e3       	ldi	r30, 0x37	; 55
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	10 82       	st	Z, r1
     e7e:	07 c0       	rjmp	.+14     	; 0xe8e <DIO_SetPortDirection+0xe0>
		case PORTC: DDRC_REG = 0x00 ; break;
     e80:	e4 e3       	ldi	r30, 0x34	; 52
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	10 82       	st	Z, r1
     e86:	03 c0       	rjmp	.+6      	; 0xe8e <DIO_SetPortDirection+0xe0>
		case PORTD: DDRD_REG = 0x00 ; break;
     e88:	e1 e3       	ldi	r30, 0x31	; 49
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	10 82       	st	Z, r1

	}
	}

}
     e8e:	26 96       	adiw	r28, 0x06	; 6
     e90:	0f b6       	in	r0, 0x3f	; 63
     e92:	f8 94       	cli
     e94:	de bf       	out	0x3e, r29	; 62
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	cd bf       	out	0x3d, r28	; 61
     e9a:	cf 91       	pop	r28
     e9c:	df 91       	pop	r29
     e9e:	08 95       	ret

00000ea0 <DIO_SetPortValue>:

void DIO_SetPortValue(DIO_PORT_ID port_ID , u8 value)
{
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <DIO_SetPortValue+0x6>
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <DIO_SetPortValue+0x8>
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	89 83       	std	Y+1, r24	; 0x01
     eae:	6a 83       	std	Y+2, r22	; 0x02
	switch(port_ID)
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	3c 83       	std	Y+4, r19	; 0x04
     eb8:	2b 83       	std	Y+3, r18	; 0x03
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
     ebc:	9c 81       	ldd	r25, Y+4	; 0x04
     ebe:	81 30       	cpi	r24, 0x01	; 1
     ec0:	91 05       	cpc	r25, r1
     ec2:	d1 f0       	breq	.+52     	; 0xef8 <DIO_SetPortValue+0x58>
     ec4:	2b 81       	ldd	r18, Y+3	; 0x03
     ec6:	3c 81       	ldd	r19, Y+4	; 0x04
     ec8:	22 30       	cpi	r18, 0x02	; 2
     eca:	31 05       	cpc	r19, r1
     ecc:	2c f4       	brge	.+10     	; 0xed8 <DIO_SetPortValue+0x38>
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	9c 81       	ldd	r25, Y+4	; 0x04
     ed2:	00 97       	sbiw	r24, 0x00	; 0
     ed4:	61 f0       	breq	.+24     	; 0xeee <DIO_SetPortValue+0x4e>
     ed6:	1e c0       	rjmp	.+60     	; 0xf14 <DIO_SetPortValue+0x74>
     ed8:	2b 81       	ldd	r18, Y+3	; 0x03
     eda:	3c 81       	ldd	r19, Y+4	; 0x04
     edc:	22 30       	cpi	r18, 0x02	; 2
     ede:	31 05       	cpc	r19, r1
     ee0:	81 f0       	breq	.+32     	; 0xf02 <DIO_SetPortValue+0x62>
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	9c 81       	ldd	r25, Y+4	; 0x04
     ee6:	83 30       	cpi	r24, 0x03	; 3
     ee8:	91 05       	cpc	r25, r1
     eea:	81 f0       	breq	.+32     	; 0xf0c <DIO_SetPortValue+0x6c>
     eec:	13 c0       	rjmp	.+38     	; 0xf14 <DIO_SetPortValue+0x74>
	{
	case PORTA : PORTA_REG = value ; break;
     eee:	eb e3       	ldi	r30, 0x3B	; 59
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	80 83       	st	Z, r24
     ef6:	0e c0       	rjmp	.+28     	; 0xf14 <DIO_SetPortValue+0x74>
	case PORTB : PORTB_REG = value ; break;
     ef8:	e8 e3       	ldi	r30, 0x38	; 56
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	80 83       	st	Z, r24
     f00:	09 c0       	rjmp	.+18     	; 0xf14 <DIO_SetPortValue+0x74>
	case PORTC : PORTC_REG = value ; break;
     f02:	e5 e3       	ldi	r30, 0x35	; 53
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	80 83       	st	Z, r24
     f0a:	04 c0       	rjmp	.+8      	; 0xf14 <DIO_SetPortValue+0x74>
	case PORTD : PORTD_REG = value ; break;
     f0c:	e2 e3       	ldi	r30, 0x32	; 50
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	80 83       	st	Z, r24

	}
}
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	08 95       	ret

00000f22 <DIO_SetPinDirection>:


void DIO_SetPinDirection(DIO_PORT_ID port_ID , DIO_PIN_ID pin_ID, DIO_Direction direction)
{
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
     f2a:	27 97       	sbiw	r28, 0x07	; 7
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	f8 94       	cli
     f30:	de bf       	out	0x3e, r29	; 62
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	cd bf       	out	0x3d, r28	; 61
     f36:	89 83       	std	Y+1, r24	; 0x01
     f38:	6a 83       	std	Y+2, r22	; 0x02
     f3a:	4b 83       	std	Y+3, r20	; 0x03
	if(port_ID <= PORTD && pin_ID <=7)
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	84 30       	cpi	r24, 0x04	; 4
     f40:	08 f0       	brcs	.+2      	; 0xf44 <DIO_SetPinDirection+0x22>
     f42:	ee c0       	rjmp	.+476    	; 0x1120 <DIO_SetPinDirection+0x1fe>
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	88 30       	cpi	r24, 0x08	; 8
     f48:	08 f0       	brcs	.+2      	; 0xf4c <DIO_SetPinDirection+0x2a>
     f4a:	ea c0       	rjmp	.+468    	; 0x1120 <DIO_SetPinDirection+0x1fe>
	{
		if(output == direction)
     f4c:	8b 81       	ldd	r24, Y+3	; 0x03
     f4e:	81 30       	cpi	r24, 0x01	; 1
     f50:	09 f0       	breq	.+2      	; 0xf54 <DIO_SetPinDirection+0x32>
     f52:	6f c0       	rjmp	.+222    	; 0x1032 <DIO_SetPinDirection+0x110>
		{
			switch(port_ID)
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	3f 83       	std	Y+7, r19	; 0x07
     f5c:	2e 83       	std	Y+6, r18	; 0x06
     f5e:	8e 81       	ldd	r24, Y+6	; 0x06
     f60:	9f 81       	ldd	r25, Y+7	; 0x07
     f62:	81 30       	cpi	r24, 0x01	; 1
     f64:	91 05       	cpc	r25, r1
     f66:	49 f1       	breq	.+82     	; 0xfba <DIO_SetPinDirection+0x98>
     f68:	2e 81       	ldd	r18, Y+6	; 0x06
     f6a:	3f 81       	ldd	r19, Y+7	; 0x07
     f6c:	22 30       	cpi	r18, 0x02	; 2
     f6e:	31 05       	cpc	r19, r1
     f70:	2c f4       	brge	.+10     	; 0xf7c <DIO_SetPinDirection+0x5a>
     f72:	8e 81       	ldd	r24, Y+6	; 0x06
     f74:	9f 81       	ldd	r25, Y+7	; 0x07
     f76:	00 97       	sbiw	r24, 0x00	; 0
     f78:	61 f0       	breq	.+24     	; 0xf92 <DIO_SetPinDirection+0x70>
     f7a:	d2 c0       	rjmp	.+420    	; 0x1120 <DIO_SetPinDirection+0x1fe>
     f7c:	2e 81       	ldd	r18, Y+6	; 0x06
     f7e:	3f 81       	ldd	r19, Y+7	; 0x07
     f80:	22 30       	cpi	r18, 0x02	; 2
     f82:	31 05       	cpc	r19, r1
     f84:	71 f1       	breq	.+92     	; 0xfe2 <DIO_SetPinDirection+0xc0>
     f86:	8e 81       	ldd	r24, Y+6	; 0x06
     f88:	9f 81       	ldd	r25, Y+7	; 0x07
     f8a:	83 30       	cpi	r24, 0x03	; 3
     f8c:	91 05       	cpc	r25, r1
     f8e:	e9 f1       	breq	.+122    	; 0x100a <DIO_SetPinDirection+0xe8>
     f90:	c7 c0       	rjmp	.+398    	; 0x1120 <DIO_SetPinDirection+0x1fe>
			{
			case PORTA: DDRA_REG |= (1<<pin_ID); break;
     f92:	aa e3       	ldi	r26, 0x3A	; 58
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	ea e3       	ldi	r30, 0x3A	; 58
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	48 2f       	mov	r20, r24
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	02 2e       	mov	r0, r18
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <DIO_SetPinDirection+0x8e>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	0a 94       	dec	r0
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <DIO_SetPinDirection+0x8a>
     fb4:	84 2b       	or	r24, r20
     fb6:	8c 93       	st	X, r24
     fb8:	b3 c0       	rjmp	.+358    	; 0x1120 <DIO_SetPinDirection+0x1fe>
			case PORTB: DDRB_REG |= (1<<pin_ID); break;
     fba:	a7 e3       	ldi	r26, 0x37	; 55
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e7 e3       	ldi	r30, 0x37	; 55
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	48 2f       	mov	r20, r24
     fc6:	8a 81       	ldd	r24, Y+2	; 0x02
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	02 2e       	mov	r0, r18
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <DIO_SetPinDirection+0xb6>
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	0a 94       	dec	r0
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <DIO_SetPinDirection+0xb2>
     fdc:	84 2b       	or	r24, r20
     fde:	8c 93       	st	X, r24
     fe0:	9f c0       	rjmp	.+318    	; 0x1120 <DIO_SetPinDirection+0x1fe>
			case PORTC: DDRC_REG |= (1<<pin_ID); break;
     fe2:	a4 e3       	ldi	r26, 0x34	; 52
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e4 e3       	ldi	r30, 0x34	; 52
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	48 2f       	mov	r20, r24
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	02 2e       	mov	r0, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <DIO_SetPinDirection+0xde>
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	0a 94       	dec	r0
    1002:	e2 f7       	brpl	.-8      	; 0xffc <DIO_SetPinDirection+0xda>
    1004:	84 2b       	or	r24, r20
    1006:	8c 93       	st	X, r24
    1008:	8b c0       	rjmp	.+278    	; 0x1120 <DIO_SetPinDirection+0x1fe>
			case PORTD: DDRD_REG  |= (1<<pin_ID); break;
    100a:	a1 e3       	ldi	r26, 0x31	; 49
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e1 e3       	ldi	r30, 0x31	; 49
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	48 2f       	mov	r20, r24
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 2e       	mov	r0, r18
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <DIO_SetPinDirection+0x106>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	0a 94       	dec	r0
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <DIO_SetPinDirection+0x102>
    102c:	84 2b       	or	r24, r20
    102e:	8c 93       	st	X, r24
    1030:	77 c0       	rjmp	.+238    	; 0x1120 <DIO_SetPinDirection+0x1fe>

			}
		}

		else if(input == direction)
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	88 23       	and	r24, r24
    1036:	09 f0       	breq	.+2      	; 0x103a <DIO_SetPinDirection+0x118>
    1038:	73 c0       	rjmp	.+230    	; 0x1120 <DIO_SetPinDirection+0x1fe>
		{
			switch(port_ID)
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	3d 83       	std	Y+5, r19	; 0x05
    1042:	2c 83       	std	Y+4, r18	; 0x04
    1044:	8c 81       	ldd	r24, Y+4	; 0x04
    1046:	9d 81       	ldd	r25, Y+5	; 0x05
    1048:	81 30       	cpi	r24, 0x01	; 1
    104a:	91 05       	cpc	r25, r1
    104c:	59 f1       	breq	.+86     	; 0x10a4 <DIO_SetPinDirection+0x182>
    104e:	2c 81       	ldd	r18, Y+4	; 0x04
    1050:	3d 81       	ldd	r19, Y+5	; 0x05
    1052:	22 30       	cpi	r18, 0x02	; 2
    1054:	31 05       	cpc	r19, r1
    1056:	2c f4       	brge	.+10     	; 0x1062 <DIO_SetPinDirection+0x140>
    1058:	8c 81       	ldd	r24, Y+4	; 0x04
    105a:	9d 81       	ldd	r25, Y+5	; 0x05
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	69 f0       	breq	.+26     	; 0x107a <DIO_SetPinDirection+0x158>
    1060:	5f c0       	rjmp	.+190    	; 0x1120 <DIO_SetPinDirection+0x1fe>
    1062:	2c 81       	ldd	r18, Y+4	; 0x04
    1064:	3d 81       	ldd	r19, Y+5	; 0x05
    1066:	22 30       	cpi	r18, 0x02	; 2
    1068:	31 05       	cpc	r19, r1
    106a:	89 f1       	breq	.+98     	; 0x10ce <DIO_SetPinDirection+0x1ac>
    106c:	8c 81       	ldd	r24, Y+4	; 0x04
    106e:	9d 81       	ldd	r25, Y+5	; 0x05
    1070:	83 30       	cpi	r24, 0x03	; 3
    1072:	91 05       	cpc	r25, r1
    1074:	09 f4       	brne	.+2      	; 0x1078 <DIO_SetPinDirection+0x156>
    1076:	40 c0       	rjmp	.+128    	; 0x10f8 <DIO_SetPinDirection+0x1d6>
    1078:	53 c0       	rjmp	.+166    	; 0x1120 <DIO_SetPinDirection+0x1fe>
			{
			case PORTA: DDRA_REG &= ~(1<<pin_ID); break;
    107a:	aa e3       	ldi	r26, 0x3A	; 58
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	ea e3       	ldi	r30, 0x3A	; 58
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	48 2f       	mov	r20, r24
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	02 2e       	mov	r0, r18
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <DIO_SetPinDirection+0x176>
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	0a 94       	dec	r0
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <DIO_SetPinDirection+0x172>
    109c:	80 95       	com	r24
    109e:	84 23       	and	r24, r20
    10a0:	8c 93       	st	X, r24
    10a2:	3e c0       	rjmp	.+124    	; 0x1120 <DIO_SetPinDirection+0x1fe>
			case PORTB: DDRB_REG &= ~(1<<pin_ID); break;
    10a4:	a7 e3       	ldi	r26, 0x37	; 55
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e7 e3       	ldi	r30, 0x37	; 55
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	48 2f       	mov	r20, r24
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	02 2e       	mov	r0, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <DIO_SetPinDirection+0x1a0>
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	0a 94       	dec	r0
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <DIO_SetPinDirection+0x19c>
    10c6:	80 95       	com	r24
    10c8:	84 23       	and	r24, r20
    10ca:	8c 93       	st	X, r24
    10cc:	29 c0       	rjmp	.+82     	; 0x1120 <DIO_SetPinDirection+0x1fe>
			case PORTC: DDRC_REG &= ~(1<<pin_ID); break;
    10ce:	a4 e3       	ldi	r26, 0x34	; 52
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e4 e3       	ldi	r30, 0x34	; 52
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	48 2f       	mov	r20, r24
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	02 2e       	mov	r0, r18
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <DIO_SetPinDirection+0x1ca>
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	0a 94       	dec	r0
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <DIO_SetPinDirection+0x1c6>
    10f0:	80 95       	com	r24
    10f2:	84 23       	and	r24, r20
    10f4:	8c 93       	st	X, r24
    10f6:	14 c0       	rjmp	.+40     	; 0x1120 <DIO_SetPinDirection+0x1fe>
			case PORTD: DDRD_REG &= ~(1<<pin_ID); break;
    10f8:	a1 e3       	ldi	r26, 0x31	; 49
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e1 e3       	ldi	r30, 0x31	; 49
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	48 2f       	mov	r20, r24
    1104:	8a 81       	ldd	r24, Y+2	; 0x02
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	02 2e       	mov	r0, r18
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <DIO_SetPinDirection+0x1f4>
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	0a 94       	dec	r0
    1118:	e2 f7       	brpl	.-8      	; 0x1112 <DIO_SetPinDirection+0x1f0>
    111a:	80 95       	com	r24
    111c:	84 23       	and	r24, r20
    111e:	8c 93       	st	X, r24

			}
		}
	}

}
    1120:	27 96       	adiw	r28, 0x07	; 7
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	cd bf       	out	0x3d, r28	; 61
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <DIO_SetPinValue>:

void DIO_SetPinValue(DIO_PORT_ID port_ID , DIO_PIN_ID pin_ID , DIO_Value value)
{
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	27 97       	sbiw	r28, 0x07	; 7
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
    1146:	89 83       	std	Y+1, r24	; 0x01
    1148:	6a 83       	std	Y+2, r22	; 0x02
    114a:	4b 83       	std	Y+3, r20	; 0x03
    if(port_ID <= PORTD && pin_ID <=7)
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	84 30       	cpi	r24, 0x04	; 4
    1150:	08 f0       	brcs	.+2      	; 0x1154 <DIO_SetPinValue+0x22>
    1152:	ee c0       	rjmp	.+476    	; 0x1330 <DIO_SetPinValue+0x1fe>
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	88 30       	cpi	r24, 0x08	; 8
    1158:	08 f0       	brcs	.+2      	; 0x115c <DIO_SetPinValue+0x2a>
    115a:	ea c0       	rjmp	.+468    	; 0x1330 <DIO_SetPinValue+0x1fe>
    {
        if(value == HIGH)
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	81 30       	cpi	r24, 0x01	; 1
    1160:	09 f0       	breq	.+2      	; 0x1164 <DIO_SetPinValue+0x32>
    1162:	6f c0       	rjmp	.+222    	; 0x1242 <DIO_SetPinValue+0x110>
        {
            switch(port_ID)
    1164:	89 81       	ldd	r24, Y+1	; 0x01
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	3f 83       	std	Y+7, r19	; 0x07
    116c:	2e 83       	std	Y+6, r18	; 0x06
    116e:	8e 81       	ldd	r24, Y+6	; 0x06
    1170:	9f 81       	ldd	r25, Y+7	; 0x07
    1172:	81 30       	cpi	r24, 0x01	; 1
    1174:	91 05       	cpc	r25, r1
    1176:	49 f1       	breq	.+82     	; 0x11ca <DIO_SetPinValue+0x98>
    1178:	2e 81       	ldd	r18, Y+6	; 0x06
    117a:	3f 81       	ldd	r19, Y+7	; 0x07
    117c:	22 30       	cpi	r18, 0x02	; 2
    117e:	31 05       	cpc	r19, r1
    1180:	2c f4       	brge	.+10     	; 0x118c <DIO_SetPinValue+0x5a>
    1182:	8e 81       	ldd	r24, Y+6	; 0x06
    1184:	9f 81       	ldd	r25, Y+7	; 0x07
    1186:	00 97       	sbiw	r24, 0x00	; 0
    1188:	61 f0       	breq	.+24     	; 0x11a2 <DIO_SetPinValue+0x70>
    118a:	d2 c0       	rjmp	.+420    	; 0x1330 <DIO_SetPinValue+0x1fe>
    118c:	2e 81       	ldd	r18, Y+6	; 0x06
    118e:	3f 81       	ldd	r19, Y+7	; 0x07
    1190:	22 30       	cpi	r18, 0x02	; 2
    1192:	31 05       	cpc	r19, r1
    1194:	71 f1       	breq	.+92     	; 0x11f2 <DIO_SetPinValue+0xc0>
    1196:	8e 81       	ldd	r24, Y+6	; 0x06
    1198:	9f 81       	ldd	r25, Y+7	; 0x07
    119a:	83 30       	cpi	r24, 0x03	; 3
    119c:	91 05       	cpc	r25, r1
    119e:	e9 f1       	breq	.+122    	; 0x121a <DIO_SetPinValue+0xe8>
    11a0:	c7 c0       	rjmp	.+398    	; 0x1330 <DIO_SetPinValue+0x1fe>
            {
            case PORTA : SET_BIT(PORTA_REG , pin_ID); break;
    11a2:	ab e3       	ldi	r26, 0x3B	; 59
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	eb e3       	ldi	r30, 0x3B	; 59
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	48 2f       	mov	r20, r24
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	02 2e       	mov	r0, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <DIO_SetPinValue+0x8e>
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	0a 94       	dec	r0
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <DIO_SetPinValue+0x8a>
    11c4:	84 2b       	or	r24, r20
    11c6:	8c 93       	st	X, r24
    11c8:	b3 c0       	rjmp	.+358    	; 0x1330 <DIO_SetPinValue+0x1fe>
            case PORTB : SET_BIT(PORTB_REG , pin_ID); break;
    11ca:	a8 e3       	ldi	r26, 0x38	; 56
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e8 e3       	ldi	r30, 0x38	; 56
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	48 2f       	mov	r20, r24
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	02 2e       	mov	r0, r18
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <DIO_SetPinValue+0xb6>
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	0a 94       	dec	r0
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <DIO_SetPinValue+0xb2>
    11ec:	84 2b       	or	r24, r20
    11ee:	8c 93       	st	X, r24
    11f0:	9f c0       	rjmp	.+318    	; 0x1330 <DIO_SetPinValue+0x1fe>
            case PORTC : SET_BIT(PORTC_REG , pin_ID); break;
    11f2:	a5 e3       	ldi	r26, 0x35	; 53
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e5 e3       	ldi	r30, 0x35	; 53
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	48 2f       	mov	r20, r24
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	02 2e       	mov	r0, r18
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <DIO_SetPinValue+0xde>
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	0a 94       	dec	r0
    1212:	e2 f7       	brpl	.-8      	; 0x120c <DIO_SetPinValue+0xda>
    1214:	84 2b       	or	r24, r20
    1216:	8c 93       	st	X, r24
    1218:	8b c0       	rjmp	.+278    	; 0x1330 <DIO_SetPinValue+0x1fe>
            case PORTD : SET_BIT(PORTD_REG , pin_ID); break;
    121a:	a2 e3       	ldi	r26, 0x32	; 50
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e2 e3       	ldi	r30, 0x32	; 50
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	48 2f       	mov	r20, r24
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	02 2e       	mov	r0, r18
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <DIO_SetPinValue+0x106>
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	0a 94       	dec	r0
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <DIO_SetPinValue+0x102>
    123c:	84 2b       	or	r24, r20
    123e:	8c 93       	st	X, r24
    1240:	77 c0       	rjmp	.+238    	; 0x1330 <DIO_SetPinValue+0x1fe>
            default: break; // Added default case to handle unexpected port_ID
            }
        }
        else if(value == LOW)
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	88 23       	and	r24, r24
    1246:	09 f0       	breq	.+2      	; 0x124a <DIO_SetPinValue+0x118>
    1248:	73 c0       	rjmp	.+230    	; 0x1330 <DIO_SetPinValue+0x1fe>
        {
            switch(port_ID)
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	3d 83       	std	Y+5, r19	; 0x05
    1252:	2c 83       	std	Y+4, r18	; 0x04
    1254:	8c 81       	ldd	r24, Y+4	; 0x04
    1256:	9d 81       	ldd	r25, Y+5	; 0x05
    1258:	81 30       	cpi	r24, 0x01	; 1
    125a:	91 05       	cpc	r25, r1
    125c:	59 f1       	breq	.+86     	; 0x12b4 <DIO_SetPinValue+0x182>
    125e:	2c 81       	ldd	r18, Y+4	; 0x04
    1260:	3d 81       	ldd	r19, Y+5	; 0x05
    1262:	22 30       	cpi	r18, 0x02	; 2
    1264:	31 05       	cpc	r19, r1
    1266:	2c f4       	brge	.+10     	; 0x1272 <DIO_SetPinValue+0x140>
    1268:	8c 81       	ldd	r24, Y+4	; 0x04
    126a:	9d 81       	ldd	r25, Y+5	; 0x05
    126c:	00 97       	sbiw	r24, 0x00	; 0
    126e:	69 f0       	breq	.+26     	; 0x128a <DIO_SetPinValue+0x158>
    1270:	5f c0       	rjmp	.+190    	; 0x1330 <DIO_SetPinValue+0x1fe>
    1272:	2c 81       	ldd	r18, Y+4	; 0x04
    1274:	3d 81       	ldd	r19, Y+5	; 0x05
    1276:	22 30       	cpi	r18, 0x02	; 2
    1278:	31 05       	cpc	r19, r1
    127a:	89 f1       	breq	.+98     	; 0x12de <DIO_SetPinValue+0x1ac>
    127c:	8c 81       	ldd	r24, Y+4	; 0x04
    127e:	9d 81       	ldd	r25, Y+5	; 0x05
    1280:	83 30       	cpi	r24, 0x03	; 3
    1282:	91 05       	cpc	r25, r1
    1284:	09 f4       	brne	.+2      	; 0x1288 <DIO_SetPinValue+0x156>
    1286:	40 c0       	rjmp	.+128    	; 0x1308 <DIO_SetPinValue+0x1d6>
    1288:	53 c0       	rjmp	.+166    	; 0x1330 <DIO_SetPinValue+0x1fe>
            {
            case PORTA : CLR_BIT(PORTA_REG , pin_ID); break;
    128a:	ab e3       	ldi	r26, 0x3B	; 59
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	eb e3       	ldi	r30, 0x3B	; 59
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	48 2f       	mov	r20, r24
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	02 2e       	mov	r0, r18
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <DIO_SetPinValue+0x176>
    12a4:	88 0f       	add	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	0a 94       	dec	r0
    12aa:	e2 f7       	brpl	.-8      	; 0x12a4 <DIO_SetPinValue+0x172>
    12ac:	80 95       	com	r24
    12ae:	84 23       	and	r24, r20
    12b0:	8c 93       	st	X, r24
    12b2:	3e c0       	rjmp	.+124    	; 0x1330 <DIO_SetPinValue+0x1fe>
            case PORTB : CLR_BIT(PORTB_REG , pin_ID); break;
    12b4:	a8 e3       	ldi	r26, 0x38	; 56
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e8 e3       	ldi	r30, 0x38	; 56
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 2e       	mov	r0, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <DIO_SetPinValue+0x1a0>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	0a 94       	dec	r0
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <DIO_SetPinValue+0x19c>
    12d6:	80 95       	com	r24
    12d8:	84 23       	and	r24, r20
    12da:	8c 93       	st	X, r24
    12dc:	29 c0       	rjmp	.+82     	; 0x1330 <DIO_SetPinValue+0x1fe>
            case PORTC : CLR_BIT(PORTC_REG , pin_ID); break;
    12de:	a5 e3       	ldi	r26, 0x35	; 53
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e5 e3       	ldi	r30, 0x35	; 53
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	48 2f       	mov	r20, r24
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	02 2e       	mov	r0, r18
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <DIO_SetPinValue+0x1ca>
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	0a 94       	dec	r0
    12fe:	e2 f7       	brpl	.-8      	; 0x12f8 <DIO_SetPinValue+0x1c6>
    1300:	80 95       	com	r24
    1302:	84 23       	and	r24, r20
    1304:	8c 93       	st	X, r24
    1306:	14 c0       	rjmp	.+40     	; 0x1330 <DIO_SetPinValue+0x1fe>
            case PORTD : CLR_BIT(PORTD_REG , pin_ID); break;
    1308:	a2 e3       	ldi	r26, 0x32	; 50
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	e2 e3       	ldi	r30, 0x32	; 50
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	48 2f       	mov	r20, r24
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	02 2e       	mov	r0, r18
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <DIO_SetPinValue+0x1f4>
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	0a 94       	dec	r0
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <DIO_SetPinValue+0x1f0>
    132a:	80 95       	com	r24
    132c:	84 23       	and	r24, r20
    132e:	8c 93       	st	X, r24
            default: break; // Added default case to handle unexpected port_ID
            }
        }
    }
}
    1330:	27 96       	adiw	r28, 0x07	; 7
    1332:	0f b6       	in	r0, 0x3f	; 63
    1334:	f8 94       	cli
    1336:	de bf       	out	0x3e, r29	; 62
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	cd bf       	out	0x3d, r28	; 61
    133c:	cf 91       	pop	r28
    133e:	df 91       	pop	r29
    1340:	08 95       	ret

00001342 <DIO_GetPinValue>:
			}
}*/


DIO_Value DIO_GetPinValue(DIO_PORT_ID port_ID , DIO_PIN_ID pin_ID)
{
    1342:	df 93       	push	r29
    1344:	cf 93       	push	r28
    1346:	00 d0       	rcall	.+0      	; 0x1348 <DIO_GetPinValue+0x6>
    1348:	00 d0       	rcall	.+0      	; 0x134a <DIO_GetPinValue+0x8>
    134a:	0f 92       	push	r0
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    1350:	8a 83       	std	Y+2, r24	; 0x02
    1352:	6b 83       	std	Y+3, r22	; 0x03
	DIO_Value PinValue;

	if(port_ID <= PORTD && pin_ID <= PIN7)
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	84 30       	cpi	r24, 0x04	; 4
    1358:	08 f0       	brcs	.+2      	; 0x135c <DIO_GetPinValue+0x1a>
    135a:	6b c0       	rjmp	.+214    	; 0x1432 <DIO_GetPinValue+0xf0>
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	88 30       	cpi	r24, 0x08	; 8
    1360:	08 f0       	brcs	.+2      	; 0x1364 <DIO_GetPinValue+0x22>
    1362:	67 c0       	rjmp	.+206    	; 0x1432 <DIO_GetPinValue+0xf0>
	{

		switch(port_ID)
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	3d 83       	std	Y+5, r19	; 0x05
    136c:	2c 83       	std	Y+4, r18	; 0x04
    136e:	4c 81       	ldd	r20, Y+4	; 0x04
    1370:	5d 81       	ldd	r21, Y+5	; 0x05
    1372:	41 30       	cpi	r20, 0x01	; 1
    1374:	51 05       	cpc	r21, r1
    1376:	41 f1       	breq	.+80     	; 0x13c8 <DIO_GetPinValue+0x86>
    1378:	8c 81       	ldd	r24, Y+4	; 0x04
    137a:	9d 81       	ldd	r25, Y+5	; 0x05
    137c:	82 30       	cpi	r24, 0x02	; 2
    137e:	91 05       	cpc	r25, r1
    1380:	34 f4       	brge	.+12     	; 0x138e <DIO_GetPinValue+0x4c>
    1382:	2c 81       	ldd	r18, Y+4	; 0x04
    1384:	3d 81       	ldd	r19, Y+5	; 0x05
    1386:	21 15       	cp	r18, r1
    1388:	31 05       	cpc	r19, r1
    138a:	61 f0       	breq	.+24     	; 0x13a4 <DIO_GetPinValue+0x62>
    138c:	52 c0       	rjmp	.+164    	; 0x1432 <DIO_GetPinValue+0xf0>
    138e:	4c 81       	ldd	r20, Y+4	; 0x04
    1390:	5d 81       	ldd	r21, Y+5	; 0x05
    1392:	42 30       	cpi	r20, 0x02	; 2
    1394:	51 05       	cpc	r21, r1
    1396:	51 f1       	breq	.+84     	; 0x13ec <DIO_GetPinValue+0xaa>
    1398:	8c 81       	ldd	r24, Y+4	; 0x04
    139a:	9d 81       	ldd	r25, Y+5	; 0x05
    139c:	83 30       	cpi	r24, 0x03	; 3
    139e:	91 05       	cpc	r25, r1
    13a0:	b9 f1       	breq	.+110    	; 0x1410 <DIO_GetPinValue+0xce>
    13a2:	47 c0       	rjmp	.+142    	; 0x1432 <DIO_GetPinValue+0xf0>
				{
				case PORTA : PinValue = GET_BIT(PINA_REG , pin_ID); break;
    13a4:	e9 e3       	ldi	r30, 0x39	; 57
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	88 2f       	mov	r24, r24
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	a9 01       	movw	r20, r18
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <DIO_GetPinValue+0x7a>
    13b8:	55 95       	asr	r21
    13ba:	47 95       	ror	r20
    13bc:	8a 95       	dec	r24
    13be:	e2 f7       	brpl	.-8      	; 0x13b8 <DIO_GetPinValue+0x76>
    13c0:	ca 01       	movw	r24, r20
    13c2:	81 70       	andi	r24, 0x01	; 1
    13c4:	89 83       	std	Y+1, r24	; 0x01
    13c6:	35 c0       	rjmp	.+106    	; 0x1432 <DIO_GetPinValue+0xf0>
				case PORTB : PinValue = GET_BIT(PINB_REG , pin_ID); break;
    13c8:	e6 e3       	ldi	r30, 0x36	; 54
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	88 2f       	mov	r24, r24
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	a9 01       	movw	r20, r18
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <DIO_GetPinValue+0x9e>
    13dc:	55 95       	asr	r21
    13de:	47 95       	ror	r20
    13e0:	8a 95       	dec	r24
    13e2:	e2 f7       	brpl	.-8      	; 0x13dc <DIO_GetPinValue+0x9a>
    13e4:	ca 01       	movw	r24, r20
    13e6:	81 70       	andi	r24, 0x01	; 1
    13e8:	89 83       	std	Y+1, r24	; 0x01
    13ea:	23 c0       	rjmp	.+70     	; 0x1432 <DIO_GetPinValue+0xf0>
				case PORTC : PinValue = GET_BIT(PINC_REG , pin_ID); break;
    13ec:	e3 e3       	ldi	r30, 0x33	; 51
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	88 2f       	mov	r24, r24
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	a9 01       	movw	r20, r18
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <DIO_GetPinValue+0xc2>
    1400:	55 95       	asr	r21
    1402:	47 95       	ror	r20
    1404:	8a 95       	dec	r24
    1406:	e2 f7       	brpl	.-8      	; 0x1400 <DIO_GetPinValue+0xbe>
    1408:	ca 01       	movw	r24, r20
    140a:	81 70       	andi	r24, 0x01	; 1
    140c:	89 83       	std	Y+1, r24	; 0x01
    140e:	11 c0       	rjmp	.+34     	; 0x1432 <DIO_GetPinValue+0xf0>
				case PORTD : PinValue = GET_BIT(PIND_REG , pin_ID); break;
    1410:	e0 e3       	ldi	r30, 0x30	; 48
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	88 2f       	mov	r24, r24
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	a9 01       	movw	r20, r18
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <DIO_GetPinValue+0xe6>
    1424:	55 95       	asr	r21
    1426:	47 95       	ror	r20
    1428:	8a 95       	dec	r24
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <DIO_GetPinValue+0xe2>
    142c:	ca 01       	movw	r24, r20
    142e:	81 70       	andi	r24, 0x01	; 1
    1430:	89 83       	std	Y+1, r24	; 0x01

				}
		}

		return PinValue;
    1432:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	cf 91       	pop	r28
    1440:	df 91       	pop	r29
    1442:	08 95       	ret

00001444 <KEYPAD_getPressedKey>:
 |                               Functions Definitions                          |
 |______________________________________________________________________________|
 */

u8 KEYPAD_getPressedKey(void)
{
    1444:	df 93       	push	r29
    1446:	cf 93       	push	r28
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
    144c:	60 97       	sbiw	r28, 0x10	; 16
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	f8 94       	cli
    1452:	de bf       	out	0x3e, r29	; 62
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	cd bf       	out	0x3d, r28	; 61
	u8 col,row;
	DIO_SetPinDirection(PORTC, PIN0, input);
    1458:	82 e0       	ldi	r24, 0x02	; 2
    145a:	60 e0       	ldi	r22, 0x00	; 0
    145c:	40 e0       	ldi	r20, 0x00	; 0
    145e:	0e 94 91 07 	call	0xf22	; 0xf22 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTC, PIN1, input);
    1462:	82 e0       	ldi	r24, 0x02	; 2
    1464:	61 e0       	ldi	r22, 0x01	; 1
    1466:	40 e0       	ldi	r20, 0x00	; 0
    1468:	0e 94 91 07 	call	0xf22	; 0xf22 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTC, PIN2, input);
    146c:	82 e0       	ldi	r24, 0x02	; 2
    146e:	62 e0       	ldi	r22, 0x02	; 2
    1470:	40 e0       	ldi	r20, 0x00	; 0
    1472:	0e 94 91 07 	call	0xf22	; 0xf22 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTC, PIN3, input);
    1476:	82 e0       	ldi	r24, 0x02	; 2
    1478:	63 e0       	ldi	r22, 0x03	; 3
    147a:	40 e0       	ldi	r20, 0x00	; 0
    147c:	0e 94 91 07 	call	0xf22	; 0xf22 <DIO_SetPinDirection>

	DIO_SetPinDirection(PORTC,PIN4, input);
    1480:	82 e0       	ldi	r24, 0x02	; 2
    1482:	64 e0       	ldi	r22, 0x04	; 4
    1484:	40 e0       	ldi	r20, 0x00	; 0
    1486:	0e 94 91 07 	call	0xf22	; 0xf22 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTC, PIN5, input);
    148a:	82 e0       	ldi	r24, 0x02	; 2
    148c:	65 e0       	ldi	r22, 0x05	; 5
    148e:	40 e0       	ldi	r20, 0x00	; 0
    1490:	0e 94 91 07 	call	0xf22	; 0xf22 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTC, PIN6, input);
    1494:	82 e0       	ldi	r24, 0x02	; 2
    1496:	66 e0       	ldi	r22, 0x06	; 6
    1498:	40 e0       	ldi	r20, 0x00	; 0
    149a:	0e 94 91 07 	call	0xf22	; 0xf22 <DIO_SetPinDirection>
#if(KEYPAD_NUM_COLS == 4) //to characterize it between other keypads (4*3,4*6)
	DIO_SetPinDirection(PORTC, PIN7, input);
    149e:	82 e0       	ldi	r24, 0x02	; 2
    14a0:	67 e0       	ldi	r22, 0x07	; 7
    14a2:	40 e0       	ldi	r20, 0x00	; 0
    14a4:	0e 94 91 07 	call	0xf22	; 0xf22 <DIO_SetPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    14a8:	1f 86       	std	Y+15, r1	; 0x0f
    14aa:	af c0       	rjmp	.+350    	; 0x160a <KEYPAD_getPressedKey+0x1c6>
		{
			/*
			 -> Each time setup the direction for all keypad port as input pins,
			    except this row will be output pin
			 */
			DIO_SetPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,output);
    14ac:	82 e0       	ldi	r24, 0x02	; 2
    14ae:	6f 85       	ldd	r22, Y+15	; 0x0f
    14b0:	41 e0       	ldi	r20, 0x01	; 1
    14b2:	0e 94 91 07 	call	0xf22	; 0xf22 <DIO_SetPinDirection>

			/* Set/Clear the row output pin */
			DIO_SetPinValue(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    14b6:	82 e0       	ldi	r24, 0x02	; 2
    14b8:	6f 85       	ldd	r22, Y+15	; 0x0f
    14ba:	40 e0       	ldi	r20, 0x00	; 0
    14bc:	0e 94 99 08 	call	0x1132	; 0x1132 <DIO_SetPinValue>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    14c0:	18 8a       	std	Y+16, r1	; 0x10
    14c2:	26 c0       	rjmp	.+76     	; 0x1510 <KEYPAD_getPressedKey+0xcc>
			{
				/* Check if the switch is pressed in this column */
				if(DIO_GetPinValue(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    14c4:	88 89       	ldd	r24, Y+16	; 0x10
    14c6:	98 2f       	mov	r25, r24
    14c8:	9c 5f       	subi	r25, 0xFC	; 252
    14ca:	82 e0       	ldi	r24, 0x02	; 2
    14cc:	69 2f       	mov	r22, r25
    14ce:	0e 94 a1 09 	call	0x1342	; 0x1342 <DIO_GetPinValue>
    14d2:	88 23       	and	r24, r24
    14d4:	d1 f4       	brne	.+52     	; 0x150a <KEYPAD_getPressedKey+0xc6>
				{
					return KEYPAD_Buttons_Arr [row][col];
    14d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    14d8:	48 2f       	mov	r20, r24
    14da:	50 e0       	ldi	r21, 0x00	; 0
    14dc:	88 89       	ldd	r24, Y+16	; 0x10
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	ca 01       	movw	r24, r20
    14e4:	88 0f       	add	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	82 0f       	add	r24, r18
    14ee:	93 1f       	adc	r25, r19
    14f0:	fc 01       	movw	r30, r24
    14f2:	e0 5e       	subi	r30, 0xE0	; 224
    14f4:	fd 4f       	sbci	r31, 0xFD	; 253
    14f6:	80 81       	ld	r24, Z
			}
			DIO_SetPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,input);
			_delay_ms(10); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
    14f8:	60 96       	adiw	r28, 0x10	; 16
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	f8 94       	cli
    14fe:	de bf       	out	0x3e, r29	; 62
    1500:	0f be       	out	0x3f, r0	; 63
    1502:	cd bf       	out	0x3d, r28	; 61
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	08 95       	ret
			DIO_SetPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,output);

			/* Set/Clear the row output pin */
			DIO_SetPinValue(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    150a:	88 89       	ldd	r24, Y+16	; 0x10
    150c:	8f 5f       	subi	r24, 0xFF	; 255
    150e:	88 8b       	std	Y+16, r24	; 0x10
    1510:	88 89       	ldd	r24, Y+16	; 0x10
    1512:	84 30       	cpi	r24, 0x04	; 4
    1514:	b8 f2       	brcs	.-82     	; 0x14c4 <KEYPAD_getPressedKey+0x80>
				if(DIO_GetPinValue(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
				{
					return KEYPAD_Buttons_Arr [row][col];
				}
			}
			DIO_SetPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,input);
    1516:	82 e0       	ldi	r24, 0x02	; 2
    1518:	6f 85       	ldd	r22, Y+15	; 0x0f
    151a:	40 e0       	ldi	r20, 0x00	; 0
    151c:	0e 94 91 07 	call	0xf22	; 0xf22 <DIO_SetPinDirection>
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	a0 e2       	ldi	r26, 0x20	; 32
    1526:	b1 e4       	ldi	r27, 0x41	; 65
    1528:	8b 87       	std	Y+11, r24	; 0x0b
    152a:	9c 87       	std	Y+12, r25	; 0x0c
    152c:	ad 87       	std	Y+13, r26	; 0x0d
    152e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1530:	6b 85       	ldd	r22, Y+11	; 0x0b
    1532:	7c 85       	ldd	r23, Y+12	; 0x0c
    1534:	8d 85       	ldd	r24, Y+13	; 0x0d
    1536:	9e 85       	ldd	r25, Y+14	; 0x0e
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	4a e7       	ldi	r20, 0x7A	; 122
    153e:	55 e4       	ldi	r21, 0x45	; 69
    1540:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	8f 83       	std	Y+7, r24	; 0x07
    154a:	98 87       	std	Y+8, r25	; 0x08
    154c:	a9 87       	std	Y+9, r26	; 0x09
    154e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1550:	6f 81       	ldd	r22, Y+7	; 0x07
    1552:	78 85       	ldd	r23, Y+8	; 0x08
    1554:	89 85       	ldd	r24, Y+9	; 0x09
    1556:	9a 85       	ldd	r25, Y+10	; 0x0a
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	40 e8       	ldi	r20, 0x80	; 128
    155e:	5f e3       	ldi	r21, 0x3F	; 63
    1560:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    1564:	88 23       	and	r24, r24
    1566:	2c f4       	brge	.+10     	; 0x1572 <KEYPAD_getPressedKey+0x12e>
		__ticks = 1;
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	9e 83       	std	Y+6, r25	; 0x06
    156e:	8d 83       	std	Y+5, r24	; 0x05
    1570:	3f c0       	rjmp	.+126    	; 0x15f0 <KEYPAD_getPressedKey+0x1ac>
	else if (__tmp > 65535)
    1572:	6f 81       	ldd	r22, Y+7	; 0x07
    1574:	78 85       	ldd	r23, Y+8	; 0x08
    1576:	89 85       	ldd	r24, Y+9	; 0x09
    1578:	9a 85       	ldd	r25, Y+10	; 0x0a
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	3f ef       	ldi	r19, 0xFF	; 255
    157e:	4f e7       	ldi	r20, 0x7F	; 127
    1580:	57 e4       	ldi	r21, 0x47	; 71
    1582:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    1586:	18 16       	cp	r1, r24
    1588:	4c f5       	brge	.+82     	; 0x15dc <KEYPAD_getPressedKey+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    158a:	6b 85       	ldd	r22, Y+11	; 0x0b
    158c:	7c 85       	ldd	r23, Y+12	; 0x0c
    158e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1590:	9e 85       	ldd	r25, Y+14	; 0x0e
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	40 e2       	ldi	r20, 0x20	; 32
    1598:	51 e4       	ldi	r21, 0x41	; 65
    159a:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	bc 01       	movw	r22, r24
    15a4:	cd 01       	movw	r24, r26
    15a6:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	9e 83       	std	Y+6, r25	; 0x06
    15b0:	8d 83       	std	Y+5, r24	; 0x05
    15b2:	0f c0       	rjmp	.+30     	; 0x15d2 <KEYPAD_getPressedKey+0x18e>
    15b4:	80 e9       	ldi	r24, 0x90	; 144
    15b6:	91 e0       	ldi	r25, 0x01	; 1
    15b8:	9c 83       	std	Y+4, r25	; 0x04
    15ba:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	9c 81       	ldd	r25, Y+4	; 0x04
    15c0:	01 97       	sbiw	r24, 0x01	; 1
    15c2:	f1 f7       	brne	.-4      	; 0x15c0 <KEYPAD_getPressedKey+0x17c>
    15c4:	9c 83       	std	Y+4, r25	; 0x04
    15c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15c8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ca:	9e 81       	ldd	r25, Y+6	; 0x06
    15cc:	01 97       	sbiw	r24, 0x01	; 1
    15ce:	9e 83       	std	Y+6, r25	; 0x06
    15d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d2:	8d 81       	ldd	r24, Y+5	; 0x05
    15d4:	9e 81       	ldd	r25, Y+6	; 0x06
    15d6:	00 97       	sbiw	r24, 0x00	; 0
    15d8:	69 f7       	brne	.-38     	; 0x15b4 <KEYPAD_getPressedKey+0x170>
    15da:	14 c0       	rjmp	.+40     	; 0x1604 <KEYPAD_getPressedKey+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15dc:	6f 81       	ldd	r22, Y+7	; 0x07
    15de:	78 85       	ldd	r23, Y+8	; 0x08
    15e0:	89 85       	ldd	r24, Y+9	; 0x09
    15e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e4:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	9e 83       	std	Y+6, r25	; 0x06
    15ee:	8d 83       	std	Y+5, r24	; 0x05
    15f0:	8d 81       	ldd	r24, Y+5	; 0x05
    15f2:	9e 81       	ldd	r25, Y+6	; 0x06
    15f4:	9a 83       	std	Y+2, r25	; 0x02
    15f6:	89 83       	std	Y+1, r24	; 0x01
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	9a 81       	ldd	r25, Y+2	; 0x02
    15fc:	01 97       	sbiw	r24, 0x01	; 1
    15fe:	f1 f7       	brne	.-4      	; 0x15fc <KEYPAD_getPressedKey+0x1b8>
    1600:	9a 83       	std	Y+2, r25	; 0x02
    1602:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4) //to characterize it between other keypads (4*3,4*6)
	DIO_SetPinDirection(PORTC, PIN7, input);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1604:	8f 85       	ldd	r24, Y+15	; 0x0f
    1606:	8f 5f       	subi	r24, 0xFF	; 255
    1608:	8f 87       	std	Y+15, r24	; 0x0f
    160a:	8f 85       	ldd	r24, Y+15	; 0x0f
    160c:	84 30       	cpi	r24, 0x04	; 4
    160e:	08 f4       	brcc	.+2      	; 0x1612 <KEYPAD_getPressedKey+0x1ce>
    1610:	4d cf       	rjmp	.-358    	; 0x14ac <KEYPAD_getPressedKey+0x68>
    1612:	4a cf       	rjmp	.-364    	; 0x14a8 <KEYPAD_getPressedKey+0x64>

00001614 <LCD_Initilaize>:

static u8 InitStepFinished = 0;


void LCD_Initilaize(void)//initialize the LCD
{
    1614:	df 93       	push	r29
    1616:	cf 93       	push	r28
    1618:	cd b7       	in	r28, 0x3d	; 61
    161a:	de b7       	in	r29, 0x3e	; 62
    161c:	e8 97       	sbiw	r28, 0x38	; 56
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	f8 94       	cli
    1622:	de bf       	out	0x3e, r29	; 62
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPortDirection(PORTA , output);
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	61 e0       	ldi	r22, 0x01	; 1
    162c:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_SetPortDirection>
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	a0 ef       	ldi	r26, 0xF0	; 240
    1636:	b1 e4       	ldi	r27, 0x41	; 65
    1638:	8d ab       	std	Y+53, r24	; 0x35
    163a:	9e ab       	std	Y+54, r25	; 0x36
    163c:	af ab       	std	Y+55, r26	; 0x37
    163e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1640:	6d a9       	ldd	r22, Y+53	; 0x35
    1642:	7e a9       	ldd	r23, Y+54	; 0x36
    1644:	8f a9       	ldd	r24, Y+55	; 0x37
    1646:	98 ad       	ldd	r25, Y+56	; 0x38
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	4a e7       	ldi	r20, 0x7A	; 122
    164e:	55 e4       	ldi	r21, 0x45	; 69
    1650:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	89 ab       	std	Y+49, r24	; 0x31
    165a:	9a ab       	std	Y+50, r25	; 0x32
    165c:	ab ab       	std	Y+51, r26	; 0x33
    165e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1660:	69 a9       	ldd	r22, Y+49	; 0x31
    1662:	7a a9       	ldd	r23, Y+50	; 0x32
    1664:	8b a9       	ldd	r24, Y+51	; 0x33
    1666:	9c a9       	ldd	r25, Y+52	; 0x34
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	40 e8       	ldi	r20, 0x80	; 128
    166e:	5f e3       	ldi	r21, 0x3F	; 63
    1670:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    1674:	88 23       	and	r24, r24
    1676:	2c f4       	brge	.+10     	; 0x1682 <LCD_Initilaize+0x6e>
		__ticks = 1;
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	98 ab       	std	Y+48, r25	; 0x30
    167e:	8f a7       	std	Y+47, r24	; 0x2f
    1680:	3f c0       	rjmp	.+126    	; 0x1700 <LCD_Initilaize+0xec>
	else if (__tmp > 65535)
    1682:	69 a9       	ldd	r22, Y+49	; 0x31
    1684:	7a a9       	ldd	r23, Y+50	; 0x32
    1686:	8b a9       	ldd	r24, Y+51	; 0x33
    1688:	9c a9       	ldd	r25, Y+52	; 0x34
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	3f ef       	ldi	r19, 0xFF	; 255
    168e:	4f e7       	ldi	r20, 0x7F	; 127
    1690:	57 e4       	ldi	r21, 0x47	; 71
    1692:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    1696:	18 16       	cp	r1, r24
    1698:	4c f5       	brge	.+82     	; 0x16ec <LCD_Initilaize+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    169a:	6d a9       	ldd	r22, Y+53	; 0x35
    169c:	7e a9       	ldd	r23, Y+54	; 0x36
    169e:	8f a9       	ldd	r24, Y+55	; 0x37
    16a0:	98 ad       	ldd	r25, Y+56	; 0x38
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	40 e2       	ldi	r20, 0x20	; 32
    16a8:	51 e4       	ldi	r21, 0x41	; 65
    16aa:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	bc 01       	movw	r22, r24
    16b4:	cd 01       	movw	r24, r26
    16b6:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	98 ab       	std	Y+48, r25	; 0x30
    16c0:	8f a7       	std	Y+47, r24	; 0x2f
    16c2:	0f c0       	rjmp	.+30     	; 0x16e2 <LCD_Initilaize+0xce>
    16c4:	80 e9       	ldi	r24, 0x90	; 144
    16c6:	91 e0       	ldi	r25, 0x01	; 1
    16c8:	9e a7       	std	Y+46, r25	; 0x2e
    16ca:	8d a7       	std	Y+45, r24	; 0x2d
    16cc:	8d a5       	ldd	r24, Y+45	; 0x2d
    16ce:	9e a5       	ldd	r25, Y+46	; 0x2e
    16d0:	01 97       	sbiw	r24, 0x01	; 1
    16d2:	f1 f7       	brne	.-4      	; 0x16d0 <LCD_Initilaize+0xbc>
    16d4:	9e a7       	std	Y+46, r25	; 0x2e
    16d6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    16da:	98 a9       	ldd	r25, Y+48	; 0x30
    16dc:	01 97       	sbiw	r24, 0x01	; 1
    16de:	98 ab       	std	Y+48, r25	; 0x30
    16e0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    16e4:	98 a9       	ldd	r25, Y+48	; 0x30
    16e6:	00 97       	sbiw	r24, 0x00	; 0
    16e8:	69 f7       	brne	.-38     	; 0x16c4 <LCD_Initilaize+0xb0>
    16ea:	14 c0       	rjmp	.+40     	; 0x1714 <LCD_Initilaize+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ec:	69 a9       	ldd	r22, Y+49	; 0x31
    16ee:	7a a9       	ldd	r23, Y+50	; 0x32
    16f0:	8b a9       	ldd	r24, Y+51	; 0x33
    16f2:	9c a9       	ldd	r25, Y+52	; 0x34
    16f4:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	98 ab       	std	Y+48, r25	; 0x30
    16fe:	8f a7       	std	Y+47, r24	; 0x2f
    1700:	8f a5       	ldd	r24, Y+47	; 0x2f
    1702:	98 a9       	ldd	r25, Y+48	; 0x30
    1704:	9c a7       	std	Y+44, r25	; 0x2c
    1706:	8b a7       	std	Y+43, r24	; 0x2b
    1708:	8b a5       	ldd	r24, Y+43	; 0x2b
    170a:	9c a5       	ldd	r25, Y+44	; 0x2c
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	f1 f7       	brne	.-4      	; 0x170c <LCD_Initilaize+0xf8>
    1710:	9c a7       	std	Y+44, r25	; 0x2c
    1712:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(30);

	LCD_WriteCmd(0x20); //0010 0000 (LCD 4-BIT mode)
    1714:	80 e2       	ldi	r24, 0x20	; 32
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <LCD_WriteCmd>
	LCD_WriteCmd(0x20); //0010 0000 (repeat)
    171c:	80 e2       	ldi	r24, 0x20	; 32
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <LCD_WriteCmd>
	LCD_WriteCmd(0x80); //1000 0000 (2-line display)
    1724:	80 e8       	ldi	r24, 0x80	; 128
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <LCD_WriteCmd>
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	a0 e8       	ldi	r26, 0x80	; 128
    1732:	bf e3       	ldi	r27, 0x3F	; 63
    1734:	8f a3       	std	Y+39, r24	; 0x27
    1736:	98 a7       	std	Y+40, r25	; 0x28
    1738:	a9 a7       	std	Y+41, r26	; 0x29
    173a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    173c:	6f a1       	ldd	r22, Y+39	; 0x27
    173e:	78 a5       	ldd	r23, Y+40	; 0x28
    1740:	89 a5       	ldd	r24, Y+41	; 0x29
    1742:	9a a5       	ldd	r25, Y+42	; 0x2a
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	4a e7       	ldi	r20, 0x7A	; 122
    174a:	55 e4       	ldi	r21, 0x45	; 69
    174c:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	8b a3       	std	Y+35, r24	; 0x23
    1756:	9c a3       	std	Y+36, r25	; 0x24
    1758:	ad a3       	std	Y+37, r26	; 0x25
    175a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    175c:	6b a1       	ldd	r22, Y+35	; 0x23
    175e:	7c a1       	ldd	r23, Y+36	; 0x24
    1760:	8d a1       	ldd	r24, Y+37	; 0x25
    1762:	9e a1       	ldd	r25, Y+38	; 0x26
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	40 e8       	ldi	r20, 0x80	; 128
    176a:	5f e3       	ldi	r21, 0x3F	; 63
    176c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    1770:	88 23       	and	r24, r24
    1772:	2c f4       	brge	.+10     	; 0x177e <LCD_Initilaize+0x16a>
		__ticks = 1;
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	9a a3       	std	Y+34, r25	; 0x22
    177a:	89 a3       	std	Y+33, r24	; 0x21
    177c:	3f c0       	rjmp	.+126    	; 0x17fc <LCD_Initilaize+0x1e8>
	else if (__tmp > 65535)
    177e:	6b a1       	ldd	r22, Y+35	; 0x23
    1780:	7c a1       	ldd	r23, Y+36	; 0x24
    1782:	8d a1       	ldd	r24, Y+37	; 0x25
    1784:	9e a1       	ldd	r25, Y+38	; 0x26
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	3f ef       	ldi	r19, 0xFF	; 255
    178a:	4f e7       	ldi	r20, 0x7F	; 127
    178c:	57 e4       	ldi	r21, 0x47	; 71
    178e:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    1792:	18 16       	cp	r1, r24
    1794:	4c f5       	brge	.+82     	; 0x17e8 <LCD_Initilaize+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1796:	6f a1       	ldd	r22, Y+39	; 0x27
    1798:	78 a5       	ldd	r23, Y+40	; 0x28
    179a:	89 a5       	ldd	r24, Y+41	; 0x29
    179c:	9a a5       	ldd	r25, Y+42	; 0x2a
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	40 e2       	ldi	r20, 0x20	; 32
    17a4:	51 e4       	ldi	r21, 0x41	; 65
    17a6:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    17aa:	dc 01       	movw	r26, r24
    17ac:	cb 01       	movw	r24, r22
    17ae:	bc 01       	movw	r22, r24
    17b0:	cd 01       	movw	r24, r26
    17b2:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	9a a3       	std	Y+34, r25	; 0x22
    17bc:	89 a3       	std	Y+33, r24	; 0x21
    17be:	0f c0       	rjmp	.+30     	; 0x17de <LCD_Initilaize+0x1ca>
    17c0:	80 e9       	ldi	r24, 0x90	; 144
    17c2:	91 e0       	ldi	r25, 0x01	; 1
    17c4:	98 a3       	std	Y+32, r25	; 0x20
    17c6:	8f 8f       	std	Y+31, r24	; 0x1f
    17c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17ca:	98 a1       	ldd	r25, Y+32	; 0x20
    17cc:	01 97       	sbiw	r24, 0x01	; 1
    17ce:	f1 f7       	brne	.-4      	; 0x17cc <LCD_Initilaize+0x1b8>
    17d0:	98 a3       	std	Y+32, r25	; 0x20
    17d2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d4:	89 a1       	ldd	r24, Y+33	; 0x21
    17d6:	9a a1       	ldd	r25, Y+34	; 0x22
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	9a a3       	std	Y+34, r25	; 0x22
    17dc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17de:	89 a1       	ldd	r24, Y+33	; 0x21
    17e0:	9a a1       	ldd	r25, Y+34	; 0x22
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	69 f7       	brne	.-38     	; 0x17c0 <LCD_Initilaize+0x1ac>
    17e6:	14 c0       	rjmp	.+40     	; 0x1810 <LCD_Initilaize+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e8:	6b a1       	ldd	r22, Y+35	; 0x23
    17ea:	7c a1       	ldd	r23, Y+36	; 0x24
    17ec:	8d a1       	ldd	r24, Y+37	; 0x25
    17ee:	9e a1       	ldd	r25, Y+38	; 0x26
    17f0:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	9a a3       	std	Y+34, r25	; 0x22
    17fa:	89 a3       	std	Y+33, r24	; 0x21
    17fc:	89 a1       	ldd	r24, Y+33	; 0x21
    17fe:	9a a1       	ldd	r25, Y+34	; 0x22
    1800:	9e 8f       	std	Y+30, r25	; 0x1e
    1802:	8d 8f       	std	Y+29, r24	; 0x1d
    1804:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1806:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	f1 f7       	brne	.-4      	; 0x1808 <LCD_Initilaize+0x1f4>
    180c:	9e 8f       	std	Y+30, r25	; 0x1e
    180e:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1);

	LCD_WriteCmd(0x00); //next command
    1810:	80 e0       	ldi	r24, 0x00	; 0
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <LCD_WriteCmd>
	LCD_WriteCmd(0xF0); //1DCB, to turn on the display,cursor,and blinking
    1818:	80 ef       	ldi	r24, 0xF0	; 240
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <LCD_WriteCmd>
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	a0 e8       	ldi	r26, 0x80	; 128
    1826:	bf e3       	ldi	r27, 0x3F	; 63
    1828:	89 8f       	std	Y+25, r24	; 0x19
    182a:	9a 8f       	std	Y+26, r25	; 0x1a
    182c:	ab 8f       	std	Y+27, r26	; 0x1b
    182e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1830:	69 8d       	ldd	r22, Y+25	; 0x19
    1832:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1834:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1836:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	4a e7       	ldi	r20, 0x7A	; 122
    183e:	55 e4       	ldi	r21, 0x45	; 69
    1840:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	8d 8b       	std	Y+21, r24	; 0x15
    184a:	9e 8b       	std	Y+22, r25	; 0x16
    184c:	af 8b       	std	Y+23, r26	; 0x17
    184e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1850:	6d 89       	ldd	r22, Y+21	; 0x15
    1852:	7e 89       	ldd	r23, Y+22	; 0x16
    1854:	8f 89       	ldd	r24, Y+23	; 0x17
    1856:	98 8d       	ldd	r25, Y+24	; 0x18
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	40 e8       	ldi	r20, 0x80	; 128
    185e:	5f e3       	ldi	r21, 0x3F	; 63
    1860:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    1864:	88 23       	and	r24, r24
    1866:	2c f4       	brge	.+10     	; 0x1872 <LCD_Initilaize+0x25e>
		__ticks = 1;
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	9c 8b       	std	Y+20, r25	; 0x14
    186e:	8b 8b       	std	Y+19, r24	; 0x13
    1870:	3f c0       	rjmp	.+126    	; 0x18f0 <LCD_Initilaize+0x2dc>
	else if (__tmp > 65535)
    1872:	6d 89       	ldd	r22, Y+21	; 0x15
    1874:	7e 89       	ldd	r23, Y+22	; 0x16
    1876:	8f 89       	ldd	r24, Y+23	; 0x17
    1878:	98 8d       	ldd	r25, Y+24	; 0x18
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	3f ef       	ldi	r19, 0xFF	; 255
    187e:	4f e7       	ldi	r20, 0x7F	; 127
    1880:	57 e4       	ldi	r21, 0x47	; 71
    1882:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    1886:	18 16       	cp	r1, r24
    1888:	4c f5       	brge	.+82     	; 0x18dc <LCD_Initilaize+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    188a:	69 8d       	ldd	r22, Y+25	; 0x19
    188c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    188e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1890:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	40 e2       	ldi	r20, 0x20	; 32
    1898:	51 e4       	ldi	r21, 0x41	; 65
    189a:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	bc 01       	movw	r22, r24
    18a4:	cd 01       	movw	r24, r26
    18a6:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	9c 8b       	std	Y+20, r25	; 0x14
    18b0:	8b 8b       	std	Y+19, r24	; 0x13
    18b2:	0f c0       	rjmp	.+30     	; 0x18d2 <LCD_Initilaize+0x2be>
    18b4:	80 e9       	ldi	r24, 0x90	; 144
    18b6:	91 e0       	ldi	r25, 0x01	; 1
    18b8:	9a 8b       	std	Y+18, r25	; 0x12
    18ba:	89 8b       	std	Y+17, r24	; 0x11
    18bc:	89 89       	ldd	r24, Y+17	; 0x11
    18be:	9a 89       	ldd	r25, Y+18	; 0x12
    18c0:	01 97       	sbiw	r24, 0x01	; 1
    18c2:	f1 f7       	brne	.-4      	; 0x18c0 <LCD_Initilaize+0x2ac>
    18c4:	9a 8b       	std	Y+18, r25	; 0x12
    18c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c8:	8b 89       	ldd	r24, Y+19	; 0x13
    18ca:	9c 89       	ldd	r25, Y+20	; 0x14
    18cc:	01 97       	sbiw	r24, 0x01	; 1
    18ce:	9c 8b       	std	Y+20, r25	; 0x14
    18d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d2:	8b 89       	ldd	r24, Y+19	; 0x13
    18d4:	9c 89       	ldd	r25, Y+20	; 0x14
    18d6:	00 97       	sbiw	r24, 0x00	; 0
    18d8:	69 f7       	brne	.-38     	; 0x18b4 <LCD_Initilaize+0x2a0>
    18da:	14 c0       	rjmp	.+40     	; 0x1904 <LCD_Initilaize+0x2f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18dc:	6d 89       	ldd	r22, Y+21	; 0x15
    18de:	7e 89       	ldd	r23, Y+22	; 0x16
    18e0:	8f 89       	ldd	r24, Y+23	; 0x17
    18e2:	98 8d       	ldd	r25, Y+24	; 0x18
    18e4:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	9c 8b       	std	Y+20, r25	; 0x14
    18ee:	8b 8b       	std	Y+19, r24	; 0x13
    18f0:	8b 89       	ldd	r24, Y+19	; 0x13
    18f2:	9c 89       	ldd	r25, Y+20	; 0x14
    18f4:	98 8b       	std	Y+16, r25	; 0x10
    18f6:	8f 87       	std	Y+15, r24	; 0x0f
    18f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    18fa:	98 89       	ldd	r25, Y+16	; 0x10
    18fc:	01 97       	sbiw	r24, 0x01	; 1
    18fe:	f1 f7       	brne	.-4      	; 0x18fc <LCD_Initilaize+0x2e8>
    1900:	98 8b       	std	Y+16, r25	; 0x10
    1902:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	LCD_WriteCmd(0x00);  //next command
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <LCD_WriteCmd>
	LCD_WriteCmd(0x01); //for display clear as datasheet
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <LCD_WriteCmd>
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	a0 e0       	ldi	r26, 0x00	; 0
    191a:	b0 e4       	ldi	r27, 0x40	; 64
    191c:	8b 87       	std	Y+11, r24	; 0x0b
    191e:	9c 87       	std	Y+12, r25	; 0x0c
    1920:	ad 87       	std	Y+13, r26	; 0x0d
    1922:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1924:	6b 85       	ldd	r22, Y+11	; 0x0b
    1926:	7c 85       	ldd	r23, Y+12	; 0x0c
    1928:	8d 85       	ldd	r24, Y+13	; 0x0d
    192a:	9e 85       	ldd	r25, Y+14	; 0x0e
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	4a e7       	ldi	r20, 0x7A	; 122
    1932:	55 e4       	ldi	r21, 0x45	; 69
    1934:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	8f 83       	std	Y+7, r24	; 0x07
    193e:	98 87       	std	Y+8, r25	; 0x08
    1940:	a9 87       	std	Y+9, r26	; 0x09
    1942:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1944:	6f 81       	ldd	r22, Y+7	; 0x07
    1946:	78 85       	ldd	r23, Y+8	; 0x08
    1948:	89 85       	ldd	r24, Y+9	; 0x09
    194a:	9a 85       	ldd	r25, Y+10	; 0x0a
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	40 e8       	ldi	r20, 0x80	; 128
    1952:	5f e3       	ldi	r21, 0x3F	; 63
    1954:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    1958:	88 23       	and	r24, r24
    195a:	2c f4       	brge	.+10     	; 0x1966 <LCD_Initilaize+0x352>
		__ticks = 1;
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	9e 83       	std	Y+6, r25	; 0x06
    1962:	8d 83       	std	Y+5, r24	; 0x05
    1964:	3f c0       	rjmp	.+126    	; 0x19e4 <LCD_Initilaize+0x3d0>
	else if (__tmp > 65535)
    1966:	6f 81       	ldd	r22, Y+7	; 0x07
    1968:	78 85       	ldd	r23, Y+8	; 0x08
    196a:	89 85       	ldd	r24, Y+9	; 0x09
    196c:	9a 85       	ldd	r25, Y+10	; 0x0a
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	3f ef       	ldi	r19, 0xFF	; 255
    1972:	4f e7       	ldi	r20, 0x7F	; 127
    1974:	57 e4       	ldi	r21, 0x47	; 71
    1976:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    197a:	18 16       	cp	r1, r24
    197c:	4c f5       	brge	.+82     	; 0x19d0 <LCD_Initilaize+0x3bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    197e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1980:	7c 85       	ldd	r23, Y+12	; 0x0c
    1982:	8d 85       	ldd	r24, Y+13	; 0x0d
    1984:	9e 85       	ldd	r25, Y+14	; 0x0e
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	40 e2       	ldi	r20, 0x20	; 32
    198c:	51 e4       	ldi	r21, 0x41	; 65
    198e:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	bc 01       	movw	r22, r24
    1998:	cd 01       	movw	r24, r26
    199a:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	9e 83       	std	Y+6, r25	; 0x06
    19a4:	8d 83       	std	Y+5, r24	; 0x05
    19a6:	0f c0       	rjmp	.+30     	; 0x19c6 <LCD_Initilaize+0x3b2>
    19a8:	80 e9       	ldi	r24, 0x90	; 144
    19aa:	91 e0       	ldi	r25, 0x01	; 1
    19ac:	9c 83       	std	Y+4, r25	; 0x04
    19ae:	8b 83       	std	Y+3, r24	; 0x03
    19b0:	8b 81       	ldd	r24, Y+3	; 0x03
    19b2:	9c 81       	ldd	r25, Y+4	; 0x04
    19b4:	01 97       	sbiw	r24, 0x01	; 1
    19b6:	f1 f7       	brne	.-4      	; 0x19b4 <LCD_Initilaize+0x3a0>
    19b8:	9c 83       	std	Y+4, r25	; 0x04
    19ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19bc:	8d 81       	ldd	r24, Y+5	; 0x05
    19be:	9e 81       	ldd	r25, Y+6	; 0x06
    19c0:	01 97       	sbiw	r24, 0x01	; 1
    19c2:	9e 83       	std	Y+6, r25	; 0x06
    19c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c6:	8d 81       	ldd	r24, Y+5	; 0x05
    19c8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	69 f7       	brne	.-38     	; 0x19a8 <LCD_Initilaize+0x394>
    19ce:	14 c0       	rjmp	.+40     	; 0x19f8 <LCD_Initilaize+0x3e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d0:	6f 81       	ldd	r22, Y+7	; 0x07
    19d2:	78 85       	ldd	r23, Y+8	; 0x08
    19d4:	89 85       	ldd	r24, Y+9	; 0x09
    19d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d8:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    19dc:	dc 01       	movw	r26, r24
    19de:	cb 01       	movw	r24, r22
    19e0:	9e 83       	std	Y+6, r25	; 0x06
    19e2:	8d 83       	std	Y+5, r24	; 0x05
    19e4:	8d 81       	ldd	r24, Y+5	; 0x05
    19e6:	9e 81       	ldd	r25, Y+6	; 0x06
    19e8:	9a 83       	std	Y+2, r25	; 0x02
    19ea:	89 83       	std	Y+1, r24	; 0x01
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
    19ee:	9a 81       	ldd	r25, Y+2	; 0x02
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	f1 f7       	brne	.-4      	; 0x19f0 <LCD_Initilaize+0x3dc>
    19f4:	9a 83       	std	Y+2, r25	; 0x02
    19f6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);



	InitStepFinished=1;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	80 93 38 02 	sts	0x0238, r24
}
    19fe:	e8 96       	adiw	r28, 0x38	; 56
    1a00:	0f b6       	in	r0, 0x3f	; 63
    1a02:	f8 94       	cli
    1a04:	de bf       	out	0x3e, r29	; 62
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	cd bf       	out	0x3d, r28	; 61
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	08 95       	ret

00001a10 <LCD_WriteCmd>:


void LCD_WriteCmd(u8 CMD)//to send instruction to the LCD

{
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
    1a18:	ab 97       	sbiw	r28, 0x2b	; 43
    1a1a:	0f b6       	in	r0, 0x3f	; 63
    1a1c:	f8 94       	cli
    1a1e:	de bf       	out	0x3e, r29	; 62
    1a20:	0f be       	out	0x3f, r0	; 63
    1a22:	cd bf       	out	0x3d, r28	; 61
    1a24:	8b a7       	std	Y+43, r24	; 0x2b


	DIO_SetPinValue(PORTA ,PIN1,LOW);  //RS=0
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	61 e0       	ldi	r22, 0x01	; 1
    1a2a:	40 e0       	ldi	r20, 0x00	; 0
    1a2c:	0e 94 99 08 	call	0x1132	; 0x1132 <DIO_SetPinValue>
	DIO_SetPinValue(PORTA ,PIN2,LOW);  //RW=0
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	62 e0       	ldi	r22, 0x02	; 2
    1a34:	40 e0       	ldi	r20, 0x00	; 0
    1a36:	0e 94 99 08 	call	0x1132	; 0x1132 <DIO_SetPinValue>


	/*MSB ON THE LEFT SIDE*/

	DIO_SetPinValue(PORTA ,PIN4,GET_BIT(CMD , 4));  //DB4
    1a3a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a3c:	82 95       	swap	r24
    1a3e:	8f 70       	andi	r24, 0x0F	; 15
    1a40:	98 2f       	mov	r25, r24
    1a42:	91 70       	andi	r25, 0x01	; 1
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	64 e0       	ldi	r22, 0x04	; 4
    1a48:	49 2f       	mov	r20, r25
    1a4a:	0e 94 99 08 	call	0x1132	; 0x1132 <DIO_SetPinValue>
	DIO_SetPinValue(PORTA ,PIN5,GET_BIT(CMD , 5));  //DB5
    1a4e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a50:	82 95       	swap	r24
    1a52:	86 95       	lsr	r24
    1a54:	87 70       	andi	r24, 0x07	; 7
    1a56:	98 2f       	mov	r25, r24
    1a58:	91 70       	andi	r25, 0x01	; 1
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	65 e0       	ldi	r22, 0x05	; 5
    1a5e:	49 2f       	mov	r20, r25
    1a60:	0e 94 99 08 	call	0x1132	; 0x1132 <DIO_SetPinValue>
	DIO_SetPinValue(PORTA ,PIN6,GET_BIT(CMD , 6));  //DB6
    1a64:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a66:	82 95       	swap	r24
    1a68:	86 95       	lsr	r24
    1a6a:	86 95       	lsr	r24
    1a6c:	83 70       	andi	r24, 0x03	; 3
    1a6e:	98 2f       	mov	r25, r24
    1a70:	91 70       	andi	r25, 0x01	; 1
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	66 e0       	ldi	r22, 0x06	; 6
    1a76:	49 2f       	mov	r20, r25
    1a78:	0e 94 99 08 	call	0x1132	; 0x1132 <DIO_SetPinValue>
	DIO_SetPinValue(PORTA ,PIN7,GET_BIT(CMD , 7));  //DB7
    1a7c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a7e:	98 2f       	mov	r25, r24
    1a80:	99 1f       	adc	r25, r25
    1a82:	99 27       	eor	r25, r25
    1a84:	99 1f       	adc	r25, r25
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	67 e0       	ldi	r22, 0x07	; 7
    1a8a:	49 2f       	mov	r20, r25
    1a8c:	0e 94 99 08 	call	0x1132	; 0x1132 <DIO_SetPinValue>

	DIO_SetPinValue(PORTA,PIN3,HIGH); //EN
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	63 e0       	ldi	r22, 0x03	; 3
    1a94:	41 e0       	ldi	r20, 0x01	; 1
    1a96:	0e 94 99 08 	call	0x1132	; 0x1132 <DIO_SetPinValue>
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	a0 e8       	ldi	r26, 0x80	; 128
    1aa0:	bf e3       	ldi	r27, 0x3F	; 63
    1aa2:	8f a3       	std	Y+39, r24	; 0x27
    1aa4:	98 a7       	std	Y+40, r25	; 0x28
    1aa6:	a9 a7       	std	Y+41, r26	; 0x29
    1aa8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aaa:	6f a1       	ldd	r22, Y+39	; 0x27
    1aac:	78 a5       	ldd	r23, Y+40	; 0x28
    1aae:	89 a5       	ldd	r24, Y+41	; 0x29
    1ab0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	4a e7       	ldi	r20, 0x7A	; 122
    1ab8:	55 e4       	ldi	r21, 0x45	; 69
    1aba:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	8b a3       	std	Y+35, r24	; 0x23
    1ac4:	9c a3       	std	Y+36, r25	; 0x24
    1ac6:	ad a3       	std	Y+37, r26	; 0x25
    1ac8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1aca:	6b a1       	ldd	r22, Y+35	; 0x23
    1acc:	7c a1       	ldd	r23, Y+36	; 0x24
    1ace:	8d a1       	ldd	r24, Y+37	; 0x25
    1ad0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	40 e8       	ldi	r20, 0x80	; 128
    1ad8:	5f e3       	ldi	r21, 0x3F	; 63
    1ada:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    1ade:	88 23       	and	r24, r24
    1ae0:	2c f4       	brge	.+10     	; 0x1aec <LCD_WriteCmd+0xdc>
		__ticks = 1;
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	9a a3       	std	Y+34, r25	; 0x22
    1ae8:	89 a3       	std	Y+33, r24	; 0x21
    1aea:	3f c0       	rjmp	.+126    	; 0x1b6a <LCD_WriteCmd+0x15a>
	else if (__tmp > 65535)
    1aec:	6b a1       	ldd	r22, Y+35	; 0x23
    1aee:	7c a1       	ldd	r23, Y+36	; 0x24
    1af0:	8d a1       	ldd	r24, Y+37	; 0x25
    1af2:	9e a1       	ldd	r25, Y+38	; 0x26
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	3f ef       	ldi	r19, 0xFF	; 255
    1af8:	4f e7       	ldi	r20, 0x7F	; 127
    1afa:	57 e4       	ldi	r21, 0x47	; 71
    1afc:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    1b00:	18 16       	cp	r1, r24
    1b02:	4c f5       	brge	.+82     	; 0x1b56 <LCD_WriteCmd+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b04:	6f a1       	ldd	r22, Y+39	; 0x27
    1b06:	78 a5       	ldd	r23, Y+40	; 0x28
    1b08:	89 a5       	ldd	r24, Y+41	; 0x29
    1b0a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	40 e2       	ldi	r20, 0x20	; 32
    1b12:	51 e4       	ldi	r21, 0x41	; 65
    1b14:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	bc 01       	movw	r22, r24
    1b1e:	cd 01       	movw	r24, r26
    1b20:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	9a a3       	std	Y+34, r25	; 0x22
    1b2a:	89 a3       	std	Y+33, r24	; 0x21
    1b2c:	0f c0       	rjmp	.+30     	; 0x1b4c <LCD_WriteCmd+0x13c>
    1b2e:	80 e9       	ldi	r24, 0x90	; 144
    1b30:	91 e0       	ldi	r25, 0x01	; 1
    1b32:	98 a3       	std	Y+32, r25	; 0x20
    1b34:	8f 8f       	std	Y+31, r24	; 0x1f
    1b36:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b38:	98 a1       	ldd	r25, Y+32	; 0x20
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	f1 f7       	brne	.-4      	; 0x1b3a <LCD_WriteCmd+0x12a>
    1b3e:	98 a3       	std	Y+32, r25	; 0x20
    1b40:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b42:	89 a1       	ldd	r24, Y+33	; 0x21
    1b44:	9a a1       	ldd	r25, Y+34	; 0x22
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	9a a3       	std	Y+34, r25	; 0x22
    1b4a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b4c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b4e:	9a a1       	ldd	r25, Y+34	; 0x22
    1b50:	00 97       	sbiw	r24, 0x00	; 0
    1b52:	69 f7       	brne	.-38     	; 0x1b2e <LCD_WriteCmd+0x11e>
    1b54:	14 c0       	rjmp	.+40     	; 0x1b7e <LCD_WriteCmd+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b56:	6b a1       	ldd	r22, Y+35	; 0x23
    1b58:	7c a1       	ldd	r23, Y+36	; 0x24
    1b5a:	8d a1       	ldd	r24, Y+37	; 0x25
    1b5c:	9e a1       	ldd	r25, Y+38	; 0x26
    1b5e:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	9a a3       	std	Y+34, r25	; 0x22
    1b68:	89 a3       	std	Y+33, r24	; 0x21
    1b6a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b6c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b6e:	9e 8f       	std	Y+30, r25	; 0x1e
    1b70:	8d 8f       	std	Y+29, r24	; 0x1d
    1b72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b74:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	f1 f7       	brne	.-4      	; 0x1b76 <LCD_WriteCmd+0x166>
    1b7a:	9e 8f       	std	Y+30, r25	; 0x1e
    1b7c:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1);//because of the falling edge from high to low

	DIO_SetPinValue(PORTA,PIN3,LOW); //EN
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	63 e0       	ldi	r22, 0x03	; 3
    1b82:	40 e0       	ldi	r20, 0x00	; 0
    1b84:	0e 94 99 08 	call	0x1132	; 0x1132 <DIO_SetPinValue>

	if(InitStepFinished)//since it becomes 1 the LSB will work
    1b88:	80 91 38 02 	lds	r24, 0x0238
    1b8c:	88 23       	and	r24, r24
    1b8e:	09 f4       	brne	.+2      	; 0x1b92 <LCD_WriteCmd+0x182>
    1b90:	a2 c0       	rjmp	.+324    	; 0x1cd6 <LCD_WriteCmd+0x2c6>
	{

	/*LSB ON THE RIGHT SIDE*/

	DIO_SetPinValue(PORTA ,PIN4,GET_BIT(CMD , 0));  //DB4
    1b92:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b94:	98 2f       	mov	r25, r24
    1b96:	91 70       	andi	r25, 0x01	; 1
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	64 e0       	ldi	r22, 0x04	; 4
    1b9c:	49 2f       	mov	r20, r25
    1b9e:	0e 94 99 08 	call	0x1132	; 0x1132 <DIO_SetPinValue>
	DIO_SetPinValue(PORTA ,PIN5,GET_BIT(CMD , 1));  //DB5
    1ba2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ba4:	86 95       	lsr	r24
    1ba6:	98 2f       	mov	r25, r24
    1ba8:	91 70       	andi	r25, 0x01	; 1
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	65 e0       	ldi	r22, 0x05	; 5
    1bae:	49 2f       	mov	r20, r25
    1bb0:	0e 94 99 08 	call	0x1132	; 0x1132 <DIO_SetPinValue>
	DIO_SetPinValue(PORTA ,PIN6,GET_BIT(CMD , 2));  //DB6
    1bb4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bb6:	86 95       	lsr	r24
    1bb8:	86 95       	lsr	r24
    1bba:	98 2f       	mov	r25, r24
    1bbc:	91 70       	andi	r25, 0x01	; 1
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	66 e0       	ldi	r22, 0x06	; 6
    1bc2:	49 2f       	mov	r20, r25
    1bc4:	0e 94 99 08 	call	0x1132	; 0x1132 <DIO_SetPinValue>
	DIO_SetPinValue(PORTA ,PIN7,GET_BIT(CMD , 3));  //DB7
    1bc8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bca:	86 95       	lsr	r24
    1bcc:	86 95       	lsr	r24
    1bce:	86 95       	lsr	r24
    1bd0:	98 2f       	mov	r25, r24
    1bd2:	91 70       	andi	r25, 0x01	; 1
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	67 e0       	ldi	r22, 0x07	; 7
    1bd8:	49 2f       	mov	r20, r25
    1bda:	0e 94 99 08 	call	0x1132	; 0x1132 <DIO_SetPinValue>

	DIO_SetPinValue(PORTA,PIN3,HIGH);  //EN
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	63 e0       	ldi	r22, 0x03	; 3
    1be2:	41 e0       	ldi	r20, 0x01	; 1
    1be4:	0e 94 99 08 	call	0x1132	; 0x1132 <DIO_SetPinValue>
    1be8:	80 e0       	ldi	r24, 0x00	; 0
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	a0 e8       	ldi	r26, 0x80	; 128
    1bee:	bf e3       	ldi	r27, 0x3F	; 63
    1bf0:	89 8f       	std	Y+25, r24	; 0x19
    1bf2:	9a 8f       	std	Y+26, r25	; 0x1a
    1bf4:	ab 8f       	std	Y+27, r26	; 0x1b
    1bf6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf8:	69 8d       	ldd	r22, Y+25	; 0x19
    1bfa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bfe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	4a e7       	ldi	r20, 0x7A	; 122
    1c06:	55 e4       	ldi	r21, 0x45	; 69
    1c08:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	8d 8b       	std	Y+21, r24	; 0x15
    1c12:	9e 8b       	std	Y+22, r25	; 0x16
    1c14:	af 8b       	std	Y+23, r26	; 0x17
    1c16:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c18:	6d 89       	ldd	r22, Y+21	; 0x15
    1c1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	40 e8       	ldi	r20, 0x80	; 128
    1c26:	5f e3       	ldi	r21, 0x3F	; 63
    1c28:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    1c2c:	88 23       	and	r24, r24
    1c2e:	2c f4       	brge	.+10     	; 0x1c3a <LCD_WriteCmd+0x22a>
		__ticks = 1;
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	9c 8b       	std	Y+20, r25	; 0x14
    1c36:	8b 8b       	std	Y+19, r24	; 0x13
    1c38:	3f c0       	rjmp	.+126    	; 0x1cb8 <LCD_WriteCmd+0x2a8>
	else if (__tmp > 65535)
    1c3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c40:	98 8d       	ldd	r25, Y+24	; 0x18
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	3f ef       	ldi	r19, 0xFF	; 255
    1c46:	4f e7       	ldi	r20, 0x7F	; 127
    1c48:	57 e4       	ldi	r21, 0x47	; 71
    1c4a:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    1c4e:	18 16       	cp	r1, r24
    1c50:	4c f5       	brge	.+82     	; 0x1ca4 <LCD_WriteCmd+0x294>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c52:	69 8d       	ldd	r22, Y+25	; 0x19
    1c54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	40 e2       	ldi	r20, 0x20	; 32
    1c60:	51 e4       	ldi	r21, 0x41	; 65
    1c62:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	bc 01       	movw	r22, r24
    1c6c:	cd 01       	movw	r24, r26
    1c6e:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	9c 8b       	std	Y+20, r25	; 0x14
    1c78:	8b 8b       	std	Y+19, r24	; 0x13
    1c7a:	0f c0       	rjmp	.+30     	; 0x1c9a <LCD_WriteCmd+0x28a>
    1c7c:	80 e9       	ldi	r24, 0x90	; 144
    1c7e:	91 e0       	ldi	r25, 0x01	; 1
    1c80:	9a 8b       	std	Y+18, r25	; 0x12
    1c82:	89 8b       	std	Y+17, r24	; 0x11
    1c84:	89 89       	ldd	r24, Y+17	; 0x11
    1c86:	9a 89       	ldd	r25, Y+18	; 0x12
    1c88:	01 97       	sbiw	r24, 0x01	; 1
    1c8a:	f1 f7       	brne	.-4      	; 0x1c88 <LCD_WriteCmd+0x278>
    1c8c:	9a 8b       	std	Y+18, r25	; 0x12
    1c8e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c90:	8b 89       	ldd	r24, Y+19	; 0x13
    1c92:	9c 89       	ldd	r25, Y+20	; 0x14
    1c94:	01 97       	sbiw	r24, 0x01	; 1
    1c96:	9c 8b       	std	Y+20, r25	; 0x14
    1c98:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c9a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c9c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c9e:	00 97       	sbiw	r24, 0x00	; 0
    1ca0:	69 f7       	brne	.-38     	; 0x1c7c <LCD_WriteCmd+0x26c>
    1ca2:	14 c0       	rjmp	.+40     	; 0x1ccc <LCD_WriteCmd+0x2bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ca6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ca8:	8f 89       	ldd	r24, Y+23	; 0x17
    1caa:	98 8d       	ldd	r25, Y+24	; 0x18
    1cac:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	9c 8b       	std	Y+20, r25	; 0x14
    1cb6:	8b 8b       	std	Y+19, r24	; 0x13
    1cb8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cba:	9c 89       	ldd	r25, Y+20	; 0x14
    1cbc:	98 8b       	std	Y+16, r25	; 0x10
    1cbe:	8f 87       	std	Y+15, r24	; 0x0f
    1cc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cc2:	98 89       	ldd	r25, Y+16	; 0x10
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	f1 f7       	brne	.-4      	; 0x1cc4 <LCD_WriteCmd+0x2b4>
    1cc8:	98 8b       	std	Y+16, r25	; 0x10
    1cca:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	DIO_SetPinValue(PORTA,PIN3,LOW);   //EN
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	63 e0       	ldi	r22, 0x03	; 3
    1cd0:	40 e0       	ldi	r20, 0x00	; 0
    1cd2:	0e 94 99 08 	call	0x1132	; 0x1132 <DIO_SetPinValue>
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	a0 e0       	ldi	r26, 0x00	; 0
    1cdc:	b0 e4       	ldi	r27, 0x40	; 64
    1cde:	8b 87       	std	Y+11, r24	; 0x0b
    1ce0:	9c 87       	std	Y+12, r25	; 0x0c
    1ce2:	ad 87       	std	Y+13, r26	; 0x0d
    1ce4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	4a e7       	ldi	r20, 0x7A	; 122
    1cf4:	55 e4       	ldi	r21, 0x45	; 69
    1cf6:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	8f 83       	std	Y+7, r24	; 0x07
    1d00:	98 87       	std	Y+8, r25	; 0x08
    1d02:	a9 87       	std	Y+9, r26	; 0x09
    1d04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d06:	6f 81       	ldd	r22, Y+7	; 0x07
    1d08:	78 85       	ldd	r23, Y+8	; 0x08
    1d0a:	89 85       	ldd	r24, Y+9	; 0x09
    1d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	40 e8       	ldi	r20, 0x80	; 128
    1d14:	5f e3       	ldi	r21, 0x3F	; 63
    1d16:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    1d1a:	88 23       	and	r24, r24
    1d1c:	2c f4       	brge	.+10     	; 0x1d28 <LCD_WriteCmd+0x318>
		__ticks = 1;
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	9e 83       	std	Y+6, r25	; 0x06
    1d24:	8d 83       	std	Y+5, r24	; 0x05
    1d26:	3f c0       	rjmp	.+126    	; 0x1da6 <LCD_WriteCmd+0x396>
	else if (__tmp > 65535)
    1d28:	6f 81       	ldd	r22, Y+7	; 0x07
    1d2a:	78 85       	ldd	r23, Y+8	; 0x08
    1d2c:	89 85       	ldd	r24, Y+9	; 0x09
    1d2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	3f ef       	ldi	r19, 0xFF	; 255
    1d34:	4f e7       	ldi	r20, 0x7F	; 127
    1d36:	57 e4       	ldi	r21, 0x47	; 71
    1d38:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    1d3c:	18 16       	cp	r1, r24
    1d3e:	4c f5       	brge	.+82     	; 0x1d92 <LCD_WriteCmd+0x382>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d40:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d42:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	40 e2       	ldi	r20, 0x20	; 32
    1d4e:	51 e4       	ldi	r21, 0x41	; 65
    1d50:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	bc 01       	movw	r22, r24
    1d5a:	cd 01       	movw	r24, r26
    1d5c:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	9e 83       	std	Y+6, r25	; 0x06
    1d66:	8d 83       	std	Y+5, r24	; 0x05
    1d68:	0f c0       	rjmp	.+30     	; 0x1d88 <LCD_WriteCmd+0x378>
    1d6a:	80 e9       	ldi	r24, 0x90	; 144
    1d6c:	91 e0       	ldi	r25, 0x01	; 1
    1d6e:	9c 83       	std	Y+4, r25	; 0x04
    1d70:	8b 83       	std	Y+3, r24	; 0x03
    1d72:	8b 81       	ldd	r24, Y+3	; 0x03
    1d74:	9c 81       	ldd	r25, Y+4	; 0x04
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	f1 f7       	brne	.-4      	; 0x1d76 <LCD_WriteCmd+0x366>
    1d7a:	9c 83       	std	Y+4, r25	; 0x04
    1d7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d80:	9e 81       	ldd	r25, Y+6	; 0x06
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	9e 83       	std	Y+6, r25	; 0x06
    1d86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d88:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8c:	00 97       	sbiw	r24, 0x00	; 0
    1d8e:	69 f7       	brne	.-38     	; 0x1d6a <LCD_WriteCmd+0x35a>
    1d90:	14 c0       	rjmp	.+40     	; 0x1dba <LCD_WriteCmd+0x3aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d92:	6f 81       	ldd	r22, Y+7	; 0x07
    1d94:	78 85       	ldd	r23, Y+8	; 0x08
    1d96:	89 85       	ldd	r24, Y+9	; 0x09
    1d98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d9a:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	9e 83       	std	Y+6, r25	; 0x06
    1da4:	8d 83       	std	Y+5, r24	; 0x05
    1da6:	8d 81       	ldd	r24, Y+5	; 0x05
    1da8:	9e 81       	ldd	r25, Y+6	; 0x06
    1daa:	9a 83       	std	Y+2, r25	; 0x02
    1dac:	89 83       	std	Y+1, r24	; 0x01
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	9a 81       	ldd	r25, Y+2	; 0x02
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	f1 f7       	brne	.-4      	; 0x1db2 <LCD_WriteCmd+0x3a2>
    1db6:	9a 83       	std	Y+2, r25	; 0x02
    1db8:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(2);//because maximum seconds can an instruction wait is 1.53ms so we choose 2 in general


}
    1dba:	ab 96       	adiw	r28, 0x2b	; 43
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	f8 94       	cli
    1dc0:	de bf       	out	0x3e, r29	; 62
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	cd bf       	out	0x3d, r28	; 61
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	08 95       	ret

00001dcc <LCD_WriteData>:

void LCD_WriteData(u8 DATA)

{
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    1dd4:	ab 97       	sbiw	r28, 0x2b	; 43
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	f8 94       	cli
    1dda:	de bf       	out	0x3e, r29	; 62
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	cd bf       	out	0x3d, r28	; 61
    1de0:	8b a7       	std	Y+43, r24	; 0x2b
		DIO_SetPinValue(PORTA ,PIN1,HIGH);  //RS=1,when it comes to write data on the LCD RS=1,RW=0;
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	61 e0       	ldi	r22, 0x01	; 1
    1de6:	41 e0       	ldi	r20, 0x01	; 1
    1de8:	0e 94 99 08 	call	0x1132	; 0x1132 <DIO_SetPinValue>
		DIO_SetPinValue(PORTA ,PIN2,LOW);  //RW=0
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	62 e0       	ldi	r22, 0x02	; 2
    1df0:	40 e0       	ldi	r20, 0x00	; 0
    1df2:	0e 94 99 08 	call	0x1132	; 0x1132 <DIO_SetPinValue>


		/*MSB ON THE LEFT SIDE*/

		DIO_SetPinValue(PORTA ,PIN4,GET_BIT(DATA , 4));  //DB4
    1df6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1df8:	82 95       	swap	r24
    1dfa:	8f 70       	andi	r24, 0x0F	; 15
    1dfc:	98 2f       	mov	r25, r24
    1dfe:	91 70       	andi	r25, 0x01	; 1
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	64 e0       	ldi	r22, 0x04	; 4
    1e04:	49 2f       	mov	r20, r25
    1e06:	0e 94 99 08 	call	0x1132	; 0x1132 <DIO_SetPinValue>
		DIO_SetPinValue(PORTA ,PIN5,GET_BIT(DATA , 5));  //DB5
    1e0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e0c:	82 95       	swap	r24
    1e0e:	86 95       	lsr	r24
    1e10:	87 70       	andi	r24, 0x07	; 7
    1e12:	98 2f       	mov	r25, r24
    1e14:	91 70       	andi	r25, 0x01	; 1
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	65 e0       	ldi	r22, 0x05	; 5
    1e1a:	49 2f       	mov	r20, r25
    1e1c:	0e 94 99 08 	call	0x1132	; 0x1132 <DIO_SetPinValue>
		DIO_SetPinValue(PORTA ,PIN6,GET_BIT(DATA , 6));  //DB6
    1e20:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e22:	82 95       	swap	r24
    1e24:	86 95       	lsr	r24
    1e26:	86 95       	lsr	r24
    1e28:	83 70       	andi	r24, 0x03	; 3
    1e2a:	98 2f       	mov	r25, r24
    1e2c:	91 70       	andi	r25, 0x01	; 1
    1e2e:	80 e0       	ldi	r24, 0x00	; 0
    1e30:	66 e0       	ldi	r22, 0x06	; 6
    1e32:	49 2f       	mov	r20, r25
    1e34:	0e 94 99 08 	call	0x1132	; 0x1132 <DIO_SetPinValue>
		DIO_SetPinValue(PORTA ,PIN7,GET_BIT(DATA , 7));  //DB7
    1e38:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e3a:	98 2f       	mov	r25, r24
    1e3c:	99 1f       	adc	r25, r25
    1e3e:	99 27       	eor	r25, r25
    1e40:	99 1f       	adc	r25, r25
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	67 e0       	ldi	r22, 0x07	; 7
    1e46:	49 2f       	mov	r20, r25
    1e48:	0e 94 99 08 	call	0x1132	; 0x1132 <DIO_SetPinValue>

		DIO_SetPinValue(PORTA,PIN3,HIGH);  //EN
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	63 e0       	ldi	r22, 0x03	; 3
    1e50:	41 e0       	ldi	r20, 0x01	; 1
    1e52:	0e 94 99 08 	call	0x1132	; 0x1132 <DIO_SetPinValue>
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	a0 e8       	ldi	r26, 0x80	; 128
    1e5c:	bf e3       	ldi	r27, 0x3F	; 63
    1e5e:	8f a3       	std	Y+39, r24	; 0x27
    1e60:	98 a7       	std	Y+40, r25	; 0x28
    1e62:	a9 a7       	std	Y+41, r26	; 0x29
    1e64:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e66:	6f a1       	ldd	r22, Y+39	; 0x27
    1e68:	78 a5       	ldd	r23, Y+40	; 0x28
    1e6a:	89 a5       	ldd	r24, Y+41	; 0x29
    1e6c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	4a e7       	ldi	r20, 0x7A	; 122
    1e74:	55 e4       	ldi	r21, 0x45	; 69
    1e76:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	8b a3       	std	Y+35, r24	; 0x23
    1e80:	9c a3       	std	Y+36, r25	; 0x24
    1e82:	ad a3       	std	Y+37, r26	; 0x25
    1e84:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e86:	6b a1       	ldd	r22, Y+35	; 0x23
    1e88:	7c a1       	ldd	r23, Y+36	; 0x24
    1e8a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e8c:	9e a1       	ldd	r25, Y+38	; 0x26
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	40 e8       	ldi	r20, 0x80	; 128
    1e94:	5f e3       	ldi	r21, 0x3F	; 63
    1e96:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    1e9a:	88 23       	and	r24, r24
    1e9c:	2c f4       	brge	.+10     	; 0x1ea8 <LCD_WriteData+0xdc>
		__ticks = 1;
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	9a a3       	std	Y+34, r25	; 0x22
    1ea4:	89 a3       	std	Y+33, r24	; 0x21
    1ea6:	3f c0       	rjmp	.+126    	; 0x1f26 <LCD_WriteData+0x15a>
	else if (__tmp > 65535)
    1ea8:	6b a1       	ldd	r22, Y+35	; 0x23
    1eaa:	7c a1       	ldd	r23, Y+36	; 0x24
    1eac:	8d a1       	ldd	r24, Y+37	; 0x25
    1eae:	9e a1       	ldd	r25, Y+38	; 0x26
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	3f ef       	ldi	r19, 0xFF	; 255
    1eb4:	4f e7       	ldi	r20, 0x7F	; 127
    1eb6:	57 e4       	ldi	r21, 0x47	; 71
    1eb8:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    1ebc:	18 16       	cp	r1, r24
    1ebe:	4c f5       	brge	.+82     	; 0x1f12 <LCD_WriteData+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ec2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ec4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ec6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	40 e2       	ldi	r20, 0x20	; 32
    1ece:	51 e4       	ldi	r21, 0x41	; 65
    1ed0:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	bc 01       	movw	r22, r24
    1eda:	cd 01       	movw	r24, r26
    1edc:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	9a a3       	std	Y+34, r25	; 0x22
    1ee6:	89 a3       	std	Y+33, r24	; 0x21
    1ee8:	0f c0       	rjmp	.+30     	; 0x1f08 <LCD_WriteData+0x13c>
    1eea:	80 e9       	ldi	r24, 0x90	; 144
    1eec:	91 e0       	ldi	r25, 0x01	; 1
    1eee:	98 a3       	std	Y+32, r25	; 0x20
    1ef0:	8f 8f       	std	Y+31, r24	; 0x1f
    1ef2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ef4:	98 a1       	ldd	r25, Y+32	; 0x20
    1ef6:	01 97       	sbiw	r24, 0x01	; 1
    1ef8:	f1 f7       	brne	.-4      	; 0x1ef6 <LCD_WriteData+0x12a>
    1efa:	98 a3       	std	Y+32, r25	; 0x20
    1efc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1efe:	89 a1       	ldd	r24, Y+33	; 0x21
    1f00:	9a a1       	ldd	r25, Y+34	; 0x22
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	9a a3       	std	Y+34, r25	; 0x22
    1f06:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f08:	89 a1       	ldd	r24, Y+33	; 0x21
    1f0a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f0c:	00 97       	sbiw	r24, 0x00	; 0
    1f0e:	69 f7       	brne	.-38     	; 0x1eea <LCD_WriteData+0x11e>
    1f10:	14 c0       	rjmp	.+40     	; 0x1f3a <LCD_WriteData+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f12:	6b a1       	ldd	r22, Y+35	; 0x23
    1f14:	7c a1       	ldd	r23, Y+36	; 0x24
    1f16:	8d a1       	ldd	r24, Y+37	; 0x25
    1f18:	9e a1       	ldd	r25, Y+38	; 0x26
    1f1a:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	9a a3       	std	Y+34, r25	; 0x22
    1f24:	89 a3       	std	Y+33, r24	; 0x21
    1f26:	89 a1       	ldd	r24, Y+33	; 0x21
    1f28:	9a a1       	ldd	r25, Y+34	; 0x22
    1f2a:	9e 8f       	std	Y+30, r25	; 0x1e
    1f2c:	8d 8f       	std	Y+29, r24	; 0x1d
    1f2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f30:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <LCD_WriteData+0x166>
    1f36:	9e 8f       	std	Y+30, r25	; 0x1e
    1f38:	8d 8f       	std	Y+29, r24	; 0x1d

		_delay_ms(1);//because of the falling edge from high to low

		DIO_SetPinValue(PORTA,PIN3,LOW);   //EN
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	63 e0       	ldi	r22, 0x03	; 3
    1f3e:	40 e0       	ldi	r20, 0x00	; 0
    1f40:	0e 94 99 08 	call	0x1132	; 0x1132 <DIO_SetPinValue>



		/*LSB ON THE RIGHT SIDE*/

		DIO_SetPinValue(PORTA ,PIN4,GET_BIT(DATA , 0));  //DB4
    1f44:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f46:	98 2f       	mov	r25, r24
    1f48:	91 70       	andi	r25, 0x01	; 1
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	64 e0       	ldi	r22, 0x04	; 4
    1f4e:	49 2f       	mov	r20, r25
    1f50:	0e 94 99 08 	call	0x1132	; 0x1132 <DIO_SetPinValue>
		DIO_SetPinValue(PORTA ,PIN5,GET_BIT(DATA , 1));  //DB5
    1f54:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f56:	86 95       	lsr	r24
    1f58:	98 2f       	mov	r25, r24
    1f5a:	91 70       	andi	r25, 0x01	; 1
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	65 e0       	ldi	r22, 0x05	; 5
    1f60:	49 2f       	mov	r20, r25
    1f62:	0e 94 99 08 	call	0x1132	; 0x1132 <DIO_SetPinValue>
		DIO_SetPinValue(PORTA ,PIN6,GET_BIT(DATA , 2));  //DB6
    1f66:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f68:	86 95       	lsr	r24
    1f6a:	86 95       	lsr	r24
    1f6c:	98 2f       	mov	r25, r24
    1f6e:	91 70       	andi	r25, 0x01	; 1
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	66 e0       	ldi	r22, 0x06	; 6
    1f74:	49 2f       	mov	r20, r25
    1f76:	0e 94 99 08 	call	0x1132	; 0x1132 <DIO_SetPinValue>
		DIO_SetPinValue(PORTA ,PIN7,GET_BIT(DATA , 3));  //DB7
    1f7a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f7c:	86 95       	lsr	r24
    1f7e:	86 95       	lsr	r24
    1f80:	86 95       	lsr	r24
    1f82:	98 2f       	mov	r25, r24
    1f84:	91 70       	andi	r25, 0x01	; 1
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	67 e0       	ldi	r22, 0x07	; 7
    1f8a:	49 2f       	mov	r20, r25
    1f8c:	0e 94 99 08 	call	0x1132	; 0x1132 <DIO_SetPinValue>

		DIO_SetPinValue(PORTA,PIN3,HIGH);
    1f90:	80 e0       	ldi	r24, 0x00	; 0
    1f92:	63 e0       	ldi	r22, 0x03	; 3
    1f94:	41 e0       	ldi	r20, 0x01	; 1
    1f96:	0e 94 99 08 	call	0x1132	; 0x1132 <DIO_SetPinValue>
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	a0 e8       	ldi	r26, 0x80	; 128
    1fa0:	bf e3       	ldi	r27, 0x3F	; 63
    1fa2:	89 8f       	std	Y+25, r24	; 0x19
    1fa4:	9a 8f       	std	Y+26, r25	; 0x1a
    1fa6:	ab 8f       	std	Y+27, r26	; 0x1b
    1fa8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1faa:	69 8d       	ldd	r22, Y+25	; 0x19
    1fac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	4a e7       	ldi	r20, 0x7A	; 122
    1fb8:	55 e4       	ldi	r21, 0x45	; 69
    1fba:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	8d 8b       	std	Y+21, r24	; 0x15
    1fc4:	9e 8b       	std	Y+22, r25	; 0x16
    1fc6:	af 8b       	std	Y+23, r26	; 0x17
    1fc8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fca:	6d 89       	ldd	r22, Y+21	; 0x15
    1fcc:	7e 89       	ldd	r23, Y+22	; 0x16
    1fce:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd0:	98 8d       	ldd	r25, Y+24	; 0x18
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	40 e8       	ldi	r20, 0x80	; 128
    1fd8:	5f e3       	ldi	r21, 0x3F	; 63
    1fda:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    1fde:	88 23       	and	r24, r24
    1fe0:	2c f4       	brge	.+10     	; 0x1fec <LCD_WriteData+0x220>
		__ticks = 1;
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	9c 8b       	std	Y+20, r25	; 0x14
    1fe8:	8b 8b       	std	Y+19, r24	; 0x13
    1fea:	3f c0       	rjmp	.+126    	; 0x206a <LCD_WriteData+0x29e>
	else if (__tmp > 65535)
    1fec:	6d 89       	ldd	r22, Y+21	; 0x15
    1fee:	7e 89       	ldd	r23, Y+22	; 0x16
    1ff0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ff2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	3f ef       	ldi	r19, 0xFF	; 255
    1ff8:	4f e7       	ldi	r20, 0x7F	; 127
    1ffa:	57 e4       	ldi	r21, 0x47	; 71
    1ffc:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    2000:	18 16       	cp	r1, r24
    2002:	4c f5       	brge	.+82     	; 0x2056 <LCD_WriteData+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2004:	69 8d       	ldd	r22, Y+25	; 0x19
    2006:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2008:	8b 8d       	ldd	r24, Y+27	; 0x1b
    200a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	40 e2       	ldi	r20, 0x20	; 32
    2012:	51 e4       	ldi	r21, 0x41	; 65
    2014:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	bc 01       	movw	r22, r24
    201e:	cd 01       	movw	r24, r26
    2020:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	9c 8b       	std	Y+20, r25	; 0x14
    202a:	8b 8b       	std	Y+19, r24	; 0x13
    202c:	0f c0       	rjmp	.+30     	; 0x204c <LCD_WriteData+0x280>
    202e:	80 e9       	ldi	r24, 0x90	; 144
    2030:	91 e0       	ldi	r25, 0x01	; 1
    2032:	9a 8b       	std	Y+18, r25	; 0x12
    2034:	89 8b       	std	Y+17, r24	; 0x11
    2036:	89 89       	ldd	r24, Y+17	; 0x11
    2038:	9a 89       	ldd	r25, Y+18	; 0x12
    203a:	01 97       	sbiw	r24, 0x01	; 1
    203c:	f1 f7       	brne	.-4      	; 0x203a <LCD_WriteData+0x26e>
    203e:	9a 8b       	std	Y+18, r25	; 0x12
    2040:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2042:	8b 89       	ldd	r24, Y+19	; 0x13
    2044:	9c 89       	ldd	r25, Y+20	; 0x14
    2046:	01 97       	sbiw	r24, 0x01	; 1
    2048:	9c 8b       	std	Y+20, r25	; 0x14
    204a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    204c:	8b 89       	ldd	r24, Y+19	; 0x13
    204e:	9c 89       	ldd	r25, Y+20	; 0x14
    2050:	00 97       	sbiw	r24, 0x00	; 0
    2052:	69 f7       	brne	.-38     	; 0x202e <LCD_WriteData+0x262>
    2054:	14 c0       	rjmp	.+40     	; 0x207e <LCD_WriteData+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2056:	6d 89       	ldd	r22, Y+21	; 0x15
    2058:	7e 89       	ldd	r23, Y+22	; 0x16
    205a:	8f 89       	ldd	r24, Y+23	; 0x17
    205c:	98 8d       	ldd	r25, Y+24	; 0x18
    205e:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	9c 8b       	std	Y+20, r25	; 0x14
    2068:	8b 8b       	std	Y+19, r24	; 0x13
    206a:	8b 89       	ldd	r24, Y+19	; 0x13
    206c:	9c 89       	ldd	r25, Y+20	; 0x14
    206e:	98 8b       	std	Y+16, r25	; 0x10
    2070:	8f 87       	std	Y+15, r24	; 0x0f
    2072:	8f 85       	ldd	r24, Y+15	; 0x0f
    2074:	98 89       	ldd	r25, Y+16	; 0x10
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	f1 f7       	brne	.-4      	; 0x2076 <LCD_WriteData+0x2aa>
    207a:	98 8b       	std	Y+16, r25	; 0x10
    207c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);

		DIO_SetPinValue(PORTA,PIN3,LOW);
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	63 e0       	ldi	r22, 0x03	; 3
    2082:	40 e0       	ldi	r20, 0x00	; 0
    2084:	0e 94 99 08 	call	0x1132	; 0x1132 <DIO_SetPinValue>
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	a0 e0       	ldi	r26, 0x00	; 0
    208e:	b0 e4       	ldi	r27, 0x40	; 64
    2090:	8b 87       	std	Y+11, r24	; 0x0b
    2092:	9c 87       	std	Y+12, r25	; 0x0c
    2094:	ad 87       	std	Y+13, r26	; 0x0d
    2096:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2098:	6b 85       	ldd	r22, Y+11	; 0x0b
    209a:	7c 85       	ldd	r23, Y+12	; 0x0c
    209c:	8d 85       	ldd	r24, Y+13	; 0x0d
    209e:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	4a e7       	ldi	r20, 0x7A	; 122
    20a6:	55 e4       	ldi	r21, 0x45	; 69
    20a8:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	8f 83       	std	Y+7, r24	; 0x07
    20b2:	98 87       	std	Y+8, r25	; 0x08
    20b4:	a9 87       	std	Y+9, r26	; 0x09
    20b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20b8:	6f 81       	ldd	r22, Y+7	; 0x07
    20ba:	78 85       	ldd	r23, Y+8	; 0x08
    20bc:	89 85       	ldd	r24, Y+9	; 0x09
    20be:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	40 e8       	ldi	r20, 0x80	; 128
    20c6:	5f e3       	ldi	r21, 0x3F	; 63
    20c8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    20cc:	88 23       	and	r24, r24
    20ce:	2c f4       	brge	.+10     	; 0x20da <LCD_WriteData+0x30e>
		__ticks = 1;
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	9e 83       	std	Y+6, r25	; 0x06
    20d6:	8d 83       	std	Y+5, r24	; 0x05
    20d8:	3f c0       	rjmp	.+126    	; 0x2158 <LCD_WriteData+0x38c>
	else if (__tmp > 65535)
    20da:	6f 81       	ldd	r22, Y+7	; 0x07
    20dc:	78 85       	ldd	r23, Y+8	; 0x08
    20de:	89 85       	ldd	r24, Y+9	; 0x09
    20e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	3f ef       	ldi	r19, 0xFF	; 255
    20e6:	4f e7       	ldi	r20, 0x7F	; 127
    20e8:	57 e4       	ldi	r21, 0x47	; 71
    20ea:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    20ee:	18 16       	cp	r1, r24
    20f0:	4c f5       	brge	.+82     	; 0x2144 <LCD_WriteData+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	40 e2       	ldi	r20, 0x20	; 32
    2100:	51 e4       	ldi	r21, 0x41	; 65
    2102:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	bc 01       	movw	r22, r24
    210c:	cd 01       	movw	r24, r26
    210e:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	9e 83       	std	Y+6, r25	; 0x06
    2118:	8d 83       	std	Y+5, r24	; 0x05
    211a:	0f c0       	rjmp	.+30     	; 0x213a <LCD_WriteData+0x36e>
    211c:	80 e9       	ldi	r24, 0x90	; 144
    211e:	91 e0       	ldi	r25, 0x01	; 1
    2120:	9c 83       	std	Y+4, r25	; 0x04
    2122:	8b 83       	std	Y+3, r24	; 0x03
    2124:	8b 81       	ldd	r24, Y+3	; 0x03
    2126:	9c 81       	ldd	r25, Y+4	; 0x04
    2128:	01 97       	sbiw	r24, 0x01	; 1
    212a:	f1 f7       	brne	.-4      	; 0x2128 <LCD_WriteData+0x35c>
    212c:	9c 83       	std	Y+4, r25	; 0x04
    212e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2130:	8d 81       	ldd	r24, Y+5	; 0x05
    2132:	9e 81       	ldd	r25, Y+6	; 0x06
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	9e 83       	std	Y+6, r25	; 0x06
    2138:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    213a:	8d 81       	ldd	r24, Y+5	; 0x05
    213c:	9e 81       	ldd	r25, Y+6	; 0x06
    213e:	00 97       	sbiw	r24, 0x00	; 0
    2140:	69 f7       	brne	.-38     	; 0x211c <LCD_WriteData+0x350>
    2142:	14 c0       	rjmp	.+40     	; 0x216c <LCD_WriteData+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2144:	6f 81       	ldd	r22, Y+7	; 0x07
    2146:	78 85       	ldd	r23, Y+8	; 0x08
    2148:	89 85       	ldd	r24, Y+9	; 0x09
    214a:	9a 85       	ldd	r25, Y+10	; 0x0a
    214c:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	9e 83       	std	Y+6, r25	; 0x06
    2156:	8d 83       	std	Y+5, r24	; 0x05
    2158:	8d 81       	ldd	r24, Y+5	; 0x05
    215a:	9e 81       	ldd	r25, Y+6	; 0x06
    215c:	9a 83       	std	Y+2, r25	; 0x02
    215e:	89 83       	std	Y+1, r24	; 0x01
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	9a 81       	ldd	r25, Y+2	; 0x02
    2164:	01 97       	sbiw	r24, 0x01	; 1
    2166:	f1 f7       	brne	.-4      	; 0x2164 <LCD_WriteData+0x398>
    2168:	9a 83       	std	Y+2, r25	; 0x02
    216a:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(2);//because maximum seconds can an instruction wait is 1.53ms so we choose 2 in general


}
    216c:	ab 96       	adiw	r28, 0x2b	; 43
    216e:	0f b6       	in	r0, 0x3f	; 63
    2170:	f8 94       	cli
    2172:	de bf       	out	0x3e, r29	; 62
    2174:	0f be       	out	0x3f, r0	; 63
    2176:	cd bf       	out	0x3d, r28	; 61
    2178:	cf 91       	pop	r28
    217a:	df 91       	pop	r29
    217c:	08 95       	ret

0000217e <LCD_GoToPos>:

void LCD_GoToPos(u8 ROW , u8 COL)
{
    217e:	df 93       	push	r29
    2180:	cf 93       	push	r28
    2182:	00 d0       	rcall	.+0      	; 0x2184 <LCD_GoToPos+0x6>
    2184:	0f 92       	push	r0
    2186:	cd b7       	in	r28, 0x3d	; 61
    2188:	de b7       	in	r29, 0x3e	; 62
    218a:	8a 83       	std	Y+2, r24	; 0x02
    218c:	6b 83       	std	Y+3, r22	; 0x03
	u8 address;
	if(ROW < 2 && COL <16)
    218e:	8a 81       	ldd	r24, Y+2	; 0x02
    2190:	82 30       	cpi	r24, 0x02	; 2
    2192:	c8 f4       	brcc	.+50     	; 0x21c6 <LCD_GoToPos+0x48>
    2194:	8b 81       	ldd	r24, Y+3	; 0x03
    2196:	80 31       	cpi	r24, 0x10	; 16
    2198:	b0 f4       	brcc	.+44     	; 0x21c6 <LCD_GoToPos+0x48>
	{
		address = (ROW *0x40)+COL;
    219a:	8a 81       	ldd	r24, Y+2	; 0x02
    219c:	88 2f       	mov	r24, r24
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	00 24       	eor	r0, r0
    21a2:	96 95       	lsr	r25
    21a4:	87 95       	ror	r24
    21a6:	07 94       	ror	r0
    21a8:	96 95       	lsr	r25
    21aa:	87 95       	ror	r24
    21ac:	07 94       	ror	r0
    21ae:	98 2f       	mov	r25, r24
    21b0:	80 2d       	mov	r24, r0
    21b2:	98 2f       	mov	r25, r24
    21b4:	8b 81       	ldd	r24, Y+3	; 0x03
    21b6:	89 0f       	add	r24, r25
    21b8:	89 83       	std	Y+1, r24	; 0x01
		address = SET_BIT(address,7);
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	80 68       	ori	r24, 0x80	; 128
    21be:	89 83       	std	Y+1, r24	; 0x01
		LCD_WriteCmd(address);
    21c0:	89 81       	ldd	r24, Y+1	; 0x01
    21c2:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <LCD_WriteCmd>
	}
}
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	cf 91       	pop	r28
    21ce:	df 91       	pop	r29
    21d0:	08 95       	ret

000021d2 <LCD_WriteString>:
void LCD_WriteString(u8 *str,u8 ROW , u8 COL)
{
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	00 d0       	rcall	.+0      	; 0x21d8 <LCD_WriteString+0x6>
    21d8:	00 d0       	rcall	.+0      	; 0x21da <LCD_WriteString+0x8>
    21da:	00 d0       	rcall	.+0      	; 0x21dc <LCD_WriteString+0xa>
    21dc:	cd b7       	in	r28, 0x3d	; 61
    21de:	de b7       	in	r29, 0x3e	; 62
    21e0:	9c 83       	std	Y+4, r25	; 0x04
    21e2:	8b 83       	std	Y+3, r24	; 0x03
    21e4:	6d 83       	std	Y+5, r22	; 0x05
    21e6:	4e 83       	std	Y+6, r20	; 0x06
	LCD_GoToPos(ROW,COL);
    21e8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ea:	6e 81       	ldd	r22, Y+6	; 0x06
    21ec:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_GoToPos>
	u8 index = 0;
    21f0:	1a 82       	std	Y+2, r1	; 0x02
	u8 line0 = 0;
    21f2:	19 82       	std	Y+1, r1	; 0x01
    21f4:	70 c0       	rjmp	.+224    	; 0x22d6 <LCD_WriteString+0x104>
	while(str[index] != '\0' && ((ROW * 16) + (index + COL ))< 32)//by default it will continue working until finding '\0'
	{
		if(((ROW * 16) + (index + COL ))< 16) //row=0,col=0,index=0
    21f6:	8d 81       	ldd	r24, Y+5	; 0x05
    21f8:	88 2f       	mov	r24, r24
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	ac 01       	movw	r20, r24
    21fe:	42 95       	swap	r20
    2200:	52 95       	swap	r21
    2202:	50 7f       	andi	r21, 0xF0	; 240
    2204:	54 27       	eor	r21, r20
    2206:	40 7f       	andi	r20, 0xF0	; 240
    2208:	54 27       	eor	r21, r20
    220a:	8a 81       	ldd	r24, Y+2	; 0x02
    220c:	28 2f       	mov	r18, r24
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	8e 81       	ldd	r24, Y+6	; 0x06
    2212:	88 2f       	mov	r24, r24
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	82 0f       	add	r24, r18
    2218:	93 1f       	adc	r25, r19
    221a:	84 0f       	add	r24, r20
    221c:	95 1f       	adc	r25, r21
    221e:	80 31       	cpi	r24, 0x10	; 16
    2220:	91 05       	cpc	r25, r1
    2222:	7c f4       	brge	.+30     	; 0x2242 <LCD_WriteString+0x70>
		{
		LCD_WriteData(str[index]); //r=0,col=1,index=1
    2224:	8a 81       	ldd	r24, Y+2	; 0x02
    2226:	28 2f       	mov	r18, r24
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	8b 81       	ldd	r24, Y+3	; 0x03
    222c:	9c 81       	ldd	r25, Y+4	; 0x04
    222e:	fc 01       	movw	r30, r24
    2230:	e2 0f       	add	r30, r18
    2232:	f3 1f       	adc	r31, r19
    2234:	80 81       	ld	r24, Z
    2236:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_WriteData>
		index++;
    223a:	8a 81       	ldd	r24, Y+2	; 0x02
    223c:	8f 5f       	subi	r24, 0xFF	; 255
    223e:	8a 83       	std	Y+2, r24	; 0x02
    2240:	4a c0       	rjmp	.+148    	; 0x22d6 <LCD_WriteString+0x104>
		}
		else if(((ROW * 16) + (index + COL ))==16 && line0 ==0)
    2242:	8d 81       	ldd	r24, Y+5	; 0x05
    2244:	88 2f       	mov	r24, r24
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	ac 01       	movw	r20, r24
    224a:	42 95       	swap	r20
    224c:	52 95       	swap	r21
    224e:	50 7f       	andi	r21, 0xF0	; 240
    2250:	54 27       	eor	r21, r20
    2252:	40 7f       	andi	r20, 0xF0	; 240
    2254:	54 27       	eor	r21, r20
    2256:	8a 81       	ldd	r24, Y+2	; 0x02
    2258:	28 2f       	mov	r18, r24
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	8e 81       	ldd	r24, Y+6	; 0x06
    225e:	88 2f       	mov	r24, r24
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	82 0f       	add	r24, r18
    2264:	93 1f       	adc	r25, r19
    2266:	84 0f       	add	r24, r20
    2268:	95 1f       	adc	r25, r21
    226a:	80 31       	cpi	r24, 0x10	; 16
    226c:	91 05       	cpc	r25, r1
    226e:	59 f4       	brne	.+22     	; 0x2286 <LCD_WriteString+0xb4>
    2270:	89 81       	ldd	r24, Y+1	; 0x01
    2272:	88 23       	and	r24, r24
    2274:	41 f4       	brne	.+16     	; 0x2286 <LCD_WriteString+0xb4>
		{
			LCD_GoToPos(1,0);
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	60 e0       	ldi	r22, 0x00	; 0
    227a:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_GoToPos>
			line0++;
    227e:	89 81       	ldd	r24, Y+1	; 0x01
    2280:	8f 5f       	subi	r24, 0xFF	; 255
    2282:	89 83       	std	Y+1, r24	; 0x01
    2284:	28 c0       	rjmp	.+80     	; 0x22d6 <LCD_WriteString+0x104>
		}
		else if(((ROW * 16) + (index + COL ))<32 && line0 ==1)
    2286:	8d 81       	ldd	r24, Y+5	; 0x05
    2288:	88 2f       	mov	r24, r24
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	ac 01       	movw	r20, r24
    228e:	42 95       	swap	r20
    2290:	52 95       	swap	r21
    2292:	50 7f       	andi	r21, 0xF0	; 240
    2294:	54 27       	eor	r21, r20
    2296:	40 7f       	andi	r20, 0xF0	; 240
    2298:	54 27       	eor	r21, r20
    229a:	8a 81       	ldd	r24, Y+2	; 0x02
    229c:	28 2f       	mov	r18, r24
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	8e 81       	ldd	r24, Y+6	; 0x06
    22a2:	88 2f       	mov	r24, r24
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	82 0f       	add	r24, r18
    22a8:	93 1f       	adc	r25, r19
    22aa:	84 0f       	add	r24, r20
    22ac:	95 1f       	adc	r25, r21
    22ae:	80 32       	cpi	r24, 0x20	; 32
    22b0:	91 05       	cpc	r25, r1
    22b2:	8c f4       	brge	.+34     	; 0x22d6 <LCD_WriteString+0x104>
    22b4:	89 81       	ldd	r24, Y+1	; 0x01
    22b6:	81 30       	cpi	r24, 0x01	; 1
    22b8:	71 f4       	brne	.+28     	; 0x22d6 <LCD_WriteString+0x104>
		{
			LCD_WriteData(str[index]);
    22ba:	8a 81       	ldd	r24, Y+2	; 0x02
    22bc:	28 2f       	mov	r18, r24
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	8b 81       	ldd	r24, Y+3	; 0x03
    22c2:	9c 81       	ldd	r25, Y+4	; 0x04
    22c4:	fc 01       	movw	r30, r24
    22c6:	e2 0f       	add	r30, r18
    22c8:	f3 1f       	adc	r31, r19
    22ca:	80 81       	ld	r24, Z
    22cc:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_WriteData>
			index++;
    22d0:	8a 81       	ldd	r24, Y+2	; 0x02
    22d2:	8f 5f       	subi	r24, 0xFF	; 255
    22d4:	8a 83       	std	Y+2, r24	; 0x02
void LCD_WriteString(u8 *str,u8 ROW , u8 COL)
{
	LCD_GoToPos(ROW,COL);
	u8 index = 0;
	u8 line0 = 0;
	while(str[index] != '\0' && ((ROW * 16) + (index + COL ))< 32)//by default it will continue working until finding '\0'
    22d6:	8a 81       	ldd	r24, Y+2	; 0x02
    22d8:	28 2f       	mov	r18, r24
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	8b 81       	ldd	r24, Y+3	; 0x03
    22de:	9c 81       	ldd	r25, Y+4	; 0x04
    22e0:	fc 01       	movw	r30, r24
    22e2:	e2 0f       	add	r30, r18
    22e4:	f3 1f       	adc	r31, r19
    22e6:	80 81       	ld	r24, Z
    22e8:	88 23       	and	r24, r24
    22ea:	c1 f0       	breq	.+48     	; 0x231c <LCD_WriteString+0x14a>
    22ec:	8d 81       	ldd	r24, Y+5	; 0x05
    22ee:	88 2f       	mov	r24, r24
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	ac 01       	movw	r20, r24
    22f4:	42 95       	swap	r20
    22f6:	52 95       	swap	r21
    22f8:	50 7f       	andi	r21, 0xF0	; 240
    22fa:	54 27       	eor	r21, r20
    22fc:	40 7f       	andi	r20, 0xF0	; 240
    22fe:	54 27       	eor	r21, r20
    2300:	8a 81       	ldd	r24, Y+2	; 0x02
    2302:	28 2f       	mov	r18, r24
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	8e 81       	ldd	r24, Y+6	; 0x06
    2308:	88 2f       	mov	r24, r24
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	82 0f       	add	r24, r18
    230e:	93 1f       	adc	r25, r19
    2310:	84 0f       	add	r24, r20
    2312:	95 1f       	adc	r25, r21
    2314:	80 32       	cpi	r24, 0x20	; 32
    2316:	91 05       	cpc	r25, r1
    2318:	0c f4       	brge	.+2      	; 0x231c <LCD_WriteString+0x14a>
    231a:	6d cf       	rjmp	.-294    	; 0x21f6 <LCD_WriteString+0x24>
			LCD_WriteData(str[index]);
			index++;
		}

	}
}
    231c:	26 96       	adiw	r28, 0x06	; 6
    231e:	0f b6       	in	r0, 0x3f	; 63
    2320:	f8 94       	cli
    2322:	de bf       	out	0x3e, r29	; 62
    2324:	0f be       	out	0x3f, r0	; 63
    2326:	cd bf       	out	0x3d, r28	; 61
    2328:	cf 91       	pop	r28
    232a:	df 91       	pop	r29
    232c:	08 95       	ret

0000232e <LCD_Clear>:

void LCD_Clear()
{
    232e:	df 93       	push	r29
    2330:	cf 93       	push	r28
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
	LCD_WriteCmd(0x01);
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <LCD_WriteCmd>
}
    233c:	cf 91       	pop	r28
    233e:	df 91       	pop	r29
    2340:	08 95       	ret

00002342 <floatToString>:
volatile unsigned int hours = 0;
volatile unsigned int minutes = 0;
volatile unsigned int seconds = 0;
volatile char time_paused = 0; // To track if the clock is paused

void floatToString(char *str, float value) {
    2342:	df 93       	push	r29
    2344:	cf 93       	push	r28
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
    234a:	60 97       	sbiw	r28, 0x10	; 16
    234c:	0f b6       	in	r0, 0x3f	; 63
    234e:	f8 94       	cli
    2350:	de bf       	out	0x3e, r29	; 62
    2352:	0f be       	out	0x3f, r0	; 63
    2354:	cd bf       	out	0x3d, r28	; 61
    2356:	9a 87       	std	Y+10, r25	; 0x0a
    2358:	89 87       	std	Y+9, r24	; 0x09
    235a:	4b 87       	std	Y+11, r20	; 0x0b
    235c:	5c 87       	std	Y+12, r21	; 0x0c
    235e:	6d 87       	std	Y+13, r22	; 0x0d
    2360:	7e 87       	std	Y+14, r23	; 0x0e
    int tmpInt1 = (int)value;
    2362:	6b 85       	ldd	r22, Y+11	; 0x0b
    2364:	7c 85       	ldd	r23, Y+12	; 0x0c
    2366:	8d 85       	ldd	r24, Y+13	; 0x0d
    2368:	9e 85       	ldd	r25, Y+14	; 0x0e
    236a:	0e 94 0d 04 	call	0x81a	; 0x81a <__fixsfsi>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	98 87       	std	Y+8, r25	; 0x08
    2374:	8f 83       	std	Y+7, r24	; 0x07
    float tmpFrac = value - tmpInt1;
    2376:	8f 81       	ldd	r24, Y+7	; 0x07
    2378:	98 85       	ldd	r25, Y+8	; 0x08
    237a:	aa 27       	eor	r26, r26
    237c:	97 fd       	sbrc	r25, 7
    237e:	a0 95       	com	r26
    2380:	ba 2f       	mov	r27, r26
    2382:	bc 01       	movw	r22, r24
    2384:	cd 01       	movw	r24, r26
    2386:	0e 94 af 03 	call	0x75e	; 0x75e <__floatsisf>
    238a:	9b 01       	movw	r18, r22
    238c:	ac 01       	movw	r20, r24
    238e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2390:	7c 85       	ldd	r23, Y+12	; 0x0c
    2392:	8d 85       	ldd	r24, Y+13	; 0x0d
    2394:	9e 85       	ldd	r25, Y+14	; 0x0e
    2396:	0e 94 c7 01 	call	0x38e	; 0x38e <__subsf3>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	8b 83       	std	Y+3, r24	; 0x03
    23a0:	9c 83       	std	Y+4, r25	; 0x04
    23a2:	ad 83       	std	Y+5, r26	; 0x05
    23a4:	be 83       	std	Y+6, r27	; 0x06
    int tmpInt2 = trunc(tmpFrac * 100);
    23a6:	6b 81       	ldd	r22, Y+3	; 0x03
    23a8:	7c 81       	ldd	r23, Y+4	; 0x04
    23aa:	8d 81       	ldd	r24, Y+5	; 0x05
    23ac:	9e 81       	ldd	r25, Y+6	; 0x06
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	48 ec       	ldi	r20, 0xC8	; 200
    23b4:	52 e4       	ldi	r21, 0x42	; 66
    23b6:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	bc 01       	movw	r22, r24
    23c0:	cd 01       	movw	r24, r26
    23c2:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <trunc>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	bc 01       	movw	r22, r24
    23cc:	cd 01       	movw	r24, r26
    23ce:	0e 94 0d 04 	call	0x81a	; 0x81a <__fixsfsi>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	9a 83       	std	Y+2, r25	; 0x02
    23d8:	89 83       	std	Y+1, r24	; 0x01
    sprintf(str, "%d.%02d", tmpInt1, tmpInt2 < 0 ? -tmpInt2 : tmpInt2);  // Handle negative fractions
    23da:	89 81       	ldd	r24, Y+1	; 0x01
    23dc:	9a 81       	ldd	r25, Y+2	; 0x02
    23de:	98 8b       	std	Y+16, r25	; 0x10
    23e0:	8f 87       	std	Y+15, r24	; 0x0f
    23e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    23e4:	98 89       	ldd	r25, Y+16	; 0x10
    23e6:	99 23       	and	r25, r25
    23e8:	3c f4       	brge	.+14     	; 0x23f8 <floatToString+0xb6>
    23ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    23ec:	98 89       	ldd	r25, Y+16	; 0x10
    23ee:	90 95       	com	r25
    23f0:	81 95       	neg	r24
    23f2:	9f 4f       	sbci	r25, 0xFF	; 255
    23f4:	98 8b       	std	Y+16, r25	; 0x10
    23f6:	8f 87       	std	Y+15, r24	; 0x0f
    23f8:	8d b7       	in	r24, 0x3d	; 61
    23fa:	9e b7       	in	r25, 0x3e	; 62
    23fc:	08 97       	sbiw	r24, 0x08	; 8
    23fe:	0f b6       	in	r0, 0x3f	; 63
    2400:	f8 94       	cli
    2402:	9e bf       	out	0x3e, r25	; 62
    2404:	0f be       	out	0x3f, r0	; 63
    2406:	8d bf       	out	0x3d, r24	; 61
    2408:	ed b7       	in	r30, 0x3d	; 61
    240a:	fe b7       	in	r31, 0x3e	; 62
    240c:	31 96       	adiw	r30, 0x01	; 1
    240e:	89 85       	ldd	r24, Y+9	; 0x09
    2410:	9a 85       	ldd	r25, Y+10	; 0x0a
    2412:	91 83       	std	Z+1, r25	; 0x01
    2414:	80 83       	st	Z, r24
    2416:	80 e6       	ldi	r24, 0x60	; 96
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	93 83       	std	Z+3, r25	; 0x03
    241c:	82 83       	std	Z+2, r24	; 0x02
    241e:	8f 81       	ldd	r24, Y+7	; 0x07
    2420:	98 85       	ldd	r25, Y+8	; 0x08
    2422:	95 83       	std	Z+5, r25	; 0x05
    2424:	84 83       	std	Z+4, r24	; 0x04
    2426:	8f 85       	ldd	r24, Y+15	; 0x0f
    2428:	98 89       	ldd	r25, Y+16	; 0x10
    242a:	97 83       	std	Z+7, r25	; 0x07
    242c:	86 83       	std	Z+6, r24	; 0x06
    242e:	0e 94 32 25 	call	0x4a64	; 0x4a64 <sprintf>
    2432:	8d b7       	in	r24, 0x3d	; 61
    2434:	9e b7       	in	r25, 0x3e	; 62
    2436:	08 96       	adiw	r24, 0x08	; 8
    2438:	0f b6       	in	r0, 0x3f	; 63
    243a:	f8 94       	cli
    243c:	9e bf       	out	0x3e, r25	; 62
    243e:	0f be       	out	0x3f, r0	; 63
    2440:	8d bf       	out	0x3d, r24	; 61
}
    2442:	60 96       	adiw	r28, 0x10	; 16
    2444:	0f b6       	in	r0, 0x3f	; 63
    2446:	f8 94       	cli
    2448:	de bf       	out	0x3e, r29	; 62
    244a:	0f be       	out	0x3f, r0	; 63
    244c:	cd bf       	out	0x3d, r28	; 61
    244e:	cf 91       	pop	r28
    2450:	df 91       	pop	r29
    2452:	08 95       	ret

00002454 <intToString>:


void intToString(char *str, int32_t value) {
    2454:	df 93       	push	r29
    2456:	cf 93       	push	r28
    2458:	00 d0       	rcall	.+0      	; 0x245a <intToString+0x6>
    245a:	00 d0       	rcall	.+0      	; 0x245c <intToString+0x8>
    245c:	00 d0       	rcall	.+0      	; 0x245e <intToString+0xa>
    245e:	cd b7       	in	r28, 0x3d	; 61
    2460:	de b7       	in	r29, 0x3e	; 62
    2462:	9a 83       	std	Y+2, r25	; 0x02
    2464:	89 83       	std	Y+1, r24	; 0x01
    2466:	4b 83       	std	Y+3, r20	; 0x03
    2468:	5c 83       	std	Y+4, r21	; 0x04
    246a:	6d 83       	std	Y+5, r22	; 0x05
    246c:	7e 83       	std	Y+6, r23	; 0x06
    sprintf(str, "%ld", value);
    246e:	8d b7       	in	r24, 0x3d	; 61
    2470:	9e b7       	in	r25, 0x3e	; 62
    2472:	08 97       	sbiw	r24, 0x08	; 8
    2474:	0f b6       	in	r0, 0x3f	; 63
    2476:	f8 94       	cli
    2478:	9e bf       	out	0x3e, r25	; 62
    247a:	0f be       	out	0x3f, r0	; 63
    247c:	8d bf       	out	0x3d, r24	; 61
    247e:	ed b7       	in	r30, 0x3d	; 61
    2480:	fe b7       	in	r31, 0x3e	; 62
    2482:	31 96       	adiw	r30, 0x01	; 1
    2484:	89 81       	ldd	r24, Y+1	; 0x01
    2486:	9a 81       	ldd	r25, Y+2	; 0x02
    2488:	91 83       	std	Z+1, r25	; 0x01
    248a:	80 83       	st	Z, r24
    248c:	88 e6       	ldi	r24, 0x68	; 104
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	93 83       	std	Z+3, r25	; 0x03
    2492:	82 83       	std	Z+2, r24	; 0x02
    2494:	8b 81       	ldd	r24, Y+3	; 0x03
    2496:	9c 81       	ldd	r25, Y+4	; 0x04
    2498:	ad 81       	ldd	r26, Y+5	; 0x05
    249a:	be 81       	ldd	r27, Y+6	; 0x06
    249c:	84 83       	std	Z+4, r24	; 0x04
    249e:	95 83       	std	Z+5, r25	; 0x05
    24a0:	a6 83       	std	Z+6, r26	; 0x06
    24a2:	b7 83       	std	Z+7, r27	; 0x07
    24a4:	0e 94 32 25 	call	0x4a64	; 0x4a64 <sprintf>
    24a8:	8d b7       	in	r24, 0x3d	; 61
    24aa:	9e b7       	in	r25, 0x3e	; 62
    24ac:	08 96       	adiw	r24, 0x08	; 8
    24ae:	0f b6       	in	r0, 0x3f	; 63
    24b0:	f8 94       	cli
    24b2:	9e bf       	out	0x3e, r25	; 62
    24b4:	0f be       	out	0x3f, r0	; 63
    24b6:	8d bf       	out	0x3d, r24	; 61
}
    24b8:	26 96       	adiw	r28, 0x06	; 6
    24ba:	0f b6       	in	r0, 0x3f	; 63
    24bc:	f8 94       	cli
    24be:	de bf       	out	0x3e, r29	; 62
    24c0:	0f be       	out	0x3f, r0	; 63
    24c2:	cd bf       	out	0x3d, r28	; 61
    24c4:	cf 91       	pop	r28
    24c6:	df 91       	pop	r29
    24c8:	08 95       	ret

000024ca <setupIO>:

void setupIO() {
    24ca:	df 93       	push	r29
    24cc:	cf 93       	push	r28
    24ce:	cd b7       	in	r28, 0x3d	; 61
    24d0:	de b7       	in	r29, 0x3e	; 62
    // Set PORTD.4 as output
    DDRD |= (1 << 4);
    24d2:	a1 e3       	ldi	r26, 0x31	; 49
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	e1 e3       	ldi	r30, 0x31	; 49
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	80 81       	ld	r24, Z
    24dc:	80 61       	ori	r24, 0x10	; 16
    24de:	8c 93       	st	X, r24
    PORTD &= ~(1 << 4);  // Initially set the LED to off
    24e0:	a2 e3       	ldi	r26, 0x32	; 50
    24e2:	b0 e0       	ldi	r27, 0x00	; 0
    24e4:	e2 e3       	ldi	r30, 0x32	; 50
    24e6:	f0 e0       	ldi	r31, 0x00	; 0
    24e8:	80 81       	ld	r24, Z
    24ea:	8f 7e       	andi	r24, 0xEF	; 239
    24ec:	8c 93       	st	X, r24
}
    24ee:	cf 91       	pop	r28
    24f0:	df 91       	pop	r29
    24f2:	08 95       	ret

000024f4 <__vector_1>:

// INT0 Interrupt Service Routine - Toggles pause/resume for the clock
ISR(INT0_vect) {
    24f4:	1f 92       	push	r1
    24f6:	0f 92       	push	r0
    24f8:	0f b6       	in	r0, 0x3f	; 63
    24fa:	0f 92       	push	r0
    24fc:	11 24       	eor	r1, r1
    24fe:	2f 93       	push	r18
    2500:	3f 93       	push	r19
    2502:	4f 93       	push	r20
    2504:	5f 93       	push	r21
    2506:	6f 93       	push	r22
    2508:	7f 93       	push	r23
    250a:	8f 93       	push	r24
    250c:	9f 93       	push	r25
    250e:	af 93       	push	r26
    2510:	bf 93       	push	r27
    2512:	ef 93       	push	r30
    2514:	ff 93       	push	r31
    2516:	df 93       	push	r29
    2518:	cf 93       	push	r28
    251a:	0f 92       	push	r0
    251c:	cd b7       	in	r28, 0x3d	; 61
    251e:	de b7       	in	r29, 0x3e	; 62
    if (currentMode == STOPWATCH || currentMode == TIMER) {
    2520:	80 91 39 02 	lds	r24, 0x0239
    2524:	81 30       	cpi	r24, 0x01	; 1
    2526:	21 f0       	breq	.+8      	; 0x2530 <__vector_1+0x3c>
    2528:	80 91 39 02 	lds	r24, 0x0239
    252c:	82 30       	cpi	r24, 0x02	; 2
    252e:	61 f4       	brne	.+24     	; 0x2548 <__vector_1+0x54>
        time_paused = !time_paused; // Toggle the pause state only in clock mode
    2530:	80 91 41 02 	lds	r24, 0x0241
    2534:	19 82       	std	Y+1, r1	; 0x01
    2536:	88 23       	and	r24, r24
    2538:	11 f4       	brne	.+4      	; 0x253e <__vector_1+0x4a>
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	89 83       	std	Y+1, r24	; 0x01
    253e:	89 81       	ldd	r24, Y+1	; 0x01
    2540:	80 93 41 02 	sts	0x0241, r24
        LCD_Clear();
    2544:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_Clear>
    }
}
    2548:	0f 90       	pop	r0
    254a:	cf 91       	pop	r28
    254c:	df 91       	pop	r29
    254e:	ff 91       	pop	r31
    2550:	ef 91       	pop	r30
    2552:	bf 91       	pop	r27
    2554:	af 91       	pop	r26
    2556:	9f 91       	pop	r25
    2558:	8f 91       	pop	r24
    255a:	7f 91       	pop	r23
    255c:	6f 91       	pop	r22
    255e:	5f 91       	pop	r21
    2560:	4f 91       	pop	r20
    2562:	3f 91       	pop	r19
    2564:	2f 91       	pop	r18
    2566:	0f 90       	pop	r0
    2568:	0f be       	out	0x3f, r0	; 63
    256a:	0f 90       	pop	r0
    256c:	1f 90       	pop	r1
    256e:	18 95       	reti

00002570 <__vector_2>:

// INT1 Interrupt Service Routine - Resets the time in clock mode
ISR(INT1_vect) {
    2570:	1f 92       	push	r1
    2572:	0f 92       	push	r0
    2574:	0f b6       	in	r0, 0x3f	; 63
    2576:	0f 92       	push	r0
    2578:	11 24       	eor	r1, r1
    257a:	2f 93       	push	r18
    257c:	3f 93       	push	r19
    257e:	4f 93       	push	r20
    2580:	5f 93       	push	r21
    2582:	6f 93       	push	r22
    2584:	7f 93       	push	r23
    2586:	8f 93       	push	r24
    2588:	9f 93       	push	r25
    258a:	af 93       	push	r26
    258c:	bf 93       	push	r27
    258e:	ef 93       	push	r30
    2590:	ff 93       	push	r31
    2592:	df 93       	push	r29
    2594:	cf 93       	push	r28
    2596:	cd b7       	in	r28, 0x3d	; 61
    2598:	de b7       	in	r29, 0x3e	; 62
    if (currentMode == STOPWATCH) {
    259a:	80 91 39 02 	lds	r24, 0x0239
    259e:	81 30       	cpi	r24, 0x01	; 1
    25a0:	79 f4       	brne	.+30     	; 0x25c0 <__vector_2+0x50>
        hours = 0;
    25a2:	10 92 3c 02 	sts	0x023C, r1
    25a6:	10 92 3b 02 	sts	0x023B, r1
        minutes = 0;
    25aa:	10 92 3e 02 	sts	0x023E, r1
    25ae:	10 92 3d 02 	sts	0x023D, r1
        seconds = 0;
    25b2:	10 92 40 02 	sts	0x0240, r1
    25b6:	10 92 3f 02 	sts	0x023F, r1
        LCD_Clear();
    25ba:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_Clear>
    25be:	15 c0       	rjmp	.+42     	; 0x25ea <__vector_2+0x7a>
    } else if (currentMode == TIMER) {
    25c0:	80 91 39 02 	lds	r24, 0x0239
    25c4:	82 30       	cpi	r24, 0x02	; 2
    25c6:	89 f4       	brne	.+34     	; 0x25ea <__vector_2+0x7a>
        minutes = 0;
    25c8:	10 92 3e 02 	sts	0x023E, r1
    25cc:	10 92 3d 02 	sts	0x023D, r1
        seconds = 0;
    25d0:	10 92 40 02 	sts	0x0240, r1
    25d4:	10 92 3f 02 	sts	0x023F, r1
        PORTD |= (1 << 4);
    25d8:	a2 e3       	ldi	r26, 0x32	; 50
    25da:	b0 e0       	ldi	r27, 0x00	; 0
    25dc:	e2 e3       	ldi	r30, 0x32	; 50
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	80 81       	ld	r24, Z
    25e2:	80 61       	ori	r24, 0x10	; 16
    25e4:	8c 93       	st	X, r24
        LCD_Clear();
    25e6:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_Clear>
    }
}
    25ea:	cf 91       	pop	r28
    25ec:	df 91       	pop	r29
    25ee:	ff 91       	pop	r31
    25f0:	ef 91       	pop	r30
    25f2:	bf 91       	pop	r27
    25f4:	af 91       	pop	r26
    25f6:	9f 91       	pop	r25
    25f8:	8f 91       	pop	r24
    25fa:	7f 91       	pop	r23
    25fc:	6f 91       	pop	r22
    25fe:	5f 91       	pop	r21
    2600:	4f 91       	pop	r20
    2602:	3f 91       	pop	r19
    2604:	2f 91       	pop	r18
    2606:	0f 90       	pop	r0
    2608:	0f be       	out	0x3f, r0	; 63
    260a:	0f 90       	pop	r0
    260c:	1f 90       	pop	r1
    260e:	18 95       	reti

00002610 <__vector_3>:

// INT2 Interrupt Service Routine - Switches modes flexibly
ISR(INT2_vect) {
    2610:	1f 92       	push	r1
    2612:	0f 92       	push	r0
    2614:	0f b6       	in	r0, 0x3f	; 63
    2616:	0f 92       	push	r0
    2618:	11 24       	eor	r1, r1
    261a:	2f 93       	push	r18
    261c:	3f 93       	push	r19
    261e:	4f 93       	push	r20
    2620:	5f 93       	push	r21
    2622:	6f 93       	push	r22
    2624:	7f 93       	push	r23
    2626:	8f 93       	push	r24
    2628:	9f 93       	push	r25
    262a:	af 93       	push	r26
    262c:	bf 93       	push	r27
    262e:	ef 93       	push	r30
    2630:	ff 93       	push	r31
    2632:	df 93       	push	r29
    2634:	cf 93       	push	r28
    2636:	cd b7       	in	r28, 0x3d	; 61
    2638:	de b7       	in	r29, 0x3e	; 62
    if (currentMode == STOPWATCH) {
    263a:	80 91 39 02 	lds	r24, 0x0239
    263e:	81 30       	cpi	r24, 0x01	; 1
    2640:	21 f4       	brne	.+8      	; 0x264a <__vector_3+0x3a>
        currentMode = TIMER; // Direct switch to Clock from Timer
    2642:	82 e0       	ldi	r24, 0x02	; 2
    2644:	80 93 39 02 	sts	0x0239, r24
    2648:	0c c0       	rjmp	.+24     	; 0x2662 <__vector_3+0x52>
    } else {
        currentMode = (currentMode + 1) % 3; // Cycles through the modes normally
    264a:	80 91 39 02 	lds	r24, 0x0239
    264e:	88 2f       	mov	r24, r24
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	01 96       	adiw	r24, 0x01	; 1
    2654:	23 e0       	ldi	r18, 0x03	; 3
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	b9 01       	movw	r22, r18
    265a:	0e 94 97 24 	call	0x492e	; 0x492e <__divmodhi4>
    265e:	80 93 39 02 	sts	0x0239, r24
    }
    LCD_Clear(); // Clear Display command
    2662:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_Clear>
}
    2666:	cf 91       	pop	r28
    2668:	df 91       	pop	r29
    266a:	ff 91       	pop	r31
    266c:	ef 91       	pop	r30
    266e:	bf 91       	pop	r27
    2670:	af 91       	pop	r26
    2672:	9f 91       	pop	r25
    2674:	8f 91       	pop	r24
    2676:	7f 91       	pop	r23
    2678:	6f 91       	pop	r22
    267a:	5f 91       	pop	r21
    267c:	4f 91       	pop	r20
    267e:	3f 91       	pop	r19
    2680:	2f 91       	pop	r18
    2682:	0f 90       	pop	r0
    2684:	0f be       	out	0x3f, r0	; 63
    2686:	0f 90       	pop	r0
    2688:	1f 90       	pop	r1
    268a:	18 95       	reti

0000268c <setupInterrupts>:

void setupInterrupts() {
    268c:	df 93       	push	r29
    268e:	cf 93       	push	r28
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
    // Configure INT0,INT1,and INT2 to trigger on the rising edge
    MCUCR |= (1 << ISC01) | (1 << ISC00) | (1 << ISC11) | (1 << ISC10) | (1 << ISC2);
    2694:	a5 e5       	ldi	r26, 0x55	; 85
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	e5 e5       	ldi	r30, 0x55	; 85
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	8f 64       	ori	r24, 0x4F	; 79
    26a0:	8c 93       	st	X, r24

    // Enable INT0, INT1, and INT2
    GICR |= (1 << INT0) | (1 << INT1) | (1 << INT2);
    26a2:	ab e5       	ldi	r26, 0x5B	; 91
    26a4:	b0 e0       	ldi	r27, 0x00	; 0
    26a6:	eb e5       	ldi	r30, 0x5B	; 91
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	80 81       	ld	r24, Z
    26ac:	80 6e       	ori	r24, 0xE0	; 224
    26ae:	8c 93       	st	X, r24

    // Global interrupt enable
    sei();
    26b0:	78 94       	sei
}
    26b2:	cf 91       	pop	r28
    26b4:	df 91       	pop	r29
    26b6:	08 95       	ret

000026b8 <main>:

int main(void) {
    26b8:	ef 92       	push	r14
    26ba:	ff 92       	push	r15
    26bc:	0f 93       	push	r16
    26be:	1f 93       	push	r17
    26c0:	df 93       	push	r29
    26c2:	cf 93       	push	r28
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
    26c8:	cb 55       	subi	r28, 0x5B	; 91
    26ca:	d1 40       	sbci	r29, 0x01	; 1
    26cc:	0f b6       	in	r0, 0x3f	; 63
    26ce:	f8 94       	cli
    26d0:	de bf       	out	0x3e, r29	; 62
    26d2:	0f be       	out	0x3f, r0	; 63
    26d4:	cd bf       	out	0x3d, r28	; 61
    // Initialize LCD
    LCD_Initilaize();
    26d6:	0e 94 0a 0b 	call	0x1614	; 0x1614 <LCD_Initilaize>
    setupIO();
    26da:	0e 94 65 12 	call	0x24ca	; 0x24ca <setupIO>
    char key; // Define key variable here
    int32_t num1 = 0, num2 = 0, result = 0;
    26de:	fe 01       	movw	r30, r28
    26e0:	ea 5e       	subi	r30, 0xEA	; 234
    26e2:	fe 4f       	sbci	r31, 0xFE	; 254
    26e4:	10 82       	st	Z, r1
    26e6:	11 82       	std	Z+1, r1	; 0x01
    26e8:	12 82       	std	Z+2, r1	; 0x02
    26ea:	13 82       	std	Z+3, r1	; 0x03
    26ec:	fe 01       	movw	r30, r28
    26ee:	ee 5e       	subi	r30, 0xEE	; 238
    26f0:	fe 4f       	sbci	r31, 0xFE	; 254
    26f2:	10 82       	st	Z, r1
    26f4:	11 82       	std	Z+1, r1	; 0x01
    26f6:	12 82       	std	Z+2, r1	; 0x02
    26f8:	13 82       	std	Z+3, r1	; 0x03
    26fa:	fe 01       	movw	r30, r28
    26fc:	e2 5f       	subi	r30, 0xF2	; 242
    26fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2700:	10 82       	st	Z, r1
    2702:	11 82       	std	Z+1, r1	; 0x01
    2704:	12 82       	std	Z+2, r1	; 0x02
    2706:	13 82       	std	Z+3, r1	; 0x03
    char resultStr[32];  // Buffer to store the result string

    if (!welcomeDisplayed) {
    2708:	80 91 3a 02 	lds	r24, 0x023A
    270c:	88 23       	and	r24, r24
    270e:	09 f0       	breq	.+2      	; 0x2712 <main+0x5a>
    2710:	be c0       	rjmp	.+380    	; 0x288e <main+0x1d6>
        LCD_WriteString("Welcome", LCD_ROW_1, 0);
    2712:	8c e6       	ldi	r24, 0x6C	; 108
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	60 e0       	ldi	r22, 0x00	; 0
    2718:	40 e0       	ldi	r20, 0x00	; 0
    271a:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_WriteString>
    271e:	fe 01       	movw	r30, r28
    2720:	e9 5f       	subi	r30, 0xF9	; 249
    2722:	fe 4f       	sbci	r31, 0xFE	; 254
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	aa e7       	ldi	r26, 0x7A	; 122
    272a:	b4 e4       	ldi	r27, 0x44	; 68
    272c:	80 83       	st	Z, r24
    272e:	91 83       	std	Z+1, r25	; 0x01
    2730:	a2 83       	std	Z+2, r26	; 0x02
    2732:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2734:	8e 01       	movw	r16, r28
    2736:	0d 5f       	subi	r16, 0xFD	; 253
    2738:	1e 4f       	sbci	r17, 0xFE	; 254
    273a:	fe 01       	movw	r30, r28
    273c:	e9 5f       	subi	r30, 0xF9	; 249
    273e:	fe 4f       	sbci	r31, 0xFE	; 254
    2740:	60 81       	ld	r22, Z
    2742:	71 81       	ldd	r23, Z+1	; 0x01
    2744:	82 81       	ldd	r24, Z+2	; 0x02
    2746:	93 81       	ldd	r25, Z+3	; 0x03
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	4a e7       	ldi	r20, 0x7A	; 122
    274e:	55 e4       	ldi	r21, 0x45	; 69
    2750:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	f8 01       	movw	r30, r16
    275a:	80 83       	st	Z, r24
    275c:	91 83       	std	Z+1, r25	; 0x01
    275e:	a2 83       	std	Z+2, r26	; 0x02
    2760:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2762:	fe 01       	movw	r30, r28
    2764:	ed 5f       	subi	r30, 0xFD	; 253
    2766:	fe 4f       	sbci	r31, 0xFE	; 254
    2768:	60 81       	ld	r22, Z
    276a:	71 81       	ldd	r23, Z+1	; 0x01
    276c:	82 81       	ldd	r24, Z+2	; 0x02
    276e:	93 81       	ldd	r25, Z+3	; 0x03
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	40 e8       	ldi	r20, 0x80	; 128
    2776:	5f e3       	ldi	r21, 0x3F	; 63
    2778:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    277c:	88 23       	and	r24, r24
    277e:	44 f4       	brge	.+16     	; 0x2790 <main+0xd8>
		__ticks = 1;
    2780:	fe 01       	movw	r30, r28
    2782:	ef 5f       	subi	r30, 0xFF	; 255
    2784:	fe 4f       	sbci	r31, 0xFE	; 254
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	91 83       	std	Z+1, r25	; 0x01
    278c:	80 83       	st	Z, r24
    278e:	64 c0       	rjmp	.+200    	; 0x2858 <main+0x1a0>
	else if (__tmp > 65535)
    2790:	fe 01       	movw	r30, r28
    2792:	ed 5f       	subi	r30, 0xFD	; 253
    2794:	fe 4f       	sbci	r31, 0xFE	; 254
    2796:	60 81       	ld	r22, Z
    2798:	71 81       	ldd	r23, Z+1	; 0x01
    279a:	82 81       	ldd	r24, Z+2	; 0x02
    279c:	93 81       	ldd	r25, Z+3	; 0x03
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	3f ef       	ldi	r19, 0xFF	; 255
    27a2:	4f e7       	ldi	r20, 0x7F	; 127
    27a4:	57 e4       	ldi	r21, 0x47	; 71
    27a6:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    27aa:	18 16       	cp	r1, r24
    27ac:	0c f0       	brlt	.+2      	; 0x27b0 <main+0xf8>
    27ae:	43 c0       	rjmp	.+134    	; 0x2836 <main+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b0:	fe 01       	movw	r30, r28
    27b2:	e9 5f       	subi	r30, 0xF9	; 249
    27b4:	fe 4f       	sbci	r31, 0xFE	; 254
    27b6:	60 81       	ld	r22, Z
    27b8:	71 81       	ldd	r23, Z+1	; 0x01
    27ba:	82 81       	ldd	r24, Z+2	; 0x02
    27bc:	93 81       	ldd	r25, Z+3	; 0x03
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	40 e2       	ldi	r20, 0x20	; 32
    27c4:	51 e4       	ldi	r21, 0x41	; 65
    27c6:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	8e 01       	movw	r16, r28
    27d0:	0f 5f       	subi	r16, 0xFF	; 255
    27d2:	1e 4f       	sbci	r17, 0xFE	; 254
    27d4:	bc 01       	movw	r22, r24
    27d6:	cd 01       	movw	r24, r26
    27d8:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    27dc:	dc 01       	movw	r26, r24
    27de:	cb 01       	movw	r24, r22
    27e0:	f8 01       	movw	r30, r16
    27e2:	91 83       	std	Z+1, r25	; 0x01
    27e4:	80 83       	st	Z, r24
    27e6:	1f c0       	rjmp	.+62     	; 0x2826 <main+0x16e>
    27e8:	fe 01       	movw	r30, r28
    27ea:	e1 50       	subi	r30, 0x01	; 1
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	80 e9       	ldi	r24, 0x90	; 144
    27f0:	91 e0       	ldi	r25, 0x01	; 1
    27f2:	91 83       	std	Z+1, r25	; 0x01
    27f4:	80 83       	st	Z, r24
    27f6:	fe 01       	movw	r30, r28
    27f8:	e1 50       	subi	r30, 0x01	; 1
    27fa:	ff 4f       	sbci	r31, 0xFF	; 255
    27fc:	80 81       	ld	r24, Z
    27fe:	91 81       	ldd	r25, Z+1	; 0x01
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	f1 f7       	brne	.-4      	; 0x2800 <main+0x148>
    2804:	fe 01       	movw	r30, r28
    2806:	e1 50       	subi	r30, 0x01	; 1
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	91 83       	std	Z+1, r25	; 0x01
    280c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    280e:	de 01       	movw	r26, r28
    2810:	af 5f       	subi	r26, 0xFF	; 255
    2812:	be 4f       	sbci	r27, 0xFE	; 254
    2814:	fe 01       	movw	r30, r28
    2816:	ef 5f       	subi	r30, 0xFF	; 255
    2818:	fe 4f       	sbci	r31, 0xFE	; 254
    281a:	80 81       	ld	r24, Z
    281c:	91 81       	ldd	r25, Z+1	; 0x01
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	11 96       	adiw	r26, 0x01	; 1
    2822:	9c 93       	st	X, r25
    2824:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2826:	fe 01       	movw	r30, r28
    2828:	ef 5f       	subi	r30, 0xFF	; 255
    282a:	fe 4f       	sbci	r31, 0xFE	; 254
    282c:	80 81       	ld	r24, Z
    282e:	91 81       	ldd	r25, Z+1	; 0x01
    2830:	00 97       	sbiw	r24, 0x00	; 0
    2832:	d1 f6       	brne	.-76     	; 0x27e8 <main+0x130>
    2834:	27 c0       	rjmp	.+78     	; 0x2884 <main+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2836:	8e 01       	movw	r16, r28
    2838:	0f 5f       	subi	r16, 0xFF	; 255
    283a:	1e 4f       	sbci	r17, 0xFE	; 254
    283c:	fe 01       	movw	r30, r28
    283e:	ed 5f       	subi	r30, 0xFD	; 253
    2840:	fe 4f       	sbci	r31, 0xFE	; 254
    2842:	60 81       	ld	r22, Z
    2844:	71 81       	ldd	r23, Z+1	; 0x01
    2846:	82 81       	ldd	r24, Z+2	; 0x02
    2848:	93 81       	ldd	r25, Z+3	; 0x03
    284a:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	f8 01       	movw	r30, r16
    2854:	91 83       	std	Z+1, r25	; 0x01
    2856:	80 83       	st	Z, r24
    2858:	de 01       	movw	r26, r28
    285a:	a3 50       	subi	r26, 0x03	; 3
    285c:	bf 4f       	sbci	r27, 0xFF	; 255
    285e:	fe 01       	movw	r30, r28
    2860:	ef 5f       	subi	r30, 0xFF	; 255
    2862:	fe 4f       	sbci	r31, 0xFE	; 254
    2864:	80 81       	ld	r24, Z
    2866:	91 81       	ldd	r25, Z+1	; 0x01
    2868:	8d 93       	st	X+, r24
    286a:	9c 93       	st	X, r25
    286c:	fe 01       	movw	r30, r28
    286e:	e3 50       	subi	r30, 0x03	; 3
    2870:	ff 4f       	sbci	r31, 0xFF	; 255
    2872:	80 81       	ld	r24, Z
    2874:	91 81       	ldd	r25, Z+1	; 0x01
    2876:	01 97       	sbiw	r24, 0x01	; 1
    2878:	f1 f7       	brne	.-4      	; 0x2876 <main+0x1be>
    287a:	fe 01       	movw	r30, r28
    287c:	e3 50       	subi	r30, 0x03	; 3
    287e:	ff 4f       	sbci	r31, 0xFF	; 255
    2880:	91 83       	std	Z+1, r25	; 0x01
    2882:	80 83       	st	Z, r24
        _delay_ms(1000);  // Display welcome message for 2 seconds
        welcomeDisplayed = 1;  // Set the flag to prevent re-displaying
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	80 93 3a 02 	sts	0x023A, r24
        LCD_Clear(); // Clear Display after welcome message
    288a:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_Clear>
    }

    // Setup interrupts for INT0, INT1, and INT2
    setupInterrupts();
    288e:	0e 94 46 13 	call	0x268c	; 0x268c <setupInterrupts>

    char timeInput[6] = {'0', '0', ':', '0', '0', '\0'};  // Preformatted time input MM:SS
    2892:	ce 01       	movw	r24, r28
    2894:	85 5c       	subi	r24, 0xC5	; 197
    2896:	9e 4f       	sbci	r25, 0xFE	; 254
    2898:	c9 5a       	subi	r28, 0xA9	; 169
    289a:	de 4f       	sbci	r29, 0xFE	; 254
    289c:	99 83       	std	Y+1, r25	; 0x01
    289e:	88 83       	st	Y, r24
    28a0:	c7 55       	subi	r28, 0x57	; 87
    28a2:	d1 40       	sbci	r29, 0x01	; 1
    28a4:	01 e3       	ldi	r16, 0x31	; 49
    28a6:	12 e0       	ldi	r17, 0x02	; 2
    28a8:	c7 5a       	subi	r28, 0xA7	; 167
    28aa:	de 4f       	sbci	r29, 0xFE	; 254
    28ac:	19 83       	std	Y+1, r17	; 0x01
    28ae:	08 83       	st	Y, r16
    28b0:	c9 55       	subi	r28, 0x59	; 89
    28b2:	d1 40       	sbci	r29, 0x01	; 1
    28b4:	16 e0       	ldi	r17, 0x06	; 6
    28b6:	c5 5a       	subi	r28, 0xA5	; 165
    28b8:	de 4f       	sbci	r29, 0xFE	; 254
    28ba:	18 83       	st	Y, r17
    28bc:	cb 55       	subi	r28, 0x5B	; 91
    28be:	d1 40       	sbci	r29, 0x01	; 1
    28c0:	c7 5a       	subi	r28, 0xA7	; 167
    28c2:	de 4f       	sbci	r29, 0xFE	; 254
    28c4:	e8 81       	ld	r30, Y
    28c6:	f9 81       	ldd	r31, Y+1	; 0x01
    28c8:	c9 55       	subi	r28, 0x59	; 89
    28ca:	d1 40       	sbci	r29, 0x01	; 1
    28cc:	00 80       	ld	r0, Z
    28ce:	c7 5a       	subi	r28, 0xA7	; 167
    28d0:	de 4f       	sbci	r29, 0xFE	; 254
    28d2:	08 81       	ld	r16, Y
    28d4:	19 81       	ldd	r17, Y+1	; 0x01
    28d6:	c9 55       	subi	r28, 0x59	; 89
    28d8:	d1 40       	sbci	r29, 0x01	; 1
    28da:	0f 5f       	subi	r16, 0xFF	; 255
    28dc:	1f 4f       	sbci	r17, 0xFF	; 255
    28de:	c7 5a       	subi	r28, 0xA7	; 167
    28e0:	de 4f       	sbci	r29, 0xFE	; 254
    28e2:	19 83       	std	Y+1, r17	; 0x01
    28e4:	08 83       	st	Y, r16
    28e6:	c9 55       	subi	r28, 0x59	; 89
    28e8:	d1 40       	sbci	r29, 0x01	; 1
    28ea:	c9 5a       	subi	r28, 0xA9	; 169
    28ec:	de 4f       	sbci	r29, 0xFE	; 254
    28ee:	e8 81       	ld	r30, Y
    28f0:	f9 81       	ldd	r31, Y+1	; 0x01
    28f2:	c7 55       	subi	r28, 0x57	; 87
    28f4:	d1 40       	sbci	r29, 0x01	; 1
    28f6:	00 82       	st	Z, r0
    28f8:	c9 5a       	subi	r28, 0xA9	; 169
    28fa:	de 4f       	sbci	r29, 0xFE	; 254
    28fc:	08 81       	ld	r16, Y
    28fe:	19 81       	ldd	r17, Y+1	; 0x01
    2900:	c7 55       	subi	r28, 0x57	; 87
    2902:	d1 40       	sbci	r29, 0x01	; 1
    2904:	0f 5f       	subi	r16, 0xFF	; 255
    2906:	1f 4f       	sbci	r17, 0xFF	; 255
    2908:	c9 5a       	subi	r28, 0xA9	; 169
    290a:	de 4f       	sbci	r29, 0xFE	; 254
    290c:	19 83       	std	Y+1, r17	; 0x01
    290e:	08 83       	st	Y, r16
    2910:	c7 55       	subi	r28, 0x57	; 87
    2912:	d1 40       	sbci	r29, 0x01	; 1
    2914:	c5 5a       	subi	r28, 0xA5	; 165
    2916:	de 4f       	sbci	r29, 0xFE	; 254
    2918:	18 81       	ld	r17, Y
    291a:	cb 55       	subi	r28, 0x5B	; 91
    291c:	d1 40       	sbci	r29, 0x01	; 1
    291e:	11 50       	subi	r17, 0x01	; 1
    2920:	c5 5a       	subi	r28, 0xA5	; 165
    2922:	de 4f       	sbci	r29, 0xFE	; 254
    2924:	18 83       	st	Y, r17
    2926:	cb 55       	subi	r28, 0x5B	; 91
    2928:	d1 40       	sbci	r29, 0x01	; 1
    292a:	c5 5a       	subi	r28, 0xA5	; 165
    292c:	de 4f       	sbci	r29, 0xFE	; 254
    292e:	28 81       	ld	r18, Y
    2930:	cb 55       	subi	r28, 0x5B	; 91
    2932:	d1 40       	sbci	r29, 0x01	; 1
    2934:	22 23       	and	r18, r18
    2936:	21 f6       	brne	.-120    	; 0x28c0 <main+0x208>
    int timeIndex = 0;  // To navigate the timeInput array
    2938:	fe 01       	movw	r30, r28
    293a:	e4 5f       	subi	r30, 0xF4	; 244
    293c:	fe 4f       	sbci	r31, 0xFE	; 254
    293e:	11 82       	std	Z+1, r1	; 0x01
    2940:	10 82       	st	Z, r1

    while (1) {
        // Check if the mode has changed to avoid redundant LCD updates
        if (lastMode != currentMode) {
    2942:	90 91 30 02 	lds	r25, 0x0230
    2946:	80 91 39 02 	lds	r24, 0x0239
    294a:	98 17       	cp	r25, r24
    294c:	09 f4       	brne	.+2      	; 0x2950 <main+0x298>
    294e:	25 c3       	rjmp	.+1610   	; 0x2f9a <main+0x8e2>
            LCD_Clear();
    2950:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_Clear>
            lastMode = currentMode; // Update lastMode to currentMode
    2954:	80 91 39 02 	lds	r24, 0x0239
    2958:	80 93 30 02 	sts	0x0230, r24

            if (currentMode == TIMER) {
    295c:	80 91 39 02 	lds	r24, 0x0239
    2960:	82 30       	cpi	r24, 0x02	; 2
    2962:	09 f0       	breq	.+2      	; 0x2966 <main+0x2ae>
    2964:	d1 c0       	rjmp	.+418    	; 0x2b08 <main+0x450>
                LCD_WriteString("Timer Mode", LCD_ROW_1, 0);
    2966:	84 e7       	ldi	r24, 0x74	; 116
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	60 e0       	ldi	r22, 0x00	; 0
    296c:	40 e0       	ldi	r20, 0x00	; 0
    296e:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_WriteString>
    2972:	fe 01       	movw	r30, r28
    2974:	e7 50       	subi	r30, 0x07	; 7
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	aa e7       	ldi	r26, 0x7A	; 122
    297e:	b4 e4       	ldi	r27, 0x44	; 68
    2980:	80 83       	st	Z, r24
    2982:	91 83       	std	Z+1, r25	; 0x01
    2984:	a2 83       	std	Z+2, r26	; 0x02
    2986:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2988:	8e 01       	movw	r16, r28
    298a:	0b 50       	subi	r16, 0x0B	; 11
    298c:	1f 4f       	sbci	r17, 0xFF	; 255
    298e:	fe 01       	movw	r30, r28
    2990:	e7 50       	subi	r30, 0x07	; 7
    2992:	ff 4f       	sbci	r31, 0xFF	; 255
    2994:	60 81       	ld	r22, Z
    2996:	71 81       	ldd	r23, Z+1	; 0x01
    2998:	82 81       	ldd	r24, Z+2	; 0x02
    299a:	93 81       	ldd	r25, Z+3	; 0x03
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	4a e7       	ldi	r20, 0x7A	; 122
    29a2:	55 e4       	ldi	r21, 0x45	; 69
    29a4:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	f8 01       	movw	r30, r16
    29ae:	80 83       	st	Z, r24
    29b0:	91 83       	std	Z+1, r25	; 0x01
    29b2:	a2 83       	std	Z+2, r26	; 0x02
    29b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29b6:	fe 01       	movw	r30, r28
    29b8:	eb 50       	subi	r30, 0x0B	; 11
    29ba:	ff 4f       	sbci	r31, 0xFF	; 255
    29bc:	60 81       	ld	r22, Z
    29be:	71 81       	ldd	r23, Z+1	; 0x01
    29c0:	82 81       	ldd	r24, Z+2	; 0x02
    29c2:	93 81       	ldd	r25, Z+3	; 0x03
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	40 e8       	ldi	r20, 0x80	; 128
    29ca:	5f e3       	ldi	r21, 0x3F	; 63
    29cc:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    29d0:	88 23       	and	r24, r24
    29d2:	44 f4       	brge	.+16     	; 0x29e4 <main+0x32c>
		__ticks = 1;
    29d4:	fe 01       	movw	r30, r28
    29d6:	ed 50       	subi	r30, 0x0D	; 13
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	91 83       	std	Z+1, r25	; 0x01
    29e0:	80 83       	st	Z, r24
    29e2:	64 c0       	rjmp	.+200    	; 0x2aac <main+0x3f4>
	else if (__tmp > 65535)
    29e4:	fe 01       	movw	r30, r28
    29e6:	eb 50       	subi	r30, 0x0B	; 11
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	60 81       	ld	r22, Z
    29ec:	71 81       	ldd	r23, Z+1	; 0x01
    29ee:	82 81       	ldd	r24, Z+2	; 0x02
    29f0:	93 81       	ldd	r25, Z+3	; 0x03
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	3f ef       	ldi	r19, 0xFF	; 255
    29f6:	4f e7       	ldi	r20, 0x7F	; 127
    29f8:	57 e4       	ldi	r21, 0x47	; 71
    29fa:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    29fe:	18 16       	cp	r1, r24
    2a00:	0c f0       	brlt	.+2      	; 0x2a04 <main+0x34c>
    2a02:	43 c0       	rjmp	.+134    	; 0x2a8a <main+0x3d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a04:	fe 01       	movw	r30, r28
    2a06:	e7 50       	subi	r30, 0x07	; 7
    2a08:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0a:	60 81       	ld	r22, Z
    2a0c:	71 81       	ldd	r23, Z+1	; 0x01
    2a0e:	82 81       	ldd	r24, Z+2	; 0x02
    2a10:	93 81       	ldd	r25, Z+3	; 0x03
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	40 e2       	ldi	r20, 0x20	; 32
    2a18:	51 e4       	ldi	r21, 0x41	; 65
    2a1a:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	8e 01       	movw	r16, r28
    2a24:	0d 50       	subi	r16, 0x0D	; 13
    2a26:	1f 4f       	sbci	r17, 0xFF	; 255
    2a28:	bc 01       	movw	r22, r24
    2a2a:	cd 01       	movw	r24, r26
    2a2c:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	f8 01       	movw	r30, r16
    2a36:	91 83       	std	Z+1, r25	; 0x01
    2a38:	80 83       	st	Z, r24
    2a3a:	1f c0       	rjmp	.+62     	; 0x2a7a <main+0x3c2>
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	ef 50       	subi	r30, 0x0F	; 15
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	80 e9       	ldi	r24, 0x90	; 144
    2a44:	91 e0       	ldi	r25, 0x01	; 1
    2a46:	91 83       	std	Z+1, r25	; 0x01
    2a48:	80 83       	st	Z, r24
    2a4a:	fe 01       	movw	r30, r28
    2a4c:	ef 50       	subi	r30, 0x0F	; 15
    2a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a50:	80 81       	ld	r24, Z
    2a52:	91 81       	ldd	r25, Z+1	; 0x01
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	f1 f7       	brne	.-4      	; 0x2a54 <main+0x39c>
    2a58:	fe 01       	movw	r30, r28
    2a5a:	ef 50       	subi	r30, 0x0F	; 15
    2a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5e:	91 83       	std	Z+1, r25	; 0x01
    2a60:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a62:	de 01       	movw	r26, r28
    2a64:	ad 50       	subi	r26, 0x0D	; 13
    2a66:	bf 4f       	sbci	r27, 0xFF	; 255
    2a68:	fe 01       	movw	r30, r28
    2a6a:	ed 50       	subi	r30, 0x0D	; 13
    2a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6e:	80 81       	ld	r24, Z
    2a70:	91 81       	ldd	r25, Z+1	; 0x01
    2a72:	01 97       	sbiw	r24, 0x01	; 1
    2a74:	11 96       	adiw	r26, 0x01	; 1
    2a76:	9c 93       	st	X, r25
    2a78:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a7a:	fe 01       	movw	r30, r28
    2a7c:	ed 50       	subi	r30, 0x0D	; 13
    2a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a80:	80 81       	ld	r24, Z
    2a82:	91 81       	ldd	r25, Z+1	; 0x01
    2a84:	00 97       	sbiw	r24, 0x00	; 0
    2a86:	d1 f6       	brne	.-76     	; 0x2a3c <main+0x384>
    2a88:	27 c0       	rjmp	.+78     	; 0x2ad8 <main+0x420>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a8a:	8e 01       	movw	r16, r28
    2a8c:	0d 50       	subi	r16, 0x0D	; 13
    2a8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a90:	fe 01       	movw	r30, r28
    2a92:	eb 50       	subi	r30, 0x0B	; 11
    2a94:	ff 4f       	sbci	r31, 0xFF	; 255
    2a96:	60 81       	ld	r22, Z
    2a98:	71 81       	ldd	r23, Z+1	; 0x01
    2a9a:	82 81       	ldd	r24, Z+2	; 0x02
    2a9c:	93 81       	ldd	r25, Z+3	; 0x03
    2a9e:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	f8 01       	movw	r30, r16
    2aa8:	91 83       	std	Z+1, r25	; 0x01
    2aaa:	80 83       	st	Z, r24
    2aac:	de 01       	movw	r26, r28
    2aae:	a1 51       	subi	r26, 0x11	; 17
    2ab0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ab2:	fe 01       	movw	r30, r28
    2ab4:	ed 50       	subi	r30, 0x0D	; 13
    2ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab8:	80 81       	ld	r24, Z
    2aba:	91 81       	ldd	r25, Z+1	; 0x01
    2abc:	8d 93       	st	X+, r24
    2abe:	9c 93       	st	X, r25
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	e1 51       	subi	r30, 0x11	; 17
    2ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac6:	80 81       	ld	r24, Z
    2ac8:	91 81       	ldd	r25, Z+1	; 0x01
    2aca:	01 97       	sbiw	r24, 0x01	; 1
    2acc:	f1 f7       	brne	.-4      	; 0x2aca <main+0x412>
    2ace:	fe 01       	movw	r30, r28
    2ad0:	e1 51       	subi	r30, 0x11	; 17
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	91 83       	std	Z+1, r25	; 0x01
    2ad6:	80 83       	st	Z, r24
                _delay_ms(1000);
                LCD_Clear();
    2ad8:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_Clear>
                LCD_WriteString("Enter MM:SS", LCD_ROW_1, 0);
    2adc:	8f e7       	ldi	r24, 0x7F	; 127
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	60 e0       	ldi	r22, 0x00	; 0
    2ae2:	40 e0       	ldi	r20, 0x00	; 0
    2ae4:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_WriteString>
                LCD_GoToPos(LCD_ROW_2, 0);
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	60 e0       	ldi	r22, 0x00	; 0
    2aec:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_GoToPos>
                LCD_WriteString(timeInput, LCD_ROW_2, 0);
    2af0:	ce 01       	movw	r24, r28
    2af2:	85 5c       	subi	r24, 0xC5	; 197
    2af4:	9e 4f       	sbci	r25, 0xFE	; 254
    2af6:	61 e0       	ldi	r22, 0x01	; 1
    2af8:	40 e0       	ldi	r20, 0x00	; 0
    2afa:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_WriteString>
                timeIndex = 0;
    2afe:	fe 01       	movw	r30, r28
    2b00:	e4 5f       	subi	r30, 0xF4	; 244
    2b02:	fe 4f       	sbci	r31, 0xFE	; 254
    2b04:	11 82       	std	Z+1, r1	; 0x01
    2b06:	10 82       	st	Z, r1
            }

            switch (currentMode) {
    2b08:	80 91 39 02 	lds	r24, 0x0239
    2b0c:	e8 2e       	mov	r14, r24
    2b0e:	ff 24       	eor	r15, r15
    2b10:	cb 5a       	subi	r28, 0xAB	; 171
    2b12:	de 4f       	sbci	r29, 0xFE	; 254
    2b14:	f9 82       	std	Y+1, r15	; 0x01
    2b16:	e8 82       	st	Y, r14
    2b18:	c5 55       	subi	r28, 0x55	; 85
    2b1a:	d1 40       	sbci	r29, 0x01	; 1
    2b1c:	cb 5a       	subi	r28, 0xAB	; 171
    2b1e:	de 4f       	sbci	r29, 0xFE	; 254
    2b20:	08 81       	ld	r16, Y
    2b22:	19 81       	ldd	r17, Y+1	; 0x01
    2b24:	c5 55       	subi	r28, 0x55	; 85
    2b26:	d1 40       	sbci	r29, 0x01	; 1
    2b28:	01 15       	cp	r16, r1
    2b2a:	11 05       	cpc	r17, r1
    2b2c:	59 f0       	breq	.+22     	; 0x2b44 <main+0x48c>
    2b2e:	cb 5a       	subi	r28, 0xAB	; 171
    2b30:	de 4f       	sbci	r29, 0xFE	; 254
    2b32:	28 81       	ld	r18, Y
    2b34:	39 81       	ldd	r19, Y+1	; 0x01
    2b36:	c5 55       	subi	r28, 0x55	; 85
    2b38:	d1 40       	sbci	r29, 0x01	; 1
    2b3a:	21 30       	cpi	r18, 0x01	; 1
    2b3c:	31 05       	cpc	r19, r1
    2b3e:	09 f4       	brne	.+2      	; 0x2b42 <main+0x48a>
    2b40:	bd c0       	rjmp	.+378    	; 0x2cbc <main+0x604>
    2b42:	77 c1       	rjmp	.+750    	; 0x2e32 <main+0x77a>
                case CALCULATOR:
                    LCD_WriteString("Calculator Mode", LCD_ROW_1, 0);
    2b44:	8b e8       	ldi	r24, 0x8B	; 139
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	60 e0       	ldi	r22, 0x00	; 0
    2b4a:	40 e0       	ldi	r20, 0x00	; 0
    2b4c:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_WriteString>
    2b50:	fe 01       	movw	r30, r28
    2b52:	e5 51       	subi	r30, 0x15	; 21
    2b54:	ff 4f       	sbci	r31, 0xFF	; 255
    2b56:	80 e0       	ldi	r24, 0x00	; 0
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	aa e7       	ldi	r26, 0x7A	; 122
    2b5c:	b4 e4       	ldi	r27, 0x44	; 68
    2b5e:	80 83       	st	Z, r24
    2b60:	91 83       	std	Z+1, r25	; 0x01
    2b62:	a2 83       	std	Z+2, r26	; 0x02
    2b64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b66:	8e 01       	movw	r16, r28
    2b68:	09 51       	subi	r16, 0x19	; 25
    2b6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b6c:	fe 01       	movw	r30, r28
    2b6e:	e5 51       	subi	r30, 0x15	; 21
    2b70:	ff 4f       	sbci	r31, 0xFF	; 255
    2b72:	60 81       	ld	r22, Z
    2b74:	71 81       	ldd	r23, Z+1	; 0x01
    2b76:	82 81       	ldd	r24, Z+2	; 0x02
    2b78:	93 81       	ldd	r25, Z+3	; 0x03
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	4a e7       	ldi	r20, 0x7A	; 122
    2b80:	55 e4       	ldi	r21, 0x45	; 69
    2b82:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	f8 01       	movw	r30, r16
    2b8c:	80 83       	st	Z, r24
    2b8e:	91 83       	std	Z+1, r25	; 0x01
    2b90:	a2 83       	std	Z+2, r26	; 0x02
    2b92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b94:	fe 01       	movw	r30, r28
    2b96:	e9 51       	subi	r30, 0x19	; 25
    2b98:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9a:	60 81       	ld	r22, Z
    2b9c:	71 81       	ldd	r23, Z+1	; 0x01
    2b9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ba0:	93 81       	ldd	r25, Z+3	; 0x03
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	40 e8       	ldi	r20, 0x80	; 128
    2ba8:	5f e3       	ldi	r21, 0x3F	; 63
    2baa:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    2bae:	88 23       	and	r24, r24
    2bb0:	44 f4       	brge	.+16     	; 0x2bc2 <main+0x50a>
		__ticks = 1;
    2bb2:	fe 01       	movw	r30, r28
    2bb4:	eb 51       	subi	r30, 0x1B	; 27
    2bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	91 83       	std	Z+1, r25	; 0x01
    2bbe:	80 83       	st	Z, r24
    2bc0:	64 c0       	rjmp	.+200    	; 0x2c8a <main+0x5d2>
	else if (__tmp > 65535)
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	e9 51       	subi	r30, 0x19	; 25
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	60 81       	ld	r22, Z
    2bca:	71 81       	ldd	r23, Z+1	; 0x01
    2bcc:	82 81       	ldd	r24, Z+2	; 0x02
    2bce:	93 81       	ldd	r25, Z+3	; 0x03
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	3f ef       	ldi	r19, 0xFF	; 255
    2bd4:	4f e7       	ldi	r20, 0x7F	; 127
    2bd6:	57 e4       	ldi	r21, 0x47	; 71
    2bd8:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    2bdc:	18 16       	cp	r1, r24
    2bde:	0c f0       	brlt	.+2      	; 0x2be2 <main+0x52a>
    2be0:	43 c0       	rjmp	.+134    	; 0x2c68 <main+0x5b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be2:	fe 01       	movw	r30, r28
    2be4:	e5 51       	subi	r30, 0x15	; 21
    2be6:	ff 4f       	sbci	r31, 0xFF	; 255
    2be8:	60 81       	ld	r22, Z
    2bea:	71 81       	ldd	r23, Z+1	; 0x01
    2bec:	82 81       	ldd	r24, Z+2	; 0x02
    2bee:	93 81       	ldd	r25, Z+3	; 0x03
    2bf0:	20 e0       	ldi	r18, 0x00	; 0
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	40 e2       	ldi	r20, 0x20	; 32
    2bf6:	51 e4       	ldi	r21, 0x41	; 65
    2bf8:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	8e 01       	movw	r16, r28
    2c02:	0b 51       	subi	r16, 0x1B	; 27
    2c04:	1f 4f       	sbci	r17, 0xFF	; 255
    2c06:	bc 01       	movw	r22, r24
    2c08:	cd 01       	movw	r24, r26
    2c0a:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	f8 01       	movw	r30, r16
    2c14:	91 83       	std	Z+1, r25	; 0x01
    2c16:	80 83       	st	Z, r24
    2c18:	1f c0       	rjmp	.+62     	; 0x2c58 <main+0x5a0>
    2c1a:	fe 01       	movw	r30, r28
    2c1c:	ed 51       	subi	r30, 0x1D	; 29
    2c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c20:	80 e9       	ldi	r24, 0x90	; 144
    2c22:	91 e0       	ldi	r25, 0x01	; 1
    2c24:	91 83       	std	Z+1, r25	; 0x01
    2c26:	80 83       	st	Z, r24
    2c28:	fe 01       	movw	r30, r28
    2c2a:	ed 51       	subi	r30, 0x1D	; 29
    2c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2e:	80 81       	ld	r24, Z
    2c30:	91 81       	ldd	r25, Z+1	; 0x01
    2c32:	01 97       	sbiw	r24, 0x01	; 1
    2c34:	f1 f7       	brne	.-4      	; 0x2c32 <main+0x57a>
    2c36:	fe 01       	movw	r30, r28
    2c38:	ed 51       	subi	r30, 0x1D	; 29
    2c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3c:	91 83       	std	Z+1, r25	; 0x01
    2c3e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c40:	de 01       	movw	r26, r28
    2c42:	ab 51       	subi	r26, 0x1B	; 27
    2c44:	bf 4f       	sbci	r27, 0xFF	; 255
    2c46:	fe 01       	movw	r30, r28
    2c48:	eb 51       	subi	r30, 0x1B	; 27
    2c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4c:	80 81       	ld	r24, Z
    2c4e:	91 81       	ldd	r25, Z+1	; 0x01
    2c50:	01 97       	sbiw	r24, 0x01	; 1
    2c52:	11 96       	adiw	r26, 0x01	; 1
    2c54:	9c 93       	st	X, r25
    2c56:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c58:	fe 01       	movw	r30, r28
    2c5a:	eb 51       	subi	r30, 0x1B	; 27
    2c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5e:	80 81       	ld	r24, Z
    2c60:	91 81       	ldd	r25, Z+1	; 0x01
    2c62:	00 97       	sbiw	r24, 0x00	; 0
    2c64:	d1 f6       	brne	.-76     	; 0x2c1a <main+0x562>
    2c66:	27 c0       	rjmp	.+78     	; 0x2cb6 <main+0x5fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c68:	8e 01       	movw	r16, r28
    2c6a:	0b 51       	subi	r16, 0x1B	; 27
    2c6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c6e:	fe 01       	movw	r30, r28
    2c70:	e9 51       	subi	r30, 0x19	; 25
    2c72:	ff 4f       	sbci	r31, 0xFF	; 255
    2c74:	60 81       	ld	r22, Z
    2c76:	71 81       	ldd	r23, Z+1	; 0x01
    2c78:	82 81       	ldd	r24, Z+2	; 0x02
    2c7a:	93 81       	ldd	r25, Z+3	; 0x03
    2c7c:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    2c80:	dc 01       	movw	r26, r24
    2c82:	cb 01       	movw	r24, r22
    2c84:	f8 01       	movw	r30, r16
    2c86:	91 83       	std	Z+1, r25	; 0x01
    2c88:	80 83       	st	Z, r24
    2c8a:	de 01       	movw	r26, r28
    2c8c:	af 51       	subi	r26, 0x1F	; 31
    2c8e:	bf 4f       	sbci	r27, 0xFF	; 255
    2c90:	fe 01       	movw	r30, r28
    2c92:	eb 51       	subi	r30, 0x1B	; 27
    2c94:	ff 4f       	sbci	r31, 0xFF	; 255
    2c96:	80 81       	ld	r24, Z
    2c98:	91 81       	ldd	r25, Z+1	; 0x01
    2c9a:	8d 93       	st	X+, r24
    2c9c:	9c 93       	st	X, r25
    2c9e:	fe 01       	movw	r30, r28
    2ca0:	ef 51       	subi	r30, 0x1F	; 31
    2ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca4:	80 81       	ld	r24, Z
    2ca6:	91 81       	ldd	r25, Z+1	; 0x01
    2ca8:	01 97       	sbiw	r24, 0x01	; 1
    2caa:	f1 f7       	brne	.-4      	; 0x2ca8 <main+0x5f0>
    2cac:	fe 01       	movw	r30, r28
    2cae:	ef 51       	subi	r30, 0x1F	; 31
    2cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb2:	91 83       	std	Z+1, r25	; 0x01
    2cb4:	80 83       	st	Z, r24
                    _delay_ms(1000);
                    LCD_Clear();
    2cb6:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_Clear>
    2cba:	bb c0       	rjmp	.+374    	; 0x2e32 <main+0x77a>
                    break;
                case STOPWATCH:
                    LCD_WriteString("Stopwatch mode", LCD_ROW_1, 0);
    2cbc:	8b e9       	ldi	r24, 0x9B	; 155
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	60 e0       	ldi	r22, 0x00	; 0
    2cc2:	40 e0       	ldi	r20, 0x00	; 0
    2cc4:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_WriteString>
    2cc8:	fe 01       	movw	r30, r28
    2cca:	e3 52       	subi	r30, 0x23	; 35
    2ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cce:	80 e0       	ldi	r24, 0x00	; 0
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	aa e7       	ldi	r26, 0x7A	; 122
    2cd4:	b4 e4       	ldi	r27, 0x44	; 68
    2cd6:	80 83       	st	Z, r24
    2cd8:	91 83       	std	Z+1, r25	; 0x01
    2cda:	a2 83       	std	Z+2, r26	; 0x02
    2cdc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cde:	8e 01       	movw	r16, r28
    2ce0:	07 52       	subi	r16, 0x27	; 39
    2ce2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce4:	fe 01       	movw	r30, r28
    2ce6:	e3 52       	subi	r30, 0x23	; 35
    2ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cea:	60 81       	ld	r22, Z
    2cec:	71 81       	ldd	r23, Z+1	; 0x01
    2cee:	82 81       	ldd	r24, Z+2	; 0x02
    2cf0:	93 81       	ldd	r25, Z+3	; 0x03
    2cf2:	20 e0       	ldi	r18, 0x00	; 0
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	4a e7       	ldi	r20, 0x7A	; 122
    2cf8:	55 e4       	ldi	r21, 0x45	; 69
    2cfa:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    2cfe:	dc 01       	movw	r26, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	f8 01       	movw	r30, r16
    2d04:	80 83       	st	Z, r24
    2d06:	91 83       	std	Z+1, r25	; 0x01
    2d08:	a2 83       	std	Z+2, r26	; 0x02
    2d0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d0c:	fe 01       	movw	r30, r28
    2d0e:	e7 52       	subi	r30, 0x27	; 39
    2d10:	ff 4f       	sbci	r31, 0xFF	; 255
    2d12:	60 81       	ld	r22, Z
    2d14:	71 81       	ldd	r23, Z+1	; 0x01
    2d16:	82 81       	ldd	r24, Z+2	; 0x02
    2d18:	93 81       	ldd	r25, Z+3	; 0x03
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	40 e8       	ldi	r20, 0x80	; 128
    2d20:	5f e3       	ldi	r21, 0x3F	; 63
    2d22:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    2d26:	88 23       	and	r24, r24
    2d28:	44 f4       	brge	.+16     	; 0x2d3a <main+0x682>
		__ticks = 1;
    2d2a:	fe 01       	movw	r30, r28
    2d2c:	e9 52       	subi	r30, 0x29	; 41
    2d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d30:	81 e0       	ldi	r24, 0x01	; 1
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	91 83       	std	Z+1, r25	; 0x01
    2d36:	80 83       	st	Z, r24
    2d38:	64 c0       	rjmp	.+200    	; 0x2e02 <main+0x74a>
	else if (__tmp > 65535)
    2d3a:	fe 01       	movw	r30, r28
    2d3c:	e7 52       	subi	r30, 0x27	; 39
    2d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d40:	60 81       	ld	r22, Z
    2d42:	71 81       	ldd	r23, Z+1	; 0x01
    2d44:	82 81       	ldd	r24, Z+2	; 0x02
    2d46:	93 81       	ldd	r25, Z+3	; 0x03
    2d48:	20 e0       	ldi	r18, 0x00	; 0
    2d4a:	3f ef       	ldi	r19, 0xFF	; 255
    2d4c:	4f e7       	ldi	r20, 0x7F	; 127
    2d4e:	57 e4       	ldi	r21, 0x47	; 71
    2d50:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    2d54:	18 16       	cp	r1, r24
    2d56:	0c f0       	brlt	.+2      	; 0x2d5a <main+0x6a2>
    2d58:	43 c0       	rjmp	.+134    	; 0x2de0 <main+0x728>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d5a:	fe 01       	movw	r30, r28
    2d5c:	e3 52       	subi	r30, 0x23	; 35
    2d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d60:	60 81       	ld	r22, Z
    2d62:	71 81       	ldd	r23, Z+1	; 0x01
    2d64:	82 81       	ldd	r24, Z+2	; 0x02
    2d66:	93 81       	ldd	r25, Z+3	; 0x03
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	40 e2       	ldi	r20, 0x20	; 32
    2d6e:	51 e4       	ldi	r21, 0x41	; 65
    2d70:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	8e 01       	movw	r16, r28
    2d7a:	09 52       	subi	r16, 0x29	; 41
    2d7c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d7e:	bc 01       	movw	r22, r24
    2d80:	cd 01       	movw	r24, r26
    2d82:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	f8 01       	movw	r30, r16
    2d8c:	91 83       	std	Z+1, r25	; 0x01
    2d8e:	80 83       	st	Z, r24
    2d90:	1f c0       	rjmp	.+62     	; 0x2dd0 <main+0x718>
    2d92:	fe 01       	movw	r30, r28
    2d94:	eb 52       	subi	r30, 0x2B	; 43
    2d96:	ff 4f       	sbci	r31, 0xFF	; 255
    2d98:	80 e9       	ldi	r24, 0x90	; 144
    2d9a:	91 e0       	ldi	r25, 0x01	; 1
    2d9c:	91 83       	std	Z+1, r25	; 0x01
    2d9e:	80 83       	st	Z, r24
    2da0:	fe 01       	movw	r30, r28
    2da2:	eb 52       	subi	r30, 0x2B	; 43
    2da4:	ff 4f       	sbci	r31, 0xFF	; 255
    2da6:	80 81       	ld	r24, Z
    2da8:	91 81       	ldd	r25, Z+1	; 0x01
    2daa:	01 97       	sbiw	r24, 0x01	; 1
    2dac:	f1 f7       	brne	.-4      	; 0x2daa <main+0x6f2>
    2dae:	fe 01       	movw	r30, r28
    2db0:	eb 52       	subi	r30, 0x2B	; 43
    2db2:	ff 4f       	sbci	r31, 0xFF	; 255
    2db4:	91 83       	std	Z+1, r25	; 0x01
    2db6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db8:	de 01       	movw	r26, r28
    2dba:	a9 52       	subi	r26, 0x29	; 41
    2dbc:	bf 4f       	sbci	r27, 0xFF	; 255
    2dbe:	fe 01       	movw	r30, r28
    2dc0:	e9 52       	subi	r30, 0x29	; 41
    2dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc4:	80 81       	ld	r24, Z
    2dc6:	91 81       	ldd	r25, Z+1	; 0x01
    2dc8:	01 97       	sbiw	r24, 0x01	; 1
    2dca:	11 96       	adiw	r26, 0x01	; 1
    2dcc:	9c 93       	st	X, r25
    2dce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dd0:	fe 01       	movw	r30, r28
    2dd2:	e9 52       	subi	r30, 0x29	; 41
    2dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd6:	80 81       	ld	r24, Z
    2dd8:	91 81       	ldd	r25, Z+1	; 0x01
    2dda:	00 97       	sbiw	r24, 0x00	; 0
    2ddc:	d1 f6       	brne	.-76     	; 0x2d92 <main+0x6da>
    2dde:	27 c0       	rjmp	.+78     	; 0x2e2e <main+0x776>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2de0:	8e 01       	movw	r16, r28
    2de2:	09 52       	subi	r16, 0x29	; 41
    2de4:	1f 4f       	sbci	r17, 0xFF	; 255
    2de6:	fe 01       	movw	r30, r28
    2de8:	e7 52       	subi	r30, 0x27	; 39
    2dea:	ff 4f       	sbci	r31, 0xFF	; 255
    2dec:	60 81       	ld	r22, Z
    2dee:	71 81       	ldd	r23, Z+1	; 0x01
    2df0:	82 81       	ldd	r24, Z+2	; 0x02
    2df2:	93 81       	ldd	r25, Z+3	; 0x03
    2df4:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	f8 01       	movw	r30, r16
    2dfe:	91 83       	std	Z+1, r25	; 0x01
    2e00:	80 83       	st	Z, r24
    2e02:	de 01       	movw	r26, r28
    2e04:	ad 52       	subi	r26, 0x2D	; 45
    2e06:	bf 4f       	sbci	r27, 0xFF	; 255
    2e08:	fe 01       	movw	r30, r28
    2e0a:	e9 52       	subi	r30, 0x29	; 41
    2e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0e:	80 81       	ld	r24, Z
    2e10:	91 81       	ldd	r25, Z+1	; 0x01
    2e12:	8d 93       	st	X+, r24
    2e14:	9c 93       	st	X, r25
    2e16:	fe 01       	movw	r30, r28
    2e18:	ed 52       	subi	r30, 0x2D	; 45
    2e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1c:	80 81       	ld	r24, Z
    2e1e:	91 81       	ldd	r25, Z+1	; 0x01
    2e20:	01 97       	sbiw	r24, 0x01	; 1
    2e22:	f1 f7       	brne	.-4      	; 0x2e20 <main+0x768>
    2e24:	fe 01       	movw	r30, r28
    2e26:	ed 52       	subi	r30, 0x2D	; 45
    2e28:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2a:	91 83       	std	Z+1, r25	; 0x01
    2e2c:	80 83       	st	Z, r24
                    _delay_ms(1000);  // Display welcome message for 2 seconds
                    LCD_Clear();
    2e2e:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_Clear>
    2e32:	fe 01       	movw	r30, r28
    2e34:	e1 53       	subi	r30, 0x31	; 49
    2e36:	ff 4f       	sbci	r31, 0xFF	; 255
    2e38:	80 e0       	ldi	r24, 0x00	; 0
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	aa ef       	ldi	r26, 0xFA	; 250
    2e3e:	b3 e4       	ldi	r27, 0x43	; 67
    2e40:	80 83       	st	Z, r24
    2e42:	91 83       	std	Z+1, r25	; 0x01
    2e44:	a2 83       	std	Z+2, r26	; 0x02
    2e46:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e48:	8e 01       	movw	r16, r28
    2e4a:	05 53       	subi	r16, 0x35	; 53
    2e4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e4e:	fe 01       	movw	r30, r28
    2e50:	e1 53       	subi	r30, 0x31	; 49
    2e52:	ff 4f       	sbci	r31, 0xFF	; 255
    2e54:	60 81       	ld	r22, Z
    2e56:	71 81       	ldd	r23, Z+1	; 0x01
    2e58:	82 81       	ldd	r24, Z+2	; 0x02
    2e5a:	93 81       	ldd	r25, Z+3	; 0x03
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	4a e7       	ldi	r20, 0x7A	; 122
    2e62:	55 e4       	ldi	r21, 0x45	; 69
    2e64:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    2e68:	dc 01       	movw	r26, r24
    2e6a:	cb 01       	movw	r24, r22
    2e6c:	f8 01       	movw	r30, r16
    2e6e:	80 83       	st	Z, r24
    2e70:	91 83       	std	Z+1, r25	; 0x01
    2e72:	a2 83       	std	Z+2, r26	; 0x02
    2e74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e76:	fe 01       	movw	r30, r28
    2e78:	e5 53       	subi	r30, 0x35	; 53
    2e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7c:	60 81       	ld	r22, Z
    2e7e:	71 81       	ldd	r23, Z+1	; 0x01
    2e80:	82 81       	ldd	r24, Z+2	; 0x02
    2e82:	93 81       	ldd	r25, Z+3	; 0x03
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	40 e8       	ldi	r20, 0x80	; 128
    2e8a:	5f e3       	ldi	r21, 0x3F	; 63
    2e8c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    2e90:	88 23       	and	r24, r24
    2e92:	44 f4       	brge	.+16     	; 0x2ea4 <main+0x7ec>
		__ticks = 1;
    2e94:	fe 01       	movw	r30, r28
    2e96:	e7 53       	subi	r30, 0x37	; 55
    2e98:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	91 83       	std	Z+1, r25	; 0x01
    2ea0:	80 83       	st	Z, r24
    2ea2:	64 c0       	rjmp	.+200    	; 0x2f6c <main+0x8b4>
	else if (__tmp > 65535)
    2ea4:	fe 01       	movw	r30, r28
    2ea6:	e5 53       	subi	r30, 0x35	; 53
    2ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eaa:	60 81       	ld	r22, Z
    2eac:	71 81       	ldd	r23, Z+1	; 0x01
    2eae:	82 81       	ldd	r24, Z+2	; 0x02
    2eb0:	93 81       	ldd	r25, Z+3	; 0x03
    2eb2:	20 e0       	ldi	r18, 0x00	; 0
    2eb4:	3f ef       	ldi	r19, 0xFF	; 255
    2eb6:	4f e7       	ldi	r20, 0x7F	; 127
    2eb8:	57 e4       	ldi	r21, 0x47	; 71
    2eba:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    2ebe:	18 16       	cp	r1, r24
    2ec0:	0c f0       	brlt	.+2      	; 0x2ec4 <main+0x80c>
    2ec2:	43 c0       	rjmp	.+134    	; 0x2f4a <main+0x892>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec4:	fe 01       	movw	r30, r28
    2ec6:	e1 53       	subi	r30, 0x31	; 49
    2ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eca:	60 81       	ld	r22, Z
    2ecc:	71 81       	ldd	r23, Z+1	; 0x01
    2ece:	82 81       	ldd	r24, Z+2	; 0x02
    2ed0:	93 81       	ldd	r25, Z+3	; 0x03
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	40 e2       	ldi	r20, 0x20	; 32
    2ed8:	51 e4       	ldi	r21, 0x41	; 65
    2eda:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    2ede:	dc 01       	movw	r26, r24
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	8e 01       	movw	r16, r28
    2ee4:	07 53       	subi	r16, 0x37	; 55
    2ee6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ee8:	bc 01       	movw	r22, r24
    2eea:	cd 01       	movw	r24, r26
    2eec:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    2ef0:	dc 01       	movw	r26, r24
    2ef2:	cb 01       	movw	r24, r22
    2ef4:	f8 01       	movw	r30, r16
    2ef6:	91 83       	std	Z+1, r25	; 0x01
    2ef8:	80 83       	st	Z, r24
    2efa:	1f c0       	rjmp	.+62     	; 0x2f3a <main+0x882>
    2efc:	fe 01       	movw	r30, r28
    2efe:	e9 53       	subi	r30, 0x39	; 57
    2f00:	ff 4f       	sbci	r31, 0xFF	; 255
    2f02:	80 e9       	ldi	r24, 0x90	; 144
    2f04:	91 e0       	ldi	r25, 0x01	; 1
    2f06:	91 83       	std	Z+1, r25	; 0x01
    2f08:	80 83       	st	Z, r24
    2f0a:	fe 01       	movw	r30, r28
    2f0c:	e9 53       	subi	r30, 0x39	; 57
    2f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f10:	80 81       	ld	r24, Z
    2f12:	91 81       	ldd	r25, Z+1	; 0x01
    2f14:	01 97       	sbiw	r24, 0x01	; 1
    2f16:	f1 f7       	brne	.-4      	; 0x2f14 <main+0x85c>
    2f18:	fe 01       	movw	r30, r28
    2f1a:	e9 53       	subi	r30, 0x39	; 57
    2f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1e:	91 83       	std	Z+1, r25	; 0x01
    2f20:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f22:	de 01       	movw	r26, r28
    2f24:	a7 53       	subi	r26, 0x37	; 55
    2f26:	bf 4f       	sbci	r27, 0xFF	; 255
    2f28:	fe 01       	movw	r30, r28
    2f2a:	e7 53       	subi	r30, 0x37	; 55
    2f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2e:	80 81       	ld	r24, Z
    2f30:	91 81       	ldd	r25, Z+1	; 0x01
    2f32:	01 97       	sbiw	r24, 0x01	; 1
    2f34:	11 96       	adiw	r26, 0x01	; 1
    2f36:	9c 93       	st	X, r25
    2f38:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f3a:	fe 01       	movw	r30, r28
    2f3c:	e7 53       	subi	r30, 0x37	; 55
    2f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f40:	80 81       	ld	r24, Z
    2f42:	91 81       	ldd	r25, Z+1	; 0x01
    2f44:	00 97       	sbiw	r24, 0x00	; 0
    2f46:	d1 f6       	brne	.-76     	; 0x2efc <main+0x844>
    2f48:	28 c0       	rjmp	.+80     	; 0x2f9a <main+0x8e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f4a:	8e 01       	movw	r16, r28
    2f4c:	07 53       	subi	r16, 0x37	; 55
    2f4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f50:	fe 01       	movw	r30, r28
    2f52:	e5 53       	subi	r30, 0x35	; 53
    2f54:	ff 4f       	sbci	r31, 0xFF	; 255
    2f56:	60 81       	ld	r22, Z
    2f58:	71 81       	ldd	r23, Z+1	; 0x01
    2f5a:	82 81       	ldd	r24, Z+2	; 0x02
    2f5c:	93 81       	ldd	r25, Z+3	; 0x03
    2f5e:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    2f62:	dc 01       	movw	r26, r24
    2f64:	cb 01       	movw	r24, r22
    2f66:	f8 01       	movw	r30, r16
    2f68:	91 83       	std	Z+1, r25	; 0x01
    2f6a:	80 83       	st	Z, r24
    2f6c:	de 01       	movw	r26, r28
    2f6e:	ab 53       	subi	r26, 0x3B	; 59
    2f70:	bf 4f       	sbci	r27, 0xFF	; 255
    2f72:	fe 01       	movw	r30, r28
    2f74:	e7 53       	subi	r30, 0x37	; 55
    2f76:	ff 4f       	sbci	r31, 0xFF	; 255
    2f78:	80 81       	ld	r24, Z
    2f7a:	91 81       	ldd	r25, Z+1	; 0x01
    2f7c:	11 96       	adiw	r26, 0x01	; 1
    2f7e:	9c 93       	st	X, r25
    2f80:	8e 93       	st	-X, r24
    2f82:	fe 01       	movw	r30, r28
    2f84:	eb 53       	subi	r30, 0x3B	; 59
    2f86:	ff 4f       	sbci	r31, 0xFF	; 255
    2f88:	80 81       	ld	r24, Z
    2f8a:	91 81       	ldd	r25, Z+1	; 0x01
    2f8c:	01 97       	sbiw	r24, 0x01	; 1
    2f8e:	f1 f7       	brne	.-4      	; 0x2f8c <main+0x8d4>
    2f90:	fe 01       	movw	r30, r28
    2f92:	eb 53       	subi	r30, 0x3B	; 59
    2f94:	ff 4f       	sbci	r31, 0xFF	; 255
    2f96:	91 83       	std	Z+1, r25	; 0x01
    2f98:	80 83       	st	Z, r24
            }
            _delay_ms(500); // Allow display to stabilize
        }

        // Mode-specific operations
        switch (currentMode) {
    2f9a:	80 91 39 02 	lds	r24, 0x0239
    2f9e:	e8 2e       	mov	r14, r24
    2fa0:	ff 24       	eor	r15, r15
    2fa2:	cd 5a       	subi	r28, 0xAD	; 173
    2fa4:	de 4f       	sbci	r29, 0xFE	; 254
    2fa6:	f9 82       	std	Y+1, r15	; 0x01
    2fa8:	e8 82       	st	Y, r14
    2faa:	c3 55       	subi	r28, 0x53	; 83
    2fac:	d1 40       	sbci	r29, 0x01	; 1
    2fae:	cd 5a       	subi	r28, 0xAD	; 173
    2fb0:	de 4f       	sbci	r29, 0xFE	; 254
    2fb2:	08 81       	ld	r16, Y
    2fb4:	19 81       	ldd	r17, Y+1	; 0x01
    2fb6:	c3 55       	subi	r28, 0x53	; 83
    2fb8:	d1 40       	sbci	r29, 0x01	; 1
    2fba:	01 30       	cpi	r16, 0x01	; 1
    2fbc:	11 05       	cpc	r17, r1
    2fbe:	09 f4       	brne	.+2      	; 0x2fc2 <main+0x90a>
    2fc0:	fe c6       	rjmp	.+3580   	; 0x3dbe <main+0x1706>
    2fc2:	cd 5a       	subi	r28, 0xAD	; 173
    2fc4:	de 4f       	sbci	r29, 0xFE	; 254
    2fc6:	28 81       	ld	r18, Y
    2fc8:	39 81       	ldd	r19, Y+1	; 0x01
    2fca:	c3 55       	subi	r28, 0x53	; 83
    2fcc:	d1 40       	sbci	r29, 0x01	; 1
    2fce:	22 30       	cpi	r18, 0x02	; 2
    2fd0:	31 05       	cpc	r19, r1
    2fd2:	11 f4       	brne	.+4      	; 0x2fd8 <main+0x920>
    2fd4:	0c 94 fe 23 	jmp	0x47fc	; 0x47fc <main+0x2144>
    2fd8:	cd 5a       	subi	r28, 0xAD	; 173
    2fda:	de 4f       	sbci	r29, 0xFE	; 254
    2fdc:	88 81       	ld	r24, Y
    2fde:	99 81       	ldd	r25, Y+1	; 0x01
    2fe0:	c3 55       	subi	r28, 0x53	; 83
    2fe2:	d1 40       	sbci	r29, 0x01	; 1
    2fe4:	00 97       	sbiw	r24, 0x00	; 0
    2fe6:	11 f0       	breq	.+4      	; 0x2fec <main+0x934>
    2fe8:	0c 94 03 24 	jmp	0x4806	; 0x4806 <main+0x214e>
            case CALCULATOR:
                // Read the first operand
                LCD_WriteString("Enter num1:", LCD_ROW_1, 0);
    2fec:	8a ea       	ldi	r24, 0xAA	; 170
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	60 e0       	ldi	r22, 0x00	; 0
    2ff2:	40 e0       	ldi	r20, 0x00	; 0
    2ff4:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_WriteString>
                LCD_GoToPos(LCD_ROW_2, 0);
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	60 e0       	ldi	r22, 0x00	; 0
    2ffc:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_GoToPos>
                num1 = 0;
    3000:	fe 01       	movw	r30, r28
    3002:	ea 5e       	subi	r30, 0xEA	; 234
    3004:	fe 4f       	sbci	r31, 0xFE	; 254
    3006:	10 82       	st	Z, r1
    3008:	11 82       	std	Z+1, r1	; 0x01
    300a:	12 82       	std	Z+2, r1	; 0x02
    300c:	13 82       	std	Z+3, r1	; 0x03
    300e:	0e c1       	rjmp	.+540    	; 0x322c <main+0xb74>
                while (1 && currentMode == CALCULATOR) {
                    key = KEYPAD_getPressedKey();
    3010:	0e 94 22 0a 	call	0x1444	; 0x1444 <KEYPAD_getPressedKey>
    3014:	fe 01       	movw	r30, r28
    3016:	e6 5e       	subi	r30, 0xE6	; 230
    3018:	fe 4f       	sbci	r31, 0xFE	; 254
    301a:	80 83       	st	Z, r24
                    if (key >= '0' && key <= '9') {
    301c:	fe 01       	movw	r30, r28
    301e:	e6 5e       	subi	r30, 0xE6	; 230
    3020:	fe 4f       	sbci	r31, 0xFE	; 254
    3022:	80 81       	ld	r24, Z
    3024:	80 33       	cpi	r24, 0x30	; 48
    3026:	08 f4       	brcc	.+2      	; 0x302a <main+0x972>
    3028:	e9 c0       	rjmp	.+466    	; 0x31fc <main+0xb44>
    302a:	fe 01       	movw	r30, r28
    302c:	e6 5e       	subi	r30, 0xE6	; 230
    302e:	fe 4f       	sbci	r31, 0xFE	; 254
    3030:	80 81       	ld	r24, Z
    3032:	8a 33       	cpi	r24, 0x3A	; 58
    3034:	08 f0       	brcs	.+2      	; 0x3038 <main+0x980>
    3036:	e2 c0       	rjmp	.+452    	; 0x31fc <main+0xb44>
                        num1 = num1 * 10 + (key - '0');
    3038:	fe 01       	movw	r30, r28
    303a:	ea 5e       	subi	r30, 0xEA	; 234
    303c:	fe 4f       	sbci	r31, 0xFE	; 254
    303e:	80 81       	ld	r24, Z
    3040:	91 81       	ldd	r25, Z+1	; 0x01
    3042:	a2 81       	ldd	r26, Z+2	; 0x02
    3044:	b3 81       	ldd	r27, Z+3	; 0x03
    3046:	2a e0       	ldi	r18, 0x0A	; 10
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	40 e0       	ldi	r20, 0x00	; 0
    304c:	50 e0       	ldi	r21, 0x00	; 0
    304e:	bc 01       	movw	r22, r24
    3050:	cd 01       	movw	r24, r26
    3052:	0e 94 78 24 	call	0x48f0	; 0x48f0 <__mulsi3>
    3056:	9b 01       	movw	r18, r22
    3058:	ac 01       	movw	r20, r24
    305a:	fe 01       	movw	r30, r28
    305c:	e6 5e       	subi	r30, 0xE6	; 230
    305e:	fe 4f       	sbci	r31, 0xFE	; 254
    3060:	80 81       	ld	r24, Z
    3062:	88 2f       	mov	r24, r24
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	c0 97       	sbiw	r24, 0x30	; 48
    3068:	aa 27       	eor	r26, r26
    306a:	97 fd       	sbrc	r25, 7
    306c:	a0 95       	com	r26
    306e:	ba 2f       	mov	r27, r26
    3070:	fe 01       	movw	r30, r28
    3072:	ea 5e       	subi	r30, 0xEA	; 234
    3074:	fe 4f       	sbci	r31, 0xFE	; 254
    3076:	82 0f       	add	r24, r18
    3078:	93 1f       	adc	r25, r19
    307a:	a4 1f       	adc	r26, r20
    307c:	b5 1f       	adc	r27, r21
    307e:	80 83       	st	Z, r24
    3080:	91 83       	std	Z+1, r25	; 0x01
    3082:	a2 83       	std	Z+2, r26	; 0x02
    3084:	b3 83       	std	Z+3, r27	; 0x03
                        LCD_WriteData(key);
    3086:	fe 01       	movw	r30, r28
    3088:	e6 5e       	subi	r30, 0xE6	; 230
    308a:	fe 4f       	sbci	r31, 0xFE	; 254
    308c:	80 81       	ld	r24, Z
    308e:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_WriteData>
    3092:	fe 01       	movw	r30, r28
    3094:	ef 53       	subi	r30, 0x3F	; 63
    3096:	ff 4f       	sbci	r31, 0xFF	; 255
    3098:	80 e0       	ldi	r24, 0x00	; 0
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	aa e7       	ldi	r26, 0x7A	; 122
    309e:	b3 e4       	ldi	r27, 0x43	; 67
    30a0:	80 83       	st	Z, r24
    30a2:	91 83       	std	Z+1, r25	; 0x01
    30a4:	a2 83       	std	Z+2, r26	; 0x02
    30a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30a8:	8e 01       	movw	r16, r28
    30aa:	03 54       	subi	r16, 0x43	; 67
    30ac:	1f 4f       	sbci	r17, 0xFF	; 255
    30ae:	fe 01       	movw	r30, r28
    30b0:	ef 53       	subi	r30, 0x3F	; 63
    30b2:	ff 4f       	sbci	r31, 0xFF	; 255
    30b4:	60 81       	ld	r22, Z
    30b6:	71 81       	ldd	r23, Z+1	; 0x01
    30b8:	82 81       	ldd	r24, Z+2	; 0x02
    30ba:	93 81       	ldd	r25, Z+3	; 0x03
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	4a e7       	ldi	r20, 0x7A	; 122
    30c2:	55 e4       	ldi	r21, 0x45	; 69
    30c4:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    30c8:	dc 01       	movw	r26, r24
    30ca:	cb 01       	movw	r24, r22
    30cc:	f8 01       	movw	r30, r16
    30ce:	80 83       	st	Z, r24
    30d0:	91 83       	std	Z+1, r25	; 0x01
    30d2:	a2 83       	std	Z+2, r26	; 0x02
    30d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30d6:	fe 01       	movw	r30, r28
    30d8:	e3 54       	subi	r30, 0x43	; 67
    30da:	ff 4f       	sbci	r31, 0xFF	; 255
    30dc:	60 81       	ld	r22, Z
    30de:	71 81       	ldd	r23, Z+1	; 0x01
    30e0:	82 81       	ldd	r24, Z+2	; 0x02
    30e2:	93 81       	ldd	r25, Z+3	; 0x03
    30e4:	20 e0       	ldi	r18, 0x00	; 0
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	40 e8       	ldi	r20, 0x80	; 128
    30ea:	5f e3       	ldi	r21, 0x3F	; 63
    30ec:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    30f0:	88 23       	and	r24, r24
    30f2:	44 f4       	brge	.+16     	; 0x3104 <main+0xa4c>
		__ticks = 1;
    30f4:	fe 01       	movw	r30, r28
    30f6:	e5 54       	subi	r30, 0x45	; 69
    30f8:	ff 4f       	sbci	r31, 0xFF	; 255
    30fa:	81 e0       	ldi	r24, 0x01	; 1
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	91 83       	std	Z+1, r25	; 0x01
    3100:	80 83       	st	Z, r24
    3102:	64 c0       	rjmp	.+200    	; 0x31cc <main+0xb14>
	else if (__tmp > 65535)
    3104:	fe 01       	movw	r30, r28
    3106:	e3 54       	subi	r30, 0x43	; 67
    3108:	ff 4f       	sbci	r31, 0xFF	; 255
    310a:	60 81       	ld	r22, Z
    310c:	71 81       	ldd	r23, Z+1	; 0x01
    310e:	82 81       	ldd	r24, Z+2	; 0x02
    3110:	93 81       	ldd	r25, Z+3	; 0x03
    3112:	20 e0       	ldi	r18, 0x00	; 0
    3114:	3f ef       	ldi	r19, 0xFF	; 255
    3116:	4f e7       	ldi	r20, 0x7F	; 127
    3118:	57 e4       	ldi	r21, 0x47	; 71
    311a:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    311e:	18 16       	cp	r1, r24
    3120:	0c f0       	brlt	.+2      	; 0x3124 <main+0xa6c>
    3122:	43 c0       	rjmp	.+134    	; 0x31aa <main+0xaf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3124:	fe 01       	movw	r30, r28
    3126:	ef 53       	subi	r30, 0x3F	; 63
    3128:	ff 4f       	sbci	r31, 0xFF	; 255
    312a:	60 81       	ld	r22, Z
    312c:	71 81       	ldd	r23, Z+1	; 0x01
    312e:	82 81       	ldd	r24, Z+2	; 0x02
    3130:	93 81       	ldd	r25, Z+3	; 0x03
    3132:	20 e0       	ldi	r18, 0x00	; 0
    3134:	30 e0       	ldi	r19, 0x00	; 0
    3136:	40 e2       	ldi	r20, 0x20	; 32
    3138:	51 e4       	ldi	r21, 0x41	; 65
    313a:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    313e:	dc 01       	movw	r26, r24
    3140:	cb 01       	movw	r24, r22
    3142:	8e 01       	movw	r16, r28
    3144:	05 54       	subi	r16, 0x45	; 69
    3146:	1f 4f       	sbci	r17, 0xFF	; 255
    3148:	bc 01       	movw	r22, r24
    314a:	cd 01       	movw	r24, r26
    314c:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    3150:	dc 01       	movw	r26, r24
    3152:	cb 01       	movw	r24, r22
    3154:	f8 01       	movw	r30, r16
    3156:	91 83       	std	Z+1, r25	; 0x01
    3158:	80 83       	st	Z, r24
    315a:	1f c0       	rjmp	.+62     	; 0x319a <main+0xae2>
    315c:	fe 01       	movw	r30, r28
    315e:	e7 54       	subi	r30, 0x47	; 71
    3160:	ff 4f       	sbci	r31, 0xFF	; 255
    3162:	80 e9       	ldi	r24, 0x90	; 144
    3164:	91 e0       	ldi	r25, 0x01	; 1
    3166:	91 83       	std	Z+1, r25	; 0x01
    3168:	80 83       	st	Z, r24
    316a:	fe 01       	movw	r30, r28
    316c:	e7 54       	subi	r30, 0x47	; 71
    316e:	ff 4f       	sbci	r31, 0xFF	; 255
    3170:	80 81       	ld	r24, Z
    3172:	91 81       	ldd	r25, Z+1	; 0x01
    3174:	01 97       	sbiw	r24, 0x01	; 1
    3176:	f1 f7       	brne	.-4      	; 0x3174 <main+0xabc>
    3178:	fe 01       	movw	r30, r28
    317a:	e7 54       	subi	r30, 0x47	; 71
    317c:	ff 4f       	sbci	r31, 0xFF	; 255
    317e:	91 83       	std	Z+1, r25	; 0x01
    3180:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3182:	de 01       	movw	r26, r28
    3184:	a5 54       	subi	r26, 0x45	; 69
    3186:	bf 4f       	sbci	r27, 0xFF	; 255
    3188:	fe 01       	movw	r30, r28
    318a:	e5 54       	subi	r30, 0x45	; 69
    318c:	ff 4f       	sbci	r31, 0xFF	; 255
    318e:	80 81       	ld	r24, Z
    3190:	91 81       	ldd	r25, Z+1	; 0x01
    3192:	01 97       	sbiw	r24, 0x01	; 1
    3194:	11 96       	adiw	r26, 0x01	; 1
    3196:	9c 93       	st	X, r25
    3198:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    319a:	fe 01       	movw	r30, r28
    319c:	e5 54       	subi	r30, 0x45	; 69
    319e:	ff 4f       	sbci	r31, 0xFF	; 255
    31a0:	80 81       	ld	r24, Z
    31a2:	91 81       	ldd	r25, Z+1	; 0x01
    31a4:	00 97       	sbiw	r24, 0x00	; 0
    31a6:	d1 f6       	brne	.-76     	; 0x315c <main+0xaa4>
    31a8:	41 c0       	rjmp	.+130    	; 0x322c <main+0xb74>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31aa:	8e 01       	movw	r16, r28
    31ac:	05 54       	subi	r16, 0x45	; 69
    31ae:	1f 4f       	sbci	r17, 0xFF	; 255
    31b0:	fe 01       	movw	r30, r28
    31b2:	e3 54       	subi	r30, 0x43	; 67
    31b4:	ff 4f       	sbci	r31, 0xFF	; 255
    31b6:	60 81       	ld	r22, Z
    31b8:	71 81       	ldd	r23, Z+1	; 0x01
    31ba:	82 81       	ldd	r24, Z+2	; 0x02
    31bc:	93 81       	ldd	r25, Z+3	; 0x03
    31be:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    31c2:	dc 01       	movw	r26, r24
    31c4:	cb 01       	movw	r24, r22
    31c6:	f8 01       	movw	r30, r16
    31c8:	91 83       	std	Z+1, r25	; 0x01
    31ca:	80 83       	st	Z, r24
    31cc:	de 01       	movw	r26, r28
    31ce:	a9 54       	subi	r26, 0x49	; 73
    31d0:	bf 4f       	sbci	r27, 0xFF	; 255
    31d2:	fe 01       	movw	r30, r28
    31d4:	e5 54       	subi	r30, 0x45	; 69
    31d6:	ff 4f       	sbci	r31, 0xFF	; 255
    31d8:	80 81       	ld	r24, Z
    31da:	91 81       	ldd	r25, Z+1	; 0x01
    31dc:	11 96       	adiw	r26, 0x01	; 1
    31de:	9c 93       	st	X, r25
    31e0:	8e 93       	st	-X, r24
    31e2:	fe 01       	movw	r30, r28
    31e4:	e9 54       	subi	r30, 0x49	; 73
    31e6:	ff 4f       	sbci	r31, 0xFF	; 255
    31e8:	80 81       	ld	r24, Z
    31ea:	91 81       	ldd	r25, Z+1	; 0x01
    31ec:	01 97       	sbiw	r24, 0x01	; 1
    31ee:	f1 f7       	brne	.-4      	; 0x31ec <main+0xb34>
    31f0:	fe 01       	movw	r30, r28
    31f2:	e9 54       	subi	r30, 0x49	; 73
    31f4:	ff 4f       	sbci	r31, 0xFF	; 255
    31f6:	91 83       	std	Z+1, r25	; 0x01
    31f8:	80 83       	st	Z, r24
    31fa:	18 c0       	rjmp	.+48     	; 0x322c <main+0xb74>
                        _delay_ms(250); // Debounce delay
                    } else if (key == '+' || key == '-' || key == '*' || key == '/') {
    31fc:	fe 01       	movw	r30, r28
    31fe:	e6 5e       	subi	r30, 0xE6	; 230
    3200:	fe 4f       	sbci	r31, 0xFE	; 254
    3202:	80 81       	ld	r24, Z
    3204:	8b 32       	cpi	r24, 0x2B	; 43
    3206:	b9 f0       	breq	.+46     	; 0x3236 <main+0xb7e>
    3208:	fe 01       	movw	r30, r28
    320a:	e6 5e       	subi	r30, 0xE6	; 230
    320c:	fe 4f       	sbci	r31, 0xFE	; 254
    320e:	80 81       	ld	r24, Z
    3210:	8d 32       	cpi	r24, 0x2D	; 45
    3212:	89 f0       	breq	.+34     	; 0x3236 <main+0xb7e>
    3214:	fe 01       	movw	r30, r28
    3216:	e6 5e       	subi	r30, 0xE6	; 230
    3218:	fe 4f       	sbci	r31, 0xFE	; 254
    321a:	80 81       	ld	r24, Z
    321c:	8a 32       	cpi	r24, 0x2A	; 42
    321e:	59 f0       	breq	.+22     	; 0x3236 <main+0xb7e>
    3220:	fe 01       	movw	r30, r28
    3222:	e6 5e       	subi	r30, 0xE6	; 230
    3224:	fe 4f       	sbci	r31, 0xFE	; 254
    3226:	80 81       	ld	r24, Z
    3228:	8f 32       	cpi	r24, 0x2F	; 47
    322a:	29 f0       	breq	.+10     	; 0x3236 <main+0xb7e>
            case CALCULATOR:
                // Read the first operand
                LCD_WriteString("Enter num1:", LCD_ROW_1, 0);
                LCD_GoToPos(LCD_ROW_2, 0);
                num1 = 0;
                while (1 && currentMode == CALCULATOR) {
    322c:	80 91 39 02 	lds	r24, 0x0239
    3230:	88 23       	and	r24, r24
    3232:	09 f4       	brne	.+2      	; 0x3236 <main+0xb7e>
    3234:	ed ce       	rjmp	.-550    	; 0x3010 <main+0x958>
                        _delay_ms(250); // Debounce delay
                    } else if (key == '+' || key == '-' || key == '*' || key == '/') {
                        break;
                    }
                }
                LCD_Clear();
    3236:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_Clear>
                LCD_WriteString("Enter operator:", LCD_ROW_1, 0);
    323a:	86 eb       	ldi	r24, 0xB6	; 182
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	60 e0       	ldi	r22, 0x00	; 0
    3240:	40 e0       	ldi	r20, 0x00	; 0
    3242:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_WriteString>
                char op = key; // Store operator
    3246:	de 01       	movw	r26, r28
    3248:	a5 5f       	subi	r26, 0xF5	; 245
    324a:	be 4f       	sbci	r27, 0xFE	; 254
    324c:	fe 01       	movw	r30, r28
    324e:	e6 5e       	subi	r30, 0xE6	; 230
    3250:	fe 4f       	sbci	r31, 0xFE	; 254
    3252:	80 81       	ld	r24, Z
    3254:	8c 93       	st	X, r24

                LCD_GoToPos(1, 0);
    3256:	81 e0       	ldi	r24, 0x01	; 1
    3258:	60 e0       	ldi	r22, 0x00	; 0
    325a:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_GoToPos>
                LCD_WriteData(key);
    325e:	fe 01       	movw	r30, r28
    3260:	e6 5e       	subi	r30, 0xE6	; 230
    3262:	fe 4f       	sbci	r31, 0xFE	; 254
    3264:	80 81       	ld	r24, Z
    3266:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_WriteData>
    326a:	fe 01       	movw	r30, r28
    326c:	ed 54       	subi	r30, 0x4D	; 77
    326e:	ff 4f       	sbci	r31, 0xFF	; 255
    3270:	80 e0       	ldi	r24, 0x00	; 0
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	aa ef       	ldi	r26, 0xFA	; 250
    3276:	b3 e4       	ldi	r27, 0x43	; 67
    3278:	80 83       	st	Z, r24
    327a:	91 83       	std	Z+1, r25	; 0x01
    327c:	a2 83       	std	Z+2, r26	; 0x02
    327e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3280:	8e 01       	movw	r16, r28
    3282:	01 55       	subi	r16, 0x51	; 81
    3284:	1f 4f       	sbci	r17, 0xFF	; 255
    3286:	fe 01       	movw	r30, r28
    3288:	ed 54       	subi	r30, 0x4D	; 77
    328a:	ff 4f       	sbci	r31, 0xFF	; 255
    328c:	60 81       	ld	r22, Z
    328e:	71 81       	ldd	r23, Z+1	; 0x01
    3290:	82 81       	ldd	r24, Z+2	; 0x02
    3292:	93 81       	ldd	r25, Z+3	; 0x03
    3294:	20 e0       	ldi	r18, 0x00	; 0
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	4a e7       	ldi	r20, 0x7A	; 122
    329a:	55 e4       	ldi	r21, 0x45	; 69
    329c:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    32a0:	dc 01       	movw	r26, r24
    32a2:	cb 01       	movw	r24, r22
    32a4:	f8 01       	movw	r30, r16
    32a6:	80 83       	st	Z, r24
    32a8:	91 83       	std	Z+1, r25	; 0x01
    32aa:	a2 83       	std	Z+2, r26	; 0x02
    32ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32ae:	fe 01       	movw	r30, r28
    32b0:	e1 55       	subi	r30, 0x51	; 81
    32b2:	ff 4f       	sbci	r31, 0xFF	; 255
    32b4:	60 81       	ld	r22, Z
    32b6:	71 81       	ldd	r23, Z+1	; 0x01
    32b8:	82 81       	ldd	r24, Z+2	; 0x02
    32ba:	93 81       	ldd	r25, Z+3	; 0x03
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	40 e8       	ldi	r20, 0x80	; 128
    32c2:	5f e3       	ldi	r21, 0x3F	; 63
    32c4:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    32c8:	88 23       	and	r24, r24
    32ca:	44 f4       	brge	.+16     	; 0x32dc <main+0xc24>
		__ticks = 1;
    32cc:	fe 01       	movw	r30, r28
    32ce:	e3 55       	subi	r30, 0x53	; 83
    32d0:	ff 4f       	sbci	r31, 0xFF	; 255
    32d2:	81 e0       	ldi	r24, 0x01	; 1
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	91 83       	std	Z+1, r25	; 0x01
    32d8:	80 83       	st	Z, r24
    32da:	64 c0       	rjmp	.+200    	; 0x33a4 <main+0xcec>
	else if (__tmp > 65535)
    32dc:	fe 01       	movw	r30, r28
    32de:	e1 55       	subi	r30, 0x51	; 81
    32e0:	ff 4f       	sbci	r31, 0xFF	; 255
    32e2:	60 81       	ld	r22, Z
    32e4:	71 81       	ldd	r23, Z+1	; 0x01
    32e6:	82 81       	ldd	r24, Z+2	; 0x02
    32e8:	93 81       	ldd	r25, Z+3	; 0x03
    32ea:	20 e0       	ldi	r18, 0x00	; 0
    32ec:	3f ef       	ldi	r19, 0xFF	; 255
    32ee:	4f e7       	ldi	r20, 0x7F	; 127
    32f0:	57 e4       	ldi	r21, 0x47	; 71
    32f2:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    32f6:	18 16       	cp	r1, r24
    32f8:	0c f0       	brlt	.+2      	; 0x32fc <main+0xc44>
    32fa:	43 c0       	rjmp	.+134    	; 0x3382 <main+0xcca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32fc:	fe 01       	movw	r30, r28
    32fe:	ed 54       	subi	r30, 0x4D	; 77
    3300:	ff 4f       	sbci	r31, 0xFF	; 255
    3302:	60 81       	ld	r22, Z
    3304:	71 81       	ldd	r23, Z+1	; 0x01
    3306:	82 81       	ldd	r24, Z+2	; 0x02
    3308:	93 81       	ldd	r25, Z+3	; 0x03
    330a:	20 e0       	ldi	r18, 0x00	; 0
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	40 e2       	ldi	r20, 0x20	; 32
    3310:	51 e4       	ldi	r21, 0x41	; 65
    3312:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    3316:	dc 01       	movw	r26, r24
    3318:	cb 01       	movw	r24, r22
    331a:	8e 01       	movw	r16, r28
    331c:	03 55       	subi	r16, 0x53	; 83
    331e:	1f 4f       	sbci	r17, 0xFF	; 255
    3320:	bc 01       	movw	r22, r24
    3322:	cd 01       	movw	r24, r26
    3324:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    3328:	dc 01       	movw	r26, r24
    332a:	cb 01       	movw	r24, r22
    332c:	f8 01       	movw	r30, r16
    332e:	91 83       	std	Z+1, r25	; 0x01
    3330:	80 83       	st	Z, r24
    3332:	1f c0       	rjmp	.+62     	; 0x3372 <main+0xcba>
    3334:	fe 01       	movw	r30, r28
    3336:	e5 55       	subi	r30, 0x55	; 85
    3338:	ff 4f       	sbci	r31, 0xFF	; 255
    333a:	80 e9       	ldi	r24, 0x90	; 144
    333c:	91 e0       	ldi	r25, 0x01	; 1
    333e:	91 83       	std	Z+1, r25	; 0x01
    3340:	80 83       	st	Z, r24
    3342:	fe 01       	movw	r30, r28
    3344:	e5 55       	subi	r30, 0x55	; 85
    3346:	ff 4f       	sbci	r31, 0xFF	; 255
    3348:	80 81       	ld	r24, Z
    334a:	91 81       	ldd	r25, Z+1	; 0x01
    334c:	01 97       	sbiw	r24, 0x01	; 1
    334e:	f1 f7       	brne	.-4      	; 0x334c <main+0xc94>
    3350:	fe 01       	movw	r30, r28
    3352:	e5 55       	subi	r30, 0x55	; 85
    3354:	ff 4f       	sbci	r31, 0xFF	; 255
    3356:	91 83       	std	Z+1, r25	; 0x01
    3358:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    335a:	de 01       	movw	r26, r28
    335c:	a3 55       	subi	r26, 0x53	; 83
    335e:	bf 4f       	sbci	r27, 0xFF	; 255
    3360:	fe 01       	movw	r30, r28
    3362:	e3 55       	subi	r30, 0x53	; 83
    3364:	ff 4f       	sbci	r31, 0xFF	; 255
    3366:	80 81       	ld	r24, Z
    3368:	91 81       	ldd	r25, Z+1	; 0x01
    336a:	01 97       	sbiw	r24, 0x01	; 1
    336c:	11 96       	adiw	r26, 0x01	; 1
    336e:	9c 93       	st	X, r25
    3370:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3372:	fe 01       	movw	r30, r28
    3374:	e3 55       	subi	r30, 0x53	; 83
    3376:	ff 4f       	sbci	r31, 0xFF	; 255
    3378:	80 81       	ld	r24, Z
    337a:	91 81       	ldd	r25, Z+1	; 0x01
    337c:	00 97       	sbiw	r24, 0x00	; 0
    337e:	d1 f6       	brne	.-76     	; 0x3334 <main+0xc7c>
    3380:	27 c0       	rjmp	.+78     	; 0x33d0 <main+0xd18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3382:	8e 01       	movw	r16, r28
    3384:	03 55       	subi	r16, 0x53	; 83
    3386:	1f 4f       	sbci	r17, 0xFF	; 255
    3388:	fe 01       	movw	r30, r28
    338a:	e1 55       	subi	r30, 0x51	; 81
    338c:	ff 4f       	sbci	r31, 0xFF	; 255
    338e:	60 81       	ld	r22, Z
    3390:	71 81       	ldd	r23, Z+1	; 0x01
    3392:	82 81       	ldd	r24, Z+2	; 0x02
    3394:	93 81       	ldd	r25, Z+3	; 0x03
    3396:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    339a:	dc 01       	movw	r26, r24
    339c:	cb 01       	movw	r24, r22
    339e:	f8 01       	movw	r30, r16
    33a0:	91 83       	std	Z+1, r25	; 0x01
    33a2:	80 83       	st	Z, r24
    33a4:	de 01       	movw	r26, r28
    33a6:	a7 55       	subi	r26, 0x57	; 87
    33a8:	bf 4f       	sbci	r27, 0xFF	; 255
    33aa:	fe 01       	movw	r30, r28
    33ac:	e3 55       	subi	r30, 0x53	; 83
    33ae:	ff 4f       	sbci	r31, 0xFF	; 255
    33b0:	80 81       	ld	r24, Z
    33b2:	91 81       	ldd	r25, Z+1	; 0x01
    33b4:	8d 93       	st	X+, r24
    33b6:	9c 93       	st	X, r25
    33b8:	fe 01       	movw	r30, r28
    33ba:	e7 55       	subi	r30, 0x57	; 87
    33bc:	ff 4f       	sbci	r31, 0xFF	; 255
    33be:	80 81       	ld	r24, Z
    33c0:	91 81       	ldd	r25, Z+1	; 0x01
    33c2:	01 97       	sbiw	r24, 0x01	; 1
    33c4:	f1 f7       	brne	.-4      	; 0x33c2 <main+0xd0a>
    33c6:	fe 01       	movw	r30, r28
    33c8:	e7 55       	subi	r30, 0x57	; 87
    33ca:	ff 4f       	sbci	r31, 0xFF	; 255
    33cc:	91 83       	std	Z+1, r25	; 0x01
    33ce:	80 83       	st	Z, r24
                _delay_ms(500);
                LCD_Clear(); // Clear Display command
    33d0:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_Clear>

                LCD_WriteString("Enter num2:", LCD_ROW_1, 0);
    33d4:	86 ec       	ldi	r24, 0xC6	; 198
    33d6:	90 e0       	ldi	r25, 0x00	; 0
    33d8:	60 e0       	ldi	r22, 0x00	; 0
    33da:	40 e0       	ldi	r20, 0x00	; 0
    33dc:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_WriteString>
                LCD_GoToPos(LCD_ROW_2, 0);
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	60 e0       	ldi	r22, 0x00	; 0
    33e4:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_GoToPos>
                num2 = 0;
    33e8:	fe 01       	movw	r30, r28
    33ea:	ee 5e       	subi	r30, 0xEE	; 238
    33ec:	fe 4f       	sbci	r31, 0xFE	; 254
    33ee:	10 82       	st	Z, r1
    33f0:	11 82       	std	Z+1, r1	; 0x01
    33f2:	12 82       	std	Z+2, r1	; 0x02
    33f4:	13 82       	std	Z+3, r1	; 0x03
    33f6:	fc c0       	rjmp	.+504    	; 0x35f0 <main+0xf38>
                while (1 && currentMode == CALCULATOR) {
                    key = KEYPAD_getPressedKey();
    33f8:	0e 94 22 0a 	call	0x1444	; 0x1444 <KEYPAD_getPressedKey>
    33fc:	fe 01       	movw	r30, r28
    33fe:	e6 5e       	subi	r30, 0xE6	; 230
    3400:	fe 4f       	sbci	r31, 0xFE	; 254
    3402:	80 83       	st	Z, r24
                    if (key >= '0' && key <= '9') {
    3404:	fe 01       	movw	r30, r28
    3406:	e6 5e       	subi	r30, 0xE6	; 230
    3408:	fe 4f       	sbci	r31, 0xFE	; 254
    340a:	80 81       	ld	r24, Z
    340c:	80 33       	cpi	r24, 0x30	; 48
    340e:	08 f4       	brcc	.+2      	; 0x3412 <main+0xd5a>
    3410:	e9 c0       	rjmp	.+466    	; 0x35e4 <main+0xf2c>
    3412:	fe 01       	movw	r30, r28
    3414:	e6 5e       	subi	r30, 0xE6	; 230
    3416:	fe 4f       	sbci	r31, 0xFE	; 254
    3418:	80 81       	ld	r24, Z
    341a:	8a 33       	cpi	r24, 0x3A	; 58
    341c:	08 f0       	brcs	.+2      	; 0x3420 <main+0xd68>
    341e:	e2 c0       	rjmp	.+452    	; 0x35e4 <main+0xf2c>
                        num2 = num2 * 10 + (key - '0');
    3420:	fe 01       	movw	r30, r28
    3422:	ee 5e       	subi	r30, 0xEE	; 238
    3424:	fe 4f       	sbci	r31, 0xFE	; 254
    3426:	80 81       	ld	r24, Z
    3428:	91 81       	ldd	r25, Z+1	; 0x01
    342a:	a2 81       	ldd	r26, Z+2	; 0x02
    342c:	b3 81       	ldd	r27, Z+3	; 0x03
    342e:	2a e0       	ldi	r18, 0x0A	; 10
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	40 e0       	ldi	r20, 0x00	; 0
    3434:	50 e0       	ldi	r21, 0x00	; 0
    3436:	bc 01       	movw	r22, r24
    3438:	cd 01       	movw	r24, r26
    343a:	0e 94 78 24 	call	0x48f0	; 0x48f0 <__mulsi3>
    343e:	9b 01       	movw	r18, r22
    3440:	ac 01       	movw	r20, r24
    3442:	fe 01       	movw	r30, r28
    3444:	e6 5e       	subi	r30, 0xE6	; 230
    3446:	fe 4f       	sbci	r31, 0xFE	; 254
    3448:	80 81       	ld	r24, Z
    344a:	88 2f       	mov	r24, r24
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	c0 97       	sbiw	r24, 0x30	; 48
    3450:	aa 27       	eor	r26, r26
    3452:	97 fd       	sbrc	r25, 7
    3454:	a0 95       	com	r26
    3456:	ba 2f       	mov	r27, r26
    3458:	fe 01       	movw	r30, r28
    345a:	ee 5e       	subi	r30, 0xEE	; 238
    345c:	fe 4f       	sbci	r31, 0xFE	; 254
    345e:	82 0f       	add	r24, r18
    3460:	93 1f       	adc	r25, r19
    3462:	a4 1f       	adc	r26, r20
    3464:	b5 1f       	adc	r27, r21
    3466:	80 83       	st	Z, r24
    3468:	91 83       	std	Z+1, r25	; 0x01
    346a:	a2 83       	std	Z+2, r26	; 0x02
    346c:	b3 83       	std	Z+3, r27	; 0x03
                        LCD_WriteData(key);
    346e:	fe 01       	movw	r30, r28
    3470:	e6 5e       	subi	r30, 0xE6	; 230
    3472:	fe 4f       	sbci	r31, 0xFE	; 254
    3474:	80 81       	ld	r24, Z
    3476:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_WriteData>
    347a:	fe 01       	movw	r30, r28
    347c:	eb 55       	subi	r30, 0x5B	; 91
    347e:	ff 4f       	sbci	r31, 0xFF	; 255
    3480:	80 e0       	ldi	r24, 0x00	; 0
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	aa e7       	ldi	r26, 0x7A	; 122
    3486:	b3 e4       	ldi	r27, 0x43	; 67
    3488:	80 83       	st	Z, r24
    348a:	91 83       	std	Z+1, r25	; 0x01
    348c:	a2 83       	std	Z+2, r26	; 0x02
    348e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3490:	8e 01       	movw	r16, r28
    3492:	0f 55       	subi	r16, 0x5F	; 95
    3494:	1f 4f       	sbci	r17, 0xFF	; 255
    3496:	fe 01       	movw	r30, r28
    3498:	eb 55       	subi	r30, 0x5B	; 91
    349a:	ff 4f       	sbci	r31, 0xFF	; 255
    349c:	60 81       	ld	r22, Z
    349e:	71 81       	ldd	r23, Z+1	; 0x01
    34a0:	82 81       	ldd	r24, Z+2	; 0x02
    34a2:	93 81       	ldd	r25, Z+3	; 0x03
    34a4:	20 e0       	ldi	r18, 0x00	; 0
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	4a e7       	ldi	r20, 0x7A	; 122
    34aa:	55 e4       	ldi	r21, 0x45	; 69
    34ac:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    34b0:	dc 01       	movw	r26, r24
    34b2:	cb 01       	movw	r24, r22
    34b4:	f8 01       	movw	r30, r16
    34b6:	80 83       	st	Z, r24
    34b8:	91 83       	std	Z+1, r25	; 0x01
    34ba:	a2 83       	std	Z+2, r26	; 0x02
    34bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34be:	fe 01       	movw	r30, r28
    34c0:	ef 55       	subi	r30, 0x5F	; 95
    34c2:	ff 4f       	sbci	r31, 0xFF	; 255
    34c4:	60 81       	ld	r22, Z
    34c6:	71 81       	ldd	r23, Z+1	; 0x01
    34c8:	82 81       	ldd	r24, Z+2	; 0x02
    34ca:	93 81       	ldd	r25, Z+3	; 0x03
    34cc:	20 e0       	ldi	r18, 0x00	; 0
    34ce:	30 e0       	ldi	r19, 0x00	; 0
    34d0:	40 e8       	ldi	r20, 0x80	; 128
    34d2:	5f e3       	ldi	r21, 0x3F	; 63
    34d4:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    34d8:	88 23       	and	r24, r24
    34da:	44 f4       	brge	.+16     	; 0x34ec <main+0xe34>
		__ticks = 1;
    34dc:	fe 01       	movw	r30, r28
    34de:	e1 56       	subi	r30, 0x61	; 97
    34e0:	ff 4f       	sbci	r31, 0xFF	; 255
    34e2:	81 e0       	ldi	r24, 0x01	; 1
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	91 83       	std	Z+1, r25	; 0x01
    34e8:	80 83       	st	Z, r24
    34ea:	64 c0       	rjmp	.+200    	; 0x35b4 <main+0xefc>
	else if (__tmp > 65535)
    34ec:	fe 01       	movw	r30, r28
    34ee:	ef 55       	subi	r30, 0x5F	; 95
    34f0:	ff 4f       	sbci	r31, 0xFF	; 255
    34f2:	60 81       	ld	r22, Z
    34f4:	71 81       	ldd	r23, Z+1	; 0x01
    34f6:	82 81       	ldd	r24, Z+2	; 0x02
    34f8:	93 81       	ldd	r25, Z+3	; 0x03
    34fa:	20 e0       	ldi	r18, 0x00	; 0
    34fc:	3f ef       	ldi	r19, 0xFF	; 255
    34fe:	4f e7       	ldi	r20, 0x7F	; 127
    3500:	57 e4       	ldi	r21, 0x47	; 71
    3502:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    3506:	18 16       	cp	r1, r24
    3508:	0c f0       	brlt	.+2      	; 0x350c <main+0xe54>
    350a:	43 c0       	rjmp	.+134    	; 0x3592 <main+0xeda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    350c:	fe 01       	movw	r30, r28
    350e:	eb 55       	subi	r30, 0x5B	; 91
    3510:	ff 4f       	sbci	r31, 0xFF	; 255
    3512:	60 81       	ld	r22, Z
    3514:	71 81       	ldd	r23, Z+1	; 0x01
    3516:	82 81       	ldd	r24, Z+2	; 0x02
    3518:	93 81       	ldd	r25, Z+3	; 0x03
    351a:	20 e0       	ldi	r18, 0x00	; 0
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	40 e2       	ldi	r20, 0x20	; 32
    3520:	51 e4       	ldi	r21, 0x41	; 65
    3522:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    3526:	dc 01       	movw	r26, r24
    3528:	cb 01       	movw	r24, r22
    352a:	8e 01       	movw	r16, r28
    352c:	01 56       	subi	r16, 0x61	; 97
    352e:	1f 4f       	sbci	r17, 0xFF	; 255
    3530:	bc 01       	movw	r22, r24
    3532:	cd 01       	movw	r24, r26
    3534:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    3538:	dc 01       	movw	r26, r24
    353a:	cb 01       	movw	r24, r22
    353c:	f8 01       	movw	r30, r16
    353e:	91 83       	std	Z+1, r25	; 0x01
    3540:	80 83       	st	Z, r24
    3542:	1f c0       	rjmp	.+62     	; 0x3582 <main+0xeca>
    3544:	fe 01       	movw	r30, r28
    3546:	e3 56       	subi	r30, 0x63	; 99
    3548:	ff 4f       	sbci	r31, 0xFF	; 255
    354a:	80 e9       	ldi	r24, 0x90	; 144
    354c:	91 e0       	ldi	r25, 0x01	; 1
    354e:	91 83       	std	Z+1, r25	; 0x01
    3550:	80 83       	st	Z, r24
    3552:	fe 01       	movw	r30, r28
    3554:	e3 56       	subi	r30, 0x63	; 99
    3556:	ff 4f       	sbci	r31, 0xFF	; 255
    3558:	80 81       	ld	r24, Z
    355a:	91 81       	ldd	r25, Z+1	; 0x01
    355c:	01 97       	sbiw	r24, 0x01	; 1
    355e:	f1 f7       	brne	.-4      	; 0x355c <main+0xea4>
    3560:	fe 01       	movw	r30, r28
    3562:	e3 56       	subi	r30, 0x63	; 99
    3564:	ff 4f       	sbci	r31, 0xFF	; 255
    3566:	91 83       	std	Z+1, r25	; 0x01
    3568:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    356a:	de 01       	movw	r26, r28
    356c:	a1 56       	subi	r26, 0x61	; 97
    356e:	bf 4f       	sbci	r27, 0xFF	; 255
    3570:	fe 01       	movw	r30, r28
    3572:	e1 56       	subi	r30, 0x61	; 97
    3574:	ff 4f       	sbci	r31, 0xFF	; 255
    3576:	80 81       	ld	r24, Z
    3578:	91 81       	ldd	r25, Z+1	; 0x01
    357a:	01 97       	sbiw	r24, 0x01	; 1
    357c:	11 96       	adiw	r26, 0x01	; 1
    357e:	9c 93       	st	X, r25
    3580:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3582:	fe 01       	movw	r30, r28
    3584:	e1 56       	subi	r30, 0x61	; 97
    3586:	ff 4f       	sbci	r31, 0xFF	; 255
    3588:	80 81       	ld	r24, Z
    358a:	91 81       	ldd	r25, Z+1	; 0x01
    358c:	00 97       	sbiw	r24, 0x00	; 0
    358e:	d1 f6       	brne	.-76     	; 0x3544 <main+0xe8c>
    3590:	2f c0       	rjmp	.+94     	; 0x35f0 <main+0xf38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3592:	8e 01       	movw	r16, r28
    3594:	01 56       	subi	r16, 0x61	; 97
    3596:	1f 4f       	sbci	r17, 0xFF	; 255
    3598:	fe 01       	movw	r30, r28
    359a:	ef 55       	subi	r30, 0x5F	; 95
    359c:	ff 4f       	sbci	r31, 0xFF	; 255
    359e:	60 81       	ld	r22, Z
    35a0:	71 81       	ldd	r23, Z+1	; 0x01
    35a2:	82 81       	ldd	r24, Z+2	; 0x02
    35a4:	93 81       	ldd	r25, Z+3	; 0x03
    35a6:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    35aa:	dc 01       	movw	r26, r24
    35ac:	cb 01       	movw	r24, r22
    35ae:	f8 01       	movw	r30, r16
    35b0:	91 83       	std	Z+1, r25	; 0x01
    35b2:	80 83       	st	Z, r24
    35b4:	de 01       	movw	r26, r28
    35b6:	a5 56       	subi	r26, 0x65	; 101
    35b8:	bf 4f       	sbci	r27, 0xFF	; 255
    35ba:	fe 01       	movw	r30, r28
    35bc:	e1 56       	subi	r30, 0x61	; 97
    35be:	ff 4f       	sbci	r31, 0xFF	; 255
    35c0:	80 81       	ld	r24, Z
    35c2:	91 81       	ldd	r25, Z+1	; 0x01
    35c4:	11 96       	adiw	r26, 0x01	; 1
    35c6:	9c 93       	st	X, r25
    35c8:	8e 93       	st	-X, r24
    35ca:	fe 01       	movw	r30, r28
    35cc:	e5 56       	subi	r30, 0x65	; 101
    35ce:	ff 4f       	sbci	r31, 0xFF	; 255
    35d0:	80 81       	ld	r24, Z
    35d2:	91 81       	ldd	r25, Z+1	; 0x01
    35d4:	01 97       	sbiw	r24, 0x01	; 1
    35d6:	f1 f7       	brne	.-4      	; 0x35d4 <main+0xf1c>
    35d8:	fe 01       	movw	r30, r28
    35da:	e5 56       	subi	r30, 0x65	; 101
    35dc:	ff 4f       	sbci	r31, 0xFF	; 255
    35de:	91 83       	std	Z+1, r25	; 0x01
    35e0:	80 83       	st	Z, r24
    35e2:	06 c0       	rjmp	.+12     	; 0x35f0 <main+0xf38>
                        _delay_ms(250); // Debounce delay
                    } else if (key == '=') {
    35e4:	fe 01       	movw	r30, r28
    35e6:	e6 5e       	subi	r30, 0xE6	; 230
    35e8:	fe 4f       	sbci	r31, 0xFE	; 254
    35ea:	80 81       	ld	r24, Z
    35ec:	8d 33       	cpi	r24, 0x3D	; 61
    35ee:	29 f0       	breq	.+10     	; 0x35fa <main+0xf42>
                LCD_Clear(); // Clear Display command

                LCD_WriteString("Enter num2:", LCD_ROW_1, 0);
                LCD_GoToPos(LCD_ROW_2, 0);
                num2 = 0;
                while (1 && currentMode == CALCULATOR) {
    35f0:	80 91 39 02 	lds	r24, 0x0239
    35f4:	88 23       	and	r24, r24
    35f6:	09 f4       	brne	.+2      	; 0x35fa <main+0xf42>
    35f8:	ff ce       	rjmp	.-514    	; 0x33f8 <main+0xd40>
                    } else if (key == '=') {
                        break;
                    }
                }

                switch (op) {
    35fa:	fe 01       	movw	r30, r28
    35fc:	e5 5f       	subi	r30, 0xF5	; 245
    35fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3600:	80 81       	ld	r24, Z
    3602:	e8 2e       	mov	r14, r24
    3604:	ff 24       	eor	r15, r15
    3606:	cf 5a       	subi	r28, 0xAF	; 175
    3608:	de 4f       	sbci	r29, 0xFE	; 254
    360a:	f9 82       	std	Y+1, r15	; 0x01
    360c:	e8 82       	st	Y, r14
    360e:	c1 55       	subi	r28, 0x51	; 81
    3610:	d1 40       	sbci	r29, 0x01	; 1
    3612:	cf 5a       	subi	r28, 0xAF	; 175
    3614:	de 4f       	sbci	r29, 0xFE	; 254
    3616:	08 81       	ld	r16, Y
    3618:	19 81       	ldd	r17, Y+1	; 0x01
    361a:	c1 55       	subi	r28, 0x51	; 81
    361c:	d1 40       	sbci	r29, 0x01	; 1
    361e:	0b 32       	cpi	r16, 0x2B	; 43
    3620:	11 05       	cpc	r17, r1
    3622:	41 f1       	breq	.+80     	; 0x3674 <main+0xfbc>
    3624:	cf 5a       	subi	r28, 0xAF	; 175
    3626:	de 4f       	sbci	r29, 0xFE	; 254
    3628:	28 81       	ld	r18, Y
    362a:	39 81       	ldd	r19, Y+1	; 0x01
    362c:	c1 55       	subi	r28, 0x51	; 81
    362e:	d1 40       	sbci	r29, 0x01	; 1
    3630:	2c 32       	cpi	r18, 0x2C	; 44
    3632:	31 05       	cpc	r19, r1
    3634:	5c f4       	brge	.+22     	; 0x364c <main+0xf94>
    3636:	cf 5a       	subi	r28, 0xAF	; 175
    3638:	de 4f       	sbci	r29, 0xFE	; 254
    363a:	88 81       	ld	r24, Y
    363c:	99 81       	ldd	r25, Y+1	; 0x01
    363e:	c1 55       	subi	r28, 0x51	; 81
    3640:	d1 40       	sbci	r29, 0x01	; 1
    3642:	8a 32       	cpi	r24, 0x2A	; 42
    3644:	91 05       	cpc	r25, r1
    3646:	09 f4       	brne	.+2      	; 0x364a <main+0xf92>
    3648:	51 c0       	rjmp	.+162    	; 0x36ec <main+0x1034>
    364a:	55 c1       	rjmp	.+682    	; 0x38f6 <main+0x123e>
    364c:	cf 5a       	subi	r28, 0xAF	; 175
    364e:	de 4f       	sbci	r29, 0xFE	; 254
    3650:	e8 81       	ld	r30, Y
    3652:	f9 81       	ldd	r31, Y+1	; 0x01
    3654:	c1 55       	subi	r28, 0x51	; 81
    3656:	d1 40       	sbci	r29, 0x01	; 1
    3658:	ed 32       	cpi	r30, 0x2D	; 45
    365a:	f1 05       	cpc	r31, r1
    365c:	39 f1       	breq	.+78     	; 0x36ac <main+0xff4>
    365e:	cf 5a       	subi	r28, 0xAF	; 175
    3660:	de 4f       	sbci	r29, 0xFE	; 254
    3662:	08 81       	ld	r16, Y
    3664:	19 81       	ldd	r17, Y+1	; 0x01
    3666:	c1 55       	subi	r28, 0x51	; 81
    3668:	d1 40       	sbci	r29, 0x01	; 1
    366a:	0f 32       	cpi	r16, 0x2F	; 47
    366c:	11 05       	cpc	r17, r1
    366e:	09 f4       	brne	.+2      	; 0x3672 <main+0xfba>
    3670:	5b c0       	rjmp	.+182    	; 0x3728 <main+0x1070>
    3672:	41 c1       	rjmp	.+642    	; 0x38f6 <main+0x123e>
                    case '+':
                        result = num1 + num2;
    3674:	be 01       	movw	r22, r28
    3676:	62 5f       	subi	r22, 0xF2	; 242
    3678:	7e 4f       	sbci	r23, 0xFE	; 254
    367a:	fe 01       	movw	r30, r28
    367c:	ea 5e       	subi	r30, 0xEA	; 234
    367e:	fe 4f       	sbci	r31, 0xFE	; 254
    3680:	de 01       	movw	r26, r28
    3682:	ae 5e       	subi	r26, 0xEE	; 238
    3684:	be 4f       	sbci	r27, 0xFE	; 254
    3686:	20 81       	ld	r18, Z
    3688:	31 81       	ldd	r19, Z+1	; 0x01
    368a:	42 81       	ldd	r20, Z+2	; 0x02
    368c:	53 81       	ldd	r21, Z+3	; 0x03
    368e:	8d 91       	ld	r24, X+
    3690:	9d 91       	ld	r25, X+
    3692:	0d 90       	ld	r0, X+
    3694:	bc 91       	ld	r27, X
    3696:	a0 2d       	mov	r26, r0
    3698:	82 0f       	add	r24, r18
    369a:	93 1f       	adc	r25, r19
    369c:	a4 1f       	adc	r26, r20
    369e:	b5 1f       	adc	r27, r21
    36a0:	fb 01       	movw	r30, r22
    36a2:	80 83       	st	Z, r24
    36a4:	91 83       	std	Z+1, r25	; 0x01
    36a6:	a2 83       	std	Z+2, r26	; 0x02
    36a8:	b3 83       	std	Z+3, r27	; 0x03
    36aa:	e4 c1       	rjmp	.+968    	; 0x3a74 <main+0x13bc>
                        break;
                    case '-':
                        result = num1 - num2;
    36ac:	be 01       	movw	r22, r28
    36ae:	62 5f       	subi	r22, 0xF2	; 242
    36b0:	7e 4f       	sbci	r23, 0xFE	; 254
    36b2:	fe 01       	movw	r30, r28
    36b4:	ea 5e       	subi	r30, 0xEA	; 234
    36b6:	fe 4f       	sbci	r31, 0xFE	; 254
    36b8:	de 01       	movw	r26, r28
    36ba:	ae 5e       	subi	r26, 0xEE	; 238
    36bc:	be 4f       	sbci	r27, 0xFE	; 254
    36be:	20 81       	ld	r18, Z
    36c0:	31 81       	ldd	r19, Z+1	; 0x01
    36c2:	42 81       	ldd	r20, Z+2	; 0x02
    36c4:	53 81       	ldd	r21, Z+3	; 0x03
    36c6:	8d 91       	ld	r24, X+
    36c8:	9d 91       	ld	r25, X+
    36ca:	0d 90       	ld	r0, X+
    36cc:	bc 91       	ld	r27, X
    36ce:	a0 2d       	mov	r26, r0
    36d0:	79 01       	movw	r14, r18
    36d2:	8a 01       	movw	r16, r20
    36d4:	e8 1a       	sub	r14, r24
    36d6:	f9 0a       	sbc	r15, r25
    36d8:	0a 0b       	sbc	r16, r26
    36da:	1b 0b       	sbc	r17, r27
    36dc:	d8 01       	movw	r26, r16
    36de:	c7 01       	movw	r24, r14
    36e0:	fb 01       	movw	r30, r22
    36e2:	80 83       	st	Z, r24
    36e4:	91 83       	std	Z+1, r25	; 0x01
    36e6:	a2 83       	std	Z+2, r26	; 0x02
    36e8:	b3 83       	std	Z+3, r27	; 0x03
    36ea:	c4 c1       	rjmp	.+904    	; 0x3a74 <main+0x13bc>
                        break;
                    case '*':
                        result = num1 * num2;
    36ec:	8e 01       	movw	r16, r28
    36ee:	02 5f       	subi	r16, 0xF2	; 242
    36f0:	1e 4f       	sbci	r17, 0xFE	; 254
    36f2:	fe 01       	movw	r30, r28
    36f4:	ea 5e       	subi	r30, 0xEA	; 234
    36f6:	fe 4f       	sbci	r31, 0xFE	; 254
    36f8:	9e 01       	movw	r18, r28
    36fa:	2e 5e       	subi	r18, 0xEE	; 238
    36fc:	3e 4f       	sbci	r19, 0xFE	; 254
    36fe:	80 81       	ld	r24, Z
    3700:	91 81       	ldd	r25, Z+1	; 0x01
    3702:	a2 81       	ldd	r26, Z+2	; 0x02
    3704:	b3 81       	ldd	r27, Z+3	; 0x03
    3706:	f9 01       	movw	r30, r18
    3708:	20 81       	ld	r18, Z
    370a:	31 81       	ldd	r19, Z+1	; 0x01
    370c:	42 81       	ldd	r20, Z+2	; 0x02
    370e:	53 81       	ldd	r21, Z+3	; 0x03
    3710:	bc 01       	movw	r22, r24
    3712:	cd 01       	movw	r24, r26
    3714:	0e 94 78 24 	call	0x48f0	; 0x48f0 <__mulsi3>
    3718:	dc 01       	movw	r26, r24
    371a:	cb 01       	movw	r24, r22
    371c:	f8 01       	movw	r30, r16
    371e:	80 83       	st	Z, r24
    3720:	91 83       	std	Z+1, r25	; 0x01
    3722:	a2 83       	std	Z+2, r26	; 0x02
    3724:	b3 83       	std	Z+3, r27	; 0x03
    3726:	a6 c1       	rjmp	.+844    	; 0x3a74 <main+0x13bc>
                        break;
                    case '/':
                        if (num2 == 0) {
    3728:	fe 01       	movw	r30, r28
    372a:	ee 5e       	subi	r30, 0xEE	; 238
    372c:	fe 4f       	sbci	r31, 0xFE	; 254
    372e:	80 81       	ld	r24, Z
    3730:	91 81       	ldd	r25, Z+1	; 0x01
    3732:	a2 81       	ldd	r26, Z+2	; 0x02
    3734:	b3 81       	ldd	r27, Z+3	; 0x03
    3736:	00 97       	sbiw	r24, 0x00	; 0
    3738:	a1 05       	cpc	r26, r1
    373a:	b1 05       	cpc	r27, r1
    373c:	09 f0       	breq	.+2      	; 0x3740 <main+0x1088>
    373e:	bd c0       	rjmp	.+378    	; 0x38ba <main+0x1202>
                            LCD_Clear();
    3740:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_Clear>
                            LCD_WriteString("Math Error", LCD_ROW_1, 0);
    3744:	82 ed       	ldi	r24, 0xD2	; 210
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	60 e0       	ldi	r22, 0x00	; 0
    374a:	40 e0       	ldi	r20, 0x00	; 0
    374c:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_WriteString>
    3750:	fe 01       	movw	r30, r28
    3752:	e9 56       	subi	r30, 0x69	; 105
    3754:	ff 4f       	sbci	r31, 0xFF	; 255
    3756:	80 e0       	ldi	r24, 0x00	; 0
    3758:	90 e0       	ldi	r25, 0x00	; 0
    375a:	aa ef       	ldi	r26, 0xFA	; 250
    375c:	b4 e4       	ldi	r27, 0x44	; 68
    375e:	80 83       	st	Z, r24
    3760:	91 83       	std	Z+1, r25	; 0x01
    3762:	a2 83       	std	Z+2, r26	; 0x02
    3764:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3766:	8e 01       	movw	r16, r28
    3768:	0d 56       	subi	r16, 0x6D	; 109
    376a:	1f 4f       	sbci	r17, 0xFF	; 255
    376c:	fe 01       	movw	r30, r28
    376e:	e9 56       	subi	r30, 0x69	; 105
    3770:	ff 4f       	sbci	r31, 0xFF	; 255
    3772:	60 81       	ld	r22, Z
    3774:	71 81       	ldd	r23, Z+1	; 0x01
    3776:	82 81       	ldd	r24, Z+2	; 0x02
    3778:	93 81       	ldd	r25, Z+3	; 0x03
    377a:	20 e0       	ldi	r18, 0x00	; 0
    377c:	30 e0       	ldi	r19, 0x00	; 0
    377e:	4a e7       	ldi	r20, 0x7A	; 122
    3780:	55 e4       	ldi	r21, 0x45	; 69
    3782:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    3786:	dc 01       	movw	r26, r24
    3788:	cb 01       	movw	r24, r22
    378a:	f8 01       	movw	r30, r16
    378c:	80 83       	st	Z, r24
    378e:	91 83       	std	Z+1, r25	; 0x01
    3790:	a2 83       	std	Z+2, r26	; 0x02
    3792:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3794:	fe 01       	movw	r30, r28
    3796:	ed 56       	subi	r30, 0x6D	; 109
    3798:	ff 4f       	sbci	r31, 0xFF	; 255
    379a:	60 81       	ld	r22, Z
    379c:	71 81       	ldd	r23, Z+1	; 0x01
    379e:	82 81       	ldd	r24, Z+2	; 0x02
    37a0:	93 81       	ldd	r25, Z+3	; 0x03
    37a2:	20 e0       	ldi	r18, 0x00	; 0
    37a4:	30 e0       	ldi	r19, 0x00	; 0
    37a6:	40 e8       	ldi	r20, 0x80	; 128
    37a8:	5f e3       	ldi	r21, 0x3F	; 63
    37aa:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    37ae:	88 23       	and	r24, r24
    37b0:	44 f4       	brge	.+16     	; 0x37c2 <main+0x110a>
		__ticks = 1;
    37b2:	fe 01       	movw	r30, r28
    37b4:	ef 56       	subi	r30, 0x6F	; 111
    37b6:	ff 4f       	sbci	r31, 0xFF	; 255
    37b8:	81 e0       	ldi	r24, 0x01	; 1
    37ba:	90 e0       	ldi	r25, 0x00	; 0
    37bc:	91 83       	std	Z+1, r25	; 0x01
    37be:	80 83       	st	Z, r24
    37c0:	64 c0       	rjmp	.+200    	; 0x388a <main+0x11d2>
	else if (__tmp > 65535)
    37c2:	fe 01       	movw	r30, r28
    37c4:	ed 56       	subi	r30, 0x6D	; 109
    37c6:	ff 4f       	sbci	r31, 0xFF	; 255
    37c8:	60 81       	ld	r22, Z
    37ca:	71 81       	ldd	r23, Z+1	; 0x01
    37cc:	82 81       	ldd	r24, Z+2	; 0x02
    37ce:	93 81       	ldd	r25, Z+3	; 0x03
    37d0:	20 e0       	ldi	r18, 0x00	; 0
    37d2:	3f ef       	ldi	r19, 0xFF	; 255
    37d4:	4f e7       	ldi	r20, 0x7F	; 127
    37d6:	57 e4       	ldi	r21, 0x47	; 71
    37d8:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    37dc:	18 16       	cp	r1, r24
    37de:	0c f0       	brlt	.+2      	; 0x37e2 <main+0x112a>
    37e0:	43 c0       	rjmp	.+134    	; 0x3868 <main+0x11b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37e2:	fe 01       	movw	r30, r28
    37e4:	e9 56       	subi	r30, 0x69	; 105
    37e6:	ff 4f       	sbci	r31, 0xFF	; 255
    37e8:	60 81       	ld	r22, Z
    37ea:	71 81       	ldd	r23, Z+1	; 0x01
    37ec:	82 81       	ldd	r24, Z+2	; 0x02
    37ee:	93 81       	ldd	r25, Z+3	; 0x03
    37f0:	20 e0       	ldi	r18, 0x00	; 0
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	40 e2       	ldi	r20, 0x20	; 32
    37f6:	51 e4       	ldi	r21, 0x41	; 65
    37f8:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    37fc:	dc 01       	movw	r26, r24
    37fe:	cb 01       	movw	r24, r22
    3800:	8e 01       	movw	r16, r28
    3802:	0f 56       	subi	r16, 0x6F	; 111
    3804:	1f 4f       	sbci	r17, 0xFF	; 255
    3806:	bc 01       	movw	r22, r24
    3808:	cd 01       	movw	r24, r26
    380a:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    380e:	dc 01       	movw	r26, r24
    3810:	cb 01       	movw	r24, r22
    3812:	f8 01       	movw	r30, r16
    3814:	91 83       	std	Z+1, r25	; 0x01
    3816:	80 83       	st	Z, r24
    3818:	1f c0       	rjmp	.+62     	; 0x3858 <main+0x11a0>
    381a:	fe 01       	movw	r30, r28
    381c:	e1 57       	subi	r30, 0x71	; 113
    381e:	ff 4f       	sbci	r31, 0xFF	; 255
    3820:	80 e9       	ldi	r24, 0x90	; 144
    3822:	91 e0       	ldi	r25, 0x01	; 1
    3824:	91 83       	std	Z+1, r25	; 0x01
    3826:	80 83       	st	Z, r24
    3828:	fe 01       	movw	r30, r28
    382a:	e1 57       	subi	r30, 0x71	; 113
    382c:	ff 4f       	sbci	r31, 0xFF	; 255
    382e:	80 81       	ld	r24, Z
    3830:	91 81       	ldd	r25, Z+1	; 0x01
    3832:	01 97       	sbiw	r24, 0x01	; 1
    3834:	f1 f7       	brne	.-4      	; 0x3832 <main+0x117a>
    3836:	fe 01       	movw	r30, r28
    3838:	e1 57       	subi	r30, 0x71	; 113
    383a:	ff 4f       	sbci	r31, 0xFF	; 255
    383c:	91 83       	std	Z+1, r25	; 0x01
    383e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3840:	de 01       	movw	r26, r28
    3842:	af 56       	subi	r26, 0x6F	; 111
    3844:	bf 4f       	sbci	r27, 0xFF	; 255
    3846:	fe 01       	movw	r30, r28
    3848:	ef 56       	subi	r30, 0x6F	; 111
    384a:	ff 4f       	sbci	r31, 0xFF	; 255
    384c:	80 81       	ld	r24, Z
    384e:	91 81       	ldd	r25, Z+1	; 0x01
    3850:	01 97       	sbiw	r24, 0x01	; 1
    3852:	11 96       	adiw	r26, 0x01	; 1
    3854:	9c 93       	st	X, r25
    3856:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3858:	fe 01       	movw	r30, r28
    385a:	ef 56       	subi	r30, 0x6F	; 111
    385c:	ff 4f       	sbci	r31, 0xFF	; 255
    385e:	80 81       	ld	r24, Z
    3860:	91 81       	ldd	r25, Z+1	; 0x01
    3862:	00 97       	sbiw	r24, 0x00	; 0
    3864:	d1 f6       	brne	.-76     	; 0x381a <main+0x1162>
    3866:	6d c8       	rjmp	.-3878   	; 0x2942 <main+0x28a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3868:	8e 01       	movw	r16, r28
    386a:	0f 56       	subi	r16, 0x6F	; 111
    386c:	1f 4f       	sbci	r17, 0xFF	; 255
    386e:	fe 01       	movw	r30, r28
    3870:	ed 56       	subi	r30, 0x6D	; 109
    3872:	ff 4f       	sbci	r31, 0xFF	; 255
    3874:	60 81       	ld	r22, Z
    3876:	71 81       	ldd	r23, Z+1	; 0x01
    3878:	82 81       	ldd	r24, Z+2	; 0x02
    387a:	93 81       	ldd	r25, Z+3	; 0x03
    387c:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    3880:	dc 01       	movw	r26, r24
    3882:	cb 01       	movw	r24, r22
    3884:	f8 01       	movw	r30, r16
    3886:	91 83       	std	Z+1, r25	; 0x01
    3888:	80 83       	st	Z, r24
    388a:	de 01       	movw	r26, r28
    388c:	a3 57       	subi	r26, 0x73	; 115
    388e:	bf 4f       	sbci	r27, 0xFF	; 255
    3890:	fe 01       	movw	r30, r28
    3892:	ef 56       	subi	r30, 0x6F	; 111
    3894:	ff 4f       	sbci	r31, 0xFF	; 255
    3896:	80 81       	ld	r24, Z
    3898:	91 81       	ldd	r25, Z+1	; 0x01
    389a:	11 96       	adiw	r26, 0x01	; 1
    389c:	9c 93       	st	X, r25
    389e:	8e 93       	st	-X, r24
    38a0:	fe 01       	movw	r30, r28
    38a2:	e3 57       	subi	r30, 0x73	; 115
    38a4:	ff 4f       	sbci	r31, 0xFF	; 255
    38a6:	80 81       	ld	r24, Z
    38a8:	91 81       	ldd	r25, Z+1	; 0x01
    38aa:	01 97       	sbiw	r24, 0x01	; 1
    38ac:	f1 f7       	brne	.-4      	; 0x38aa <main+0x11f2>
    38ae:	fe 01       	movw	r30, r28
    38b0:	e3 57       	subi	r30, 0x73	; 115
    38b2:	ff 4f       	sbci	r31, 0xFF	; 255
    38b4:	91 83       	std	Z+1, r25	; 0x01
    38b6:	80 83       	st	Z, r24
    38b8:	44 c8       	rjmp	.-3960   	; 0x2942 <main+0x28a>
                            _delay_ms(2000); // Display error for a period
                            continue; // Exit this case
                        }

                        result = num1 / num2;
    38ba:	8e 01       	movw	r16, r28
    38bc:	02 5f       	subi	r16, 0xF2	; 242
    38be:	1e 4f       	sbci	r17, 0xFE	; 254
    38c0:	fe 01       	movw	r30, r28
    38c2:	ea 5e       	subi	r30, 0xEA	; 234
    38c4:	fe 4f       	sbci	r31, 0xFE	; 254
    38c6:	9e 01       	movw	r18, r28
    38c8:	2e 5e       	subi	r18, 0xEE	; 238
    38ca:	3e 4f       	sbci	r19, 0xFE	; 254
    38cc:	80 81       	ld	r24, Z
    38ce:	91 81       	ldd	r25, Z+1	; 0x01
    38d0:	a2 81       	ldd	r26, Z+2	; 0x02
    38d2:	b3 81       	ldd	r27, Z+3	; 0x03
    38d4:	f9 01       	movw	r30, r18
    38d6:	20 81       	ld	r18, Z
    38d8:	31 81       	ldd	r19, Z+1	; 0x01
    38da:	42 81       	ldd	r20, Z+2	; 0x02
    38dc:	53 81       	ldd	r21, Z+3	; 0x03
    38de:	bc 01       	movw	r22, r24
    38e0:	cd 01       	movw	r24, r26
    38e2:	0e 94 aa 24 	call	0x4954	; 0x4954 <__divmodsi4>
    38e6:	da 01       	movw	r26, r20
    38e8:	c9 01       	movw	r24, r18
    38ea:	f8 01       	movw	r30, r16
    38ec:	80 83       	st	Z, r24
    38ee:	91 83       	std	Z+1, r25	; 0x01
    38f0:	a2 83       	std	Z+2, r26	; 0x02
    38f2:	b3 83       	std	Z+3, r27	; 0x03
    38f4:	bf c0       	rjmp	.+382    	; 0x3a74 <main+0x13bc>
                        break;
                    default:
                        LCD_Clear();
    38f6:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_Clear>
                        LCD_WriteString(" ", LCD_ROW_1, 0);
    38fa:	8d ed       	ldi	r24, 0xDD	; 221
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	60 e0       	ldi	r22, 0x00	; 0
    3900:	40 e0       	ldi	r20, 0x00	; 0
    3902:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_WriteString>
    3906:	fe 01       	movw	r30, r28
    3908:	e7 57       	subi	r30, 0x77	; 119
    390a:	ff 4f       	sbci	r31, 0xFF	; 255
    390c:	80 e0       	ldi	r24, 0x00	; 0
    390e:	90 e0       	ldi	r25, 0x00	; 0
    3910:	a8 ec       	ldi	r26, 0xC8	; 200
    3912:	b2 e4       	ldi	r27, 0x42	; 66
    3914:	80 83       	st	Z, r24
    3916:	91 83       	std	Z+1, r25	; 0x01
    3918:	a2 83       	std	Z+2, r26	; 0x02
    391a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    391c:	8e 01       	movw	r16, r28
    391e:	0b 57       	subi	r16, 0x7B	; 123
    3920:	1f 4f       	sbci	r17, 0xFF	; 255
    3922:	fe 01       	movw	r30, r28
    3924:	e7 57       	subi	r30, 0x77	; 119
    3926:	ff 4f       	sbci	r31, 0xFF	; 255
    3928:	60 81       	ld	r22, Z
    392a:	71 81       	ldd	r23, Z+1	; 0x01
    392c:	82 81       	ldd	r24, Z+2	; 0x02
    392e:	93 81       	ldd	r25, Z+3	; 0x03
    3930:	20 e0       	ldi	r18, 0x00	; 0
    3932:	30 e0       	ldi	r19, 0x00	; 0
    3934:	4a e7       	ldi	r20, 0x7A	; 122
    3936:	55 e4       	ldi	r21, 0x45	; 69
    3938:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    393c:	dc 01       	movw	r26, r24
    393e:	cb 01       	movw	r24, r22
    3940:	f8 01       	movw	r30, r16
    3942:	80 83       	st	Z, r24
    3944:	91 83       	std	Z+1, r25	; 0x01
    3946:	a2 83       	std	Z+2, r26	; 0x02
    3948:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    394a:	fe 01       	movw	r30, r28
    394c:	eb 57       	subi	r30, 0x7B	; 123
    394e:	ff 4f       	sbci	r31, 0xFF	; 255
    3950:	60 81       	ld	r22, Z
    3952:	71 81       	ldd	r23, Z+1	; 0x01
    3954:	82 81       	ldd	r24, Z+2	; 0x02
    3956:	93 81       	ldd	r25, Z+3	; 0x03
    3958:	20 e0       	ldi	r18, 0x00	; 0
    395a:	30 e0       	ldi	r19, 0x00	; 0
    395c:	40 e8       	ldi	r20, 0x80	; 128
    395e:	5f e3       	ldi	r21, 0x3F	; 63
    3960:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    3964:	88 23       	and	r24, r24
    3966:	44 f4       	brge	.+16     	; 0x3978 <main+0x12c0>
		__ticks = 1;
    3968:	fe 01       	movw	r30, r28
    396a:	ed 57       	subi	r30, 0x7D	; 125
    396c:	ff 4f       	sbci	r31, 0xFF	; 255
    396e:	81 e0       	ldi	r24, 0x01	; 1
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	91 83       	std	Z+1, r25	; 0x01
    3974:	80 83       	st	Z, r24
    3976:	65 c0       	rjmp	.+202    	; 0x3a42 <main+0x138a>
	else if (__tmp > 65535)
    3978:	fe 01       	movw	r30, r28
    397a:	eb 57       	subi	r30, 0x7B	; 123
    397c:	ff 4f       	sbci	r31, 0xFF	; 255
    397e:	60 81       	ld	r22, Z
    3980:	71 81       	ldd	r23, Z+1	; 0x01
    3982:	82 81       	ldd	r24, Z+2	; 0x02
    3984:	93 81       	ldd	r25, Z+3	; 0x03
    3986:	20 e0       	ldi	r18, 0x00	; 0
    3988:	3f ef       	ldi	r19, 0xFF	; 255
    398a:	4f e7       	ldi	r20, 0x7F	; 127
    398c:	57 e4       	ldi	r21, 0x47	; 71
    398e:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    3992:	18 16       	cp	r1, r24
    3994:	0c f0       	brlt	.+2      	; 0x3998 <main+0x12e0>
    3996:	44 c0       	rjmp	.+136    	; 0x3a20 <main+0x1368>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3998:	fe 01       	movw	r30, r28
    399a:	e7 57       	subi	r30, 0x77	; 119
    399c:	ff 4f       	sbci	r31, 0xFF	; 255
    399e:	60 81       	ld	r22, Z
    39a0:	71 81       	ldd	r23, Z+1	; 0x01
    39a2:	82 81       	ldd	r24, Z+2	; 0x02
    39a4:	93 81       	ldd	r25, Z+3	; 0x03
    39a6:	20 e0       	ldi	r18, 0x00	; 0
    39a8:	30 e0       	ldi	r19, 0x00	; 0
    39aa:	40 e2       	ldi	r20, 0x20	; 32
    39ac:	51 e4       	ldi	r21, 0x41	; 65
    39ae:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    39b2:	dc 01       	movw	r26, r24
    39b4:	cb 01       	movw	r24, r22
    39b6:	8e 01       	movw	r16, r28
    39b8:	0d 57       	subi	r16, 0x7D	; 125
    39ba:	1f 4f       	sbci	r17, 0xFF	; 255
    39bc:	bc 01       	movw	r22, r24
    39be:	cd 01       	movw	r24, r26
    39c0:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    39c4:	dc 01       	movw	r26, r24
    39c6:	cb 01       	movw	r24, r22
    39c8:	f8 01       	movw	r30, r16
    39ca:	91 83       	std	Z+1, r25	; 0x01
    39cc:	80 83       	st	Z, r24
    39ce:	1f c0       	rjmp	.+62     	; 0x3a0e <main+0x1356>
    39d0:	fe 01       	movw	r30, r28
    39d2:	ef 57       	subi	r30, 0x7F	; 127
    39d4:	ff 4f       	sbci	r31, 0xFF	; 255
    39d6:	80 e9       	ldi	r24, 0x90	; 144
    39d8:	91 e0       	ldi	r25, 0x01	; 1
    39da:	91 83       	std	Z+1, r25	; 0x01
    39dc:	80 83       	st	Z, r24
    39de:	fe 01       	movw	r30, r28
    39e0:	ef 57       	subi	r30, 0x7F	; 127
    39e2:	ff 4f       	sbci	r31, 0xFF	; 255
    39e4:	80 81       	ld	r24, Z
    39e6:	91 81       	ldd	r25, Z+1	; 0x01
    39e8:	01 97       	sbiw	r24, 0x01	; 1
    39ea:	f1 f7       	brne	.-4      	; 0x39e8 <main+0x1330>
    39ec:	fe 01       	movw	r30, r28
    39ee:	ef 57       	subi	r30, 0x7F	; 127
    39f0:	ff 4f       	sbci	r31, 0xFF	; 255
    39f2:	91 83       	std	Z+1, r25	; 0x01
    39f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39f6:	de 01       	movw	r26, r28
    39f8:	ad 57       	subi	r26, 0x7D	; 125
    39fa:	bf 4f       	sbci	r27, 0xFF	; 255
    39fc:	fe 01       	movw	r30, r28
    39fe:	ed 57       	subi	r30, 0x7D	; 125
    3a00:	ff 4f       	sbci	r31, 0xFF	; 255
    3a02:	80 81       	ld	r24, Z
    3a04:	91 81       	ldd	r25, Z+1	; 0x01
    3a06:	01 97       	sbiw	r24, 0x01	; 1
    3a08:	11 96       	adiw	r26, 0x01	; 1
    3a0a:	9c 93       	st	X, r25
    3a0c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a0e:	fe 01       	movw	r30, r28
    3a10:	ed 57       	subi	r30, 0x7D	; 125
    3a12:	ff 4f       	sbci	r31, 0xFF	; 255
    3a14:	80 81       	ld	r24, Z
    3a16:	91 81       	ldd	r25, Z+1	; 0x01
    3a18:	00 97       	sbiw	r24, 0x00	; 0
    3a1a:	d1 f6       	brne	.-76     	; 0x39d0 <main+0x1318>
    3a1c:	0c 94 a1 14 	jmp	0x2942	; 0x2942 <main+0x28a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a20:	8e 01       	movw	r16, r28
    3a22:	0d 57       	subi	r16, 0x7D	; 125
    3a24:	1f 4f       	sbci	r17, 0xFF	; 255
    3a26:	fe 01       	movw	r30, r28
    3a28:	eb 57       	subi	r30, 0x7B	; 123
    3a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2c:	60 81       	ld	r22, Z
    3a2e:	71 81       	ldd	r23, Z+1	; 0x01
    3a30:	82 81       	ldd	r24, Z+2	; 0x02
    3a32:	93 81       	ldd	r25, Z+3	; 0x03
    3a34:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    3a38:	dc 01       	movw	r26, r24
    3a3a:	cb 01       	movw	r24, r22
    3a3c:	f8 01       	movw	r30, r16
    3a3e:	91 83       	std	Z+1, r25	; 0x01
    3a40:	80 83       	st	Z, r24
    3a42:	de 01       	movw	r26, r28
    3a44:	a1 58       	subi	r26, 0x81	; 129
    3a46:	bf 4f       	sbci	r27, 0xFF	; 255
    3a48:	fe 01       	movw	r30, r28
    3a4a:	ed 57       	subi	r30, 0x7D	; 125
    3a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4e:	80 81       	ld	r24, Z
    3a50:	91 81       	ldd	r25, Z+1	; 0x01
    3a52:	11 96       	adiw	r26, 0x01	; 1
    3a54:	9c 93       	st	X, r25
    3a56:	8e 93       	st	-X, r24
    3a58:	fe 01       	movw	r30, r28
    3a5a:	e1 58       	subi	r30, 0x81	; 129
    3a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5e:	80 81       	ld	r24, Z
    3a60:	91 81       	ldd	r25, Z+1	; 0x01
    3a62:	01 97       	sbiw	r24, 0x01	; 1
    3a64:	f1 f7       	brne	.-4      	; 0x3a62 <main+0x13aa>
    3a66:	fe 01       	movw	r30, r28
    3a68:	e1 58       	subi	r30, 0x81	; 129
    3a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6c:	91 83       	std	Z+1, r25	; 0x01
    3a6e:	80 83       	st	Z, r24
    3a70:	0c 94 a1 14 	jmp	0x2942	; 0x2942 <main+0x28a>
                        _delay_ms(100); // Display error for a period
                        continue;
                }
                if(op=='/')
    3a74:	fe 01       	movw	r30, r28
    3a76:	e5 5f       	subi	r30, 0xF5	; 245
    3a78:	fe 4f       	sbci	r31, 0xFE	; 254
    3a7a:	80 81       	ld	r24, Z
    3a7c:	8f 32       	cpi	r24, 0x2F	; 47
    3a7e:	09 f0       	breq	.+2      	; 0x3a82 <main+0x13ca>
    3a80:	d1 c0       	rjmp	.+418    	; 0x3c24 <main+0x156c>
                {
                	floatToString(resultStr, result);
    3a82:	fe 01       	movw	r30, r28
    3a84:	e2 5f       	subi	r30, 0xF2	; 242
    3a86:	fe 4f       	sbci	r31, 0xFE	; 254
    3a88:	60 81       	ld	r22, Z
    3a8a:	71 81       	ldd	r23, Z+1	; 0x01
    3a8c:	82 81       	ldd	r24, Z+2	; 0x02
    3a8e:	93 81       	ldd	r25, Z+3	; 0x03
    3a90:	0e 94 af 03 	call	0x75e	; 0x75e <__floatsisf>
    3a94:	9b 01       	movw	r18, r22
    3a96:	ac 01       	movw	r20, r24
    3a98:	ce 01       	movw	r24, r28
    3a9a:	85 5e       	subi	r24, 0xE5	; 229
    3a9c:	9e 4f       	sbci	r25, 0xFE	; 254
    3a9e:	ba 01       	movw	r22, r20
    3aa0:	a9 01       	movw	r20, r18
    3aa2:	0e 94 a1 11 	call	0x2342	; 0x2342 <floatToString>
					LCD_Clear();
    3aa6:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_Clear>
					LCD_WriteString(resultStr, LCD_ROW_1, 0);
    3aaa:	ce 01       	movw	r24, r28
    3aac:	85 5e       	subi	r24, 0xE5	; 229
    3aae:	9e 4f       	sbci	r25, 0xFE	; 254
    3ab0:	60 e0       	ldi	r22, 0x00	; 0
    3ab2:	40 e0       	ldi	r20, 0x00	; 0
    3ab4:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_WriteString>
    3ab8:	fe 01       	movw	r30, r28
    3aba:	e5 58       	subi	r30, 0x85	; 133
    3abc:	ff 4f       	sbci	r31, 0xFF	; 255
    3abe:	80 e0       	ldi	r24, 0x00	; 0
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	aa ef       	ldi	r26, 0xFA	; 250
    3ac4:	b4 e4       	ldi	r27, 0x44	; 68
    3ac6:	80 83       	st	Z, r24
    3ac8:	91 83       	std	Z+1, r25	; 0x01
    3aca:	a2 83       	std	Z+2, r26	; 0x02
    3acc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ace:	8e 01       	movw	r16, r28
    3ad0:	09 58       	subi	r16, 0x89	; 137
    3ad2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ad4:	fe 01       	movw	r30, r28
    3ad6:	e5 58       	subi	r30, 0x85	; 133
    3ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    3ada:	60 81       	ld	r22, Z
    3adc:	71 81       	ldd	r23, Z+1	; 0x01
    3ade:	82 81       	ldd	r24, Z+2	; 0x02
    3ae0:	93 81       	ldd	r25, Z+3	; 0x03
    3ae2:	20 e0       	ldi	r18, 0x00	; 0
    3ae4:	30 e0       	ldi	r19, 0x00	; 0
    3ae6:	4a e7       	ldi	r20, 0x7A	; 122
    3ae8:	55 e4       	ldi	r21, 0x45	; 69
    3aea:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    3aee:	dc 01       	movw	r26, r24
    3af0:	cb 01       	movw	r24, r22
    3af2:	f8 01       	movw	r30, r16
    3af4:	80 83       	st	Z, r24
    3af6:	91 83       	std	Z+1, r25	; 0x01
    3af8:	a2 83       	std	Z+2, r26	; 0x02
    3afa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3afc:	fe 01       	movw	r30, r28
    3afe:	e9 58       	subi	r30, 0x89	; 137
    3b00:	ff 4f       	sbci	r31, 0xFF	; 255
    3b02:	60 81       	ld	r22, Z
    3b04:	71 81       	ldd	r23, Z+1	; 0x01
    3b06:	82 81       	ldd	r24, Z+2	; 0x02
    3b08:	93 81       	ldd	r25, Z+3	; 0x03
    3b0a:	20 e0       	ldi	r18, 0x00	; 0
    3b0c:	30 e0       	ldi	r19, 0x00	; 0
    3b0e:	40 e8       	ldi	r20, 0x80	; 128
    3b10:	5f e3       	ldi	r21, 0x3F	; 63
    3b12:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    3b16:	88 23       	and	r24, r24
    3b18:	44 f4       	brge	.+16     	; 0x3b2a <main+0x1472>
		__ticks = 1;
    3b1a:	fe 01       	movw	r30, r28
    3b1c:	eb 58       	subi	r30, 0x8B	; 139
    3b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b20:	81 e0       	ldi	r24, 0x01	; 1
    3b22:	90 e0       	ldi	r25, 0x00	; 0
    3b24:	91 83       	std	Z+1, r25	; 0x01
    3b26:	80 83       	st	Z, r24
    3b28:	64 c0       	rjmp	.+200    	; 0x3bf2 <main+0x153a>
	else if (__tmp > 65535)
    3b2a:	fe 01       	movw	r30, r28
    3b2c:	e9 58       	subi	r30, 0x89	; 137
    3b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b30:	60 81       	ld	r22, Z
    3b32:	71 81       	ldd	r23, Z+1	; 0x01
    3b34:	82 81       	ldd	r24, Z+2	; 0x02
    3b36:	93 81       	ldd	r25, Z+3	; 0x03
    3b38:	20 e0       	ldi	r18, 0x00	; 0
    3b3a:	3f ef       	ldi	r19, 0xFF	; 255
    3b3c:	4f e7       	ldi	r20, 0x7F	; 127
    3b3e:	57 e4       	ldi	r21, 0x47	; 71
    3b40:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    3b44:	18 16       	cp	r1, r24
    3b46:	0c f0       	brlt	.+2      	; 0x3b4a <main+0x1492>
    3b48:	43 c0       	rjmp	.+134    	; 0x3bd0 <main+0x1518>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b4a:	fe 01       	movw	r30, r28
    3b4c:	e5 58       	subi	r30, 0x85	; 133
    3b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b50:	60 81       	ld	r22, Z
    3b52:	71 81       	ldd	r23, Z+1	; 0x01
    3b54:	82 81       	ldd	r24, Z+2	; 0x02
    3b56:	93 81       	ldd	r25, Z+3	; 0x03
    3b58:	20 e0       	ldi	r18, 0x00	; 0
    3b5a:	30 e0       	ldi	r19, 0x00	; 0
    3b5c:	40 e2       	ldi	r20, 0x20	; 32
    3b5e:	51 e4       	ldi	r21, 0x41	; 65
    3b60:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    3b64:	dc 01       	movw	r26, r24
    3b66:	cb 01       	movw	r24, r22
    3b68:	8e 01       	movw	r16, r28
    3b6a:	0b 58       	subi	r16, 0x8B	; 139
    3b6c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b6e:	bc 01       	movw	r22, r24
    3b70:	cd 01       	movw	r24, r26
    3b72:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    3b76:	dc 01       	movw	r26, r24
    3b78:	cb 01       	movw	r24, r22
    3b7a:	f8 01       	movw	r30, r16
    3b7c:	91 83       	std	Z+1, r25	; 0x01
    3b7e:	80 83       	st	Z, r24
    3b80:	1f c0       	rjmp	.+62     	; 0x3bc0 <main+0x1508>
    3b82:	fe 01       	movw	r30, r28
    3b84:	ed 58       	subi	r30, 0x8D	; 141
    3b86:	ff 4f       	sbci	r31, 0xFF	; 255
    3b88:	80 e9       	ldi	r24, 0x90	; 144
    3b8a:	91 e0       	ldi	r25, 0x01	; 1
    3b8c:	91 83       	std	Z+1, r25	; 0x01
    3b8e:	80 83       	st	Z, r24
    3b90:	fe 01       	movw	r30, r28
    3b92:	ed 58       	subi	r30, 0x8D	; 141
    3b94:	ff 4f       	sbci	r31, 0xFF	; 255
    3b96:	80 81       	ld	r24, Z
    3b98:	91 81       	ldd	r25, Z+1	; 0x01
    3b9a:	01 97       	sbiw	r24, 0x01	; 1
    3b9c:	f1 f7       	brne	.-4      	; 0x3b9a <main+0x14e2>
    3b9e:	fe 01       	movw	r30, r28
    3ba0:	ed 58       	subi	r30, 0x8D	; 141
    3ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba4:	91 83       	std	Z+1, r25	; 0x01
    3ba6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ba8:	de 01       	movw	r26, r28
    3baa:	ab 58       	subi	r26, 0x8B	; 139
    3bac:	bf 4f       	sbci	r27, 0xFF	; 255
    3bae:	fe 01       	movw	r30, r28
    3bb0:	eb 58       	subi	r30, 0x8B	; 139
    3bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb4:	80 81       	ld	r24, Z
    3bb6:	91 81       	ldd	r25, Z+1	; 0x01
    3bb8:	01 97       	sbiw	r24, 0x01	; 1
    3bba:	11 96       	adiw	r26, 0x01	; 1
    3bbc:	9c 93       	st	X, r25
    3bbe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bc0:	fe 01       	movw	r30, r28
    3bc2:	eb 58       	subi	r30, 0x8B	; 139
    3bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc6:	80 81       	ld	r24, Z
    3bc8:	91 81       	ldd	r25, Z+1	; 0x01
    3bca:	00 97       	sbiw	r24, 0x00	; 0
    3bcc:	d1 f6       	brne	.-76     	; 0x3b82 <main+0x14ca>
    3bce:	27 c0       	rjmp	.+78     	; 0x3c1e <main+0x1566>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bd0:	8e 01       	movw	r16, r28
    3bd2:	0b 58       	subi	r16, 0x8B	; 139
    3bd4:	1f 4f       	sbci	r17, 0xFF	; 255
    3bd6:	fe 01       	movw	r30, r28
    3bd8:	e9 58       	subi	r30, 0x89	; 137
    3bda:	ff 4f       	sbci	r31, 0xFF	; 255
    3bdc:	60 81       	ld	r22, Z
    3bde:	71 81       	ldd	r23, Z+1	; 0x01
    3be0:	82 81       	ldd	r24, Z+2	; 0x02
    3be2:	93 81       	ldd	r25, Z+3	; 0x03
    3be4:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    3be8:	dc 01       	movw	r26, r24
    3bea:	cb 01       	movw	r24, r22
    3bec:	f8 01       	movw	r30, r16
    3bee:	91 83       	std	Z+1, r25	; 0x01
    3bf0:	80 83       	st	Z, r24
    3bf2:	de 01       	movw	r26, r28
    3bf4:	af 58       	subi	r26, 0x8F	; 143
    3bf6:	bf 4f       	sbci	r27, 0xFF	; 255
    3bf8:	fe 01       	movw	r30, r28
    3bfa:	eb 58       	subi	r30, 0x8B	; 139
    3bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfe:	80 81       	ld	r24, Z
    3c00:	91 81       	ldd	r25, Z+1	; 0x01
    3c02:	8d 93       	st	X+, r24
    3c04:	9c 93       	st	X, r25
    3c06:	fe 01       	movw	r30, r28
    3c08:	ef 58       	subi	r30, 0x8F	; 143
    3c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0c:	80 81       	ld	r24, Z
    3c0e:	91 81       	ldd	r25, Z+1	; 0x01
    3c10:	01 97       	sbiw	r24, 0x01	; 1
    3c12:	f1 f7       	brne	.-4      	; 0x3c10 <main+0x1558>
    3c14:	fe 01       	movw	r30, r28
    3c16:	ef 58       	subi	r30, 0x8F	; 143
    3c18:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1a:	91 83       	std	Z+1, r25	; 0x01
    3c1c:	80 83       	st	Z, r24
					_delay_ms(2000); // Allow time to read the result
					LCD_Clear();
    3c1e:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_Clear>
    3c22:	f1 c5       	rjmp	.+3042   	; 0x4806 <main+0x214e>
					break;
                }
                else{
                intToString(resultStr, result);
    3c24:	ce 01       	movw	r24, r28
    3c26:	85 5e       	subi	r24, 0xE5	; 229
    3c28:	9e 4f       	sbci	r25, 0xFE	; 254
    3c2a:	fe 01       	movw	r30, r28
    3c2c:	e2 5f       	subi	r30, 0xF2	; 242
    3c2e:	fe 4f       	sbci	r31, 0xFE	; 254
    3c30:	20 81       	ld	r18, Z
    3c32:	31 81       	ldd	r19, Z+1	; 0x01
    3c34:	42 81       	ldd	r20, Z+2	; 0x02
    3c36:	53 81       	ldd	r21, Z+3	; 0x03
    3c38:	ba 01       	movw	r22, r20
    3c3a:	a9 01       	movw	r20, r18
    3c3c:	0e 94 2a 12 	call	0x2454	; 0x2454 <intToString>
                LCD_Clear();
    3c40:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_Clear>
                LCD_WriteString(resultStr, LCD_ROW_1, 0);
    3c44:	ce 01       	movw	r24, r28
    3c46:	85 5e       	subi	r24, 0xE5	; 229
    3c48:	9e 4f       	sbci	r25, 0xFE	; 254
    3c4a:	60 e0       	ldi	r22, 0x00	; 0
    3c4c:	40 e0       	ldi	r20, 0x00	; 0
    3c4e:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_WriteString>
    3c52:	fe 01       	movw	r30, r28
    3c54:	e3 59       	subi	r30, 0x93	; 147
    3c56:	ff 4f       	sbci	r31, 0xFF	; 255
    3c58:	80 e0       	ldi	r24, 0x00	; 0
    3c5a:	90 e0       	ldi	r25, 0x00	; 0
    3c5c:	aa ef       	ldi	r26, 0xFA	; 250
    3c5e:	b4 e4       	ldi	r27, 0x44	; 68
    3c60:	80 83       	st	Z, r24
    3c62:	91 83       	std	Z+1, r25	; 0x01
    3c64:	a2 83       	std	Z+2, r26	; 0x02
    3c66:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c68:	8e 01       	movw	r16, r28
    3c6a:	07 59       	subi	r16, 0x97	; 151
    3c6c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c6e:	fe 01       	movw	r30, r28
    3c70:	e3 59       	subi	r30, 0x93	; 147
    3c72:	ff 4f       	sbci	r31, 0xFF	; 255
    3c74:	60 81       	ld	r22, Z
    3c76:	71 81       	ldd	r23, Z+1	; 0x01
    3c78:	82 81       	ldd	r24, Z+2	; 0x02
    3c7a:	93 81       	ldd	r25, Z+3	; 0x03
    3c7c:	20 e0       	ldi	r18, 0x00	; 0
    3c7e:	30 e0       	ldi	r19, 0x00	; 0
    3c80:	4a e7       	ldi	r20, 0x7A	; 122
    3c82:	55 e4       	ldi	r21, 0x45	; 69
    3c84:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    3c88:	dc 01       	movw	r26, r24
    3c8a:	cb 01       	movw	r24, r22
    3c8c:	f8 01       	movw	r30, r16
    3c8e:	80 83       	st	Z, r24
    3c90:	91 83       	std	Z+1, r25	; 0x01
    3c92:	a2 83       	std	Z+2, r26	; 0x02
    3c94:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c96:	fe 01       	movw	r30, r28
    3c98:	e7 59       	subi	r30, 0x97	; 151
    3c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9c:	60 81       	ld	r22, Z
    3c9e:	71 81       	ldd	r23, Z+1	; 0x01
    3ca0:	82 81       	ldd	r24, Z+2	; 0x02
    3ca2:	93 81       	ldd	r25, Z+3	; 0x03
    3ca4:	20 e0       	ldi	r18, 0x00	; 0
    3ca6:	30 e0       	ldi	r19, 0x00	; 0
    3ca8:	40 e8       	ldi	r20, 0x80	; 128
    3caa:	5f e3       	ldi	r21, 0x3F	; 63
    3cac:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    3cb0:	88 23       	and	r24, r24
    3cb2:	44 f4       	brge	.+16     	; 0x3cc4 <main+0x160c>
		__ticks = 1;
    3cb4:	fe 01       	movw	r30, r28
    3cb6:	e9 59       	subi	r30, 0x99	; 153
    3cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cba:	81 e0       	ldi	r24, 0x01	; 1
    3cbc:	90 e0       	ldi	r25, 0x00	; 0
    3cbe:	91 83       	std	Z+1, r25	; 0x01
    3cc0:	80 83       	st	Z, r24
    3cc2:	64 c0       	rjmp	.+200    	; 0x3d8c <main+0x16d4>
	else if (__tmp > 65535)
    3cc4:	fe 01       	movw	r30, r28
    3cc6:	e7 59       	subi	r30, 0x97	; 151
    3cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cca:	60 81       	ld	r22, Z
    3ccc:	71 81       	ldd	r23, Z+1	; 0x01
    3cce:	82 81       	ldd	r24, Z+2	; 0x02
    3cd0:	93 81       	ldd	r25, Z+3	; 0x03
    3cd2:	20 e0       	ldi	r18, 0x00	; 0
    3cd4:	3f ef       	ldi	r19, 0xFF	; 255
    3cd6:	4f e7       	ldi	r20, 0x7F	; 127
    3cd8:	57 e4       	ldi	r21, 0x47	; 71
    3cda:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    3cde:	18 16       	cp	r1, r24
    3ce0:	0c f0       	brlt	.+2      	; 0x3ce4 <main+0x162c>
    3ce2:	43 c0       	rjmp	.+134    	; 0x3d6a <main+0x16b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ce4:	fe 01       	movw	r30, r28
    3ce6:	e3 59       	subi	r30, 0x93	; 147
    3ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cea:	60 81       	ld	r22, Z
    3cec:	71 81       	ldd	r23, Z+1	; 0x01
    3cee:	82 81       	ldd	r24, Z+2	; 0x02
    3cf0:	93 81       	ldd	r25, Z+3	; 0x03
    3cf2:	20 e0       	ldi	r18, 0x00	; 0
    3cf4:	30 e0       	ldi	r19, 0x00	; 0
    3cf6:	40 e2       	ldi	r20, 0x20	; 32
    3cf8:	51 e4       	ldi	r21, 0x41	; 65
    3cfa:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    3cfe:	dc 01       	movw	r26, r24
    3d00:	cb 01       	movw	r24, r22
    3d02:	8e 01       	movw	r16, r28
    3d04:	09 59       	subi	r16, 0x99	; 153
    3d06:	1f 4f       	sbci	r17, 0xFF	; 255
    3d08:	bc 01       	movw	r22, r24
    3d0a:	cd 01       	movw	r24, r26
    3d0c:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    3d10:	dc 01       	movw	r26, r24
    3d12:	cb 01       	movw	r24, r22
    3d14:	f8 01       	movw	r30, r16
    3d16:	91 83       	std	Z+1, r25	; 0x01
    3d18:	80 83       	st	Z, r24
    3d1a:	1f c0       	rjmp	.+62     	; 0x3d5a <main+0x16a2>
    3d1c:	fe 01       	movw	r30, r28
    3d1e:	eb 59       	subi	r30, 0x9B	; 155
    3d20:	ff 4f       	sbci	r31, 0xFF	; 255
    3d22:	80 e9       	ldi	r24, 0x90	; 144
    3d24:	91 e0       	ldi	r25, 0x01	; 1
    3d26:	91 83       	std	Z+1, r25	; 0x01
    3d28:	80 83       	st	Z, r24
    3d2a:	fe 01       	movw	r30, r28
    3d2c:	eb 59       	subi	r30, 0x9B	; 155
    3d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d30:	80 81       	ld	r24, Z
    3d32:	91 81       	ldd	r25, Z+1	; 0x01
    3d34:	01 97       	sbiw	r24, 0x01	; 1
    3d36:	f1 f7       	brne	.-4      	; 0x3d34 <main+0x167c>
    3d38:	fe 01       	movw	r30, r28
    3d3a:	eb 59       	subi	r30, 0x9B	; 155
    3d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3e:	91 83       	std	Z+1, r25	; 0x01
    3d40:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d42:	de 01       	movw	r26, r28
    3d44:	a9 59       	subi	r26, 0x99	; 153
    3d46:	bf 4f       	sbci	r27, 0xFF	; 255
    3d48:	fe 01       	movw	r30, r28
    3d4a:	e9 59       	subi	r30, 0x99	; 153
    3d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4e:	80 81       	ld	r24, Z
    3d50:	91 81       	ldd	r25, Z+1	; 0x01
    3d52:	01 97       	sbiw	r24, 0x01	; 1
    3d54:	11 96       	adiw	r26, 0x01	; 1
    3d56:	9c 93       	st	X, r25
    3d58:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d5a:	fe 01       	movw	r30, r28
    3d5c:	e9 59       	subi	r30, 0x99	; 153
    3d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d60:	80 81       	ld	r24, Z
    3d62:	91 81       	ldd	r25, Z+1	; 0x01
    3d64:	00 97       	sbiw	r24, 0x00	; 0
    3d66:	d1 f6       	brne	.-76     	; 0x3d1c <main+0x1664>
    3d68:	27 c0       	rjmp	.+78     	; 0x3db8 <main+0x1700>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d6a:	8e 01       	movw	r16, r28
    3d6c:	09 59       	subi	r16, 0x99	; 153
    3d6e:	1f 4f       	sbci	r17, 0xFF	; 255
    3d70:	fe 01       	movw	r30, r28
    3d72:	e7 59       	subi	r30, 0x97	; 151
    3d74:	ff 4f       	sbci	r31, 0xFF	; 255
    3d76:	60 81       	ld	r22, Z
    3d78:	71 81       	ldd	r23, Z+1	; 0x01
    3d7a:	82 81       	ldd	r24, Z+2	; 0x02
    3d7c:	93 81       	ldd	r25, Z+3	; 0x03
    3d7e:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    3d82:	dc 01       	movw	r26, r24
    3d84:	cb 01       	movw	r24, r22
    3d86:	f8 01       	movw	r30, r16
    3d88:	91 83       	std	Z+1, r25	; 0x01
    3d8a:	80 83       	st	Z, r24
    3d8c:	de 01       	movw	r26, r28
    3d8e:	ad 59       	subi	r26, 0x9D	; 157
    3d90:	bf 4f       	sbci	r27, 0xFF	; 255
    3d92:	fe 01       	movw	r30, r28
    3d94:	e9 59       	subi	r30, 0x99	; 153
    3d96:	ff 4f       	sbci	r31, 0xFF	; 255
    3d98:	80 81       	ld	r24, Z
    3d9a:	91 81       	ldd	r25, Z+1	; 0x01
    3d9c:	8d 93       	st	X+, r24
    3d9e:	9c 93       	st	X, r25
    3da0:	fe 01       	movw	r30, r28
    3da2:	ed 59       	subi	r30, 0x9D	; 157
    3da4:	ff 4f       	sbci	r31, 0xFF	; 255
    3da6:	80 81       	ld	r24, Z
    3da8:	91 81       	ldd	r25, Z+1	; 0x01
    3daa:	01 97       	sbiw	r24, 0x01	; 1
    3dac:	f1 f7       	brne	.-4      	; 0x3daa <main+0x16f2>
    3dae:	fe 01       	movw	r30, r28
    3db0:	ed 59       	subi	r30, 0x9D	; 157
    3db2:	ff 4f       	sbci	r31, 0xFF	; 255
    3db4:	91 83       	std	Z+1, r25	; 0x01
    3db6:	80 83       	st	Z, r24
                _delay_ms(2000); // Allow time to read the result
                LCD_Clear();
    3db8:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_Clear>
    3dbc:	24 c5       	rjmp	.+2632   	; 0x4806 <main+0x214e>
                break;
                }

            case STOPWATCH:
                if (!time_paused) {
    3dbe:	80 91 41 02 	lds	r24, 0x0241
    3dc2:	88 23       	and	r24, r24
    3dc4:	e1 f5       	brne	.+120    	; 0x3e3e <main+0x1786>
                    seconds++;
    3dc6:	80 91 3f 02 	lds	r24, 0x023F
    3dca:	90 91 40 02 	lds	r25, 0x0240
    3dce:	01 96       	adiw	r24, 0x01	; 1
    3dd0:	90 93 40 02 	sts	0x0240, r25
    3dd4:	80 93 3f 02 	sts	0x023F, r24
                    if (seconds >= 60) {
    3dd8:	80 91 3f 02 	lds	r24, 0x023F
    3ddc:	90 91 40 02 	lds	r25, 0x0240
    3de0:	8c 33       	cpi	r24, 0x3C	; 60
    3de2:	91 05       	cpc	r25, r1
    3de4:	60 f1       	brcs	.+88     	; 0x3e3e <main+0x1786>
                        seconds = 0;
    3de6:	10 92 40 02 	sts	0x0240, r1
    3dea:	10 92 3f 02 	sts	0x023F, r1
                        minutes++;
    3dee:	80 91 3d 02 	lds	r24, 0x023D
    3df2:	90 91 3e 02 	lds	r25, 0x023E
    3df6:	01 96       	adiw	r24, 0x01	; 1
    3df8:	90 93 3e 02 	sts	0x023E, r25
    3dfc:	80 93 3d 02 	sts	0x023D, r24
                        if (minutes >= 60) {
    3e00:	80 91 3d 02 	lds	r24, 0x023D
    3e04:	90 91 3e 02 	lds	r25, 0x023E
    3e08:	8c 33       	cpi	r24, 0x3C	; 60
    3e0a:	91 05       	cpc	r25, r1
    3e0c:	c0 f0       	brcs	.+48     	; 0x3e3e <main+0x1786>
                            minutes = 0;
    3e0e:	10 92 3e 02 	sts	0x023E, r1
    3e12:	10 92 3d 02 	sts	0x023D, r1
                            hours++;
    3e16:	80 91 3b 02 	lds	r24, 0x023B
    3e1a:	90 91 3c 02 	lds	r25, 0x023C
    3e1e:	01 96       	adiw	r24, 0x01	; 1
    3e20:	90 93 3c 02 	sts	0x023C, r25
    3e24:	80 93 3b 02 	sts	0x023B, r24
                            if (hours >= 24) {
    3e28:	80 91 3b 02 	lds	r24, 0x023B
    3e2c:	90 91 3c 02 	lds	r25, 0x023C
    3e30:	88 31       	cpi	r24, 0x18	; 24
    3e32:	91 05       	cpc	r25, r1
    3e34:	20 f0       	brcs	.+8      	; 0x3e3e <main+0x1786>
                                hours = 0;
    3e36:	10 92 3c 02 	sts	0x023C, r1
    3e3a:	10 92 3b 02 	sts	0x023B, r1
                            }
                        }
                    }
                }
                char time_string[16]; // Buffer increased for NULL character
                sprintf(time_string, "%02d:%02d:%02d", hours, minutes, seconds);
    3e3e:	20 91 3b 02 	lds	r18, 0x023B
    3e42:	30 91 3c 02 	lds	r19, 0x023C
    3e46:	40 91 3d 02 	lds	r20, 0x023D
    3e4a:	50 91 3e 02 	lds	r21, 0x023E
    3e4e:	60 91 3f 02 	lds	r22, 0x023F
    3e52:	70 91 40 02 	lds	r23, 0x0240
    3e56:	0d b7       	in	r16, 0x3d	; 61
    3e58:	1e b7       	in	r17, 0x3e	; 62
    3e5a:	0a 50       	subi	r16, 0x0A	; 10
    3e5c:	10 40       	sbci	r17, 0x00	; 0
    3e5e:	0f b6       	in	r0, 0x3f	; 63
    3e60:	f8 94       	cli
    3e62:	1e bf       	out	0x3e, r17	; 62
    3e64:	0f be       	out	0x3f, r0	; 63
    3e66:	0d bf       	out	0x3d, r16	; 61
    3e68:	ed b7       	in	r30, 0x3d	; 61
    3e6a:	fe b7       	in	r31, 0x3e	; 62
    3e6c:	31 96       	adiw	r30, 0x01	; 1
    3e6e:	ce 01       	movw	r24, r28
    3e70:	8f 5b       	subi	r24, 0xBF	; 191
    3e72:	9e 4f       	sbci	r25, 0xFE	; 254
    3e74:	91 83       	std	Z+1, r25	; 0x01
    3e76:	80 83       	st	Z, r24
    3e78:	8f ed       	ldi	r24, 0xDF	; 223
    3e7a:	90 e0       	ldi	r25, 0x00	; 0
    3e7c:	93 83       	std	Z+3, r25	; 0x03
    3e7e:	82 83       	std	Z+2, r24	; 0x02
    3e80:	35 83       	std	Z+5, r19	; 0x05
    3e82:	24 83       	std	Z+4, r18	; 0x04
    3e84:	57 83       	std	Z+7, r21	; 0x07
    3e86:	46 83       	std	Z+6, r20	; 0x06
    3e88:	71 87       	std	Z+9, r23	; 0x09
    3e8a:	60 87       	std	Z+8, r22	; 0x08
    3e8c:	0e 94 32 25 	call	0x4a64	; 0x4a64 <sprintf>
    3e90:	2d b7       	in	r18, 0x3d	; 61
    3e92:	3e b7       	in	r19, 0x3e	; 62
    3e94:	26 5f       	subi	r18, 0xF6	; 246
    3e96:	3f 4f       	sbci	r19, 0xFF	; 255
    3e98:	0f b6       	in	r0, 0x3f	; 63
    3e9a:	f8 94       	cli
    3e9c:	3e bf       	out	0x3e, r19	; 62
    3e9e:	0f be       	out	0x3f, r0	; 63
    3ea0:	2d bf       	out	0x3d, r18	; 61
                LCD_GoToPos(LCD_ROW_1, 0);
    3ea2:	80 e0       	ldi	r24, 0x00	; 0
    3ea4:	60 e0       	ldi	r22, 0x00	; 0
    3ea6:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_GoToPos>
                LCD_WriteString((uint8_t *)time_string, LCD_ROW_1, 0); // Cast to uint8_t pointer to fix warning
    3eaa:	ce 01       	movw	r24, r28
    3eac:	8f 5b       	subi	r24, 0xBF	; 191
    3eae:	9e 4f       	sbci	r25, 0xFE	; 254
    3eb0:	60 e0       	ldi	r22, 0x00	; 0
    3eb2:	40 e0       	ldi	r20, 0x00	; 0
    3eb4:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_WriteString>
    3eb8:	a6 c4       	rjmp	.+2380   	; 0x4806 <main+0x214e>
                break;

            case TIMER:
                while (currentMode == TIMER) {
                    key = KEYPAD_getPressedKey(); // Get key press
    3eba:	0e 94 22 0a 	call	0x1444	; 0x1444 <KEYPAD_getPressedKey>
    3ebe:	fe 01       	movw	r30, r28
    3ec0:	e6 5e       	subi	r30, 0xE6	; 230
    3ec2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ec4:	80 83       	st	Z, r24
    3ec6:	fe 01       	movw	r30, r28
    3ec8:	e1 5a       	subi	r30, 0xA1	; 161
    3eca:	ff 4f       	sbci	r31, 0xFF	; 255
    3ecc:	80 e0       	ldi	r24, 0x00	; 0
    3ece:	90 e0       	ldi	r25, 0x00	; 0
    3ed0:	a8 e4       	ldi	r26, 0x48	; 72
    3ed2:	b2 e4       	ldi	r27, 0x42	; 66
    3ed4:	80 83       	st	Z, r24
    3ed6:	91 83       	std	Z+1, r25	; 0x01
    3ed8:	a2 83       	std	Z+2, r26	; 0x02
    3eda:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3edc:	8e 01       	movw	r16, r28
    3ede:	05 5a       	subi	r16, 0xA5	; 165
    3ee0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ee2:	fe 01       	movw	r30, r28
    3ee4:	e1 5a       	subi	r30, 0xA1	; 161
    3ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee8:	60 81       	ld	r22, Z
    3eea:	71 81       	ldd	r23, Z+1	; 0x01
    3eec:	82 81       	ldd	r24, Z+2	; 0x02
    3eee:	93 81       	ldd	r25, Z+3	; 0x03
    3ef0:	20 e0       	ldi	r18, 0x00	; 0
    3ef2:	30 e0       	ldi	r19, 0x00	; 0
    3ef4:	4a e7       	ldi	r20, 0x7A	; 122
    3ef6:	55 e4       	ldi	r21, 0x45	; 69
    3ef8:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    3efc:	dc 01       	movw	r26, r24
    3efe:	cb 01       	movw	r24, r22
    3f00:	f8 01       	movw	r30, r16
    3f02:	80 83       	st	Z, r24
    3f04:	91 83       	std	Z+1, r25	; 0x01
    3f06:	a2 83       	std	Z+2, r26	; 0x02
    3f08:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f0a:	fe 01       	movw	r30, r28
    3f0c:	e5 5a       	subi	r30, 0xA5	; 165
    3f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f10:	60 81       	ld	r22, Z
    3f12:	71 81       	ldd	r23, Z+1	; 0x01
    3f14:	82 81       	ldd	r24, Z+2	; 0x02
    3f16:	93 81       	ldd	r25, Z+3	; 0x03
    3f18:	20 e0       	ldi	r18, 0x00	; 0
    3f1a:	30 e0       	ldi	r19, 0x00	; 0
    3f1c:	40 e8       	ldi	r20, 0x80	; 128
    3f1e:	5f e3       	ldi	r21, 0x3F	; 63
    3f20:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    3f24:	88 23       	and	r24, r24
    3f26:	44 f4       	brge	.+16     	; 0x3f38 <main+0x1880>
		__ticks = 1;
    3f28:	fe 01       	movw	r30, r28
    3f2a:	e7 5a       	subi	r30, 0xA7	; 167
    3f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2e:	81 e0       	ldi	r24, 0x01	; 1
    3f30:	90 e0       	ldi	r25, 0x00	; 0
    3f32:	91 83       	std	Z+1, r25	; 0x01
    3f34:	80 83       	st	Z, r24
    3f36:	64 c0       	rjmp	.+200    	; 0x4000 <main+0x1948>
	else if (__tmp > 65535)
    3f38:	fe 01       	movw	r30, r28
    3f3a:	e5 5a       	subi	r30, 0xA5	; 165
    3f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3e:	60 81       	ld	r22, Z
    3f40:	71 81       	ldd	r23, Z+1	; 0x01
    3f42:	82 81       	ldd	r24, Z+2	; 0x02
    3f44:	93 81       	ldd	r25, Z+3	; 0x03
    3f46:	20 e0       	ldi	r18, 0x00	; 0
    3f48:	3f ef       	ldi	r19, 0xFF	; 255
    3f4a:	4f e7       	ldi	r20, 0x7F	; 127
    3f4c:	57 e4       	ldi	r21, 0x47	; 71
    3f4e:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    3f52:	18 16       	cp	r1, r24
    3f54:	0c f0       	brlt	.+2      	; 0x3f58 <main+0x18a0>
    3f56:	43 c0       	rjmp	.+134    	; 0x3fde <main+0x1926>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f58:	fe 01       	movw	r30, r28
    3f5a:	e1 5a       	subi	r30, 0xA1	; 161
    3f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5e:	60 81       	ld	r22, Z
    3f60:	71 81       	ldd	r23, Z+1	; 0x01
    3f62:	82 81       	ldd	r24, Z+2	; 0x02
    3f64:	93 81       	ldd	r25, Z+3	; 0x03
    3f66:	20 e0       	ldi	r18, 0x00	; 0
    3f68:	30 e0       	ldi	r19, 0x00	; 0
    3f6a:	40 e2       	ldi	r20, 0x20	; 32
    3f6c:	51 e4       	ldi	r21, 0x41	; 65
    3f6e:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    3f72:	dc 01       	movw	r26, r24
    3f74:	cb 01       	movw	r24, r22
    3f76:	8e 01       	movw	r16, r28
    3f78:	07 5a       	subi	r16, 0xA7	; 167
    3f7a:	1f 4f       	sbci	r17, 0xFF	; 255
    3f7c:	bc 01       	movw	r22, r24
    3f7e:	cd 01       	movw	r24, r26
    3f80:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    3f84:	dc 01       	movw	r26, r24
    3f86:	cb 01       	movw	r24, r22
    3f88:	f8 01       	movw	r30, r16
    3f8a:	91 83       	std	Z+1, r25	; 0x01
    3f8c:	80 83       	st	Z, r24
    3f8e:	1f c0       	rjmp	.+62     	; 0x3fce <main+0x1916>
    3f90:	fe 01       	movw	r30, r28
    3f92:	e9 5a       	subi	r30, 0xA9	; 169
    3f94:	ff 4f       	sbci	r31, 0xFF	; 255
    3f96:	80 e9       	ldi	r24, 0x90	; 144
    3f98:	91 e0       	ldi	r25, 0x01	; 1
    3f9a:	91 83       	std	Z+1, r25	; 0x01
    3f9c:	80 83       	st	Z, r24
    3f9e:	fe 01       	movw	r30, r28
    3fa0:	e9 5a       	subi	r30, 0xA9	; 169
    3fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa4:	80 81       	ld	r24, Z
    3fa6:	91 81       	ldd	r25, Z+1	; 0x01
    3fa8:	01 97       	sbiw	r24, 0x01	; 1
    3faa:	f1 f7       	brne	.-4      	; 0x3fa8 <main+0x18f0>
    3fac:	fe 01       	movw	r30, r28
    3fae:	e9 5a       	subi	r30, 0xA9	; 169
    3fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb2:	91 83       	std	Z+1, r25	; 0x01
    3fb4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fb6:	de 01       	movw	r26, r28
    3fb8:	a7 5a       	subi	r26, 0xA7	; 167
    3fba:	bf 4f       	sbci	r27, 0xFF	; 255
    3fbc:	fe 01       	movw	r30, r28
    3fbe:	e7 5a       	subi	r30, 0xA7	; 167
    3fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc2:	80 81       	ld	r24, Z
    3fc4:	91 81       	ldd	r25, Z+1	; 0x01
    3fc6:	01 97       	sbiw	r24, 0x01	; 1
    3fc8:	11 96       	adiw	r26, 0x01	; 1
    3fca:	9c 93       	st	X, r25
    3fcc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fce:	fe 01       	movw	r30, r28
    3fd0:	e7 5a       	subi	r30, 0xA7	; 167
    3fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd4:	80 81       	ld	r24, Z
    3fd6:	91 81       	ldd	r25, Z+1	; 0x01
    3fd8:	00 97       	sbiw	r24, 0x00	; 0
    3fda:	d1 f6       	brne	.-76     	; 0x3f90 <main+0x18d8>
    3fdc:	28 c0       	rjmp	.+80     	; 0x402e <main+0x1976>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fde:	8e 01       	movw	r16, r28
    3fe0:	07 5a       	subi	r16, 0xA7	; 167
    3fe2:	1f 4f       	sbci	r17, 0xFF	; 255
    3fe4:	fe 01       	movw	r30, r28
    3fe6:	e5 5a       	subi	r30, 0xA5	; 165
    3fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fea:	60 81       	ld	r22, Z
    3fec:	71 81       	ldd	r23, Z+1	; 0x01
    3fee:	82 81       	ldd	r24, Z+2	; 0x02
    3ff0:	93 81       	ldd	r25, Z+3	; 0x03
    3ff2:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    3ff6:	dc 01       	movw	r26, r24
    3ff8:	cb 01       	movw	r24, r22
    3ffa:	f8 01       	movw	r30, r16
    3ffc:	91 83       	std	Z+1, r25	; 0x01
    3ffe:	80 83       	st	Z, r24
    4000:	de 01       	movw	r26, r28
    4002:	ab 5a       	subi	r26, 0xAB	; 171
    4004:	bf 4f       	sbci	r27, 0xFF	; 255
    4006:	fe 01       	movw	r30, r28
    4008:	e7 5a       	subi	r30, 0xA7	; 167
    400a:	ff 4f       	sbci	r31, 0xFF	; 255
    400c:	80 81       	ld	r24, Z
    400e:	91 81       	ldd	r25, Z+1	; 0x01
    4010:	11 96       	adiw	r26, 0x01	; 1
    4012:	9c 93       	st	X, r25
    4014:	8e 93       	st	-X, r24
    4016:	fe 01       	movw	r30, r28
    4018:	eb 5a       	subi	r30, 0xAB	; 171
    401a:	ff 4f       	sbci	r31, 0xFF	; 255
    401c:	80 81       	ld	r24, Z
    401e:	91 81       	ldd	r25, Z+1	; 0x01
    4020:	01 97       	sbiw	r24, 0x01	; 1
    4022:	f1 f7       	brne	.-4      	; 0x4020 <main+0x1968>
    4024:	fe 01       	movw	r30, r28
    4026:	eb 5a       	subi	r30, 0xAB	; 171
    4028:	ff 4f       	sbci	r31, 0xFF	; 255
    402a:	91 83       	std	Z+1, r25	; 0x01
    402c:	80 83       	st	Z, r24
                    _delay_ms(50);
                    if (key >= '0' && key <= '9') {
    402e:	fe 01       	movw	r30, r28
    4030:	e6 5e       	subi	r30, 0xE6	; 230
    4032:	fe 4f       	sbci	r31, 0xFE	; 254
    4034:	80 81       	ld	r24, Z
    4036:	80 33       	cpi	r24, 0x30	; 48
    4038:	08 f4       	brcc	.+2      	; 0x403c <main+0x1984>
    403a:	31 c1       	rjmp	.+610    	; 0x429e <main+0x1be6>
    403c:	fe 01       	movw	r30, r28
    403e:	e6 5e       	subi	r30, 0xE6	; 230
    4040:	fe 4f       	sbci	r31, 0xFE	; 254
    4042:	80 81       	ld	r24, Z
    4044:	8a 33       	cpi	r24, 0x3A	; 58
    4046:	08 f0       	brcs	.+2      	; 0x404a <main+0x1992>
    4048:	2a c1       	rjmp	.+596    	; 0x429e <main+0x1be6>
                        if (timeIndex == 0 || timeIndex == 1 || timeIndex == 3 || timeIndex == 4) {
    404a:	fe 01       	movw	r30, r28
    404c:	e4 5f       	subi	r30, 0xF4	; 244
    404e:	fe 4f       	sbci	r31, 0xFE	; 254
    4050:	80 81       	ld	r24, Z
    4052:	91 81       	ldd	r25, Z+1	; 0x01
    4054:	00 97       	sbiw	r24, 0x00	; 0
    4056:	c9 f0       	breq	.+50     	; 0x408a <main+0x19d2>
    4058:	fe 01       	movw	r30, r28
    405a:	e4 5f       	subi	r30, 0xF4	; 244
    405c:	fe 4f       	sbci	r31, 0xFE	; 254
    405e:	80 81       	ld	r24, Z
    4060:	91 81       	ldd	r25, Z+1	; 0x01
    4062:	81 30       	cpi	r24, 0x01	; 1
    4064:	91 05       	cpc	r25, r1
    4066:	89 f0       	breq	.+34     	; 0x408a <main+0x19d2>
    4068:	fe 01       	movw	r30, r28
    406a:	e4 5f       	subi	r30, 0xF4	; 244
    406c:	fe 4f       	sbci	r31, 0xFE	; 254
    406e:	80 81       	ld	r24, Z
    4070:	91 81       	ldd	r25, Z+1	; 0x01
    4072:	83 30       	cpi	r24, 0x03	; 3
    4074:	91 05       	cpc	r25, r1
    4076:	49 f0       	breq	.+18     	; 0x408a <main+0x19d2>
    4078:	fe 01       	movw	r30, r28
    407a:	e4 5f       	subi	r30, 0xF4	; 244
    407c:	fe 4f       	sbci	r31, 0xFE	; 254
    407e:	80 81       	ld	r24, Z
    4080:	91 81       	ldd	r25, Z+1	; 0x01
    4082:	84 30       	cpi	r24, 0x04	; 4
    4084:	91 05       	cpc	r25, r1
    4086:	09 f0       	breq	.+2      	; 0x408a <main+0x19d2>
    4088:	be c3       	rjmp	.+1916   	; 0x4806 <main+0x214e>
                            if (timeIndex == 3 && key >= '6') { // Check if tens digit of seconds is invalid
    408a:	fe 01       	movw	r30, r28
    408c:	e4 5f       	subi	r30, 0xF4	; 244
    408e:	fe 4f       	sbci	r31, 0xFE	; 254
    4090:	80 81       	ld	r24, Z
    4092:	91 81       	ldd	r25, Z+1	; 0x01
    4094:	83 30       	cpi	r24, 0x03	; 3
    4096:	91 05       	cpc	r25, r1
    4098:	39 f4       	brne	.+14     	; 0x40a8 <main+0x19f0>
    409a:	fe 01       	movw	r30, r28
    409c:	e6 5e       	subi	r30, 0xE6	; 230
    409e:	fe 4f       	sbci	r31, 0xFE	; 254
    40a0:	80 81       	ld	r24, Z
    40a2:	86 33       	cpi	r24, 0x36	; 54
    40a4:	08 f0       	brcs	.+2      	; 0x40a8 <main+0x19f0>
    40a6:	aa c3       	rjmp	.+1876   	; 0x47fc <main+0x2144>
                                continue;
                            }
                            timeInput[timeIndex] = key;  // Update the time input at the correct position
    40a8:	fe 01       	movw	r30, r28
    40aa:	e4 5f       	subi	r30, 0xF4	; 244
    40ac:	fe 4f       	sbci	r31, 0xFE	; 254
    40ae:	20 81       	ld	r18, Z
    40b0:	31 81       	ldd	r19, Z+1	; 0x01
    40b2:	ce 01       	movw	r24, r28
    40b4:	85 5c       	subi	r24, 0xC5	; 197
    40b6:	9e 4f       	sbci	r25, 0xFE	; 254
    40b8:	dc 01       	movw	r26, r24
    40ba:	a2 0f       	add	r26, r18
    40bc:	b3 1f       	adc	r27, r19
    40be:	fe 01       	movw	r30, r28
    40c0:	e6 5e       	subi	r30, 0xE6	; 230
    40c2:	fe 4f       	sbci	r31, 0xFE	; 254
    40c4:	80 81       	ld	r24, Z
    40c6:	8c 93       	st	X, r24
                            LCD_GoToPos(LCD_ROW_2, timeIndex);
    40c8:	fe 01       	movw	r30, r28
    40ca:	e4 5f       	subi	r30, 0xF4	; 244
    40cc:	fe 4f       	sbci	r31, 0xFE	; 254
    40ce:	90 81       	ld	r25, Z
    40d0:	81 e0       	ldi	r24, 0x01	; 1
    40d2:	69 2f       	mov	r22, r25
    40d4:	0e 94 bf 10 	call	0x217e	; 0x217e <LCD_GoToPos>
                            LCD_WriteData(key);  // Display the digit
    40d8:	fe 01       	movw	r30, r28
    40da:	e6 5e       	subi	r30, 0xE6	; 230
    40dc:	fe 4f       	sbci	r31, 0xFE	; 254
    40de:	80 81       	ld	r24, Z
    40e0:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_WriteData>
                            if (timeIndex == 1 || timeIndex == 4) { // Auto-advance if at the last position of MM or SS
    40e4:	fe 01       	movw	r30, r28
    40e6:	e4 5f       	subi	r30, 0xF4	; 244
    40e8:	fe 4f       	sbci	r31, 0xFE	; 254
    40ea:	80 81       	ld	r24, Z
    40ec:	91 81       	ldd	r25, Z+1	; 0x01
    40ee:	81 30       	cpi	r24, 0x01	; 1
    40f0:	91 05       	cpc	r25, r1
    40f2:	41 f0       	breq	.+16     	; 0x4104 <main+0x1a4c>
    40f4:	fe 01       	movw	r30, r28
    40f6:	e4 5f       	subi	r30, 0xF4	; 244
    40f8:	fe 4f       	sbci	r31, 0xFE	; 254
    40fa:	80 81       	ld	r24, Z
    40fc:	91 81       	ldd	r25, Z+1	; 0x01
    40fe:	84 30       	cpi	r24, 0x04	; 4
    4100:	91 05       	cpc	r25, r1
    4102:	69 f4       	brne	.+26     	; 0x411e <main+0x1a66>
                                timeIndex += 2;
    4104:	de 01       	movw	r26, r28
    4106:	a4 5f       	subi	r26, 0xF4	; 244
    4108:	be 4f       	sbci	r27, 0xFE	; 254
    410a:	fe 01       	movw	r30, r28
    410c:	e4 5f       	subi	r30, 0xF4	; 244
    410e:	fe 4f       	sbci	r31, 0xFE	; 254
    4110:	80 81       	ld	r24, Z
    4112:	91 81       	ldd	r25, Z+1	; 0x01
    4114:	02 96       	adiw	r24, 0x02	; 2
    4116:	11 96       	adiw	r26, 0x01	; 1
    4118:	9c 93       	st	X, r25
    411a:	8e 93       	st	-X, r24
    411c:	0b c0       	rjmp	.+22     	; 0x4134 <main+0x1a7c>
                            } else {
                                timeIndex++;
    411e:	de 01       	movw	r26, r28
    4120:	a4 5f       	subi	r26, 0xF4	; 244
    4122:	be 4f       	sbci	r27, 0xFE	; 254
    4124:	fe 01       	movw	r30, r28
    4126:	e4 5f       	subi	r30, 0xF4	; 244
    4128:	fe 4f       	sbci	r31, 0xFE	; 254
    412a:	80 81       	ld	r24, Z
    412c:	91 81       	ldd	r25, Z+1	; 0x01
    412e:	01 96       	adiw	r24, 0x01	; 1
    4130:	8d 93       	st	X+, r24
    4132:	9c 93       	st	X, r25
    4134:	fe 01       	movw	r30, r28
    4136:	ef 5a       	subi	r30, 0xAF	; 175
    4138:	ff 4f       	sbci	r31, 0xFF	; 255
    413a:	80 e0       	ldi	r24, 0x00	; 0
    413c:	90 e0       	ldi	r25, 0x00	; 0
    413e:	a8 e4       	ldi	r26, 0x48	; 72
    4140:	b2 e4       	ldi	r27, 0x42	; 66
    4142:	80 83       	st	Z, r24
    4144:	91 83       	std	Z+1, r25	; 0x01
    4146:	a2 83       	std	Z+2, r26	; 0x02
    4148:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    414a:	8e 01       	movw	r16, r28
    414c:	03 5b       	subi	r16, 0xB3	; 179
    414e:	1f 4f       	sbci	r17, 0xFF	; 255
    4150:	fe 01       	movw	r30, r28
    4152:	ef 5a       	subi	r30, 0xAF	; 175
    4154:	ff 4f       	sbci	r31, 0xFF	; 255
    4156:	60 81       	ld	r22, Z
    4158:	71 81       	ldd	r23, Z+1	; 0x01
    415a:	82 81       	ldd	r24, Z+2	; 0x02
    415c:	93 81       	ldd	r25, Z+3	; 0x03
    415e:	20 e0       	ldi	r18, 0x00	; 0
    4160:	30 e0       	ldi	r19, 0x00	; 0
    4162:	4a e7       	ldi	r20, 0x7A	; 122
    4164:	55 e4       	ldi	r21, 0x45	; 69
    4166:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    416a:	dc 01       	movw	r26, r24
    416c:	cb 01       	movw	r24, r22
    416e:	f8 01       	movw	r30, r16
    4170:	80 83       	st	Z, r24
    4172:	91 83       	std	Z+1, r25	; 0x01
    4174:	a2 83       	std	Z+2, r26	; 0x02
    4176:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4178:	fe 01       	movw	r30, r28
    417a:	e3 5b       	subi	r30, 0xB3	; 179
    417c:	ff 4f       	sbci	r31, 0xFF	; 255
    417e:	60 81       	ld	r22, Z
    4180:	71 81       	ldd	r23, Z+1	; 0x01
    4182:	82 81       	ldd	r24, Z+2	; 0x02
    4184:	93 81       	ldd	r25, Z+3	; 0x03
    4186:	20 e0       	ldi	r18, 0x00	; 0
    4188:	30 e0       	ldi	r19, 0x00	; 0
    418a:	40 e8       	ldi	r20, 0x80	; 128
    418c:	5f e3       	ldi	r21, 0x3F	; 63
    418e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    4192:	88 23       	and	r24, r24
    4194:	44 f4       	brge	.+16     	; 0x41a6 <main+0x1aee>
		__ticks = 1;
    4196:	fe 01       	movw	r30, r28
    4198:	e5 5b       	subi	r30, 0xB5	; 181
    419a:	ff 4f       	sbci	r31, 0xFF	; 255
    419c:	81 e0       	ldi	r24, 0x01	; 1
    419e:	90 e0       	ldi	r25, 0x00	; 0
    41a0:	91 83       	std	Z+1, r25	; 0x01
    41a2:	80 83       	st	Z, r24
    41a4:	64 c0       	rjmp	.+200    	; 0x426e <main+0x1bb6>
	else if (__tmp > 65535)
    41a6:	fe 01       	movw	r30, r28
    41a8:	e3 5b       	subi	r30, 0xB3	; 179
    41aa:	ff 4f       	sbci	r31, 0xFF	; 255
    41ac:	60 81       	ld	r22, Z
    41ae:	71 81       	ldd	r23, Z+1	; 0x01
    41b0:	82 81       	ldd	r24, Z+2	; 0x02
    41b2:	93 81       	ldd	r25, Z+3	; 0x03
    41b4:	20 e0       	ldi	r18, 0x00	; 0
    41b6:	3f ef       	ldi	r19, 0xFF	; 255
    41b8:	4f e7       	ldi	r20, 0x7F	; 127
    41ba:	57 e4       	ldi	r21, 0x47	; 71
    41bc:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    41c0:	18 16       	cp	r1, r24
    41c2:	0c f0       	brlt	.+2      	; 0x41c6 <main+0x1b0e>
    41c4:	43 c0       	rjmp	.+134    	; 0x424c <main+0x1b94>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41c6:	fe 01       	movw	r30, r28
    41c8:	ef 5a       	subi	r30, 0xAF	; 175
    41ca:	ff 4f       	sbci	r31, 0xFF	; 255
    41cc:	60 81       	ld	r22, Z
    41ce:	71 81       	ldd	r23, Z+1	; 0x01
    41d0:	82 81       	ldd	r24, Z+2	; 0x02
    41d2:	93 81       	ldd	r25, Z+3	; 0x03
    41d4:	20 e0       	ldi	r18, 0x00	; 0
    41d6:	30 e0       	ldi	r19, 0x00	; 0
    41d8:	40 e2       	ldi	r20, 0x20	; 32
    41da:	51 e4       	ldi	r21, 0x41	; 65
    41dc:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    41e0:	dc 01       	movw	r26, r24
    41e2:	cb 01       	movw	r24, r22
    41e4:	8e 01       	movw	r16, r28
    41e6:	05 5b       	subi	r16, 0xB5	; 181
    41e8:	1f 4f       	sbci	r17, 0xFF	; 255
    41ea:	bc 01       	movw	r22, r24
    41ec:	cd 01       	movw	r24, r26
    41ee:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    41f2:	dc 01       	movw	r26, r24
    41f4:	cb 01       	movw	r24, r22
    41f6:	f8 01       	movw	r30, r16
    41f8:	91 83       	std	Z+1, r25	; 0x01
    41fa:	80 83       	st	Z, r24
    41fc:	1f c0       	rjmp	.+62     	; 0x423c <main+0x1b84>
    41fe:	fe 01       	movw	r30, r28
    4200:	e7 5b       	subi	r30, 0xB7	; 183
    4202:	ff 4f       	sbci	r31, 0xFF	; 255
    4204:	80 e9       	ldi	r24, 0x90	; 144
    4206:	91 e0       	ldi	r25, 0x01	; 1
    4208:	91 83       	std	Z+1, r25	; 0x01
    420a:	80 83       	st	Z, r24
    420c:	fe 01       	movw	r30, r28
    420e:	e7 5b       	subi	r30, 0xB7	; 183
    4210:	ff 4f       	sbci	r31, 0xFF	; 255
    4212:	80 81       	ld	r24, Z
    4214:	91 81       	ldd	r25, Z+1	; 0x01
    4216:	01 97       	sbiw	r24, 0x01	; 1
    4218:	f1 f7       	brne	.-4      	; 0x4216 <main+0x1b5e>
    421a:	fe 01       	movw	r30, r28
    421c:	e7 5b       	subi	r30, 0xB7	; 183
    421e:	ff 4f       	sbci	r31, 0xFF	; 255
    4220:	91 83       	std	Z+1, r25	; 0x01
    4222:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4224:	de 01       	movw	r26, r28
    4226:	a5 5b       	subi	r26, 0xB5	; 181
    4228:	bf 4f       	sbci	r27, 0xFF	; 255
    422a:	fe 01       	movw	r30, r28
    422c:	e5 5b       	subi	r30, 0xB5	; 181
    422e:	ff 4f       	sbci	r31, 0xFF	; 255
    4230:	80 81       	ld	r24, Z
    4232:	91 81       	ldd	r25, Z+1	; 0x01
    4234:	01 97       	sbiw	r24, 0x01	; 1
    4236:	11 96       	adiw	r26, 0x01	; 1
    4238:	9c 93       	st	X, r25
    423a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    423c:	fe 01       	movw	r30, r28
    423e:	e5 5b       	subi	r30, 0xB5	; 181
    4240:	ff 4f       	sbci	r31, 0xFF	; 255
    4242:	80 81       	ld	r24, Z
    4244:	91 81       	ldd	r25, Z+1	; 0x01
    4246:	00 97       	sbiw	r24, 0x00	; 0
    4248:	d1 f6       	brne	.-76     	; 0x41fe <main+0x1b46>
    424a:	dd c2       	rjmp	.+1466   	; 0x4806 <main+0x214e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    424c:	8e 01       	movw	r16, r28
    424e:	05 5b       	subi	r16, 0xB5	; 181
    4250:	1f 4f       	sbci	r17, 0xFF	; 255
    4252:	fe 01       	movw	r30, r28
    4254:	e3 5b       	subi	r30, 0xB3	; 179
    4256:	ff 4f       	sbci	r31, 0xFF	; 255
    4258:	60 81       	ld	r22, Z
    425a:	71 81       	ldd	r23, Z+1	; 0x01
    425c:	82 81       	ldd	r24, Z+2	; 0x02
    425e:	93 81       	ldd	r25, Z+3	; 0x03
    4260:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    4264:	dc 01       	movw	r26, r24
    4266:	cb 01       	movw	r24, r22
    4268:	f8 01       	movw	r30, r16
    426a:	91 83       	std	Z+1, r25	; 0x01
    426c:	80 83       	st	Z, r24
    426e:	de 01       	movw	r26, r28
    4270:	a9 5b       	subi	r26, 0xB9	; 185
    4272:	bf 4f       	sbci	r27, 0xFF	; 255
    4274:	fe 01       	movw	r30, r28
    4276:	e5 5b       	subi	r30, 0xB5	; 181
    4278:	ff 4f       	sbci	r31, 0xFF	; 255
    427a:	80 81       	ld	r24, Z
    427c:	91 81       	ldd	r25, Z+1	; 0x01
    427e:	11 96       	adiw	r26, 0x01	; 1
    4280:	9c 93       	st	X, r25
    4282:	8e 93       	st	-X, r24
    4284:	fe 01       	movw	r30, r28
    4286:	e9 5b       	subi	r30, 0xB9	; 185
    4288:	ff 4f       	sbci	r31, 0xFF	; 255
    428a:	80 81       	ld	r24, Z
    428c:	91 81       	ldd	r25, Z+1	; 0x01
    428e:	01 97       	sbiw	r24, 0x01	; 1
    4290:	f1 f7       	brne	.-4      	; 0x428e <main+0x1bd6>
    4292:	fe 01       	movw	r30, r28
    4294:	e9 5b       	subi	r30, 0xB9	; 185
    4296:	ff 4f       	sbci	r31, 0xFF	; 255
    4298:	91 83       	std	Z+1, r25	; 0x01
    429a:	80 83       	st	Z, r24
    429c:	b4 c2       	rjmp	.+1384   	; 0x4806 <main+0x214e>
                            }
                            _delay_ms(50); // Debounce delay
                        }
                    } else if (key == '=') {
    429e:	fe 01       	movw	r30, r28
    42a0:	e6 5e       	subi	r30, 0xE6	; 230
    42a2:	fe 4f       	sbci	r31, 0xFE	; 254
    42a4:	80 81       	ld	r24, Z
    42a6:	8d 33       	cpi	r24, 0x3D	; 61
    42a8:	09 f0       	breq	.+2      	; 0x42ac <main+0x1bf4>
    42aa:	ad c2       	rjmp	.+1370   	; 0x4806 <main+0x214e>
                        sscanf(timeInput, "%2d:%2d", &minutes, &seconds);
    42ac:	0d b7       	in	r16, 0x3d	; 61
    42ae:	1e b7       	in	r17, 0x3e	; 62
    42b0:	08 50       	subi	r16, 0x08	; 8
    42b2:	10 40       	sbci	r17, 0x00	; 0
    42b4:	0f b6       	in	r0, 0x3f	; 63
    42b6:	f8 94       	cli
    42b8:	1e bf       	out	0x3e, r17	; 62
    42ba:	0f be       	out	0x3f, r0	; 63
    42bc:	0d bf       	out	0x3d, r16	; 61
    42be:	ed b7       	in	r30, 0x3d	; 61
    42c0:	fe b7       	in	r31, 0x3e	; 62
    42c2:	31 96       	adiw	r30, 0x01	; 1
    42c4:	ce 01       	movw	r24, r28
    42c6:	85 5c       	subi	r24, 0xC5	; 197
    42c8:	9e 4f       	sbci	r25, 0xFE	; 254
    42ca:	91 83       	std	Z+1, r25	; 0x01
    42cc:	80 83       	st	Z, r24
    42ce:	8e ee       	ldi	r24, 0xEE	; 238
    42d0:	90 e0       	ldi	r25, 0x00	; 0
    42d2:	93 83       	std	Z+3, r25	; 0x03
    42d4:	82 83       	std	Z+2, r24	; 0x02
    42d6:	8d e3       	ldi	r24, 0x3D	; 61
    42d8:	92 e0       	ldi	r25, 0x02	; 2
    42da:	95 83       	std	Z+5, r25	; 0x05
    42dc:	84 83       	std	Z+4, r24	; 0x04
    42de:	8f e3       	ldi	r24, 0x3F	; 63
    42e0:	92 e0       	ldi	r25, 0x02	; 2
    42e2:	97 83       	std	Z+7, r25	; 0x07
    42e4:	86 83       	std	Z+6, r24	; 0x06
    42e6:	0e 94 56 25 	call	0x4aac	; 0x4aac <sscanf>
    42ea:	2d b7       	in	r18, 0x3d	; 61
    42ec:	3e b7       	in	r19, 0x3e	; 62
    42ee:	28 5f       	subi	r18, 0xF8	; 248
    42f0:	3f 4f       	sbci	r19, 0xFF	; 255
    42f2:	0f b6       	in	r0, 0x3f	; 63
    42f4:	f8 94       	cli
    42f6:	3e bf       	out	0x3e, r19	; 62
    42f8:	0f be       	out	0x3f, r0	; 63
    42fa:	2d bf       	out	0x3d, r18	; 61
                        if (seconds > 59) {
    42fc:	80 91 3f 02 	lds	r24, 0x023F
    4300:	90 91 40 02 	lds	r25, 0x0240
    4304:	8c 33       	cpi	r24, 0x3C	; 60
    4306:	91 05       	cpc	r25, r1
    4308:	30 f0       	brcs	.+12     	; 0x4316 <main+0x1c5e>
                            seconds = 59; // Correct seconds if out of range
    430a:	8b e3       	ldi	r24, 0x3B	; 59
    430c:	90 e0       	ldi	r25, 0x00	; 0
    430e:	90 93 40 02 	sts	0x0240, r25
    4312:	80 93 3f 02 	sts	0x023F, r24
                        }
                        LCD_Clear();
    4316:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_Clear>
                        LCD_WriteString("Timer Starts", LCD_ROW_1, 0);
    431a:	86 ef       	ldi	r24, 0xF6	; 246
    431c:	90 e0       	ldi	r25, 0x00	; 0
    431e:	60 e0       	ldi	r22, 0x00	; 0
    4320:	40 e0       	ldi	r20, 0x00	; 0
    4322:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_WriteString>
    4326:	fe 01       	movw	r30, r28
    4328:	ed 5b       	subi	r30, 0xBD	; 189
    432a:	ff 4f       	sbci	r31, 0xFF	; 255
    432c:	80 e0       	ldi	r24, 0x00	; 0
    432e:	90 e0       	ldi	r25, 0x00	; 0
    4330:	aa e7       	ldi	r26, 0x7A	; 122
    4332:	b4 e4       	ldi	r27, 0x44	; 68
    4334:	80 83       	st	Z, r24
    4336:	91 83       	std	Z+1, r25	; 0x01
    4338:	a2 83       	std	Z+2, r26	; 0x02
    433a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    433c:	8e 01       	movw	r16, r28
    433e:	01 5c       	subi	r16, 0xC1	; 193
    4340:	1f 4f       	sbci	r17, 0xFF	; 255
    4342:	fe 01       	movw	r30, r28
    4344:	ed 5b       	subi	r30, 0xBD	; 189
    4346:	ff 4f       	sbci	r31, 0xFF	; 255
    4348:	60 81       	ld	r22, Z
    434a:	71 81       	ldd	r23, Z+1	; 0x01
    434c:	82 81       	ldd	r24, Z+2	; 0x02
    434e:	93 81       	ldd	r25, Z+3	; 0x03
    4350:	20 e0       	ldi	r18, 0x00	; 0
    4352:	30 e0       	ldi	r19, 0x00	; 0
    4354:	4a e7       	ldi	r20, 0x7A	; 122
    4356:	55 e4       	ldi	r21, 0x45	; 69
    4358:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    435c:	dc 01       	movw	r26, r24
    435e:	cb 01       	movw	r24, r22
    4360:	f8 01       	movw	r30, r16
    4362:	80 83       	st	Z, r24
    4364:	91 83       	std	Z+1, r25	; 0x01
    4366:	a2 83       	std	Z+2, r26	; 0x02
    4368:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    436a:	fe 01       	movw	r30, r28
    436c:	ff 96       	adiw	r30, 0x3f	; 63
    436e:	60 81       	ld	r22, Z
    4370:	71 81       	ldd	r23, Z+1	; 0x01
    4372:	82 81       	ldd	r24, Z+2	; 0x02
    4374:	93 81       	ldd	r25, Z+3	; 0x03
    4376:	20 e0       	ldi	r18, 0x00	; 0
    4378:	30 e0       	ldi	r19, 0x00	; 0
    437a:	40 e8       	ldi	r20, 0x80	; 128
    437c:	5f e3       	ldi	r21, 0x3F	; 63
    437e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    4382:	88 23       	and	r24, r24
    4384:	2c f4       	brge	.+10     	; 0x4390 <main+0x1cd8>
		__ticks = 1;
    4386:	81 e0       	ldi	r24, 0x01	; 1
    4388:	90 e0       	ldi	r25, 0x00	; 0
    438a:	9e af       	std	Y+62, r25	; 0x3e
    438c:	8d af       	std	Y+61, r24	; 0x3d
    438e:	46 c0       	rjmp	.+140    	; 0x441c <main+0x1d64>
	else if (__tmp > 65535)
    4390:	fe 01       	movw	r30, r28
    4392:	ff 96       	adiw	r30, 0x3f	; 63
    4394:	60 81       	ld	r22, Z
    4396:	71 81       	ldd	r23, Z+1	; 0x01
    4398:	82 81       	ldd	r24, Z+2	; 0x02
    439a:	93 81       	ldd	r25, Z+3	; 0x03
    439c:	20 e0       	ldi	r18, 0x00	; 0
    439e:	3f ef       	ldi	r19, 0xFF	; 255
    43a0:	4f e7       	ldi	r20, 0x7F	; 127
    43a2:	57 e4       	ldi	r21, 0x47	; 71
    43a4:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    43a8:	18 16       	cp	r1, r24
    43aa:	64 f5       	brge	.+88     	; 0x4404 <main+0x1d4c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43ac:	fe 01       	movw	r30, r28
    43ae:	ed 5b       	subi	r30, 0xBD	; 189
    43b0:	ff 4f       	sbci	r31, 0xFF	; 255
    43b2:	60 81       	ld	r22, Z
    43b4:	71 81       	ldd	r23, Z+1	; 0x01
    43b6:	82 81       	ldd	r24, Z+2	; 0x02
    43b8:	93 81       	ldd	r25, Z+3	; 0x03
    43ba:	20 e0       	ldi	r18, 0x00	; 0
    43bc:	30 e0       	ldi	r19, 0x00	; 0
    43be:	40 e2       	ldi	r20, 0x20	; 32
    43c0:	51 e4       	ldi	r21, 0x41	; 65
    43c2:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    43c6:	dc 01       	movw	r26, r24
    43c8:	cb 01       	movw	r24, r22
    43ca:	bc 01       	movw	r22, r24
    43cc:	cd 01       	movw	r24, r26
    43ce:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    43d2:	dc 01       	movw	r26, r24
    43d4:	cb 01       	movw	r24, r22
    43d6:	9e af       	std	Y+62, r25	; 0x3e
    43d8:	8d af       	std	Y+61, r24	; 0x3d
    43da:	0f c0       	rjmp	.+30     	; 0x43fa <main+0x1d42>
    43dc:	80 e9       	ldi	r24, 0x90	; 144
    43de:	91 e0       	ldi	r25, 0x01	; 1
    43e0:	9c af       	std	Y+60, r25	; 0x3c
    43e2:	8b af       	std	Y+59, r24	; 0x3b
    43e4:	8b ad       	ldd	r24, Y+59	; 0x3b
    43e6:	9c ad       	ldd	r25, Y+60	; 0x3c
    43e8:	01 97       	sbiw	r24, 0x01	; 1
    43ea:	f1 f7       	brne	.-4      	; 0x43e8 <main+0x1d30>
    43ec:	9c af       	std	Y+60, r25	; 0x3c
    43ee:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    43f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    43f4:	01 97       	sbiw	r24, 0x01	; 1
    43f6:	9e af       	std	Y+62, r25	; 0x3e
    43f8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    43fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    43fe:	00 97       	sbiw	r24, 0x00	; 0
    4400:	69 f7       	brne	.-38     	; 0x43dc <main+0x1d24>
    4402:	16 c0       	rjmp	.+44     	; 0x4430 <main+0x1d78>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4404:	fe 01       	movw	r30, r28
    4406:	ff 96       	adiw	r30, 0x3f	; 63
    4408:	60 81       	ld	r22, Z
    440a:	71 81       	ldd	r23, Z+1	; 0x01
    440c:	82 81       	ldd	r24, Z+2	; 0x02
    440e:	93 81       	ldd	r25, Z+3	; 0x03
    4410:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    4414:	dc 01       	movw	r26, r24
    4416:	cb 01       	movw	r24, r22
    4418:	9e af       	std	Y+62, r25	; 0x3e
    441a:	8d af       	std	Y+61, r24	; 0x3d
    441c:	8d ad       	ldd	r24, Y+61	; 0x3d
    441e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4420:	9a af       	std	Y+58, r25	; 0x3a
    4422:	89 af       	std	Y+57, r24	; 0x39
    4424:	89 ad       	ldd	r24, Y+57	; 0x39
    4426:	9a ad       	ldd	r25, Y+58	; 0x3a
    4428:	01 97       	sbiw	r24, 0x01	; 1
    442a:	f1 f7       	brne	.-4      	; 0x4428 <main+0x1d70>
    442c:	9a af       	std	Y+58, r25	; 0x3a
    442e:	89 af       	std	Y+57, r24	; 0x39
                        _delay_ms(1000);
                        LCD_Clear();
    4430:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_Clear>
    4434:	d0 c0       	rjmp	.+416    	; 0x45d6 <main+0x1f1e>

                        while ((minutes > 0 || seconds > 0) && currentMode == TIMER) {
                            sprintf(timeInput, "%02d:%02d", minutes, seconds);
    4436:	20 91 3d 02 	lds	r18, 0x023D
    443a:	30 91 3e 02 	lds	r19, 0x023E
    443e:	40 91 3f 02 	lds	r20, 0x023F
    4442:	50 91 40 02 	lds	r21, 0x0240
    4446:	0d b7       	in	r16, 0x3d	; 61
    4448:	1e b7       	in	r17, 0x3e	; 62
    444a:	08 50       	subi	r16, 0x08	; 8
    444c:	10 40       	sbci	r17, 0x00	; 0
    444e:	0f b6       	in	r0, 0x3f	; 63
    4450:	f8 94       	cli
    4452:	1e bf       	out	0x3e, r17	; 62
    4454:	0f be       	out	0x3f, r0	; 63
    4456:	0d bf       	out	0x3d, r16	; 61
    4458:	ed b7       	in	r30, 0x3d	; 61
    445a:	fe b7       	in	r31, 0x3e	; 62
    445c:	31 96       	adiw	r30, 0x01	; 1
    445e:	ce 01       	movw	r24, r28
    4460:	85 5c       	subi	r24, 0xC5	; 197
    4462:	9e 4f       	sbci	r25, 0xFE	; 254
    4464:	91 83       	std	Z+1, r25	; 0x01
    4466:	80 83       	st	Z, r24
    4468:	83 e0       	ldi	r24, 0x03	; 3
    446a:	91 e0       	ldi	r25, 0x01	; 1
    446c:	93 83       	std	Z+3, r25	; 0x03
    446e:	82 83       	std	Z+2, r24	; 0x02
    4470:	35 83       	std	Z+5, r19	; 0x05
    4472:	24 83       	std	Z+4, r18	; 0x04
    4474:	57 83       	std	Z+7, r21	; 0x07
    4476:	46 83       	std	Z+6, r20	; 0x06
    4478:	0e 94 32 25 	call	0x4a64	; 0x4a64 <sprintf>
    447c:	2d b7       	in	r18, 0x3d	; 61
    447e:	3e b7       	in	r19, 0x3e	; 62
    4480:	28 5f       	subi	r18, 0xF8	; 248
    4482:	3f 4f       	sbci	r19, 0xFF	; 255
    4484:	0f b6       	in	r0, 0x3f	; 63
    4486:	f8 94       	cli
    4488:	3e bf       	out	0x3e, r19	; 62
    448a:	0f be       	out	0x3f, r0	; 63
    448c:	2d bf       	out	0x3d, r18	; 61
                            LCD_WriteString(timeInput, LCD_ROW_1, 0);
    448e:	ce 01       	movw	r24, r28
    4490:	85 5c       	subi	r24, 0xC5	; 197
    4492:	9e 4f       	sbci	r25, 0xFE	; 254
    4494:	60 e0       	ldi	r22, 0x00	; 0
    4496:	40 e0       	ldi	r20, 0x00	; 0
    4498:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_WriteString>
    449c:	80 e0       	ldi	r24, 0x00	; 0
    449e:	90 e0       	ldi	r25, 0x00	; 0
    44a0:	aa e7       	ldi	r26, 0x7A	; 122
    44a2:	b4 e4       	ldi	r27, 0x44	; 68
    44a4:	8d ab       	std	Y+53, r24	; 0x35
    44a6:	9e ab       	std	Y+54, r25	; 0x36
    44a8:	af ab       	std	Y+55, r26	; 0x37
    44aa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44ac:	6d a9       	ldd	r22, Y+53	; 0x35
    44ae:	7e a9       	ldd	r23, Y+54	; 0x36
    44b0:	8f a9       	ldd	r24, Y+55	; 0x37
    44b2:	98 ad       	ldd	r25, Y+56	; 0x38
    44b4:	20 e0       	ldi	r18, 0x00	; 0
    44b6:	30 e0       	ldi	r19, 0x00	; 0
    44b8:	4a e7       	ldi	r20, 0x7A	; 122
    44ba:	55 e4       	ldi	r21, 0x45	; 69
    44bc:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    44c0:	dc 01       	movw	r26, r24
    44c2:	cb 01       	movw	r24, r22
    44c4:	89 ab       	std	Y+49, r24	; 0x31
    44c6:	9a ab       	std	Y+50, r25	; 0x32
    44c8:	ab ab       	std	Y+51, r26	; 0x33
    44ca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    44cc:	69 a9       	ldd	r22, Y+49	; 0x31
    44ce:	7a a9       	ldd	r23, Y+50	; 0x32
    44d0:	8b a9       	ldd	r24, Y+51	; 0x33
    44d2:	9c a9       	ldd	r25, Y+52	; 0x34
    44d4:	20 e0       	ldi	r18, 0x00	; 0
    44d6:	30 e0       	ldi	r19, 0x00	; 0
    44d8:	40 e8       	ldi	r20, 0x80	; 128
    44da:	5f e3       	ldi	r21, 0x3F	; 63
    44dc:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    44e0:	88 23       	and	r24, r24
    44e2:	2c f4       	brge	.+10     	; 0x44ee <main+0x1e36>
		__ticks = 1;
    44e4:	81 e0       	ldi	r24, 0x01	; 1
    44e6:	90 e0       	ldi	r25, 0x00	; 0
    44e8:	98 ab       	std	Y+48, r25	; 0x30
    44ea:	8f a7       	std	Y+47, r24	; 0x2f
    44ec:	3f c0       	rjmp	.+126    	; 0x456c <main+0x1eb4>
	else if (__tmp > 65535)
    44ee:	69 a9       	ldd	r22, Y+49	; 0x31
    44f0:	7a a9       	ldd	r23, Y+50	; 0x32
    44f2:	8b a9       	ldd	r24, Y+51	; 0x33
    44f4:	9c a9       	ldd	r25, Y+52	; 0x34
    44f6:	20 e0       	ldi	r18, 0x00	; 0
    44f8:	3f ef       	ldi	r19, 0xFF	; 255
    44fa:	4f e7       	ldi	r20, 0x7F	; 127
    44fc:	57 e4       	ldi	r21, 0x47	; 71
    44fe:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    4502:	18 16       	cp	r1, r24
    4504:	4c f5       	brge	.+82     	; 0x4558 <main+0x1ea0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4506:	6d a9       	ldd	r22, Y+53	; 0x35
    4508:	7e a9       	ldd	r23, Y+54	; 0x36
    450a:	8f a9       	ldd	r24, Y+55	; 0x37
    450c:	98 ad       	ldd	r25, Y+56	; 0x38
    450e:	20 e0       	ldi	r18, 0x00	; 0
    4510:	30 e0       	ldi	r19, 0x00	; 0
    4512:	40 e2       	ldi	r20, 0x20	; 32
    4514:	51 e4       	ldi	r21, 0x41	; 65
    4516:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    451a:	dc 01       	movw	r26, r24
    451c:	cb 01       	movw	r24, r22
    451e:	bc 01       	movw	r22, r24
    4520:	cd 01       	movw	r24, r26
    4522:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    4526:	dc 01       	movw	r26, r24
    4528:	cb 01       	movw	r24, r22
    452a:	98 ab       	std	Y+48, r25	; 0x30
    452c:	8f a7       	std	Y+47, r24	; 0x2f
    452e:	0f c0       	rjmp	.+30     	; 0x454e <main+0x1e96>
    4530:	80 e9       	ldi	r24, 0x90	; 144
    4532:	91 e0       	ldi	r25, 0x01	; 1
    4534:	9e a7       	std	Y+46, r25	; 0x2e
    4536:	8d a7       	std	Y+45, r24	; 0x2d
    4538:	8d a5       	ldd	r24, Y+45	; 0x2d
    453a:	9e a5       	ldd	r25, Y+46	; 0x2e
    453c:	01 97       	sbiw	r24, 0x01	; 1
    453e:	f1 f7       	brne	.-4      	; 0x453c <main+0x1e84>
    4540:	9e a7       	std	Y+46, r25	; 0x2e
    4542:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4544:	8f a5       	ldd	r24, Y+47	; 0x2f
    4546:	98 a9       	ldd	r25, Y+48	; 0x30
    4548:	01 97       	sbiw	r24, 0x01	; 1
    454a:	98 ab       	std	Y+48, r25	; 0x30
    454c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    454e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4550:	98 a9       	ldd	r25, Y+48	; 0x30
    4552:	00 97       	sbiw	r24, 0x00	; 0
    4554:	69 f7       	brne	.-38     	; 0x4530 <main+0x1e78>
    4556:	14 c0       	rjmp	.+40     	; 0x4580 <main+0x1ec8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4558:	69 a9       	ldd	r22, Y+49	; 0x31
    455a:	7a a9       	ldd	r23, Y+50	; 0x32
    455c:	8b a9       	ldd	r24, Y+51	; 0x33
    455e:	9c a9       	ldd	r25, Y+52	; 0x34
    4560:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    4564:	dc 01       	movw	r26, r24
    4566:	cb 01       	movw	r24, r22
    4568:	98 ab       	std	Y+48, r25	; 0x30
    456a:	8f a7       	std	Y+47, r24	; 0x2f
    456c:	8f a5       	ldd	r24, Y+47	; 0x2f
    456e:	98 a9       	ldd	r25, Y+48	; 0x30
    4570:	9c a7       	std	Y+44, r25	; 0x2c
    4572:	8b a7       	std	Y+43, r24	; 0x2b
    4574:	8b a5       	ldd	r24, Y+43	; 0x2b
    4576:	9c a5       	ldd	r25, Y+44	; 0x2c
    4578:	01 97       	sbiw	r24, 0x01	; 1
    457a:	f1 f7       	brne	.-4      	; 0x4578 <main+0x1ec0>
    457c:	9c a7       	std	Y+44, r25	; 0x2c
    457e:	8b a7       	std	Y+43, r24	; 0x2b
                            _delay_ms(1000);

                            if (!time_paused) {
    4580:	80 91 41 02 	lds	r24, 0x0241
    4584:	88 23       	and	r24, r24
    4586:	39 f5       	brne	.+78     	; 0x45d6 <main+0x1f1e>
                                if (seconds == 0) {
    4588:	80 91 3f 02 	lds	r24, 0x023F
    458c:	90 91 40 02 	lds	r25, 0x0240
    4590:	00 97       	sbiw	r24, 0x00	; 0
    4592:	b1 f4       	brne	.+44     	; 0x45c0 <main+0x1f08>
                                    if (minutes > 0) {
    4594:	80 91 3d 02 	lds	r24, 0x023D
    4598:	90 91 3e 02 	lds	r25, 0x023E
    459c:	00 97       	sbiw	r24, 0x00	; 0
    459e:	c9 f0       	breq	.+50     	; 0x45d2 <main+0x1f1a>
                                        minutes--;
    45a0:	80 91 3d 02 	lds	r24, 0x023D
    45a4:	90 91 3e 02 	lds	r25, 0x023E
    45a8:	01 97       	sbiw	r24, 0x01	; 1
    45aa:	90 93 3e 02 	sts	0x023E, r25
    45ae:	80 93 3d 02 	sts	0x023D, r24
                                        seconds = 59;
    45b2:	8b e3       	ldi	r24, 0x3B	; 59
    45b4:	90 e0       	ldi	r25, 0x00	; 0
    45b6:	90 93 40 02 	sts	0x0240, r25
    45ba:	80 93 3f 02 	sts	0x023F, r24
    45be:	09 c0       	rjmp	.+18     	; 0x45d2 <main+0x1f1a>
                                    }
                                } else {
                                    seconds--;
    45c0:	80 91 3f 02 	lds	r24, 0x023F
    45c4:	90 91 40 02 	lds	r25, 0x0240
    45c8:	01 97       	sbiw	r24, 0x01	; 1
    45ca:	90 93 40 02 	sts	0x0240, r25
    45ce:	80 93 3f 02 	sts	0x023F, r24
                                }
                                LCD_Clear(); // Clear the display for the next update
    45d2:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_Clear>
                        LCD_Clear();
                        LCD_WriteString("Timer Starts", LCD_ROW_1, 0);
                        _delay_ms(1000);
                        LCD_Clear();

                        while ((minutes > 0 || seconds > 0) && currentMode == TIMER) {
    45d6:	80 91 3d 02 	lds	r24, 0x023D
    45da:	90 91 3e 02 	lds	r25, 0x023E
    45de:	00 97       	sbiw	r24, 0x00	; 0
    45e0:	31 f4       	brne	.+12     	; 0x45ee <main+0x1f36>
    45e2:	80 91 3f 02 	lds	r24, 0x023F
    45e6:	90 91 40 02 	lds	r25, 0x0240
    45ea:	00 97       	sbiw	r24, 0x00	; 0
    45ec:	29 f0       	breq	.+10     	; 0x45f8 <main+0x1f40>
    45ee:	80 91 39 02 	lds	r24, 0x0239
    45f2:	82 30       	cpi	r24, 0x02	; 2
    45f4:	09 f4       	brne	.+2      	; 0x45f8 <main+0x1f40>
    45f6:	1f cf       	rjmp	.-450    	; 0x4436 <main+0x1d7e>
                                }
                                LCD_Clear(); // Clear the display for the next update
                            }
                        }

                        if (currentMode == TIMER) {
    45f8:	80 91 39 02 	lds	r24, 0x0239
    45fc:	82 30       	cpi	r24, 0x02	; 2
    45fe:	09 f0       	breq	.+2      	; 0x4602 <main+0x1f4a>
    4600:	02 c1       	rjmp	.+516    	; 0x4806 <main+0x214e>
                            LCD_WriteString("Time's Up!", LCD_ROW_1, 0);
    4602:	8d e0       	ldi	r24, 0x0D	; 13
    4604:	91 e0       	ldi	r25, 0x01	; 1
    4606:	60 e0       	ldi	r22, 0x00	; 0
    4608:	40 e0       	ldi	r20, 0x00	; 0
    460a:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_WriteString>
                            PORTD |= (1 << 4);
    460e:	a2 e3       	ldi	r26, 0x32	; 50
    4610:	b0 e0       	ldi	r27, 0x00	; 0
    4612:	e2 e3       	ldi	r30, 0x32	; 50
    4614:	f0 e0       	ldi	r31, 0x00	; 0
    4616:	80 81       	ld	r24, Z
    4618:	80 61       	ori	r24, 0x10	; 16
    461a:	8c 93       	st	X, r24
    461c:	80 e0       	ldi	r24, 0x00	; 0
    461e:	90 e0       	ldi	r25, 0x00	; 0
    4620:	aa e7       	ldi	r26, 0x7A	; 122
    4622:	b4 e4       	ldi	r27, 0x44	; 68
    4624:	8f a3       	std	Y+39, r24	; 0x27
    4626:	98 a7       	std	Y+40, r25	; 0x28
    4628:	a9 a7       	std	Y+41, r26	; 0x29
    462a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    462c:	6f a1       	ldd	r22, Y+39	; 0x27
    462e:	78 a5       	ldd	r23, Y+40	; 0x28
    4630:	89 a5       	ldd	r24, Y+41	; 0x29
    4632:	9a a5       	ldd	r25, Y+42	; 0x2a
    4634:	20 e0       	ldi	r18, 0x00	; 0
    4636:	30 e0       	ldi	r19, 0x00	; 0
    4638:	4a e7       	ldi	r20, 0x7A	; 122
    463a:	55 e4       	ldi	r21, 0x45	; 69
    463c:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    4640:	dc 01       	movw	r26, r24
    4642:	cb 01       	movw	r24, r22
    4644:	8b a3       	std	Y+35, r24	; 0x23
    4646:	9c a3       	std	Y+36, r25	; 0x24
    4648:	ad a3       	std	Y+37, r26	; 0x25
    464a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    464c:	6b a1       	ldd	r22, Y+35	; 0x23
    464e:	7c a1       	ldd	r23, Y+36	; 0x24
    4650:	8d a1       	ldd	r24, Y+37	; 0x25
    4652:	9e a1       	ldd	r25, Y+38	; 0x26
    4654:	20 e0       	ldi	r18, 0x00	; 0
    4656:	30 e0       	ldi	r19, 0x00	; 0
    4658:	40 e8       	ldi	r20, 0x80	; 128
    465a:	5f e3       	ldi	r21, 0x3F	; 63
    465c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    4660:	88 23       	and	r24, r24
    4662:	2c f4       	brge	.+10     	; 0x466e <main+0x1fb6>
		__ticks = 1;
    4664:	81 e0       	ldi	r24, 0x01	; 1
    4666:	90 e0       	ldi	r25, 0x00	; 0
    4668:	9a a3       	std	Y+34, r25	; 0x22
    466a:	89 a3       	std	Y+33, r24	; 0x21
    466c:	3f c0       	rjmp	.+126    	; 0x46ec <main+0x2034>
	else if (__tmp > 65535)
    466e:	6b a1       	ldd	r22, Y+35	; 0x23
    4670:	7c a1       	ldd	r23, Y+36	; 0x24
    4672:	8d a1       	ldd	r24, Y+37	; 0x25
    4674:	9e a1       	ldd	r25, Y+38	; 0x26
    4676:	20 e0       	ldi	r18, 0x00	; 0
    4678:	3f ef       	ldi	r19, 0xFF	; 255
    467a:	4f e7       	ldi	r20, 0x7F	; 127
    467c:	57 e4       	ldi	r21, 0x47	; 71
    467e:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    4682:	18 16       	cp	r1, r24
    4684:	4c f5       	brge	.+82     	; 0x46d8 <main+0x2020>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4686:	6f a1       	ldd	r22, Y+39	; 0x27
    4688:	78 a5       	ldd	r23, Y+40	; 0x28
    468a:	89 a5       	ldd	r24, Y+41	; 0x29
    468c:	9a a5       	ldd	r25, Y+42	; 0x2a
    468e:	20 e0       	ldi	r18, 0x00	; 0
    4690:	30 e0       	ldi	r19, 0x00	; 0
    4692:	40 e2       	ldi	r20, 0x20	; 32
    4694:	51 e4       	ldi	r21, 0x41	; 65
    4696:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    469a:	dc 01       	movw	r26, r24
    469c:	cb 01       	movw	r24, r22
    469e:	bc 01       	movw	r22, r24
    46a0:	cd 01       	movw	r24, r26
    46a2:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    46a6:	dc 01       	movw	r26, r24
    46a8:	cb 01       	movw	r24, r22
    46aa:	9a a3       	std	Y+34, r25	; 0x22
    46ac:	89 a3       	std	Y+33, r24	; 0x21
    46ae:	0f c0       	rjmp	.+30     	; 0x46ce <main+0x2016>
    46b0:	80 e9       	ldi	r24, 0x90	; 144
    46b2:	91 e0       	ldi	r25, 0x01	; 1
    46b4:	98 a3       	std	Y+32, r25	; 0x20
    46b6:	8f 8f       	std	Y+31, r24	; 0x1f
    46b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    46ba:	98 a1       	ldd	r25, Y+32	; 0x20
    46bc:	01 97       	sbiw	r24, 0x01	; 1
    46be:	f1 f7       	brne	.-4      	; 0x46bc <main+0x2004>
    46c0:	98 a3       	std	Y+32, r25	; 0x20
    46c2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46c4:	89 a1       	ldd	r24, Y+33	; 0x21
    46c6:	9a a1       	ldd	r25, Y+34	; 0x22
    46c8:	01 97       	sbiw	r24, 0x01	; 1
    46ca:	9a a3       	std	Y+34, r25	; 0x22
    46cc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46ce:	89 a1       	ldd	r24, Y+33	; 0x21
    46d0:	9a a1       	ldd	r25, Y+34	; 0x22
    46d2:	00 97       	sbiw	r24, 0x00	; 0
    46d4:	69 f7       	brne	.-38     	; 0x46b0 <main+0x1ff8>
    46d6:	14 c0       	rjmp	.+40     	; 0x4700 <main+0x2048>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46d8:	6b a1       	ldd	r22, Y+35	; 0x23
    46da:	7c a1       	ldd	r23, Y+36	; 0x24
    46dc:	8d a1       	ldd	r24, Y+37	; 0x25
    46de:	9e a1       	ldd	r25, Y+38	; 0x26
    46e0:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    46e4:	dc 01       	movw	r26, r24
    46e6:	cb 01       	movw	r24, r22
    46e8:	9a a3       	std	Y+34, r25	; 0x22
    46ea:	89 a3       	std	Y+33, r24	; 0x21
    46ec:	89 a1       	ldd	r24, Y+33	; 0x21
    46ee:	9a a1       	ldd	r25, Y+34	; 0x22
    46f0:	9e 8f       	std	Y+30, r25	; 0x1e
    46f2:	8d 8f       	std	Y+29, r24	; 0x1d
    46f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    46f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    46f8:	01 97       	sbiw	r24, 0x01	; 1
    46fa:	f1 f7       	brne	.-4      	; 0x46f8 <main+0x2040>
    46fc:	9e 8f       	std	Y+30, r25	; 0x1e
    46fe:	8d 8f       	std	Y+29, r24	; 0x1d

                            _delay_ms(1000);
                            PORTD &= ~(1 << 4);
    4700:	a2 e3       	ldi	r26, 0x32	; 50
    4702:	b0 e0       	ldi	r27, 0x00	; 0
    4704:	e2 e3       	ldi	r30, 0x32	; 50
    4706:	f0 e0       	ldi	r31, 0x00	; 0
    4708:	80 81       	ld	r24, Z
    470a:	8f 7e       	andi	r24, 0xEF	; 239
    470c:	8c 93       	st	X, r24
    470e:	80 e0       	ldi	r24, 0x00	; 0
    4710:	90 e0       	ldi	r25, 0x00	; 0
    4712:	aa e7       	ldi	r26, 0x7A	; 122
    4714:	b4 e4       	ldi	r27, 0x44	; 68
    4716:	89 8f       	std	Y+25, r24	; 0x19
    4718:	9a 8f       	std	Y+26, r25	; 0x1a
    471a:	ab 8f       	std	Y+27, r26	; 0x1b
    471c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    471e:	69 8d       	ldd	r22, Y+25	; 0x19
    4720:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4722:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4724:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4726:	20 e0       	ldi	r18, 0x00	; 0
    4728:	30 e0       	ldi	r19, 0x00	; 0
    472a:	4a e7       	ldi	r20, 0x7A	; 122
    472c:	55 e4       	ldi	r21, 0x45	; 69
    472e:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    4732:	dc 01       	movw	r26, r24
    4734:	cb 01       	movw	r24, r22
    4736:	8d 8b       	std	Y+21, r24	; 0x15
    4738:	9e 8b       	std	Y+22, r25	; 0x16
    473a:	af 8b       	std	Y+23, r26	; 0x17
    473c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    473e:	6d 89       	ldd	r22, Y+21	; 0x15
    4740:	7e 89       	ldd	r23, Y+22	; 0x16
    4742:	8f 89       	ldd	r24, Y+23	; 0x17
    4744:	98 8d       	ldd	r25, Y+24	; 0x18
    4746:	20 e0       	ldi	r18, 0x00	; 0
    4748:	30 e0       	ldi	r19, 0x00	; 0
    474a:	40 e8       	ldi	r20, 0x80	; 128
    474c:	5f e3       	ldi	r21, 0x3F	; 63
    474e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    4752:	88 23       	and	r24, r24
    4754:	2c f4       	brge	.+10     	; 0x4760 <main+0x20a8>
		__ticks = 1;
    4756:	81 e0       	ldi	r24, 0x01	; 1
    4758:	90 e0       	ldi	r25, 0x00	; 0
    475a:	9c 8b       	std	Y+20, r25	; 0x14
    475c:	8b 8b       	std	Y+19, r24	; 0x13
    475e:	3f c0       	rjmp	.+126    	; 0x47de <main+0x2126>
	else if (__tmp > 65535)
    4760:	6d 89       	ldd	r22, Y+21	; 0x15
    4762:	7e 89       	ldd	r23, Y+22	; 0x16
    4764:	8f 89       	ldd	r24, Y+23	; 0x17
    4766:	98 8d       	ldd	r25, Y+24	; 0x18
    4768:	20 e0       	ldi	r18, 0x00	; 0
    476a:	3f ef       	ldi	r19, 0xFF	; 255
    476c:	4f e7       	ldi	r20, 0x7F	; 127
    476e:	57 e4       	ldi	r21, 0x47	; 71
    4770:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    4774:	18 16       	cp	r1, r24
    4776:	4c f5       	brge	.+82     	; 0x47ca <main+0x2112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4778:	69 8d       	ldd	r22, Y+25	; 0x19
    477a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    477c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    477e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4780:	20 e0       	ldi	r18, 0x00	; 0
    4782:	30 e0       	ldi	r19, 0x00	; 0
    4784:	40 e2       	ldi	r20, 0x20	; 32
    4786:	51 e4       	ldi	r21, 0x41	; 65
    4788:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    478c:	dc 01       	movw	r26, r24
    478e:	cb 01       	movw	r24, r22
    4790:	bc 01       	movw	r22, r24
    4792:	cd 01       	movw	r24, r26
    4794:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    4798:	dc 01       	movw	r26, r24
    479a:	cb 01       	movw	r24, r22
    479c:	9c 8b       	std	Y+20, r25	; 0x14
    479e:	8b 8b       	std	Y+19, r24	; 0x13
    47a0:	0f c0       	rjmp	.+30     	; 0x47c0 <main+0x2108>
    47a2:	80 e9       	ldi	r24, 0x90	; 144
    47a4:	91 e0       	ldi	r25, 0x01	; 1
    47a6:	9a 8b       	std	Y+18, r25	; 0x12
    47a8:	89 8b       	std	Y+17, r24	; 0x11
    47aa:	89 89       	ldd	r24, Y+17	; 0x11
    47ac:	9a 89       	ldd	r25, Y+18	; 0x12
    47ae:	01 97       	sbiw	r24, 0x01	; 1
    47b0:	f1 f7       	brne	.-4      	; 0x47ae <main+0x20f6>
    47b2:	9a 8b       	std	Y+18, r25	; 0x12
    47b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47b6:	8b 89       	ldd	r24, Y+19	; 0x13
    47b8:	9c 89       	ldd	r25, Y+20	; 0x14
    47ba:	01 97       	sbiw	r24, 0x01	; 1
    47bc:	9c 8b       	std	Y+20, r25	; 0x14
    47be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47c0:	8b 89       	ldd	r24, Y+19	; 0x13
    47c2:	9c 89       	ldd	r25, Y+20	; 0x14
    47c4:	00 97       	sbiw	r24, 0x00	; 0
    47c6:	69 f7       	brne	.-38     	; 0x47a2 <main+0x20ea>
    47c8:	14 c0       	rjmp	.+40     	; 0x47f2 <main+0x213a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47ca:	6d 89       	ldd	r22, Y+21	; 0x15
    47cc:	7e 89       	ldd	r23, Y+22	; 0x16
    47ce:	8f 89       	ldd	r24, Y+23	; 0x17
    47d0:	98 8d       	ldd	r25, Y+24	; 0x18
    47d2:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    47d6:	dc 01       	movw	r26, r24
    47d8:	cb 01       	movw	r24, r22
    47da:	9c 8b       	std	Y+20, r25	; 0x14
    47dc:	8b 8b       	std	Y+19, r24	; 0x13
    47de:	8b 89       	ldd	r24, Y+19	; 0x13
    47e0:	9c 89       	ldd	r25, Y+20	; 0x14
    47e2:	98 8b       	std	Y+16, r25	; 0x10
    47e4:	8f 87       	std	Y+15, r24	; 0x0f
    47e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    47e8:	98 89       	ldd	r25, Y+16	; 0x10
    47ea:	01 97       	sbiw	r24, 0x01	; 1
    47ec:	f1 f7       	brne	.-4      	; 0x47ea <main+0x2132>
    47ee:	98 8b       	std	Y+16, r25	; 0x10
    47f0:	8f 87       	std	Y+15, r24	; 0x0f
                            _delay_ms(1000);
                            currentMode = CALCULATOR; // Reset to clock mode or desired mode
    47f2:	10 92 39 02 	sts	0x0239, r1
                            LCD_Clear();
    47f6:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_Clear>
    47fa:	05 c0       	rjmp	.+10     	; 0x4806 <main+0x214e>
                LCD_GoToPos(LCD_ROW_1, 0);
                LCD_WriteString((uint8_t *)time_string, LCD_ROW_1, 0); // Cast to uint8_t pointer to fix warning
                break;

            case TIMER:
                while (currentMode == TIMER) {
    47fc:	80 91 39 02 	lds	r24, 0x0239
    4800:	82 30       	cpi	r24, 0x02	; 2
    4802:	09 f4       	brne	.+2      	; 0x4806 <main+0x214e>
    4804:	5a cb       	rjmp	.-2380   	; 0x3eba <main+0x1802>
    4806:	80 e0       	ldi	r24, 0x00	; 0
    4808:	90 e0       	ldi	r25, 0x00	; 0
    480a:	aa e7       	ldi	r26, 0x7A	; 122
    480c:	b4 e4       	ldi	r27, 0x44	; 68
    480e:	8b 87       	std	Y+11, r24	; 0x0b
    4810:	9c 87       	std	Y+12, r25	; 0x0c
    4812:	ad 87       	std	Y+13, r26	; 0x0d
    4814:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4816:	6b 85       	ldd	r22, Y+11	; 0x0b
    4818:	7c 85       	ldd	r23, Y+12	; 0x0c
    481a:	8d 85       	ldd	r24, Y+13	; 0x0d
    481c:	9e 85       	ldd	r25, Y+14	; 0x0e
    481e:	20 e0       	ldi	r18, 0x00	; 0
    4820:	30 e0       	ldi	r19, 0x00	; 0
    4822:	4a e7       	ldi	r20, 0x7A	; 122
    4824:	55 e4       	ldi	r21, 0x45	; 69
    4826:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    482a:	dc 01       	movw	r26, r24
    482c:	cb 01       	movw	r24, r22
    482e:	8f 83       	std	Y+7, r24	; 0x07
    4830:	98 87       	std	Y+8, r25	; 0x08
    4832:	a9 87       	std	Y+9, r26	; 0x09
    4834:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4836:	6f 81       	ldd	r22, Y+7	; 0x07
    4838:	78 85       	ldd	r23, Y+8	; 0x08
    483a:	89 85       	ldd	r24, Y+9	; 0x09
    483c:	9a 85       	ldd	r25, Y+10	; 0x0a
    483e:	20 e0       	ldi	r18, 0x00	; 0
    4840:	30 e0       	ldi	r19, 0x00	; 0
    4842:	40 e8       	ldi	r20, 0x80	; 128
    4844:	5f e3       	ldi	r21, 0x3F	; 63
    4846:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    484a:	88 23       	and	r24, r24
    484c:	2c f4       	brge	.+10     	; 0x4858 <main+0x21a0>
		__ticks = 1;
    484e:	81 e0       	ldi	r24, 0x01	; 1
    4850:	90 e0       	ldi	r25, 0x00	; 0
    4852:	9e 83       	std	Y+6, r25	; 0x06
    4854:	8d 83       	std	Y+5, r24	; 0x05
    4856:	40 c0       	rjmp	.+128    	; 0x48d8 <main+0x2220>
	else if (__tmp > 65535)
    4858:	6f 81       	ldd	r22, Y+7	; 0x07
    485a:	78 85       	ldd	r23, Y+8	; 0x08
    485c:	89 85       	ldd	r24, Y+9	; 0x09
    485e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4860:	20 e0       	ldi	r18, 0x00	; 0
    4862:	3f ef       	ldi	r19, 0xFF	; 255
    4864:	4f e7       	ldi	r20, 0x7F	; 127
    4866:	57 e4       	ldi	r21, 0x47	; 71
    4868:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    486c:	18 16       	cp	r1, r24
    486e:	54 f5       	brge	.+84     	; 0x48c4 <main+0x220c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4870:	6b 85       	ldd	r22, Y+11	; 0x0b
    4872:	7c 85       	ldd	r23, Y+12	; 0x0c
    4874:	8d 85       	ldd	r24, Y+13	; 0x0d
    4876:	9e 85       	ldd	r25, Y+14	; 0x0e
    4878:	20 e0       	ldi	r18, 0x00	; 0
    487a:	30 e0       	ldi	r19, 0x00	; 0
    487c:	40 e2       	ldi	r20, 0x20	; 32
    487e:	51 e4       	ldi	r21, 0x41	; 65
    4880:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    4884:	dc 01       	movw	r26, r24
    4886:	cb 01       	movw	r24, r22
    4888:	bc 01       	movw	r22, r24
    488a:	cd 01       	movw	r24, r26
    488c:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    4890:	dc 01       	movw	r26, r24
    4892:	cb 01       	movw	r24, r22
    4894:	9e 83       	std	Y+6, r25	; 0x06
    4896:	8d 83       	std	Y+5, r24	; 0x05
    4898:	0f c0       	rjmp	.+30     	; 0x48b8 <main+0x2200>
    489a:	80 e9       	ldi	r24, 0x90	; 144
    489c:	91 e0       	ldi	r25, 0x01	; 1
    489e:	9c 83       	std	Y+4, r25	; 0x04
    48a0:	8b 83       	std	Y+3, r24	; 0x03
    48a2:	8b 81       	ldd	r24, Y+3	; 0x03
    48a4:	9c 81       	ldd	r25, Y+4	; 0x04
    48a6:	01 97       	sbiw	r24, 0x01	; 1
    48a8:	f1 f7       	brne	.-4      	; 0x48a6 <main+0x21ee>
    48aa:	9c 83       	std	Y+4, r25	; 0x04
    48ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48ae:	8d 81       	ldd	r24, Y+5	; 0x05
    48b0:	9e 81       	ldd	r25, Y+6	; 0x06
    48b2:	01 97       	sbiw	r24, 0x01	; 1
    48b4:	9e 83       	std	Y+6, r25	; 0x06
    48b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48b8:	8d 81       	ldd	r24, Y+5	; 0x05
    48ba:	9e 81       	ldd	r25, Y+6	; 0x06
    48bc:	00 97       	sbiw	r24, 0x00	; 0
    48be:	69 f7       	brne	.-38     	; 0x489a <main+0x21e2>
    48c0:	0c 94 a1 14 	jmp	0x2942	; 0x2942 <main+0x28a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48c4:	6f 81       	ldd	r22, Y+7	; 0x07
    48c6:	78 85       	ldd	r23, Y+8	; 0x08
    48c8:	89 85       	ldd	r24, Y+9	; 0x09
    48ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    48cc:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    48d0:	dc 01       	movw	r26, r24
    48d2:	cb 01       	movw	r24, r22
    48d4:	9e 83       	std	Y+6, r25	; 0x06
    48d6:	8d 83       	std	Y+5, r24	; 0x05
    48d8:	8d 81       	ldd	r24, Y+5	; 0x05
    48da:	9e 81       	ldd	r25, Y+6	; 0x06
    48dc:	9a 83       	std	Y+2, r25	; 0x02
    48de:	89 83       	std	Y+1, r24	; 0x01
    48e0:	89 81       	ldd	r24, Y+1	; 0x01
    48e2:	9a 81       	ldd	r25, Y+2	; 0x02
    48e4:	01 97       	sbiw	r24, 0x01	; 1
    48e6:	f1 f7       	brne	.-4      	; 0x48e4 <main+0x222c>
    48e8:	9a 83       	std	Y+2, r25	; 0x02
    48ea:	89 83       	std	Y+1, r24	; 0x01
    48ec:	0c 94 a1 14 	jmp	0x2942	; 0x2942 <main+0x28a>

000048f0 <__mulsi3>:
    48f0:	62 9f       	mul	r22, r18
    48f2:	d0 01       	movw	r26, r0
    48f4:	73 9f       	mul	r23, r19
    48f6:	f0 01       	movw	r30, r0
    48f8:	82 9f       	mul	r24, r18
    48fa:	e0 0d       	add	r30, r0
    48fc:	f1 1d       	adc	r31, r1
    48fe:	64 9f       	mul	r22, r20
    4900:	e0 0d       	add	r30, r0
    4902:	f1 1d       	adc	r31, r1
    4904:	92 9f       	mul	r25, r18
    4906:	f0 0d       	add	r31, r0
    4908:	83 9f       	mul	r24, r19
    490a:	f0 0d       	add	r31, r0
    490c:	74 9f       	mul	r23, r20
    490e:	f0 0d       	add	r31, r0
    4910:	65 9f       	mul	r22, r21
    4912:	f0 0d       	add	r31, r0
    4914:	99 27       	eor	r25, r25
    4916:	72 9f       	mul	r23, r18
    4918:	b0 0d       	add	r27, r0
    491a:	e1 1d       	adc	r30, r1
    491c:	f9 1f       	adc	r31, r25
    491e:	63 9f       	mul	r22, r19
    4920:	b0 0d       	add	r27, r0
    4922:	e1 1d       	adc	r30, r1
    4924:	f9 1f       	adc	r31, r25
    4926:	bd 01       	movw	r22, r26
    4928:	cf 01       	movw	r24, r30
    492a:	11 24       	eor	r1, r1
    492c:	08 95       	ret

0000492e <__divmodhi4>:
    492e:	97 fb       	bst	r25, 7
    4930:	09 2e       	mov	r0, r25
    4932:	07 26       	eor	r0, r23
    4934:	0a d0       	rcall	.+20     	; 0x494a <__divmodhi4_neg1>
    4936:	77 fd       	sbrc	r23, 7
    4938:	04 d0       	rcall	.+8      	; 0x4942 <__divmodhi4_neg2>
    493a:	27 d0       	rcall	.+78     	; 0x498a <__udivmodhi4>
    493c:	06 d0       	rcall	.+12     	; 0x494a <__divmodhi4_neg1>
    493e:	00 20       	and	r0, r0
    4940:	1a f4       	brpl	.+6      	; 0x4948 <__divmodhi4_exit>

00004942 <__divmodhi4_neg2>:
    4942:	70 95       	com	r23
    4944:	61 95       	neg	r22
    4946:	7f 4f       	sbci	r23, 0xFF	; 255

00004948 <__divmodhi4_exit>:
    4948:	08 95       	ret

0000494a <__divmodhi4_neg1>:
    494a:	f6 f7       	brtc	.-4      	; 0x4948 <__divmodhi4_exit>
    494c:	90 95       	com	r25
    494e:	81 95       	neg	r24
    4950:	9f 4f       	sbci	r25, 0xFF	; 255
    4952:	08 95       	ret

00004954 <__divmodsi4>:
    4954:	97 fb       	bst	r25, 7
    4956:	09 2e       	mov	r0, r25
    4958:	05 26       	eor	r0, r21
    495a:	0e d0       	rcall	.+28     	; 0x4978 <__divmodsi4_neg1>
    495c:	57 fd       	sbrc	r21, 7
    495e:	04 d0       	rcall	.+8      	; 0x4968 <__divmodsi4_neg2>
    4960:	28 d0       	rcall	.+80     	; 0x49b2 <__udivmodsi4>
    4962:	0a d0       	rcall	.+20     	; 0x4978 <__divmodsi4_neg1>
    4964:	00 1c       	adc	r0, r0
    4966:	38 f4       	brcc	.+14     	; 0x4976 <__divmodsi4_exit>

00004968 <__divmodsi4_neg2>:
    4968:	50 95       	com	r21
    496a:	40 95       	com	r20
    496c:	30 95       	com	r19
    496e:	21 95       	neg	r18
    4970:	3f 4f       	sbci	r19, 0xFF	; 255
    4972:	4f 4f       	sbci	r20, 0xFF	; 255
    4974:	5f 4f       	sbci	r21, 0xFF	; 255

00004976 <__divmodsi4_exit>:
    4976:	08 95       	ret

00004978 <__divmodsi4_neg1>:
    4978:	f6 f7       	brtc	.-4      	; 0x4976 <__divmodsi4_exit>
    497a:	90 95       	com	r25
    497c:	80 95       	com	r24
    497e:	70 95       	com	r23
    4980:	61 95       	neg	r22
    4982:	7f 4f       	sbci	r23, 0xFF	; 255
    4984:	8f 4f       	sbci	r24, 0xFF	; 255
    4986:	9f 4f       	sbci	r25, 0xFF	; 255
    4988:	08 95       	ret

0000498a <__udivmodhi4>:
    498a:	aa 1b       	sub	r26, r26
    498c:	bb 1b       	sub	r27, r27
    498e:	51 e1       	ldi	r21, 0x11	; 17
    4990:	07 c0       	rjmp	.+14     	; 0x49a0 <__udivmodhi4_ep>

00004992 <__udivmodhi4_loop>:
    4992:	aa 1f       	adc	r26, r26
    4994:	bb 1f       	adc	r27, r27
    4996:	a6 17       	cp	r26, r22
    4998:	b7 07       	cpc	r27, r23
    499a:	10 f0       	brcs	.+4      	; 0x49a0 <__udivmodhi4_ep>
    499c:	a6 1b       	sub	r26, r22
    499e:	b7 0b       	sbc	r27, r23

000049a0 <__udivmodhi4_ep>:
    49a0:	88 1f       	adc	r24, r24
    49a2:	99 1f       	adc	r25, r25
    49a4:	5a 95       	dec	r21
    49a6:	a9 f7       	brne	.-22     	; 0x4992 <__udivmodhi4_loop>
    49a8:	80 95       	com	r24
    49aa:	90 95       	com	r25
    49ac:	bc 01       	movw	r22, r24
    49ae:	cd 01       	movw	r24, r26
    49b0:	08 95       	ret

000049b2 <__udivmodsi4>:
    49b2:	a1 e2       	ldi	r26, 0x21	; 33
    49b4:	1a 2e       	mov	r1, r26
    49b6:	aa 1b       	sub	r26, r26
    49b8:	bb 1b       	sub	r27, r27
    49ba:	fd 01       	movw	r30, r26
    49bc:	0d c0       	rjmp	.+26     	; 0x49d8 <__udivmodsi4_ep>

000049be <__udivmodsi4_loop>:
    49be:	aa 1f       	adc	r26, r26
    49c0:	bb 1f       	adc	r27, r27
    49c2:	ee 1f       	adc	r30, r30
    49c4:	ff 1f       	adc	r31, r31
    49c6:	a2 17       	cp	r26, r18
    49c8:	b3 07       	cpc	r27, r19
    49ca:	e4 07       	cpc	r30, r20
    49cc:	f5 07       	cpc	r31, r21
    49ce:	20 f0       	brcs	.+8      	; 0x49d8 <__udivmodsi4_ep>
    49d0:	a2 1b       	sub	r26, r18
    49d2:	b3 0b       	sbc	r27, r19
    49d4:	e4 0b       	sbc	r30, r20
    49d6:	f5 0b       	sbc	r31, r21

000049d8 <__udivmodsi4_ep>:
    49d8:	66 1f       	adc	r22, r22
    49da:	77 1f       	adc	r23, r23
    49dc:	88 1f       	adc	r24, r24
    49de:	99 1f       	adc	r25, r25
    49e0:	1a 94       	dec	r1
    49e2:	69 f7       	brne	.-38     	; 0x49be <__udivmodsi4_loop>
    49e4:	60 95       	com	r22
    49e6:	70 95       	com	r23
    49e8:	80 95       	com	r24
    49ea:	90 95       	com	r25
    49ec:	9b 01       	movw	r18, r22
    49ee:	ac 01       	movw	r20, r24
    49f0:	bd 01       	movw	r22, r26
    49f2:	cf 01       	movw	r24, r30
    49f4:	08 95       	ret

000049f6 <__prologue_saves__>:
    49f6:	2f 92       	push	r2
    49f8:	3f 92       	push	r3
    49fa:	4f 92       	push	r4
    49fc:	5f 92       	push	r5
    49fe:	6f 92       	push	r6
    4a00:	7f 92       	push	r7
    4a02:	8f 92       	push	r8
    4a04:	9f 92       	push	r9
    4a06:	af 92       	push	r10
    4a08:	bf 92       	push	r11
    4a0a:	cf 92       	push	r12
    4a0c:	df 92       	push	r13
    4a0e:	ef 92       	push	r14
    4a10:	ff 92       	push	r15
    4a12:	0f 93       	push	r16
    4a14:	1f 93       	push	r17
    4a16:	cf 93       	push	r28
    4a18:	df 93       	push	r29
    4a1a:	cd b7       	in	r28, 0x3d	; 61
    4a1c:	de b7       	in	r29, 0x3e	; 62
    4a1e:	ca 1b       	sub	r28, r26
    4a20:	db 0b       	sbc	r29, r27
    4a22:	0f b6       	in	r0, 0x3f	; 63
    4a24:	f8 94       	cli
    4a26:	de bf       	out	0x3e, r29	; 62
    4a28:	0f be       	out	0x3f, r0	; 63
    4a2a:	cd bf       	out	0x3d, r28	; 61
    4a2c:	09 94       	ijmp

00004a2e <__epilogue_restores__>:
    4a2e:	2a 88       	ldd	r2, Y+18	; 0x12
    4a30:	39 88       	ldd	r3, Y+17	; 0x11
    4a32:	48 88       	ldd	r4, Y+16	; 0x10
    4a34:	5f 84       	ldd	r5, Y+15	; 0x0f
    4a36:	6e 84       	ldd	r6, Y+14	; 0x0e
    4a38:	7d 84       	ldd	r7, Y+13	; 0x0d
    4a3a:	8c 84       	ldd	r8, Y+12	; 0x0c
    4a3c:	9b 84       	ldd	r9, Y+11	; 0x0b
    4a3e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4a40:	b9 84       	ldd	r11, Y+9	; 0x09
    4a42:	c8 84       	ldd	r12, Y+8	; 0x08
    4a44:	df 80       	ldd	r13, Y+7	; 0x07
    4a46:	ee 80       	ldd	r14, Y+6	; 0x06
    4a48:	fd 80       	ldd	r15, Y+5	; 0x05
    4a4a:	0c 81       	ldd	r16, Y+4	; 0x04
    4a4c:	1b 81       	ldd	r17, Y+3	; 0x03
    4a4e:	aa 81       	ldd	r26, Y+2	; 0x02
    4a50:	b9 81       	ldd	r27, Y+1	; 0x01
    4a52:	ce 0f       	add	r28, r30
    4a54:	d1 1d       	adc	r29, r1
    4a56:	0f b6       	in	r0, 0x3f	; 63
    4a58:	f8 94       	cli
    4a5a:	de bf       	out	0x3e, r29	; 62
    4a5c:	0f be       	out	0x3f, r0	; 63
    4a5e:	cd bf       	out	0x3d, r28	; 61
    4a60:	ed 01       	movw	r28, r26
    4a62:	08 95       	ret

00004a64 <sprintf>:
    4a64:	ae e0       	ldi	r26, 0x0E	; 14
    4a66:	b0 e0       	ldi	r27, 0x00	; 0
    4a68:	e8 e3       	ldi	r30, 0x38	; 56
    4a6a:	f5 e2       	ldi	r31, 0x25	; 37
    4a6c:	0c 94 09 25 	jmp	0x4a12	; 0x4a12 <__prologue_saves__+0x1c>
    4a70:	0d 89       	ldd	r16, Y+21	; 0x15
    4a72:	1e 89       	ldd	r17, Y+22	; 0x16
    4a74:	86 e0       	ldi	r24, 0x06	; 6
    4a76:	8c 83       	std	Y+4, r24	; 0x04
    4a78:	1a 83       	std	Y+2, r17	; 0x02
    4a7a:	09 83       	std	Y+1, r16	; 0x01
    4a7c:	8f ef       	ldi	r24, 0xFF	; 255
    4a7e:	9f e7       	ldi	r25, 0x7F	; 127
    4a80:	9e 83       	std	Y+6, r25	; 0x06
    4a82:	8d 83       	std	Y+5, r24	; 0x05
    4a84:	9e 01       	movw	r18, r28
    4a86:	27 5e       	subi	r18, 0xE7	; 231
    4a88:	3f 4f       	sbci	r19, 0xFF	; 255
    4a8a:	ce 01       	movw	r24, r28
    4a8c:	01 96       	adiw	r24, 0x01	; 1
    4a8e:	6f 89       	ldd	r22, Y+23	; 0x17
    4a90:	78 8d       	ldd	r23, Y+24	; 0x18
    4a92:	a9 01       	movw	r20, r18
    4a94:	0e 94 77 25 	call	0x4aee	; 0x4aee <vfprintf>
    4a98:	2f 81       	ldd	r18, Y+7	; 0x07
    4a9a:	38 85       	ldd	r19, Y+8	; 0x08
    4a9c:	02 0f       	add	r16, r18
    4a9e:	13 1f       	adc	r17, r19
    4aa0:	f8 01       	movw	r30, r16
    4aa2:	10 82       	st	Z, r1
    4aa4:	2e 96       	adiw	r28, 0x0e	; 14
    4aa6:	e4 e0       	ldi	r30, 0x04	; 4
    4aa8:	0c 94 25 25 	jmp	0x4a4a	; 0x4a4a <__epilogue_restores__+0x1c>

00004aac <sscanf>:
    4aac:	ae e0       	ldi	r26, 0x0E	; 14
    4aae:	b0 e0       	ldi	r27, 0x00	; 0
    4ab0:	ec e5       	ldi	r30, 0x5C	; 92
    4ab2:	f5 e2       	ldi	r31, 0x25	; 37
    4ab4:	0c 94 0b 25 	jmp	0x4a16	; 0x4a16 <__prologue_saves__+0x20>
    4ab8:	85 e0       	ldi	r24, 0x05	; 5
    4aba:	8c 83       	std	Y+4, r24	; 0x04
    4abc:	8b 89       	ldd	r24, Y+19	; 0x13
    4abe:	9c 89       	ldd	r25, Y+20	; 0x14
    4ac0:	9a 83       	std	Y+2, r25	; 0x02
    4ac2:	89 83       	std	Y+1, r24	; 0x01
    4ac4:	9e 01       	movw	r18, r28
    4ac6:	29 5e       	subi	r18, 0xE9	; 233
    4ac8:	3f 4f       	sbci	r19, 0xFF	; 255
    4aca:	ce 01       	movw	r24, r28
    4acc:	01 96       	adiw	r24, 0x01	; 1
    4ace:	6d 89       	ldd	r22, Y+21	; 0x15
    4ad0:	7e 89       	ldd	r23, Y+22	; 0x16
    4ad2:	a9 01       	movw	r20, r18
    4ad4:	0e 94 d8 28 	call	0x51b0	; 0x51b0 <vfscanf>
    4ad8:	2e 96       	adiw	r28, 0x0e	; 14
    4ada:	e2 e0       	ldi	r30, 0x02	; 2
    4adc:	0c 94 27 25 	jmp	0x4a4e	; 0x4a4e <__epilogue_restores__+0x20>

00004ae0 <trunc>:
    4ae0:	b0 d5       	rcall	.+2912   	; 0x5642 <__fp_trunc>
    4ae2:	20 f0       	brcs	.+8      	; 0x4aec <trunc+0xc>
    4ae4:	9f 37       	cpi	r25, 0x7F	; 127
    4ae6:	08 f4       	brcc	.+2      	; 0x4aea <trunc+0xa>
    4ae8:	c4 c5       	rjmp	.+2952   	; 0x5672 <__fp_szero>
    4aea:	82 c5       	rjmp	.+2820   	; 0x55f0 <__fp_mintl>
    4aec:	9c c5       	rjmp	.+2872   	; 0x5626 <__fp_mpack>

00004aee <vfprintf>:
    4aee:	ab e0       	ldi	r26, 0x0B	; 11
    4af0:	b0 e0       	ldi	r27, 0x00	; 0
    4af2:	ed e7       	ldi	r30, 0x7D	; 125
    4af4:	f5 e2       	ldi	r31, 0x25	; 37
    4af6:	0c 94 fb 24 	jmp	0x49f6	; 0x49f6 <__prologue_saves__>
    4afa:	3c 01       	movw	r6, r24
    4afc:	2b 01       	movw	r4, r22
    4afe:	5a 01       	movw	r10, r20
    4b00:	fc 01       	movw	r30, r24
    4b02:	17 82       	std	Z+7, r1	; 0x07
    4b04:	16 82       	std	Z+6, r1	; 0x06
    4b06:	83 81       	ldd	r24, Z+3	; 0x03
    4b08:	81 fd       	sbrc	r24, 1
    4b0a:	03 c0       	rjmp	.+6      	; 0x4b12 <vfprintf+0x24>
    4b0c:	6f ef       	ldi	r22, 0xFF	; 255
    4b0e:	7f ef       	ldi	r23, 0xFF	; 255
    4b10:	c6 c1       	rjmp	.+908    	; 0x4e9e <vfprintf+0x3b0>
    4b12:	9a e0       	ldi	r25, 0x0A	; 10
    4b14:	89 2e       	mov	r8, r25
    4b16:	1e 01       	movw	r2, r28
    4b18:	08 94       	sec
    4b1a:	21 1c       	adc	r2, r1
    4b1c:	31 1c       	adc	r3, r1
    4b1e:	f3 01       	movw	r30, r6
    4b20:	23 81       	ldd	r18, Z+3	; 0x03
    4b22:	f2 01       	movw	r30, r4
    4b24:	23 fd       	sbrc	r18, 3
    4b26:	85 91       	lpm	r24, Z+
    4b28:	23 ff       	sbrs	r18, 3
    4b2a:	81 91       	ld	r24, Z+
    4b2c:	2f 01       	movw	r4, r30
    4b2e:	88 23       	and	r24, r24
    4b30:	09 f4       	brne	.+2      	; 0x4b34 <vfprintf+0x46>
    4b32:	b2 c1       	rjmp	.+868    	; 0x4e98 <vfprintf+0x3aa>
    4b34:	85 32       	cpi	r24, 0x25	; 37
    4b36:	39 f4       	brne	.+14     	; 0x4b46 <vfprintf+0x58>
    4b38:	23 fd       	sbrc	r18, 3
    4b3a:	85 91       	lpm	r24, Z+
    4b3c:	23 ff       	sbrs	r18, 3
    4b3e:	81 91       	ld	r24, Z+
    4b40:	2f 01       	movw	r4, r30
    4b42:	85 32       	cpi	r24, 0x25	; 37
    4b44:	29 f4       	brne	.+10     	; 0x4b50 <vfprintf+0x62>
    4b46:	90 e0       	ldi	r25, 0x00	; 0
    4b48:	b3 01       	movw	r22, r6
    4b4a:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <fputc>
    4b4e:	e7 cf       	rjmp	.-50     	; 0x4b1e <vfprintf+0x30>
    4b50:	98 2f       	mov	r25, r24
    4b52:	ff 24       	eor	r15, r15
    4b54:	ee 24       	eor	r14, r14
    4b56:	99 24       	eor	r9, r9
    4b58:	ff e1       	ldi	r31, 0x1F	; 31
    4b5a:	ff 15       	cp	r31, r15
    4b5c:	d0 f0       	brcs	.+52     	; 0x4b92 <vfprintf+0xa4>
    4b5e:	9b 32       	cpi	r25, 0x2B	; 43
    4b60:	69 f0       	breq	.+26     	; 0x4b7c <vfprintf+0x8e>
    4b62:	9c 32       	cpi	r25, 0x2C	; 44
    4b64:	28 f4       	brcc	.+10     	; 0x4b70 <vfprintf+0x82>
    4b66:	90 32       	cpi	r25, 0x20	; 32
    4b68:	59 f0       	breq	.+22     	; 0x4b80 <vfprintf+0x92>
    4b6a:	93 32       	cpi	r25, 0x23	; 35
    4b6c:	91 f4       	brne	.+36     	; 0x4b92 <vfprintf+0xa4>
    4b6e:	0e c0       	rjmp	.+28     	; 0x4b8c <vfprintf+0x9e>
    4b70:	9d 32       	cpi	r25, 0x2D	; 45
    4b72:	49 f0       	breq	.+18     	; 0x4b86 <vfprintf+0x98>
    4b74:	90 33       	cpi	r25, 0x30	; 48
    4b76:	69 f4       	brne	.+26     	; 0x4b92 <vfprintf+0xa4>
    4b78:	41 e0       	ldi	r20, 0x01	; 1
    4b7a:	24 c0       	rjmp	.+72     	; 0x4bc4 <vfprintf+0xd6>
    4b7c:	52 e0       	ldi	r21, 0x02	; 2
    4b7e:	f5 2a       	or	r15, r21
    4b80:	84 e0       	ldi	r24, 0x04	; 4
    4b82:	f8 2a       	or	r15, r24
    4b84:	28 c0       	rjmp	.+80     	; 0x4bd6 <vfprintf+0xe8>
    4b86:	98 e0       	ldi	r25, 0x08	; 8
    4b88:	f9 2a       	or	r15, r25
    4b8a:	25 c0       	rjmp	.+74     	; 0x4bd6 <vfprintf+0xe8>
    4b8c:	e0 e1       	ldi	r30, 0x10	; 16
    4b8e:	fe 2a       	or	r15, r30
    4b90:	22 c0       	rjmp	.+68     	; 0x4bd6 <vfprintf+0xe8>
    4b92:	f7 fc       	sbrc	r15, 7
    4b94:	29 c0       	rjmp	.+82     	; 0x4be8 <vfprintf+0xfa>
    4b96:	89 2f       	mov	r24, r25
    4b98:	80 53       	subi	r24, 0x30	; 48
    4b9a:	8a 30       	cpi	r24, 0x0A	; 10
    4b9c:	70 f4       	brcc	.+28     	; 0x4bba <vfprintf+0xcc>
    4b9e:	f6 fe       	sbrs	r15, 6
    4ba0:	05 c0       	rjmp	.+10     	; 0x4bac <vfprintf+0xbe>
    4ba2:	98 9c       	mul	r9, r8
    4ba4:	90 2c       	mov	r9, r0
    4ba6:	11 24       	eor	r1, r1
    4ba8:	98 0e       	add	r9, r24
    4baa:	15 c0       	rjmp	.+42     	; 0x4bd6 <vfprintf+0xe8>
    4bac:	e8 9c       	mul	r14, r8
    4bae:	e0 2c       	mov	r14, r0
    4bb0:	11 24       	eor	r1, r1
    4bb2:	e8 0e       	add	r14, r24
    4bb4:	f0 e2       	ldi	r31, 0x20	; 32
    4bb6:	ff 2a       	or	r15, r31
    4bb8:	0e c0       	rjmp	.+28     	; 0x4bd6 <vfprintf+0xe8>
    4bba:	9e 32       	cpi	r25, 0x2E	; 46
    4bbc:	29 f4       	brne	.+10     	; 0x4bc8 <vfprintf+0xda>
    4bbe:	f6 fc       	sbrc	r15, 6
    4bc0:	6b c1       	rjmp	.+726    	; 0x4e98 <vfprintf+0x3aa>
    4bc2:	40 e4       	ldi	r20, 0x40	; 64
    4bc4:	f4 2a       	or	r15, r20
    4bc6:	07 c0       	rjmp	.+14     	; 0x4bd6 <vfprintf+0xe8>
    4bc8:	9c 36       	cpi	r25, 0x6C	; 108
    4bca:	19 f4       	brne	.+6      	; 0x4bd2 <vfprintf+0xe4>
    4bcc:	50 e8       	ldi	r21, 0x80	; 128
    4bce:	f5 2a       	or	r15, r21
    4bd0:	02 c0       	rjmp	.+4      	; 0x4bd6 <vfprintf+0xe8>
    4bd2:	98 36       	cpi	r25, 0x68	; 104
    4bd4:	49 f4       	brne	.+18     	; 0x4be8 <vfprintf+0xfa>
    4bd6:	f2 01       	movw	r30, r4
    4bd8:	23 fd       	sbrc	r18, 3
    4bda:	95 91       	lpm	r25, Z+
    4bdc:	23 ff       	sbrs	r18, 3
    4bde:	91 91       	ld	r25, Z+
    4be0:	2f 01       	movw	r4, r30
    4be2:	99 23       	and	r25, r25
    4be4:	09 f0       	breq	.+2      	; 0x4be8 <vfprintf+0xfa>
    4be6:	b8 cf       	rjmp	.-144    	; 0x4b58 <vfprintf+0x6a>
    4be8:	89 2f       	mov	r24, r25
    4bea:	85 54       	subi	r24, 0x45	; 69
    4bec:	83 30       	cpi	r24, 0x03	; 3
    4bee:	18 f0       	brcs	.+6      	; 0x4bf6 <vfprintf+0x108>
    4bf0:	80 52       	subi	r24, 0x20	; 32
    4bf2:	83 30       	cpi	r24, 0x03	; 3
    4bf4:	38 f4       	brcc	.+14     	; 0x4c04 <vfprintf+0x116>
    4bf6:	44 e0       	ldi	r20, 0x04	; 4
    4bf8:	50 e0       	ldi	r21, 0x00	; 0
    4bfa:	a4 0e       	add	r10, r20
    4bfc:	b5 1e       	adc	r11, r21
    4bfe:	5f e3       	ldi	r21, 0x3F	; 63
    4c00:	59 83       	std	Y+1, r21	; 0x01
    4c02:	0f c0       	rjmp	.+30     	; 0x4c22 <vfprintf+0x134>
    4c04:	93 36       	cpi	r25, 0x63	; 99
    4c06:	31 f0       	breq	.+12     	; 0x4c14 <vfprintf+0x126>
    4c08:	93 37       	cpi	r25, 0x73	; 115
    4c0a:	79 f0       	breq	.+30     	; 0x4c2a <vfprintf+0x13c>
    4c0c:	93 35       	cpi	r25, 0x53	; 83
    4c0e:	09 f0       	breq	.+2      	; 0x4c12 <vfprintf+0x124>
    4c10:	56 c0       	rjmp	.+172    	; 0x4cbe <vfprintf+0x1d0>
    4c12:	20 c0       	rjmp	.+64     	; 0x4c54 <vfprintf+0x166>
    4c14:	f5 01       	movw	r30, r10
    4c16:	80 81       	ld	r24, Z
    4c18:	89 83       	std	Y+1, r24	; 0x01
    4c1a:	42 e0       	ldi	r20, 0x02	; 2
    4c1c:	50 e0       	ldi	r21, 0x00	; 0
    4c1e:	a4 0e       	add	r10, r20
    4c20:	b5 1e       	adc	r11, r21
    4c22:	61 01       	movw	r12, r2
    4c24:	01 e0       	ldi	r16, 0x01	; 1
    4c26:	10 e0       	ldi	r17, 0x00	; 0
    4c28:	12 c0       	rjmp	.+36     	; 0x4c4e <vfprintf+0x160>
    4c2a:	f5 01       	movw	r30, r10
    4c2c:	c0 80       	ld	r12, Z
    4c2e:	d1 80       	ldd	r13, Z+1	; 0x01
    4c30:	f6 fc       	sbrc	r15, 6
    4c32:	03 c0       	rjmp	.+6      	; 0x4c3a <vfprintf+0x14c>
    4c34:	6f ef       	ldi	r22, 0xFF	; 255
    4c36:	7f ef       	ldi	r23, 0xFF	; 255
    4c38:	02 c0       	rjmp	.+4      	; 0x4c3e <vfprintf+0x150>
    4c3a:	69 2d       	mov	r22, r9
    4c3c:	70 e0       	ldi	r23, 0x00	; 0
    4c3e:	42 e0       	ldi	r20, 0x02	; 2
    4c40:	50 e0       	ldi	r21, 0x00	; 0
    4c42:	a4 0e       	add	r10, r20
    4c44:	b5 1e       	adc	r11, r21
    4c46:	c6 01       	movw	r24, r12
    4c48:	0e 94 07 2a 	call	0x540e	; 0x540e <strnlen>
    4c4c:	8c 01       	movw	r16, r24
    4c4e:	5f e7       	ldi	r21, 0x7F	; 127
    4c50:	f5 22       	and	r15, r21
    4c52:	14 c0       	rjmp	.+40     	; 0x4c7c <vfprintf+0x18e>
    4c54:	f5 01       	movw	r30, r10
    4c56:	c0 80       	ld	r12, Z
    4c58:	d1 80       	ldd	r13, Z+1	; 0x01
    4c5a:	f6 fc       	sbrc	r15, 6
    4c5c:	03 c0       	rjmp	.+6      	; 0x4c64 <vfprintf+0x176>
    4c5e:	6f ef       	ldi	r22, 0xFF	; 255
    4c60:	7f ef       	ldi	r23, 0xFF	; 255
    4c62:	02 c0       	rjmp	.+4      	; 0x4c68 <vfprintf+0x17a>
    4c64:	69 2d       	mov	r22, r9
    4c66:	70 e0       	ldi	r23, 0x00	; 0
    4c68:	42 e0       	ldi	r20, 0x02	; 2
    4c6a:	50 e0       	ldi	r21, 0x00	; 0
    4c6c:	a4 0e       	add	r10, r20
    4c6e:	b5 1e       	adc	r11, r21
    4c70:	c6 01       	movw	r24, r12
    4c72:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <strnlen_P>
    4c76:	8c 01       	movw	r16, r24
    4c78:	50 e8       	ldi	r21, 0x80	; 128
    4c7a:	f5 2a       	or	r15, r21
    4c7c:	f3 fe       	sbrs	r15, 3
    4c7e:	07 c0       	rjmp	.+14     	; 0x4c8e <vfprintf+0x1a0>
    4c80:	1a c0       	rjmp	.+52     	; 0x4cb6 <vfprintf+0x1c8>
    4c82:	80 e2       	ldi	r24, 0x20	; 32
    4c84:	90 e0       	ldi	r25, 0x00	; 0
    4c86:	b3 01       	movw	r22, r6
    4c88:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <fputc>
    4c8c:	ea 94       	dec	r14
    4c8e:	8e 2d       	mov	r24, r14
    4c90:	90 e0       	ldi	r25, 0x00	; 0
    4c92:	08 17       	cp	r16, r24
    4c94:	19 07       	cpc	r17, r25
    4c96:	a8 f3       	brcs	.-22     	; 0x4c82 <vfprintf+0x194>
    4c98:	0e c0       	rjmp	.+28     	; 0x4cb6 <vfprintf+0x1c8>
    4c9a:	f6 01       	movw	r30, r12
    4c9c:	f7 fc       	sbrc	r15, 7
    4c9e:	85 91       	lpm	r24, Z+
    4ca0:	f7 fe       	sbrs	r15, 7
    4ca2:	81 91       	ld	r24, Z+
    4ca4:	6f 01       	movw	r12, r30
    4ca6:	90 e0       	ldi	r25, 0x00	; 0
    4ca8:	b3 01       	movw	r22, r6
    4caa:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <fputc>
    4cae:	e1 10       	cpse	r14, r1
    4cb0:	ea 94       	dec	r14
    4cb2:	01 50       	subi	r16, 0x01	; 1
    4cb4:	10 40       	sbci	r17, 0x00	; 0
    4cb6:	01 15       	cp	r16, r1
    4cb8:	11 05       	cpc	r17, r1
    4cba:	79 f7       	brne	.-34     	; 0x4c9a <vfprintf+0x1ac>
    4cbc:	ea c0       	rjmp	.+468    	; 0x4e92 <vfprintf+0x3a4>
    4cbe:	94 36       	cpi	r25, 0x64	; 100
    4cc0:	11 f0       	breq	.+4      	; 0x4cc6 <vfprintf+0x1d8>
    4cc2:	99 36       	cpi	r25, 0x69	; 105
    4cc4:	69 f5       	brne	.+90     	; 0x4d20 <vfprintf+0x232>
    4cc6:	f7 fe       	sbrs	r15, 7
    4cc8:	08 c0       	rjmp	.+16     	; 0x4cda <vfprintf+0x1ec>
    4cca:	f5 01       	movw	r30, r10
    4ccc:	20 81       	ld	r18, Z
    4cce:	31 81       	ldd	r19, Z+1	; 0x01
    4cd0:	42 81       	ldd	r20, Z+2	; 0x02
    4cd2:	53 81       	ldd	r21, Z+3	; 0x03
    4cd4:	84 e0       	ldi	r24, 0x04	; 4
    4cd6:	90 e0       	ldi	r25, 0x00	; 0
    4cd8:	0a c0       	rjmp	.+20     	; 0x4cee <vfprintf+0x200>
    4cda:	f5 01       	movw	r30, r10
    4cdc:	80 81       	ld	r24, Z
    4cde:	91 81       	ldd	r25, Z+1	; 0x01
    4ce0:	9c 01       	movw	r18, r24
    4ce2:	44 27       	eor	r20, r20
    4ce4:	37 fd       	sbrc	r19, 7
    4ce6:	40 95       	com	r20
    4ce8:	54 2f       	mov	r21, r20
    4cea:	82 e0       	ldi	r24, 0x02	; 2
    4cec:	90 e0       	ldi	r25, 0x00	; 0
    4cee:	a8 0e       	add	r10, r24
    4cf0:	b9 1e       	adc	r11, r25
    4cf2:	9f e6       	ldi	r25, 0x6F	; 111
    4cf4:	f9 22       	and	r15, r25
    4cf6:	57 ff       	sbrs	r21, 7
    4cf8:	09 c0       	rjmp	.+18     	; 0x4d0c <vfprintf+0x21e>
    4cfa:	50 95       	com	r21
    4cfc:	40 95       	com	r20
    4cfe:	30 95       	com	r19
    4d00:	21 95       	neg	r18
    4d02:	3f 4f       	sbci	r19, 0xFF	; 255
    4d04:	4f 4f       	sbci	r20, 0xFF	; 255
    4d06:	5f 4f       	sbci	r21, 0xFF	; 255
    4d08:	e0 e8       	ldi	r30, 0x80	; 128
    4d0a:	fe 2a       	or	r15, r30
    4d0c:	ca 01       	movw	r24, r20
    4d0e:	b9 01       	movw	r22, r18
    4d10:	a1 01       	movw	r20, r2
    4d12:	2a e0       	ldi	r18, 0x0A	; 10
    4d14:	30 e0       	ldi	r19, 0x00	; 0
    4d16:	0e 94 9a 2a 	call	0x5534	; 0x5534 <__ultoa_invert>
    4d1a:	d8 2e       	mov	r13, r24
    4d1c:	d2 18       	sub	r13, r2
    4d1e:	40 c0       	rjmp	.+128    	; 0x4da0 <vfprintf+0x2b2>
    4d20:	95 37       	cpi	r25, 0x75	; 117
    4d22:	29 f4       	brne	.+10     	; 0x4d2e <vfprintf+0x240>
    4d24:	1f 2d       	mov	r17, r15
    4d26:	1f 7e       	andi	r17, 0xEF	; 239
    4d28:	2a e0       	ldi	r18, 0x0A	; 10
    4d2a:	30 e0       	ldi	r19, 0x00	; 0
    4d2c:	1d c0       	rjmp	.+58     	; 0x4d68 <vfprintf+0x27a>
    4d2e:	1f 2d       	mov	r17, r15
    4d30:	19 7f       	andi	r17, 0xF9	; 249
    4d32:	9f 36       	cpi	r25, 0x6F	; 111
    4d34:	61 f0       	breq	.+24     	; 0x4d4e <vfprintf+0x260>
    4d36:	90 37       	cpi	r25, 0x70	; 112
    4d38:	20 f4       	brcc	.+8      	; 0x4d42 <vfprintf+0x254>
    4d3a:	98 35       	cpi	r25, 0x58	; 88
    4d3c:	09 f0       	breq	.+2      	; 0x4d40 <vfprintf+0x252>
    4d3e:	ac c0       	rjmp	.+344    	; 0x4e98 <vfprintf+0x3aa>
    4d40:	0f c0       	rjmp	.+30     	; 0x4d60 <vfprintf+0x272>
    4d42:	90 37       	cpi	r25, 0x70	; 112
    4d44:	39 f0       	breq	.+14     	; 0x4d54 <vfprintf+0x266>
    4d46:	98 37       	cpi	r25, 0x78	; 120
    4d48:	09 f0       	breq	.+2      	; 0x4d4c <vfprintf+0x25e>
    4d4a:	a6 c0       	rjmp	.+332    	; 0x4e98 <vfprintf+0x3aa>
    4d4c:	04 c0       	rjmp	.+8      	; 0x4d56 <vfprintf+0x268>
    4d4e:	28 e0       	ldi	r18, 0x08	; 8
    4d50:	30 e0       	ldi	r19, 0x00	; 0
    4d52:	0a c0       	rjmp	.+20     	; 0x4d68 <vfprintf+0x27a>
    4d54:	10 61       	ori	r17, 0x10	; 16
    4d56:	14 fd       	sbrc	r17, 4
    4d58:	14 60       	ori	r17, 0x04	; 4
    4d5a:	20 e1       	ldi	r18, 0x10	; 16
    4d5c:	30 e0       	ldi	r19, 0x00	; 0
    4d5e:	04 c0       	rjmp	.+8      	; 0x4d68 <vfprintf+0x27a>
    4d60:	14 fd       	sbrc	r17, 4
    4d62:	16 60       	ori	r17, 0x06	; 6
    4d64:	20 e1       	ldi	r18, 0x10	; 16
    4d66:	32 e0       	ldi	r19, 0x02	; 2
    4d68:	17 ff       	sbrs	r17, 7
    4d6a:	08 c0       	rjmp	.+16     	; 0x4d7c <vfprintf+0x28e>
    4d6c:	f5 01       	movw	r30, r10
    4d6e:	60 81       	ld	r22, Z
    4d70:	71 81       	ldd	r23, Z+1	; 0x01
    4d72:	82 81       	ldd	r24, Z+2	; 0x02
    4d74:	93 81       	ldd	r25, Z+3	; 0x03
    4d76:	44 e0       	ldi	r20, 0x04	; 4
    4d78:	50 e0       	ldi	r21, 0x00	; 0
    4d7a:	08 c0       	rjmp	.+16     	; 0x4d8c <vfprintf+0x29e>
    4d7c:	f5 01       	movw	r30, r10
    4d7e:	80 81       	ld	r24, Z
    4d80:	91 81       	ldd	r25, Z+1	; 0x01
    4d82:	bc 01       	movw	r22, r24
    4d84:	80 e0       	ldi	r24, 0x00	; 0
    4d86:	90 e0       	ldi	r25, 0x00	; 0
    4d88:	42 e0       	ldi	r20, 0x02	; 2
    4d8a:	50 e0       	ldi	r21, 0x00	; 0
    4d8c:	a4 0e       	add	r10, r20
    4d8e:	b5 1e       	adc	r11, r21
    4d90:	a1 01       	movw	r20, r2
    4d92:	0e 94 9a 2a 	call	0x5534	; 0x5534 <__ultoa_invert>
    4d96:	d8 2e       	mov	r13, r24
    4d98:	d2 18       	sub	r13, r2
    4d9a:	8f e7       	ldi	r24, 0x7F	; 127
    4d9c:	f8 2e       	mov	r15, r24
    4d9e:	f1 22       	and	r15, r17
    4da0:	f6 fe       	sbrs	r15, 6
    4da2:	0b c0       	rjmp	.+22     	; 0x4dba <vfprintf+0x2cc>
    4da4:	5e ef       	ldi	r21, 0xFE	; 254
    4da6:	f5 22       	and	r15, r21
    4da8:	d9 14       	cp	r13, r9
    4daa:	38 f4       	brcc	.+14     	; 0x4dba <vfprintf+0x2cc>
    4dac:	f4 fe       	sbrs	r15, 4
    4dae:	07 c0       	rjmp	.+14     	; 0x4dbe <vfprintf+0x2d0>
    4db0:	f2 fc       	sbrc	r15, 2
    4db2:	05 c0       	rjmp	.+10     	; 0x4dbe <vfprintf+0x2d0>
    4db4:	8f ee       	ldi	r24, 0xEF	; 239
    4db6:	f8 22       	and	r15, r24
    4db8:	02 c0       	rjmp	.+4      	; 0x4dbe <vfprintf+0x2d0>
    4dba:	1d 2d       	mov	r17, r13
    4dbc:	01 c0       	rjmp	.+2      	; 0x4dc0 <vfprintf+0x2d2>
    4dbe:	19 2d       	mov	r17, r9
    4dc0:	f4 fe       	sbrs	r15, 4
    4dc2:	0d c0       	rjmp	.+26     	; 0x4dde <vfprintf+0x2f0>
    4dc4:	fe 01       	movw	r30, r28
    4dc6:	ed 0d       	add	r30, r13
    4dc8:	f1 1d       	adc	r31, r1
    4dca:	80 81       	ld	r24, Z
    4dcc:	80 33       	cpi	r24, 0x30	; 48
    4dce:	19 f4       	brne	.+6      	; 0x4dd6 <vfprintf+0x2e8>
    4dd0:	99 ee       	ldi	r25, 0xE9	; 233
    4dd2:	f9 22       	and	r15, r25
    4dd4:	08 c0       	rjmp	.+16     	; 0x4de6 <vfprintf+0x2f8>
    4dd6:	1f 5f       	subi	r17, 0xFF	; 255
    4dd8:	f2 fe       	sbrs	r15, 2
    4dda:	05 c0       	rjmp	.+10     	; 0x4de6 <vfprintf+0x2f8>
    4ddc:	03 c0       	rjmp	.+6      	; 0x4de4 <vfprintf+0x2f6>
    4dde:	8f 2d       	mov	r24, r15
    4de0:	86 78       	andi	r24, 0x86	; 134
    4de2:	09 f0       	breq	.+2      	; 0x4de6 <vfprintf+0x2f8>
    4de4:	1f 5f       	subi	r17, 0xFF	; 255
    4de6:	0f 2d       	mov	r16, r15
    4de8:	f3 fc       	sbrc	r15, 3
    4dea:	14 c0       	rjmp	.+40     	; 0x4e14 <vfprintf+0x326>
    4dec:	f0 fe       	sbrs	r15, 0
    4dee:	0f c0       	rjmp	.+30     	; 0x4e0e <vfprintf+0x320>
    4df0:	1e 15       	cp	r17, r14
    4df2:	10 f0       	brcs	.+4      	; 0x4df8 <vfprintf+0x30a>
    4df4:	9d 2c       	mov	r9, r13
    4df6:	0b c0       	rjmp	.+22     	; 0x4e0e <vfprintf+0x320>
    4df8:	9d 2c       	mov	r9, r13
    4dfa:	9e 0c       	add	r9, r14
    4dfc:	91 1a       	sub	r9, r17
    4dfe:	1e 2d       	mov	r17, r14
    4e00:	06 c0       	rjmp	.+12     	; 0x4e0e <vfprintf+0x320>
    4e02:	80 e2       	ldi	r24, 0x20	; 32
    4e04:	90 e0       	ldi	r25, 0x00	; 0
    4e06:	b3 01       	movw	r22, r6
    4e08:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <fputc>
    4e0c:	1f 5f       	subi	r17, 0xFF	; 255
    4e0e:	1e 15       	cp	r17, r14
    4e10:	c0 f3       	brcs	.-16     	; 0x4e02 <vfprintf+0x314>
    4e12:	04 c0       	rjmp	.+8      	; 0x4e1c <vfprintf+0x32e>
    4e14:	1e 15       	cp	r17, r14
    4e16:	10 f4       	brcc	.+4      	; 0x4e1c <vfprintf+0x32e>
    4e18:	e1 1a       	sub	r14, r17
    4e1a:	01 c0       	rjmp	.+2      	; 0x4e1e <vfprintf+0x330>
    4e1c:	ee 24       	eor	r14, r14
    4e1e:	04 ff       	sbrs	r16, 4
    4e20:	0f c0       	rjmp	.+30     	; 0x4e40 <vfprintf+0x352>
    4e22:	80 e3       	ldi	r24, 0x30	; 48
    4e24:	90 e0       	ldi	r25, 0x00	; 0
    4e26:	b3 01       	movw	r22, r6
    4e28:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <fputc>
    4e2c:	02 ff       	sbrs	r16, 2
    4e2e:	1d c0       	rjmp	.+58     	; 0x4e6a <vfprintf+0x37c>
    4e30:	01 fd       	sbrc	r16, 1
    4e32:	03 c0       	rjmp	.+6      	; 0x4e3a <vfprintf+0x34c>
    4e34:	88 e7       	ldi	r24, 0x78	; 120
    4e36:	90 e0       	ldi	r25, 0x00	; 0
    4e38:	0e c0       	rjmp	.+28     	; 0x4e56 <vfprintf+0x368>
    4e3a:	88 e5       	ldi	r24, 0x58	; 88
    4e3c:	90 e0       	ldi	r25, 0x00	; 0
    4e3e:	0b c0       	rjmp	.+22     	; 0x4e56 <vfprintf+0x368>
    4e40:	80 2f       	mov	r24, r16
    4e42:	86 78       	andi	r24, 0x86	; 134
    4e44:	91 f0       	breq	.+36     	; 0x4e6a <vfprintf+0x37c>
    4e46:	01 ff       	sbrs	r16, 1
    4e48:	02 c0       	rjmp	.+4      	; 0x4e4e <vfprintf+0x360>
    4e4a:	8b e2       	ldi	r24, 0x2B	; 43
    4e4c:	01 c0       	rjmp	.+2      	; 0x4e50 <vfprintf+0x362>
    4e4e:	80 e2       	ldi	r24, 0x20	; 32
    4e50:	f7 fc       	sbrc	r15, 7
    4e52:	8d e2       	ldi	r24, 0x2D	; 45
    4e54:	90 e0       	ldi	r25, 0x00	; 0
    4e56:	b3 01       	movw	r22, r6
    4e58:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <fputc>
    4e5c:	06 c0       	rjmp	.+12     	; 0x4e6a <vfprintf+0x37c>
    4e5e:	80 e3       	ldi	r24, 0x30	; 48
    4e60:	90 e0       	ldi	r25, 0x00	; 0
    4e62:	b3 01       	movw	r22, r6
    4e64:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <fputc>
    4e68:	9a 94       	dec	r9
    4e6a:	d9 14       	cp	r13, r9
    4e6c:	c0 f3       	brcs	.-16     	; 0x4e5e <vfprintf+0x370>
    4e6e:	da 94       	dec	r13
    4e70:	f1 01       	movw	r30, r2
    4e72:	ed 0d       	add	r30, r13
    4e74:	f1 1d       	adc	r31, r1
    4e76:	80 81       	ld	r24, Z
    4e78:	90 e0       	ldi	r25, 0x00	; 0
    4e7a:	b3 01       	movw	r22, r6
    4e7c:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <fputc>
    4e80:	dd 20       	and	r13, r13
    4e82:	a9 f7       	brne	.-22     	; 0x4e6e <vfprintf+0x380>
    4e84:	06 c0       	rjmp	.+12     	; 0x4e92 <vfprintf+0x3a4>
    4e86:	80 e2       	ldi	r24, 0x20	; 32
    4e88:	90 e0       	ldi	r25, 0x00	; 0
    4e8a:	b3 01       	movw	r22, r6
    4e8c:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <fputc>
    4e90:	ea 94       	dec	r14
    4e92:	ee 20       	and	r14, r14
    4e94:	c1 f7       	brne	.-16     	; 0x4e86 <vfprintf+0x398>
    4e96:	43 ce       	rjmp	.-890    	; 0x4b1e <vfprintf+0x30>
    4e98:	f3 01       	movw	r30, r6
    4e9a:	66 81       	ldd	r22, Z+6	; 0x06
    4e9c:	77 81       	ldd	r23, Z+7	; 0x07
    4e9e:	cb 01       	movw	r24, r22
    4ea0:	2b 96       	adiw	r28, 0x0b	; 11
    4ea2:	e2 e1       	ldi	r30, 0x12	; 18
    4ea4:	0c 94 17 25 	jmp	0x4a2e	; 0x4a2e <__epilogue_restores__>

00004ea8 <putval>:
    4ea8:	fc 01       	movw	r30, r24
    4eaa:	20 fd       	sbrc	r18, 0
    4eac:	08 c0       	rjmp	.+16     	; 0x4ebe <putval+0x16>
    4eae:	23 fd       	sbrc	r18, 3
    4eb0:	05 c0       	rjmp	.+10     	; 0x4ebc <putval+0x14>
    4eb2:	22 ff       	sbrs	r18, 2
    4eb4:	02 c0       	rjmp	.+4      	; 0x4eba <putval+0x12>
    4eb6:	73 83       	std	Z+3, r23	; 0x03
    4eb8:	62 83       	std	Z+2, r22	; 0x02
    4eba:	51 83       	std	Z+1, r21	; 0x01
    4ebc:	40 83       	st	Z, r20
    4ebe:	08 95       	ret

00004ec0 <mulacc>:
    4ec0:	ef 92       	push	r14
    4ec2:	ff 92       	push	r15
    4ec4:	0f 93       	push	r16
    4ec6:	1f 93       	push	r17
    4ec8:	44 ff       	sbrs	r20, 4
    4eca:	02 c0       	rjmp	.+4      	; 0x4ed0 <mulacc+0x10>
    4ecc:	33 e0       	ldi	r19, 0x03	; 3
    4ece:	11 c0       	rjmp	.+34     	; 0x4ef2 <mulacc+0x32>
    4ed0:	46 ff       	sbrs	r20, 6
    4ed2:	02 c0       	rjmp	.+4      	; 0x4ed8 <mulacc+0x18>
    4ed4:	34 e0       	ldi	r19, 0x04	; 4
    4ed6:	0d c0       	rjmp	.+26     	; 0x4ef2 <mulacc+0x32>
    4ed8:	db 01       	movw	r26, r22
    4eda:	fc 01       	movw	r30, r24
    4edc:	aa 0f       	add	r26, r26
    4ede:	bb 1f       	adc	r27, r27
    4ee0:	ee 1f       	adc	r30, r30
    4ee2:	ff 1f       	adc	r31, r31
    4ee4:	10 94       	com	r1
    4ee6:	d1 f7       	brne	.-12     	; 0x4edc <mulacc+0x1c>
    4ee8:	6a 0f       	add	r22, r26
    4eea:	7b 1f       	adc	r23, r27
    4eec:	8e 1f       	adc	r24, r30
    4eee:	9f 1f       	adc	r25, r31
    4ef0:	31 e0       	ldi	r19, 0x01	; 1
    4ef2:	66 0f       	add	r22, r22
    4ef4:	77 1f       	adc	r23, r23
    4ef6:	88 1f       	adc	r24, r24
    4ef8:	99 1f       	adc	r25, r25
    4efa:	31 50       	subi	r19, 0x01	; 1
    4efc:	d1 f7       	brne	.-12     	; 0x4ef2 <mulacc+0x32>
    4efe:	7b 01       	movw	r14, r22
    4f00:	8c 01       	movw	r16, r24
    4f02:	e2 0e       	add	r14, r18
    4f04:	f1 1c       	adc	r15, r1
    4f06:	01 1d       	adc	r16, r1
    4f08:	11 1d       	adc	r17, r1
    4f0a:	a8 01       	movw	r20, r16
    4f0c:	97 01       	movw	r18, r14
    4f0e:	b7 01       	movw	r22, r14
    4f10:	ca 01       	movw	r24, r20
    4f12:	1f 91       	pop	r17
    4f14:	0f 91       	pop	r16
    4f16:	ff 90       	pop	r15
    4f18:	ef 90       	pop	r14
    4f1a:	08 95       	ret

00004f1c <skip_spaces>:
    4f1c:	0f 93       	push	r16
    4f1e:	1f 93       	push	r17
    4f20:	cf 93       	push	r28
    4f22:	df 93       	push	r29
    4f24:	8c 01       	movw	r16, r24
    4f26:	c8 01       	movw	r24, r16
    4f28:	0e 94 12 2a 	call	0x5424	; 0x5424 <fgetc>
    4f2c:	ec 01       	movw	r28, r24
    4f2e:	97 fd       	sbrc	r25, 7
    4f30:	08 c0       	rjmp	.+16     	; 0x4f42 <skip_spaces+0x26>
    4f32:	0e 94 e9 29 	call	0x53d2	; 0x53d2 <isspace>
    4f36:	89 2b       	or	r24, r25
    4f38:	b1 f7       	brne	.-20     	; 0x4f26 <skip_spaces+0xa>
    4f3a:	ce 01       	movw	r24, r28
    4f3c:	b8 01       	movw	r22, r16
    4f3e:	0e 94 80 2a 	call	0x5500	; 0x5500 <ungetc>
    4f42:	ce 01       	movw	r24, r28
    4f44:	df 91       	pop	r29
    4f46:	cf 91       	pop	r28
    4f48:	1f 91       	pop	r17
    4f4a:	0f 91       	pop	r16
    4f4c:	08 95       	ret

00004f4e <conv_int>:
    4f4e:	a0 e0       	ldi	r26, 0x00	; 0
    4f50:	b0 e0       	ldi	r27, 0x00	; 0
    4f52:	ed ea       	ldi	r30, 0xAD	; 173
    4f54:	f7 e2       	ldi	r31, 0x27	; 39
    4f56:	0c 94 03 25 	jmp	0x4a06	; 0x4a06 <__prologue_saves__+0x10>
    4f5a:	ec 01       	movw	r28, r24
    4f5c:	c6 2e       	mov	r12, r22
    4f5e:	5a 01       	movw	r10, r20
    4f60:	12 2f       	mov	r17, r18
    4f62:	0e 94 12 2a 	call	0x5424	; 0x5424 <fgetc>
    4f66:	ac 01       	movw	r20, r24
    4f68:	8b 32       	cpi	r24, 0x2B	; 43
    4f6a:	19 f0       	breq	.+6      	; 0x4f72 <conv_int+0x24>
    4f6c:	8d 32       	cpi	r24, 0x2D	; 45
    4f6e:	51 f4       	brne	.+20     	; 0x4f84 <conv_int+0x36>
    4f70:	10 68       	ori	r17, 0x80	; 128
    4f72:	ca 94       	dec	r12
    4f74:	09 f4       	brne	.+2      	; 0x4f78 <conv_int+0x2a>
    4f76:	6d c0       	rjmp	.+218    	; 0x5052 <conv_int+0x104>
    4f78:	ce 01       	movw	r24, r28
    4f7a:	0e 94 12 2a 	call	0x5424	; 0x5424 <fgetc>
    4f7e:	ac 01       	movw	r20, r24
    4f80:	97 fd       	sbrc	r25, 7
    4f82:	67 c0       	rjmp	.+206    	; 0x5052 <conv_int+0x104>
    4f84:	6d ef       	ldi	r22, 0xFD	; 253
    4f86:	d6 2e       	mov	r13, r22
    4f88:	d1 22       	and	r13, r17
    4f8a:	8d 2d       	mov	r24, r13
    4f8c:	80 73       	andi	r24, 0x30	; 48
    4f8e:	01 f5       	brne	.+64     	; 0x4fd0 <conv_int+0x82>
    4f90:	40 33       	cpi	r20, 0x30	; 48
    4f92:	f1 f4       	brne	.+60     	; 0x4fd0 <conv_int+0x82>
    4f94:	ca 94       	dec	r12
    4f96:	09 f4       	brne	.+2      	; 0x4f9a <conv_int+0x4c>
    4f98:	47 c0       	rjmp	.+142    	; 0x5028 <conv_int+0xda>
    4f9a:	ce 01       	movw	r24, r28
    4f9c:	0e 94 12 2a 	call	0x5424	; 0x5424 <fgetc>
    4fa0:	ac 01       	movw	r20, r24
    4fa2:	97 fd       	sbrc	r25, 7
    4fa4:	41 c0       	rjmp	.+130    	; 0x5028 <conv_int+0xda>
    4fa6:	82 e0       	ldi	r24, 0x02	; 2
    4fa8:	d8 2a       	or	r13, r24
    4faa:	48 37       	cpi	r20, 0x78	; 120
    4fac:	11 f0       	breq	.+4      	; 0x4fb2 <conv_int+0x64>
    4fae:	48 35       	cpi	r20, 0x58	; 88
    4fb0:	59 f4       	brne	.+22     	; 0x4fc8 <conv_int+0x7a>
    4fb2:	80 e4       	ldi	r24, 0x40	; 64
    4fb4:	d8 2a       	or	r13, r24
    4fb6:	ca 94       	dec	r12
    4fb8:	b9 f1       	breq	.+110    	; 0x5028 <conv_int+0xda>
    4fba:	ce 01       	movw	r24, r28
    4fbc:	0e 94 12 2a 	call	0x5424	; 0x5424 <fgetc>
    4fc0:	ac 01       	movw	r20, r24
    4fc2:	99 23       	and	r25, r25
    4fc4:	2c f4       	brge	.+10     	; 0x4fd0 <conv_int+0x82>
    4fc6:	30 c0       	rjmp	.+96     	; 0x5028 <conv_int+0xda>
    4fc8:	d6 fc       	sbrc	r13, 6
    4fca:	02 c0       	rjmp	.+4      	; 0x4fd0 <conv_int+0x82>
    4fcc:	80 e1       	ldi	r24, 0x10	; 16
    4fce:	d8 2a       	or	r13, r24
    4fd0:	ee 24       	eor	r14, r14
    4fd2:	ff 24       	eor	r15, r15
    4fd4:	87 01       	movw	r16, r14
    4fd6:	24 2f       	mov	r18, r20
    4fd8:	20 53       	subi	r18, 0x30	; 48
    4fda:	28 30       	cpi	r18, 0x08	; 8
    4fdc:	88 f0       	brcs	.+34     	; 0x5000 <conv_int+0xb2>
    4fde:	d4 fc       	sbrc	r13, 4
    4fe0:	09 c0       	rjmp	.+18     	; 0x4ff4 <conv_int+0xa6>
    4fe2:	2a 30       	cpi	r18, 0x0A	; 10
    4fe4:	68 f0       	brcs	.+26     	; 0x5000 <conv_int+0xb2>
    4fe6:	d6 fe       	sbrs	r13, 6
    4fe8:	05 c0       	rjmp	.+10     	; 0x4ff4 <conv_int+0xa6>
    4fea:	2f 7d       	andi	r18, 0xDF	; 223
    4fec:	82 2f       	mov	r24, r18
    4fee:	81 51       	subi	r24, 0x11	; 17
    4ff0:	86 30       	cpi	r24, 0x06	; 6
    4ff2:	28 f0       	brcs	.+10     	; 0x4ffe <conv_int+0xb0>
    4ff4:	ca 01       	movw	r24, r20
    4ff6:	be 01       	movw	r22, r28
    4ff8:	0e 94 80 2a 	call	0x5500	; 0x5500 <ungetc>
    4ffc:	12 c0       	rjmp	.+36     	; 0x5022 <conv_int+0xd4>
    4ffe:	27 50       	subi	r18, 0x07	; 7
    5000:	c8 01       	movw	r24, r16
    5002:	b7 01       	movw	r22, r14
    5004:	4d 2d       	mov	r20, r13
    5006:	0e 94 60 27 	call	0x4ec0	; 0x4ec0 <mulacc>
    500a:	7b 01       	movw	r14, r22
    500c:	8c 01       	movw	r16, r24
    500e:	82 e0       	ldi	r24, 0x02	; 2
    5010:	d8 2a       	or	r13, r24
    5012:	ca 94       	dec	r12
    5014:	61 f0       	breq	.+24     	; 0x502e <conv_int+0xe0>
    5016:	ce 01       	movw	r24, r28
    5018:	0e 94 12 2a 	call	0x5424	; 0x5424 <fgetc>
    501c:	ac 01       	movw	r20, r24
    501e:	97 ff       	sbrs	r25, 7
    5020:	da cf       	rjmp	.-76     	; 0x4fd6 <conv_int+0x88>
    5022:	d1 fc       	sbrc	r13, 1
    5024:	04 c0       	rjmp	.+8      	; 0x502e <conv_int+0xe0>
    5026:	15 c0       	rjmp	.+42     	; 0x5052 <conv_int+0x104>
    5028:	ee 24       	eor	r14, r14
    502a:	ff 24       	eor	r15, r15
    502c:	87 01       	movw	r16, r14
    502e:	d7 fe       	sbrs	r13, 7
    5030:	08 c0       	rjmp	.+16     	; 0x5042 <conv_int+0xf4>
    5032:	10 95       	com	r17
    5034:	00 95       	com	r16
    5036:	f0 94       	com	r15
    5038:	e0 94       	com	r14
    503a:	e1 1c       	adc	r14, r1
    503c:	f1 1c       	adc	r15, r1
    503e:	01 1d       	adc	r16, r1
    5040:	11 1d       	adc	r17, r1
    5042:	c5 01       	movw	r24, r10
    5044:	b8 01       	movw	r22, r16
    5046:	a7 01       	movw	r20, r14
    5048:	2d 2d       	mov	r18, r13
    504a:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <putval>
    504e:	81 e0       	ldi	r24, 0x01	; 1
    5050:	01 c0       	rjmp	.+2      	; 0x5054 <conv_int+0x106>
    5052:	80 e0       	ldi	r24, 0x00	; 0
    5054:	cd b7       	in	r28, 0x3d	; 61
    5056:	de b7       	in	r29, 0x3e	; 62
    5058:	ea e0       	ldi	r30, 0x0A	; 10
    505a:	0c 94 1f 25 	jmp	0x4a3e	; 0x4a3e <__epilogue_restores__+0x10>

0000505e <conv_brk>:
    505e:	a0 e2       	ldi	r26, 0x20	; 32
    5060:	b0 e0       	ldi	r27, 0x00	; 0
    5062:	e5 e3       	ldi	r30, 0x35	; 53
    5064:	f8 e2       	ldi	r31, 0x28	; 40
    5066:	0c 94 ff 24 	jmp	0x49fe	; 0x49fe <__prologue_saves__+0x8>
    506a:	6c 01       	movw	r12, r24
    506c:	a6 2e       	mov	r10, r22
    506e:	8a 01       	movw	r16, r20
    5070:	79 01       	movw	r14, r18
    5072:	fe 01       	movw	r30, r28
    5074:	31 96       	adiw	r30, 0x01	; 1
    5076:	80 e2       	ldi	r24, 0x20	; 32
    5078:	df 01       	movw	r26, r30
    507a:	1d 92       	st	X+, r1
    507c:	8a 95       	dec	r24
    507e:	e9 f7       	brne	.-6      	; 0x507a <conv_brk+0x1c>
    5080:	70 e0       	ldi	r23, 0x00	; 0
    5082:	30 e0       	ldi	r19, 0x00	; 0
    5084:	60 e0       	ldi	r22, 0x00	; 0
    5086:	40 e0       	ldi	r20, 0x00	; 0
    5088:	50 e0       	ldi	r21, 0x00	; 0
    508a:	4f 01       	movw	r8, r30
    508c:	a1 e0       	ldi	r26, 0x01	; 1
    508e:	b0 e0       	ldi	r27, 0x00	; 0
    5090:	f6 01       	movw	r30, r12
    5092:	83 81       	ldd	r24, Z+3	; 0x03
    5094:	f7 01       	movw	r30, r14
    5096:	83 fd       	sbrc	r24, 3
    5098:	25 91       	lpm	r18, Z+
    509a:	83 ff       	sbrs	r24, 3
    509c:	21 91       	ld	r18, Z+
    509e:	7f 01       	movw	r14, r30
    50a0:	22 23       	and	r18, r18
    50a2:	09 f4       	brne	.+2      	; 0x50a6 <conv_brk+0x48>
    50a4:	7e c0       	rjmp	.+252    	; 0x51a2 <conv_brk+0x144>
    50a6:	2e 35       	cpi	r18, 0x5E	; 94
    50a8:	19 f4       	brne	.+6      	; 0x50b0 <conv_brk+0x52>
    50aa:	41 15       	cp	r20, r1
    50ac:	51 05       	cpc	r21, r1
    50ae:	69 f1       	breq	.+90     	; 0x510a <conv_brk+0xac>
    50b0:	87 2f       	mov	r24, r23
    50b2:	90 e0       	ldi	r25, 0x00	; 0
    50b4:	84 17       	cp	r24, r20
    50b6:	95 07       	cpc	r25, r21
    50b8:	44 f4       	brge	.+16     	; 0x50ca <conv_brk+0x6c>
    50ba:	2d 35       	cpi	r18, 0x5D	; 93
    50bc:	51 f1       	breq	.+84     	; 0x5112 <conv_brk+0xb4>
    50be:	2d 32       	cpi	r18, 0x2D	; 45
    50c0:	21 f4       	brne	.+8      	; 0x50ca <conv_brk+0x6c>
    50c2:	33 23       	and	r19, r19
    50c4:	29 f4       	brne	.+10     	; 0x50d0 <conv_brk+0x72>
    50c6:	31 e0       	ldi	r19, 0x01	; 1
    50c8:	21 c0       	rjmp	.+66     	; 0x510c <conv_brk+0xae>
    50ca:	33 23       	and	r19, r19
    50cc:	09 f4       	brne	.+2      	; 0x50d0 <conv_brk+0x72>
    50ce:	62 2f       	mov	r22, r18
    50d0:	32 2f       	mov	r19, r18
    50d2:	83 2f       	mov	r24, r19
    50d4:	86 95       	lsr	r24
    50d6:	86 95       	lsr	r24
    50d8:	86 95       	lsr	r24
    50da:	f4 01       	movw	r30, r8
    50dc:	e8 0f       	add	r30, r24
    50de:	f1 1d       	adc	r31, r1
    50e0:	83 2f       	mov	r24, r19
    50e2:	87 70       	andi	r24, 0x07	; 7
    50e4:	3d 01       	movw	r6, r26
    50e6:	02 c0       	rjmp	.+4      	; 0x50ec <conv_brk+0x8e>
    50e8:	66 0c       	add	r6, r6
    50ea:	77 1c       	adc	r7, r7
    50ec:	8a 95       	dec	r24
    50ee:	e2 f7       	brpl	.-8      	; 0x50e8 <conv_brk+0x8a>
    50f0:	20 81       	ld	r18, Z
    50f2:	26 29       	or	r18, r6
    50f4:	20 83       	st	Z, r18
    50f6:	36 17       	cp	r19, r22
    50f8:	11 f4       	brne	.+4      	; 0x50fe <conv_brk+0xa0>
    50fa:	30 e0       	ldi	r19, 0x00	; 0
    50fc:	07 c0       	rjmp	.+14     	; 0x510c <conv_brk+0xae>
    50fe:	36 17       	cp	r19, r22
    5100:	10 f4       	brcc	.+4      	; 0x5106 <conv_brk+0xa8>
    5102:	3f 5f       	subi	r19, 0xFF	; 255
    5104:	e6 cf       	rjmp	.-52     	; 0x50d2 <conv_brk+0x74>
    5106:	31 50       	subi	r19, 0x01	; 1
    5108:	e4 cf       	rjmp	.-56     	; 0x50d2 <conv_brk+0x74>
    510a:	71 e0       	ldi	r23, 0x01	; 1
    510c:	4f 5f       	subi	r20, 0xFF	; 255
    510e:	5f 4f       	sbci	r21, 0xFF	; 255
    5110:	bf cf       	rjmp	.-130    	; 0x5090 <conv_brk+0x32>
    5112:	33 23       	and	r19, r19
    5114:	19 f0       	breq	.+6      	; 0x511c <conv_brk+0xbe>
    5116:	8e 81       	ldd	r24, Y+6	; 0x06
    5118:	80 62       	ori	r24, 0x20	; 32
    511a:	8e 83       	std	Y+6, r24	; 0x06
    511c:	77 23       	and	r23, r23
    511e:	59 f0       	breq	.+22     	; 0x5136 <conv_brk+0xd8>
    5120:	fe 01       	movw	r30, r28
    5122:	31 96       	adiw	r30, 0x01	; 1
    5124:	9e 01       	movw	r18, r28
    5126:	2f 5d       	subi	r18, 0xDF	; 223
    5128:	3f 4f       	sbci	r19, 0xFF	; 255
    512a:	80 81       	ld	r24, Z
    512c:	80 95       	com	r24
    512e:	81 93       	st	Z+, r24
    5130:	e2 17       	cp	r30, r18
    5132:	f3 07       	cpc	r31, r19
    5134:	d1 f7       	brne	.-12     	; 0x512a <conv_brk+0xcc>
    5136:	bb 24       	eor	r11, r11
    5138:	b3 94       	inc	r11
    513a:	4e 01       	movw	r8, r28
    513c:	08 94       	sec
    513e:	81 1c       	adc	r8, r1
    5140:	91 1c       	adc	r9, r1
    5142:	c6 01       	movw	r24, r12
    5144:	0e 94 12 2a 	call	0x5424	; 0x5424 <fgetc>
    5148:	ac 01       	movw	r20, r24
    514a:	97 fd       	sbrc	r25, 7
    514c:	22 c0       	rjmp	.+68     	; 0x5192 <conv_brk+0x134>
    514e:	86 95       	lsr	r24
    5150:	86 95       	lsr	r24
    5152:	86 95       	lsr	r24
    5154:	f4 01       	movw	r30, r8
    5156:	e8 0f       	add	r30, r24
    5158:	f1 1d       	adc	r31, r1
    515a:	80 81       	ld	r24, Z
    515c:	90 e0       	ldi	r25, 0x00	; 0
    515e:	9a 01       	movw	r18, r20
    5160:	27 70       	andi	r18, 0x07	; 7
    5162:	30 70       	andi	r19, 0x00	; 0
    5164:	02 c0       	rjmp	.+4      	; 0x516a <conv_brk+0x10c>
    5166:	95 95       	asr	r25
    5168:	87 95       	ror	r24
    516a:	2a 95       	dec	r18
    516c:	e2 f7       	brpl	.-8      	; 0x5166 <conv_brk+0x108>
    516e:	80 fd       	sbrc	r24, 0
    5170:	05 c0       	rjmp	.+10     	; 0x517c <conv_brk+0x11e>
    5172:	ca 01       	movw	r24, r20
    5174:	b6 01       	movw	r22, r12
    5176:	0e 94 80 2a 	call	0x5500	; 0x5500 <ungetc>
    517a:	0b c0       	rjmp	.+22     	; 0x5192 <conv_brk+0x134>
    517c:	01 15       	cp	r16, r1
    517e:	11 05       	cpc	r17, r1
    5180:	19 f0       	breq	.+6      	; 0x5188 <conv_brk+0x12a>
    5182:	d8 01       	movw	r26, r16
    5184:	4d 93       	st	X+, r20
    5186:	8d 01       	movw	r16, r26
    5188:	aa 94       	dec	r10
    518a:	bb 24       	eor	r11, r11
    518c:	aa 20       	and	r10, r10
    518e:	c9 f6       	brne	.-78     	; 0x5142 <conv_brk+0xe4>
    5190:	02 c0       	rjmp	.+4      	; 0x5196 <conv_brk+0x138>
    5192:	bb 20       	and	r11, r11
    5194:	31 f4       	brne	.+12     	; 0x51a2 <conv_brk+0x144>
    5196:	01 15       	cp	r16, r1
    5198:	11 05       	cpc	r17, r1
    519a:	29 f0       	breq	.+10     	; 0x51a6 <conv_brk+0x148>
    519c:	f8 01       	movw	r30, r16
    519e:	10 82       	st	Z, r1
    51a0:	02 c0       	rjmp	.+4      	; 0x51a6 <conv_brk+0x148>
    51a2:	ee 24       	eor	r14, r14
    51a4:	ff 24       	eor	r15, r15
    51a6:	c7 01       	movw	r24, r14
    51a8:	a0 96       	adiw	r28, 0x20	; 32
    51aa:	ee e0       	ldi	r30, 0x0E	; 14
    51ac:	0c 94 1b 25 	jmp	0x4a36	; 0x4a36 <__epilogue_restores__+0x8>

000051b0 <vfscanf>:
    51b0:	a0 e0       	ldi	r26, 0x00	; 0
    51b2:	b0 e0       	ldi	r27, 0x00	; 0
    51b4:	ee ed       	ldi	r30, 0xDE	; 222
    51b6:	f8 e2       	ldi	r31, 0x28	; 40
    51b8:	0c 94 ff 24 	jmp	0x49fe	; 0x49fe <__prologue_saves__+0x8>
    51bc:	5c 01       	movw	r10, r24
    51be:	6b 01       	movw	r12, r22
    51c0:	3a 01       	movw	r6, r20
    51c2:	fc 01       	movw	r30, r24
    51c4:	17 82       	std	Z+7, r1	; 0x07
    51c6:	16 82       	std	Z+6, r1	; 0x06
    51c8:	88 24       	eor	r8, r8
    51ca:	ea c0       	rjmp	.+468    	; 0x53a0 <vfscanf+0x1f0>
    51cc:	81 2f       	mov	r24, r17
    51ce:	90 e0       	ldi	r25, 0x00	; 0
    51d0:	0e 94 e9 29 	call	0x53d2	; 0x53d2 <isspace>
    51d4:	89 2b       	or	r24, r25
    51d6:	21 f0       	breq	.+8      	; 0x51e0 <vfscanf+0x30>
    51d8:	c5 01       	movw	r24, r10
    51da:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <skip_spaces>
    51de:	e0 c0       	rjmp	.+448    	; 0x53a0 <vfscanf+0x1f0>
    51e0:	15 32       	cpi	r17, 0x25	; 37
    51e2:	49 f4       	brne	.+18     	; 0x51f6 <vfscanf+0x46>
    51e4:	f6 01       	movw	r30, r12
    51e6:	f3 fc       	sbrc	r15, 3
    51e8:	65 91       	lpm	r22, Z+
    51ea:	f3 fe       	sbrs	r15, 3
    51ec:	61 91       	ld	r22, Z+
    51ee:	6f 01       	movw	r12, r30
    51f0:	65 32       	cpi	r22, 0x25	; 37
    51f2:	69 f4       	brne	.+26     	; 0x520e <vfscanf+0x5e>
    51f4:	15 e2       	ldi	r17, 0x25	; 37
    51f6:	c5 01       	movw	r24, r10
    51f8:	0e 94 12 2a 	call	0x5424	; 0x5424 <fgetc>
    51fc:	97 fd       	sbrc	r25, 7
    51fe:	dc c0       	rjmp	.+440    	; 0x53b8 <vfscanf+0x208>
    5200:	18 17       	cp	r17, r24
    5202:	09 f4       	brne	.+2      	; 0x5206 <vfscanf+0x56>
    5204:	cd c0       	rjmp	.+410    	; 0x53a0 <vfscanf+0x1f0>
    5206:	b5 01       	movw	r22, r10
    5208:	0e 94 80 2a 	call	0x5500	; 0x5500 <ungetc>
    520c:	da c0       	rjmp	.+436    	; 0x53c2 <vfscanf+0x212>
    520e:	6a 32       	cpi	r22, 0x2A	; 42
    5210:	19 f0       	breq	.+6      	; 0x5218 <vfscanf+0x68>
    5212:	16 2f       	mov	r17, r22
    5214:	00 e0       	ldi	r16, 0x00	; 0
    5216:	06 c0       	rjmp	.+12     	; 0x5224 <vfscanf+0x74>
    5218:	f3 fc       	sbrc	r15, 3
    521a:	15 91       	lpm	r17, Z+
    521c:	f3 fe       	sbrs	r15, 3
    521e:	11 91       	ld	r17, Z+
    5220:	6f 01       	movw	r12, r30
    5222:	01 e0       	ldi	r16, 0x01	; 1
    5224:	99 24       	eor	r9, r9
    5226:	0f c0       	rjmp	.+30     	; 0x5246 <vfscanf+0x96>
    5228:	02 60       	ori	r16, 0x02	; 2
    522a:	69 2d       	mov	r22, r9
    522c:	70 e0       	ldi	r23, 0x00	; 0
    522e:	80 e0       	ldi	r24, 0x00	; 0
    5230:	90 e0       	ldi	r25, 0x00	; 0
    5232:	40 e2       	ldi	r20, 0x20	; 32
    5234:	0e 94 60 27 	call	0x4ec0	; 0x4ec0 <mulacc>
    5238:	96 2e       	mov	r9, r22
    523a:	f6 01       	movw	r30, r12
    523c:	f3 fc       	sbrc	r15, 3
    523e:	15 91       	lpm	r17, Z+
    5240:	f3 fe       	sbrs	r15, 3
    5242:	11 91       	ld	r17, Z+
    5244:	6f 01       	movw	r12, r30
    5246:	21 2f       	mov	r18, r17
    5248:	20 53       	subi	r18, 0x30	; 48
    524a:	2a 30       	cpi	r18, 0x0A	; 10
    524c:	68 f3       	brcs	.-38     	; 0x5228 <vfscanf+0x78>
    524e:	01 fd       	sbrc	r16, 1
    5250:	03 c0       	rjmp	.+6      	; 0x5258 <vfscanf+0xa8>
    5252:	99 24       	eor	r9, r9
    5254:	9a 94       	dec	r9
    5256:	03 c0       	rjmp	.+6      	; 0x525e <vfscanf+0xae>
    5258:	99 20       	and	r9, r9
    525a:	09 f4       	brne	.+2      	; 0x525e <vfscanf+0xae>
    525c:	b2 c0       	rjmp	.+356    	; 0x53c2 <vfscanf+0x212>
    525e:	18 36       	cpi	r17, 0x68	; 104
    5260:	21 f0       	breq	.+8      	; 0x526a <vfscanf+0xba>
    5262:	1c 36       	cpi	r17, 0x6C	; 108
    5264:	99 f4       	brne	.+38     	; 0x528c <vfscanf+0xdc>
    5266:	f6 01       	movw	r30, r12
    5268:	0b c0       	rjmp	.+22     	; 0x5280 <vfscanf+0xd0>
    526a:	f6 01       	movw	r30, r12
    526c:	f3 fc       	sbrc	r15, 3
    526e:	65 91       	lpm	r22, Z+
    5270:	f3 fe       	sbrs	r15, 3
    5272:	61 91       	ld	r22, Z+
    5274:	68 36       	cpi	r22, 0x68	; 104
    5276:	19 f0       	breq	.+6      	; 0x527e <vfscanf+0xce>
    5278:	6f 01       	movw	r12, r30
    527a:	16 2f       	mov	r17, r22
    527c:	07 c0       	rjmp	.+14     	; 0x528c <vfscanf+0xdc>
    527e:	08 60       	ori	r16, 0x08	; 8
    5280:	04 60       	ori	r16, 0x04	; 4
    5282:	f3 fc       	sbrc	r15, 3
    5284:	15 91       	lpm	r17, Z+
    5286:	f3 fe       	sbrs	r15, 3
    5288:	11 91       	ld	r17, Z+
    528a:	6f 01       	movw	r12, r30
    528c:	11 23       	and	r17, r17
    528e:	09 f4       	brne	.+2      	; 0x5292 <vfscanf+0xe2>
    5290:	98 c0       	rjmp	.+304    	; 0x53c2 <vfscanf+0x212>
    5292:	84 e5       	ldi	r24, 0x54	; 84
    5294:	90 e0       	ldi	r25, 0x00	; 0
    5296:	61 2f       	mov	r22, r17
    5298:	70 e0       	ldi	r23, 0x00	; 0
    529a:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <strchr_P>
    529e:	89 2b       	or	r24, r25
    52a0:	09 f4       	brne	.+2      	; 0x52a4 <vfscanf+0xf4>
    52a2:	8f c0       	rjmp	.+286    	; 0x53c2 <vfscanf+0x212>
    52a4:	80 2f       	mov	r24, r16
    52a6:	00 ff       	sbrs	r16, 0
    52a8:	03 c0       	rjmp	.+6      	; 0x52b0 <vfscanf+0x100>
    52aa:	ee 24       	eor	r14, r14
    52ac:	ff 24       	eor	r15, r15
    52ae:	07 c0       	rjmp	.+14     	; 0x52be <vfscanf+0x10e>
    52b0:	f3 01       	movw	r30, r6
    52b2:	e0 80       	ld	r14, Z
    52b4:	f1 80       	ldd	r15, Z+1	; 0x01
    52b6:	22 e0       	ldi	r18, 0x02	; 2
    52b8:	30 e0       	ldi	r19, 0x00	; 0
    52ba:	62 0e       	add	r6, r18
    52bc:	73 1e       	adc	r7, r19
    52be:	1e 36       	cpi	r17, 0x6E	; 110
    52c0:	51 f4       	brne	.+20     	; 0x52d6 <vfscanf+0x126>
    52c2:	f5 01       	movw	r30, r10
    52c4:	46 81       	ldd	r20, Z+6	; 0x06
    52c6:	57 81       	ldd	r21, Z+7	; 0x07
    52c8:	60 e0       	ldi	r22, 0x00	; 0
    52ca:	70 e0       	ldi	r23, 0x00	; 0
    52cc:	c7 01       	movw	r24, r14
    52ce:	20 2f       	mov	r18, r16
    52d0:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <putval>
    52d4:	65 c0       	rjmp	.+202    	; 0x53a0 <vfscanf+0x1f0>
    52d6:	13 36       	cpi	r17, 0x63	; 99
    52d8:	91 f4       	brne	.+36     	; 0x52fe <vfscanf+0x14e>
    52da:	81 fd       	sbrc	r24, 1
    52dc:	02 c0       	rjmp	.+4      	; 0x52e2 <vfscanf+0x132>
    52de:	99 24       	eor	r9, r9
    52e0:	93 94       	inc	r9
    52e2:	c5 01       	movw	r24, r10
    52e4:	0e 94 12 2a 	call	0x5424	; 0x5424 <fgetc>
    52e8:	97 fd       	sbrc	r25, 7
    52ea:	66 c0       	rjmp	.+204    	; 0x53b8 <vfscanf+0x208>
    52ec:	e1 14       	cp	r14, r1
    52ee:	f1 04       	cpc	r15, r1
    52f0:	19 f0       	breq	.+6      	; 0x52f8 <vfscanf+0x148>
    52f2:	f7 01       	movw	r30, r14
    52f4:	81 93       	st	Z+, r24
    52f6:	7f 01       	movw	r14, r30
    52f8:	9a 94       	dec	r9
    52fa:	99 f7       	brne	.-26     	; 0x52e2 <vfscanf+0x132>
    52fc:	4f c0       	rjmp	.+158    	; 0x539c <vfscanf+0x1ec>
    52fe:	1b 35       	cpi	r17, 0x5B	; 91
    5300:	59 f4       	brne	.+22     	; 0x5318 <vfscanf+0x168>
    5302:	c5 01       	movw	r24, r10
    5304:	69 2d       	mov	r22, r9
    5306:	a7 01       	movw	r20, r14
    5308:	96 01       	movw	r18, r12
    530a:	0e 94 2f 28 	call	0x505e	; 0x505e <conv_brk>
    530e:	6c 01       	movw	r12, r24
    5310:	00 97       	sbiw	r24, 0x00	; 0
    5312:	09 f0       	breq	.+2      	; 0x5316 <vfscanf+0x166>
    5314:	43 c0       	rjmp	.+134    	; 0x539c <vfscanf+0x1ec>
    5316:	3d c0       	rjmp	.+122    	; 0x5392 <vfscanf+0x1e2>
    5318:	c5 01       	movw	r24, r10
    531a:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <skip_spaces>
    531e:	97 fd       	sbrc	r25, 7
    5320:	4b c0       	rjmp	.+150    	; 0x53b8 <vfscanf+0x208>
    5322:	1f 36       	cpi	r17, 0x6F	; 111
    5324:	59 f1       	breq	.+86     	; 0x537c <vfscanf+0x1cc>
    5326:	10 37       	cpi	r17, 0x70	; 112
    5328:	28 f4       	brcc	.+10     	; 0x5334 <vfscanf+0x184>
    532a:	14 36       	cpi	r17, 0x64	; 100
    532c:	29 f1       	breq	.+74     	; 0x5378 <vfscanf+0x1c8>
    532e:	19 36       	cpi	r17, 0x69	; 105
    5330:	39 f5       	brne	.+78     	; 0x5380 <vfscanf+0x1d0>
    5332:	27 c0       	rjmp	.+78     	; 0x5382 <vfscanf+0x1d2>
    5334:	13 37       	cpi	r17, 0x73	; 115
    5336:	19 f0       	breq	.+6      	; 0x533e <vfscanf+0x18e>
    5338:	15 37       	cpi	r17, 0x75	; 117
    533a:	11 f5       	brne	.+68     	; 0x5380 <vfscanf+0x1d0>
    533c:	1d c0       	rjmp	.+58     	; 0x5378 <vfscanf+0x1c8>
    533e:	c5 01       	movw	r24, r10
    5340:	0e 94 12 2a 	call	0x5424	; 0x5424 <fgetc>
    5344:	ec 01       	movw	r28, r24
    5346:	97 fd       	sbrc	r25, 7
    5348:	11 c0       	rjmp	.+34     	; 0x536c <vfscanf+0x1bc>
    534a:	0e 94 e9 29 	call	0x53d2	; 0x53d2 <isspace>
    534e:	89 2b       	or	r24, r25
    5350:	29 f0       	breq	.+10     	; 0x535c <vfscanf+0x1ac>
    5352:	ce 01       	movw	r24, r28
    5354:	b5 01       	movw	r22, r10
    5356:	0e 94 80 2a 	call	0x5500	; 0x5500 <ungetc>
    535a:	08 c0       	rjmp	.+16     	; 0x536c <vfscanf+0x1bc>
    535c:	e1 14       	cp	r14, r1
    535e:	f1 04       	cpc	r15, r1
    5360:	19 f0       	breq	.+6      	; 0x5368 <vfscanf+0x1b8>
    5362:	f7 01       	movw	r30, r14
    5364:	c1 93       	st	Z+, r28
    5366:	7f 01       	movw	r14, r30
    5368:	9a 94       	dec	r9
    536a:	49 f7       	brne	.-46     	; 0x533e <vfscanf+0x18e>
    536c:	e1 14       	cp	r14, r1
    536e:	f1 04       	cpc	r15, r1
    5370:	a9 f0       	breq	.+42     	; 0x539c <vfscanf+0x1ec>
    5372:	f7 01       	movw	r30, r14
    5374:	10 82       	st	Z, r1
    5376:	12 c0       	rjmp	.+36     	; 0x539c <vfscanf+0x1ec>
    5378:	00 62       	ori	r16, 0x20	; 32
    537a:	03 c0       	rjmp	.+6      	; 0x5382 <vfscanf+0x1d2>
    537c:	00 61       	ori	r16, 0x10	; 16
    537e:	01 c0       	rjmp	.+2      	; 0x5382 <vfscanf+0x1d2>
    5380:	00 64       	ori	r16, 0x40	; 64
    5382:	c5 01       	movw	r24, r10
    5384:	69 2d       	mov	r22, r9
    5386:	a7 01       	movw	r20, r14
    5388:	20 2f       	mov	r18, r16
    538a:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <conv_int>
    538e:	88 23       	and	r24, r24
    5390:	29 f4       	brne	.+10     	; 0x539c <vfscanf+0x1ec>
    5392:	f5 01       	movw	r30, r10
    5394:	83 81       	ldd	r24, Z+3	; 0x03
    5396:	80 73       	andi	r24, 0x30	; 48
    5398:	79 f4       	brne	.+30     	; 0x53b8 <vfscanf+0x208>
    539a:	13 c0       	rjmp	.+38     	; 0x53c2 <vfscanf+0x212>
    539c:	00 ff       	sbrs	r16, 0
    539e:	83 94       	inc	r8
    53a0:	f5 01       	movw	r30, r10
    53a2:	f3 80       	ldd	r15, Z+3	; 0x03
    53a4:	f6 01       	movw	r30, r12
    53a6:	f3 fc       	sbrc	r15, 3
    53a8:	15 91       	lpm	r17, Z+
    53aa:	f3 fe       	sbrs	r15, 3
    53ac:	11 91       	ld	r17, Z+
    53ae:	6f 01       	movw	r12, r30
    53b0:	11 23       	and	r17, r17
    53b2:	09 f0       	breq	.+2      	; 0x53b6 <vfscanf+0x206>
    53b4:	0b cf       	rjmp	.-490    	; 0x51cc <vfscanf+0x1c>
    53b6:	05 c0       	rjmp	.+10     	; 0x53c2 <vfscanf+0x212>
    53b8:	88 20       	and	r8, r8
    53ba:	19 f4       	brne	.+6      	; 0x53c2 <vfscanf+0x212>
    53bc:	2f ef       	ldi	r18, 0xFF	; 255
    53be:	3f ef       	ldi	r19, 0xFF	; 255
    53c0:	02 c0       	rjmp	.+4      	; 0x53c6 <vfscanf+0x216>
    53c2:	28 2d       	mov	r18, r8
    53c4:	30 e0       	ldi	r19, 0x00	; 0
    53c6:	c9 01       	movw	r24, r18
    53c8:	cd b7       	in	r28, 0x3d	; 61
    53ca:	de b7       	in	r29, 0x3e	; 62
    53cc:	ee e0       	ldi	r30, 0x0E	; 14
    53ce:	0c 94 1b 25 	jmp	0x4a36	; 0x4a36 <__epilogue_restores__+0x8>

000053d2 <isspace>:
    53d2:	91 11       	cpse	r25, r1
    53d4:	54 c1       	rjmp	.+680    	; 0x567e <__ctype_isfalse>
    53d6:	80 32       	cpi	r24, 0x20	; 32
    53d8:	19 f0       	breq	.+6      	; 0x53e0 <isspace+0xe>
    53da:	89 50       	subi	r24, 0x09	; 9
    53dc:	85 50       	subi	r24, 0x05	; 5
    53de:	d0 f7       	brcc	.-12     	; 0x53d4 <isspace+0x2>
    53e0:	08 95       	ret

000053e2 <strchr_P>:
    53e2:	fc 01       	movw	r30, r24
    53e4:	05 90       	lpm	r0, Z+
    53e6:	06 16       	cp	r0, r22
    53e8:	21 f0       	breq	.+8      	; 0x53f2 <strchr_P+0x10>
    53ea:	00 20       	and	r0, r0
    53ec:	d9 f7       	brne	.-10     	; 0x53e4 <strchr_P+0x2>
    53ee:	c0 01       	movw	r24, r0
    53f0:	08 95       	ret
    53f2:	31 97       	sbiw	r30, 0x01	; 1
    53f4:	cf 01       	movw	r24, r30
    53f6:	08 95       	ret

000053f8 <strnlen_P>:
    53f8:	fc 01       	movw	r30, r24
    53fa:	05 90       	lpm	r0, Z+
    53fc:	61 50       	subi	r22, 0x01	; 1
    53fe:	70 40       	sbci	r23, 0x00	; 0
    5400:	01 10       	cpse	r0, r1
    5402:	d8 f7       	brcc	.-10     	; 0x53fa <strnlen_P+0x2>
    5404:	80 95       	com	r24
    5406:	90 95       	com	r25
    5408:	8e 0f       	add	r24, r30
    540a:	9f 1f       	adc	r25, r31
    540c:	08 95       	ret

0000540e <strnlen>:
    540e:	fc 01       	movw	r30, r24
    5410:	61 50       	subi	r22, 0x01	; 1
    5412:	70 40       	sbci	r23, 0x00	; 0
    5414:	01 90       	ld	r0, Z+
    5416:	01 10       	cpse	r0, r1
    5418:	d8 f7       	brcc	.-10     	; 0x5410 <strnlen+0x2>
    541a:	80 95       	com	r24
    541c:	90 95       	com	r25
    541e:	8e 0f       	add	r24, r30
    5420:	9f 1f       	adc	r25, r31
    5422:	08 95       	ret

00005424 <fgetc>:
    5424:	cf 93       	push	r28
    5426:	df 93       	push	r29
    5428:	ec 01       	movw	r28, r24
    542a:	4b 81       	ldd	r20, Y+3	; 0x03
    542c:	40 ff       	sbrs	r20, 0
    542e:	1a c0       	rjmp	.+52     	; 0x5464 <fgetc+0x40>
    5430:	46 ff       	sbrs	r20, 6
    5432:	0a c0       	rjmp	.+20     	; 0x5448 <fgetc+0x24>
    5434:	4f 7b       	andi	r20, 0xBF	; 191
    5436:	4b 83       	std	Y+3, r20	; 0x03
    5438:	8e 81       	ldd	r24, Y+6	; 0x06
    543a:	9f 81       	ldd	r25, Y+7	; 0x07
    543c:	01 96       	adiw	r24, 0x01	; 1
    543e:	9f 83       	std	Y+7, r25	; 0x07
    5440:	8e 83       	std	Y+6, r24	; 0x06
    5442:	8a 81       	ldd	r24, Y+2	; 0x02
    5444:	28 2f       	mov	r18, r24
    5446:	2b c0       	rjmp	.+86     	; 0x549e <fgetc+0x7a>
    5448:	42 ff       	sbrs	r20, 2
    544a:	13 c0       	rjmp	.+38     	; 0x5472 <fgetc+0x4e>
    544c:	e8 81       	ld	r30, Y
    544e:	f9 81       	ldd	r31, Y+1	; 0x01
    5450:	80 81       	ld	r24, Z
    5452:	28 2f       	mov	r18, r24
    5454:	33 27       	eor	r19, r19
    5456:	27 fd       	sbrc	r18, 7
    5458:	30 95       	com	r19
    545a:	21 15       	cp	r18, r1
    545c:	31 05       	cpc	r19, r1
    545e:	29 f4       	brne	.+10     	; 0x546a <fgetc+0x46>
    5460:	40 62       	ori	r20, 0x20	; 32
    5462:	4b 83       	std	Y+3, r20	; 0x03
    5464:	2f ef       	ldi	r18, 0xFF	; 255
    5466:	3f ef       	ldi	r19, 0xFF	; 255
    5468:	1b c0       	rjmp	.+54     	; 0x54a0 <fgetc+0x7c>
    546a:	31 96       	adiw	r30, 0x01	; 1
    546c:	f9 83       	std	Y+1, r31	; 0x01
    546e:	e8 83       	st	Y, r30
    5470:	11 c0       	rjmp	.+34     	; 0x5494 <fgetc+0x70>
    5472:	ea 85       	ldd	r30, Y+10	; 0x0a
    5474:	fb 85       	ldd	r31, Y+11	; 0x0b
    5476:	ce 01       	movw	r24, r28
    5478:	09 95       	icall
    547a:	9c 01       	movw	r18, r24
    547c:	97 ff       	sbrs	r25, 7
    547e:	0a c0       	rjmp	.+20     	; 0x5494 <fgetc+0x70>
    5480:	9b 81       	ldd	r25, Y+3	; 0x03
    5482:	2f 5f       	subi	r18, 0xFF	; 255
    5484:	3f 4f       	sbci	r19, 0xFF	; 255
    5486:	11 f0       	breq	.+4      	; 0x548c <fgetc+0x68>
    5488:	80 e2       	ldi	r24, 0x20	; 32
    548a:	01 c0       	rjmp	.+2      	; 0x548e <fgetc+0x6a>
    548c:	80 e1       	ldi	r24, 0x10	; 16
    548e:	89 2b       	or	r24, r25
    5490:	8b 83       	std	Y+3, r24	; 0x03
    5492:	e8 cf       	rjmp	.-48     	; 0x5464 <fgetc+0x40>
    5494:	8e 81       	ldd	r24, Y+6	; 0x06
    5496:	9f 81       	ldd	r25, Y+7	; 0x07
    5498:	01 96       	adiw	r24, 0x01	; 1
    549a:	9f 83       	std	Y+7, r25	; 0x07
    549c:	8e 83       	std	Y+6, r24	; 0x06
    549e:	30 e0       	ldi	r19, 0x00	; 0
    54a0:	c9 01       	movw	r24, r18
    54a2:	df 91       	pop	r29
    54a4:	cf 91       	pop	r28
    54a6:	08 95       	ret

000054a8 <fputc>:
    54a8:	0f 93       	push	r16
    54aa:	1f 93       	push	r17
    54ac:	cf 93       	push	r28
    54ae:	df 93       	push	r29
    54b0:	8c 01       	movw	r16, r24
    54b2:	eb 01       	movw	r28, r22
    54b4:	8b 81       	ldd	r24, Y+3	; 0x03
    54b6:	81 ff       	sbrs	r24, 1
    54b8:	1b c0       	rjmp	.+54     	; 0x54f0 <fputc+0x48>
    54ba:	82 ff       	sbrs	r24, 2
    54bc:	0d c0       	rjmp	.+26     	; 0x54d8 <fputc+0x30>
    54be:	2e 81       	ldd	r18, Y+6	; 0x06
    54c0:	3f 81       	ldd	r19, Y+7	; 0x07
    54c2:	8c 81       	ldd	r24, Y+4	; 0x04
    54c4:	9d 81       	ldd	r25, Y+5	; 0x05
    54c6:	28 17       	cp	r18, r24
    54c8:	39 07       	cpc	r19, r25
    54ca:	64 f4       	brge	.+24     	; 0x54e4 <fputc+0x3c>
    54cc:	e8 81       	ld	r30, Y
    54ce:	f9 81       	ldd	r31, Y+1	; 0x01
    54d0:	01 93       	st	Z+, r16
    54d2:	f9 83       	std	Y+1, r31	; 0x01
    54d4:	e8 83       	st	Y, r30
    54d6:	06 c0       	rjmp	.+12     	; 0x54e4 <fputc+0x3c>
    54d8:	e8 85       	ldd	r30, Y+8	; 0x08
    54da:	f9 85       	ldd	r31, Y+9	; 0x09
    54dc:	80 2f       	mov	r24, r16
    54de:	09 95       	icall
    54e0:	89 2b       	or	r24, r25
    54e2:	31 f4       	brne	.+12     	; 0x54f0 <fputc+0x48>
    54e4:	8e 81       	ldd	r24, Y+6	; 0x06
    54e6:	9f 81       	ldd	r25, Y+7	; 0x07
    54e8:	01 96       	adiw	r24, 0x01	; 1
    54ea:	9f 83       	std	Y+7, r25	; 0x07
    54ec:	8e 83       	std	Y+6, r24	; 0x06
    54ee:	02 c0       	rjmp	.+4      	; 0x54f4 <fputc+0x4c>
    54f0:	0f ef       	ldi	r16, 0xFF	; 255
    54f2:	1f ef       	ldi	r17, 0xFF	; 255
    54f4:	c8 01       	movw	r24, r16
    54f6:	df 91       	pop	r29
    54f8:	cf 91       	pop	r28
    54fa:	1f 91       	pop	r17
    54fc:	0f 91       	pop	r16
    54fe:	08 95       	ret

00005500 <ungetc>:
    5500:	9c 01       	movw	r18, r24
    5502:	fb 01       	movw	r30, r22
    5504:	83 81       	ldd	r24, Z+3	; 0x03
    5506:	80 ff       	sbrs	r24, 0
    5508:	11 c0       	rjmp	.+34     	; 0x552c <ungetc+0x2c>
    550a:	86 fd       	sbrc	r24, 6
    550c:	0f c0       	rjmp	.+30     	; 0x552c <ungetc+0x2c>
    550e:	9f ef       	ldi	r25, 0xFF	; 255
    5510:	2f 3f       	cpi	r18, 0xFF	; 255
    5512:	39 07       	cpc	r19, r25
    5514:	59 f0       	breq	.+22     	; 0x552c <ungetc+0x2c>
    5516:	22 83       	std	Z+2, r18	; 0x02
    5518:	80 64       	ori	r24, 0x40	; 64
    551a:	8f 7d       	andi	r24, 0xDF	; 223
    551c:	83 83       	std	Z+3, r24	; 0x03
    551e:	86 81       	ldd	r24, Z+6	; 0x06
    5520:	97 81       	ldd	r25, Z+7	; 0x07
    5522:	01 97       	sbiw	r24, 0x01	; 1
    5524:	97 83       	std	Z+7, r25	; 0x07
    5526:	86 83       	std	Z+6, r24	; 0x06
    5528:	30 e0       	ldi	r19, 0x00	; 0
    552a:	02 c0       	rjmp	.+4      	; 0x5530 <ungetc+0x30>
    552c:	2f ef       	ldi	r18, 0xFF	; 255
    552e:	3f ef       	ldi	r19, 0xFF	; 255
    5530:	c9 01       	movw	r24, r18
    5532:	08 95       	ret

00005534 <__ultoa_invert>:
    5534:	fa 01       	movw	r30, r20
    5536:	aa 27       	eor	r26, r26
    5538:	28 30       	cpi	r18, 0x08	; 8
    553a:	51 f1       	breq	.+84     	; 0x5590 <__ultoa_invert+0x5c>
    553c:	20 31       	cpi	r18, 0x10	; 16
    553e:	81 f1       	breq	.+96     	; 0x55a0 <__ultoa_invert+0x6c>
    5540:	e8 94       	clt
    5542:	6f 93       	push	r22
    5544:	6e 7f       	andi	r22, 0xFE	; 254
    5546:	6e 5f       	subi	r22, 0xFE	; 254
    5548:	7f 4f       	sbci	r23, 0xFF	; 255
    554a:	8f 4f       	sbci	r24, 0xFF	; 255
    554c:	9f 4f       	sbci	r25, 0xFF	; 255
    554e:	af 4f       	sbci	r26, 0xFF	; 255
    5550:	b1 e0       	ldi	r27, 0x01	; 1
    5552:	3e d0       	rcall	.+124    	; 0x55d0 <__ultoa_invert+0x9c>
    5554:	b4 e0       	ldi	r27, 0x04	; 4
    5556:	3c d0       	rcall	.+120    	; 0x55d0 <__ultoa_invert+0x9c>
    5558:	67 0f       	add	r22, r23
    555a:	78 1f       	adc	r23, r24
    555c:	89 1f       	adc	r24, r25
    555e:	9a 1f       	adc	r25, r26
    5560:	a1 1d       	adc	r26, r1
    5562:	68 0f       	add	r22, r24
    5564:	79 1f       	adc	r23, r25
    5566:	8a 1f       	adc	r24, r26
    5568:	91 1d       	adc	r25, r1
    556a:	a1 1d       	adc	r26, r1
    556c:	6a 0f       	add	r22, r26
    556e:	71 1d       	adc	r23, r1
    5570:	81 1d       	adc	r24, r1
    5572:	91 1d       	adc	r25, r1
    5574:	a1 1d       	adc	r26, r1
    5576:	20 d0       	rcall	.+64     	; 0x55b8 <__ultoa_invert+0x84>
    5578:	09 f4       	brne	.+2      	; 0x557c <__ultoa_invert+0x48>
    557a:	68 94       	set
    557c:	3f 91       	pop	r19
    557e:	2a e0       	ldi	r18, 0x0A	; 10
    5580:	26 9f       	mul	r18, r22
    5582:	11 24       	eor	r1, r1
    5584:	30 19       	sub	r19, r0
    5586:	30 5d       	subi	r19, 0xD0	; 208
    5588:	31 93       	st	Z+, r19
    558a:	de f6       	brtc	.-74     	; 0x5542 <__ultoa_invert+0xe>
    558c:	cf 01       	movw	r24, r30
    558e:	08 95       	ret
    5590:	46 2f       	mov	r20, r22
    5592:	47 70       	andi	r20, 0x07	; 7
    5594:	40 5d       	subi	r20, 0xD0	; 208
    5596:	41 93       	st	Z+, r20
    5598:	b3 e0       	ldi	r27, 0x03	; 3
    559a:	0f d0       	rcall	.+30     	; 0x55ba <__ultoa_invert+0x86>
    559c:	c9 f7       	brne	.-14     	; 0x5590 <__ultoa_invert+0x5c>
    559e:	f6 cf       	rjmp	.-20     	; 0x558c <__ultoa_invert+0x58>
    55a0:	46 2f       	mov	r20, r22
    55a2:	4f 70       	andi	r20, 0x0F	; 15
    55a4:	40 5d       	subi	r20, 0xD0	; 208
    55a6:	4a 33       	cpi	r20, 0x3A	; 58
    55a8:	18 f0       	brcs	.+6      	; 0x55b0 <__ultoa_invert+0x7c>
    55aa:	49 5d       	subi	r20, 0xD9	; 217
    55ac:	31 fd       	sbrc	r19, 1
    55ae:	40 52       	subi	r20, 0x20	; 32
    55b0:	41 93       	st	Z+, r20
    55b2:	02 d0       	rcall	.+4      	; 0x55b8 <__ultoa_invert+0x84>
    55b4:	a9 f7       	brne	.-22     	; 0x55a0 <__ultoa_invert+0x6c>
    55b6:	ea cf       	rjmp	.-44     	; 0x558c <__ultoa_invert+0x58>
    55b8:	b4 e0       	ldi	r27, 0x04	; 4
    55ba:	a6 95       	lsr	r26
    55bc:	97 95       	ror	r25
    55be:	87 95       	ror	r24
    55c0:	77 95       	ror	r23
    55c2:	67 95       	ror	r22
    55c4:	ba 95       	dec	r27
    55c6:	c9 f7       	brne	.-14     	; 0x55ba <__ultoa_invert+0x86>
    55c8:	00 97       	sbiw	r24, 0x00	; 0
    55ca:	61 05       	cpc	r22, r1
    55cc:	71 05       	cpc	r23, r1
    55ce:	08 95       	ret
    55d0:	9b 01       	movw	r18, r22
    55d2:	ac 01       	movw	r20, r24
    55d4:	0a 2e       	mov	r0, r26
    55d6:	06 94       	lsr	r0
    55d8:	57 95       	ror	r21
    55da:	47 95       	ror	r20
    55dc:	37 95       	ror	r19
    55de:	27 95       	ror	r18
    55e0:	ba 95       	dec	r27
    55e2:	c9 f7       	brne	.-14     	; 0x55d6 <__ultoa_invert+0xa2>
    55e4:	62 0f       	add	r22, r18
    55e6:	73 1f       	adc	r23, r19
    55e8:	84 1f       	adc	r24, r20
    55ea:	95 1f       	adc	r25, r21
    55ec:	a0 1d       	adc	r26, r0
    55ee:	08 95       	ret

000055f0 <__fp_mintl>:
    55f0:	88 23       	and	r24, r24
    55f2:	71 f4       	brne	.+28     	; 0x5610 <__fp_mintl+0x20>
    55f4:	77 23       	and	r23, r23
    55f6:	21 f0       	breq	.+8      	; 0x5600 <__fp_mintl+0x10>
    55f8:	98 50       	subi	r25, 0x08	; 8
    55fa:	87 2b       	or	r24, r23
    55fc:	76 2f       	mov	r23, r22
    55fe:	07 c0       	rjmp	.+14     	; 0x560e <__fp_mintl+0x1e>
    5600:	66 23       	and	r22, r22
    5602:	11 f4       	brne	.+4      	; 0x5608 <__fp_mintl+0x18>
    5604:	99 27       	eor	r25, r25
    5606:	0d c0       	rjmp	.+26     	; 0x5622 <__fp_mintl+0x32>
    5608:	90 51       	subi	r25, 0x10	; 16
    560a:	86 2b       	or	r24, r22
    560c:	70 e0       	ldi	r23, 0x00	; 0
    560e:	60 e0       	ldi	r22, 0x00	; 0
    5610:	2a f0       	brmi	.+10     	; 0x561c <__fp_mintl+0x2c>
    5612:	9a 95       	dec	r25
    5614:	66 0f       	add	r22, r22
    5616:	77 1f       	adc	r23, r23
    5618:	88 1f       	adc	r24, r24
    561a:	da f7       	brpl	.-10     	; 0x5612 <__fp_mintl+0x22>
    561c:	88 0f       	add	r24, r24
    561e:	96 95       	lsr	r25
    5620:	87 95       	ror	r24
    5622:	97 f9       	bld	r25, 7
    5624:	08 95       	ret

00005626 <__fp_mpack>:
    5626:	9f 3f       	cpi	r25, 0xFF	; 255
    5628:	31 f0       	breq	.+12     	; 0x5636 <__fp_mpack_finite+0xc>

0000562a <__fp_mpack_finite>:
    562a:	91 50       	subi	r25, 0x01	; 1
    562c:	20 f4       	brcc	.+8      	; 0x5636 <__fp_mpack_finite+0xc>
    562e:	87 95       	ror	r24
    5630:	77 95       	ror	r23
    5632:	67 95       	ror	r22
    5634:	b7 95       	ror	r27
    5636:	88 0f       	add	r24, r24
    5638:	91 1d       	adc	r25, r1
    563a:	96 95       	lsr	r25
    563c:	87 95       	ror	r24
    563e:	97 f9       	bld	r25, 7
    5640:	08 95       	ret

00005642 <__fp_trunc>:
    5642:	28 d0       	rcall	.+80     	; 0x5694 <__fp_splitA>
    5644:	a0 f0       	brcs	.+40     	; 0x566e <__fp_trunc+0x2c>
    5646:	be e7       	ldi	r27, 0x7E	; 126
    5648:	b9 17       	cp	r27, r25
    564a:	88 f4       	brcc	.+34     	; 0x566e <__fp_trunc+0x2c>
    564c:	bb 27       	eor	r27, r27
    564e:	9f 38       	cpi	r25, 0x8F	; 143
    5650:	60 f4       	brcc	.+24     	; 0x566a <__fp_trunc+0x28>
    5652:	16 16       	cp	r1, r22
    5654:	b1 1d       	adc	r27, r1
    5656:	67 2f       	mov	r22, r23
    5658:	78 2f       	mov	r23, r24
    565a:	88 27       	eor	r24, r24
    565c:	98 5f       	subi	r25, 0xF8	; 248
    565e:	f7 cf       	rjmp	.-18     	; 0x564e <__fp_trunc+0xc>
    5660:	86 95       	lsr	r24
    5662:	77 95       	ror	r23
    5664:	67 95       	ror	r22
    5666:	b1 1d       	adc	r27, r1
    5668:	93 95       	inc	r25
    566a:	96 39       	cpi	r25, 0x96	; 150
    566c:	c8 f3       	brcs	.-14     	; 0x5660 <__fp_trunc+0x1e>
    566e:	08 95       	ret

00005670 <__fp_zero>:
    5670:	e8 94       	clt

00005672 <__fp_szero>:
    5672:	bb 27       	eor	r27, r27
    5674:	66 27       	eor	r22, r22
    5676:	77 27       	eor	r23, r23
    5678:	cb 01       	movw	r24, r22
    567a:	97 f9       	bld	r25, 7
    567c:	08 95       	ret

0000567e <__ctype_isfalse>:
    567e:	99 27       	eor	r25, r25
    5680:	88 27       	eor	r24, r24

00005682 <__ctype_istrue>:
    5682:	08 95       	ret

00005684 <__fp_split3>:
    5684:	57 fd       	sbrc	r21, 7
    5686:	90 58       	subi	r25, 0x80	; 128
    5688:	44 0f       	add	r20, r20
    568a:	55 1f       	adc	r21, r21
    568c:	59 f0       	breq	.+22     	; 0x56a4 <__fp_splitA+0x10>
    568e:	5f 3f       	cpi	r21, 0xFF	; 255
    5690:	71 f0       	breq	.+28     	; 0x56ae <__fp_splitA+0x1a>
    5692:	47 95       	ror	r20

00005694 <__fp_splitA>:
    5694:	88 0f       	add	r24, r24
    5696:	97 fb       	bst	r25, 7
    5698:	99 1f       	adc	r25, r25
    569a:	61 f0       	breq	.+24     	; 0x56b4 <__fp_splitA+0x20>
    569c:	9f 3f       	cpi	r25, 0xFF	; 255
    569e:	79 f0       	breq	.+30     	; 0x56be <__fp_splitA+0x2a>
    56a0:	87 95       	ror	r24
    56a2:	08 95       	ret
    56a4:	12 16       	cp	r1, r18
    56a6:	13 06       	cpc	r1, r19
    56a8:	14 06       	cpc	r1, r20
    56aa:	55 1f       	adc	r21, r21
    56ac:	f2 cf       	rjmp	.-28     	; 0x5692 <__fp_split3+0xe>
    56ae:	46 95       	lsr	r20
    56b0:	f1 df       	rcall	.-30     	; 0x5694 <__fp_splitA>
    56b2:	08 c0       	rjmp	.+16     	; 0x56c4 <__fp_splitA+0x30>
    56b4:	16 16       	cp	r1, r22
    56b6:	17 06       	cpc	r1, r23
    56b8:	18 06       	cpc	r1, r24
    56ba:	99 1f       	adc	r25, r25
    56bc:	f1 cf       	rjmp	.-30     	; 0x56a0 <__fp_splitA+0xc>
    56be:	86 95       	lsr	r24
    56c0:	71 05       	cpc	r23, r1
    56c2:	61 05       	cpc	r22, r1
    56c4:	08 94       	sec
    56c6:	08 95       	ret

000056c8 <_exit>:
    56c8:	f8 94       	cli

000056ca <__stop_program>:
    56ca:	ff cf       	rjmp	.-2      	; 0x56ca <__stop_program>
