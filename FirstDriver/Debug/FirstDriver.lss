
FirstDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005650  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001d6  00800060  00005650  000056e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800236  00800236  000058ba  2**0
                  ALLOC
  3 .stab         000036d8  00000000  00000000  000058bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001493  00000000  00000000  00008f94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000a427  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  0000a5c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  0000a7b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000cbc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000df3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000f114  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000f2d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000f5c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ff95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 30 00 	jmp	0x60	; 0x60 <__ctors_end>
       4:	0c 94 26 13 	jmp	0x264c	; 0x264c <__vector_1>
       8:	0c 94 64 13 	jmp	0x26c8	; 0x26c8 <__vector_2>
       c:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <__vector_3>
      10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>

00000054 <__c.1988>:
      54:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

00000060 <__ctors_end>:
      60:	11 24       	eor	r1, r1
      62:	1f be       	out	0x3f, r1	; 63
      64:	cf e5       	ldi	r28, 0x5F	; 95
      66:	d8 e0       	ldi	r29, 0x08	; 8
      68:	de bf       	out	0x3e, r29	; 62
      6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_copy_data>:
      6c:	12 e0       	ldi	r17, 0x02	; 2
      6e:	a0 e6       	ldi	r26, 0x60	; 96
      70:	b0 e0       	ldi	r27, 0x00	; 0
      72:	e0 e5       	ldi	r30, 0x50	; 80
      74:	f6 e5       	ldi	r31, 0x56	; 86
      76:	02 c0       	rjmp	.+4      	; 0x7c <.do_copy_data_start>

00000078 <.do_copy_data_loop>:
      78:	05 90       	lpm	r0, Z+
      7a:	0d 92       	st	X+, r0

0000007c <.do_copy_data_start>:
      7c:	a6 33       	cpi	r26, 0x36	; 54
      7e:	b1 07       	cpc	r27, r17
      80:	d9 f7       	brne	.-10     	; 0x78 <.do_copy_data_loop>

00000082 <__do_clear_bss>:
      82:	12 e0       	ldi	r17, 0x02	; 2
      84:	a6 e3       	ldi	r26, 0x36	; 54
      86:	b2 e0       	ldi	r27, 0x02	; 2
      88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
      8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
      8c:	a0 34       	cpi	r26, 0x40	; 64
      8e:	b1 07       	cpc	r27, r17
      90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
      92:	0e 94 08 14 	call	0x2810	; 0x2810 <main>
      96:	0c 94 26 2b 	jmp	0x564c	; 0x564c <_exit>

0000009a <__bad_interrupt>:
      9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <__fixunssfsi>:
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
      a6:	7b 01       	movw	r14, r22
      a8:	8c 01       	movw	r16, r24
      aa:	20 e0       	ldi	r18, 0x00	; 0
      ac:	30 e0       	ldi	r19, 0x00	; 0
      ae:	40 e0       	ldi	r20, 0x00	; 0
      b0:	5f e4       	ldi	r21, 0x4F	; 79
      b2:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__gesf2>
      b6:	88 23       	and	r24, r24
      b8:	8c f0       	brlt	.+34     	; 0xdc <__fixunssfsi+0x3e>
      ba:	c8 01       	movw	r24, r16
      bc:	b7 01       	movw	r22, r14
      be:	20 e0       	ldi	r18, 0x00	; 0
      c0:	30 e0       	ldi	r19, 0x00	; 0
      c2:	40 e0       	ldi	r20, 0x00	; 0
      c4:	5f e4       	ldi	r21, 0x4F	; 79
      c6:	0e 94 c7 01 	call	0x38e	; 0x38e <__subsf3>
      ca:	0e 94 b9 04 	call	0x972	; 0x972 <__fixsfsi>
      ce:	9b 01       	movw	r18, r22
      d0:	ac 01       	movw	r20, r24
      d2:	20 50       	subi	r18, 0x00	; 0
      d4:	30 40       	sbci	r19, 0x00	; 0
      d6:	40 40       	sbci	r20, 0x00	; 0
      d8:	50 48       	sbci	r21, 0x80	; 128
      da:	06 c0       	rjmp	.+12     	; 0xe8 <__fixunssfsi+0x4a>
      dc:	c8 01       	movw	r24, r16
      de:	b7 01       	movw	r22, r14
      e0:	0e 94 b9 04 	call	0x972	; 0x972 <__fixsfsi>
      e4:	9b 01       	movw	r18, r22
      e6:	ac 01       	movw	r20, r24
      e8:	b9 01       	movw	r22, r18
      ea:	ca 01       	movw	r24, r20
      ec:	1f 91       	pop	r17
      ee:	0f 91       	pop	r16
      f0:	ff 90       	pop	r15
      f2:	ef 90       	pop	r14
      f4:	08 95       	ret

000000f6 <_fpadd_parts>:
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b0 e0       	ldi	r27, 0x00	; 0
      fa:	e1 e8       	ldi	r30, 0x81	; 129
      fc:	f0 e0       	ldi	r31, 0x00	; 0
      fe:	0c 94 bd 24 	jmp	0x497a	; 0x497a <__prologue_saves__>
     102:	dc 01       	movw	r26, r24
     104:	2b 01       	movw	r4, r22
     106:	fa 01       	movw	r30, r20
     108:	9c 91       	ld	r25, X
     10a:	92 30       	cpi	r25, 0x02	; 2
     10c:	08 f4       	brcc	.+2      	; 0x110 <_fpadd_parts+0x1a>
     10e:	39 c1       	rjmp	.+626    	; 0x382 <_fpadd_parts+0x28c>
     110:	eb 01       	movw	r28, r22
     112:	88 81       	ld	r24, Y
     114:	82 30       	cpi	r24, 0x02	; 2
     116:	08 f4       	brcc	.+2      	; 0x11a <_fpadd_parts+0x24>
     118:	33 c1       	rjmp	.+614    	; 0x380 <_fpadd_parts+0x28a>
     11a:	94 30       	cpi	r25, 0x04	; 4
     11c:	69 f4       	brne	.+26     	; 0x138 <_fpadd_parts+0x42>
     11e:	84 30       	cpi	r24, 0x04	; 4
     120:	09 f0       	breq	.+2      	; 0x124 <_fpadd_parts+0x2e>
     122:	2f c1       	rjmp	.+606    	; 0x382 <_fpadd_parts+0x28c>
     124:	11 96       	adiw	r26, 0x01	; 1
     126:	9c 91       	ld	r25, X
     128:	11 97       	sbiw	r26, 0x01	; 1
     12a:	89 81       	ldd	r24, Y+1	; 0x01
     12c:	98 17       	cp	r25, r24
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x3c>
     130:	28 c1       	rjmp	.+592    	; 0x382 <_fpadd_parts+0x28c>
     132:	a6 e1       	ldi	r26, 0x16	; 22
     134:	b1 e0       	ldi	r27, 0x01	; 1
     136:	25 c1       	rjmp	.+586    	; 0x382 <_fpadd_parts+0x28c>
     138:	84 30       	cpi	r24, 0x04	; 4
     13a:	09 f4       	brne	.+2      	; 0x13e <_fpadd_parts+0x48>
     13c:	21 c1       	rjmp	.+578    	; 0x380 <_fpadd_parts+0x28a>
     13e:	82 30       	cpi	r24, 0x02	; 2
     140:	a9 f4       	brne	.+42     	; 0x16c <_fpadd_parts+0x76>
     142:	92 30       	cpi	r25, 0x02	; 2
     144:	09 f0       	breq	.+2      	; 0x148 <_fpadd_parts+0x52>
     146:	1d c1       	rjmp	.+570    	; 0x382 <_fpadd_parts+0x28c>
     148:	9a 01       	movw	r18, r20
     14a:	ad 01       	movw	r20, r26
     14c:	88 e0       	ldi	r24, 0x08	; 8
     14e:	ea 01       	movw	r28, r20
     150:	09 90       	ld	r0, Y+
     152:	ae 01       	movw	r20, r28
     154:	e9 01       	movw	r28, r18
     156:	09 92       	st	Y+, r0
     158:	9e 01       	movw	r18, r28
     15a:	81 50       	subi	r24, 0x01	; 1
     15c:	c1 f7       	brne	.-16     	; 0x14e <_fpadd_parts+0x58>
     15e:	e2 01       	movw	r28, r4
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	11 96       	adiw	r26, 0x01	; 1
     164:	9c 91       	ld	r25, X
     166:	89 23       	and	r24, r25
     168:	81 83       	std	Z+1, r24	; 0x01
     16a:	08 c1       	rjmp	.+528    	; 0x37c <_fpadd_parts+0x286>
     16c:	92 30       	cpi	r25, 0x02	; 2
     16e:	09 f4       	brne	.+2      	; 0x172 <_fpadd_parts+0x7c>
     170:	07 c1       	rjmp	.+526    	; 0x380 <_fpadd_parts+0x28a>
     172:	12 96       	adiw	r26, 0x02	; 2
     174:	2d 90       	ld	r2, X+
     176:	3c 90       	ld	r3, X
     178:	13 97       	sbiw	r26, 0x03	; 3
     17a:	eb 01       	movw	r28, r22
     17c:	8a 81       	ldd	r24, Y+2	; 0x02
     17e:	9b 81       	ldd	r25, Y+3	; 0x03
     180:	14 96       	adiw	r26, 0x04	; 4
     182:	ad 90       	ld	r10, X+
     184:	bd 90       	ld	r11, X+
     186:	cd 90       	ld	r12, X+
     188:	dc 90       	ld	r13, X
     18a:	17 97       	sbiw	r26, 0x07	; 7
     18c:	ec 80       	ldd	r14, Y+4	; 0x04
     18e:	fd 80       	ldd	r15, Y+5	; 0x05
     190:	0e 81       	ldd	r16, Y+6	; 0x06
     192:	1f 81       	ldd	r17, Y+7	; 0x07
     194:	91 01       	movw	r18, r2
     196:	28 1b       	sub	r18, r24
     198:	39 0b       	sbc	r19, r25
     19a:	b9 01       	movw	r22, r18
     19c:	37 ff       	sbrs	r19, 7
     19e:	04 c0       	rjmp	.+8      	; 0x1a8 <_fpadd_parts+0xb2>
     1a0:	66 27       	eor	r22, r22
     1a2:	77 27       	eor	r23, r23
     1a4:	62 1b       	sub	r22, r18
     1a6:	73 0b       	sbc	r23, r19
     1a8:	60 32       	cpi	r22, 0x20	; 32
     1aa:	71 05       	cpc	r23, r1
     1ac:	0c f0       	brlt	.+2      	; 0x1b0 <_fpadd_parts+0xba>
     1ae:	61 c0       	rjmp	.+194    	; 0x272 <_fpadd_parts+0x17c>
     1b0:	12 16       	cp	r1, r18
     1b2:	13 06       	cpc	r1, r19
     1b4:	6c f5       	brge	.+90     	; 0x210 <_fpadd_parts+0x11a>
     1b6:	37 01       	movw	r6, r14
     1b8:	48 01       	movw	r8, r16
     1ba:	06 2e       	mov	r0, r22
     1bc:	04 c0       	rjmp	.+8      	; 0x1c6 <_fpadd_parts+0xd0>
     1be:	96 94       	lsr	r9
     1c0:	87 94       	ror	r8
     1c2:	77 94       	ror	r7
     1c4:	67 94       	ror	r6
     1c6:	0a 94       	dec	r0
     1c8:	d2 f7       	brpl	.-12     	; 0x1be <_fpadd_parts+0xc8>
     1ca:	21 e0       	ldi	r18, 0x01	; 1
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	40 e0       	ldi	r20, 0x00	; 0
     1d0:	50 e0       	ldi	r21, 0x00	; 0
     1d2:	04 c0       	rjmp	.+8      	; 0x1dc <_fpadd_parts+0xe6>
     1d4:	22 0f       	add	r18, r18
     1d6:	33 1f       	adc	r19, r19
     1d8:	44 1f       	adc	r20, r20
     1da:	55 1f       	adc	r21, r21
     1dc:	6a 95       	dec	r22
     1de:	d2 f7       	brpl	.-12     	; 0x1d4 <_fpadd_parts+0xde>
     1e0:	21 50       	subi	r18, 0x01	; 1
     1e2:	30 40       	sbci	r19, 0x00	; 0
     1e4:	40 40       	sbci	r20, 0x00	; 0
     1e6:	50 40       	sbci	r21, 0x00	; 0
     1e8:	2e 21       	and	r18, r14
     1ea:	3f 21       	and	r19, r15
     1ec:	40 23       	and	r20, r16
     1ee:	51 23       	and	r21, r17
     1f0:	21 15       	cp	r18, r1
     1f2:	31 05       	cpc	r19, r1
     1f4:	41 05       	cpc	r20, r1
     1f6:	51 05       	cpc	r21, r1
     1f8:	21 f0       	breq	.+8      	; 0x202 <_fpadd_parts+0x10c>
     1fa:	21 e0       	ldi	r18, 0x01	; 1
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	40 e0       	ldi	r20, 0x00	; 0
     200:	50 e0       	ldi	r21, 0x00	; 0
     202:	79 01       	movw	r14, r18
     204:	8a 01       	movw	r16, r20
     206:	e6 28       	or	r14, r6
     208:	f7 28       	or	r15, r7
     20a:	08 29       	or	r16, r8
     20c:	19 29       	or	r17, r9
     20e:	3c c0       	rjmp	.+120    	; 0x288 <_fpadd_parts+0x192>
     210:	23 2b       	or	r18, r19
     212:	d1 f1       	breq	.+116    	; 0x288 <_fpadd_parts+0x192>
     214:	26 0e       	add	r2, r22
     216:	37 1e       	adc	r3, r23
     218:	35 01       	movw	r6, r10
     21a:	46 01       	movw	r8, r12
     21c:	06 2e       	mov	r0, r22
     21e:	04 c0       	rjmp	.+8      	; 0x228 <_fpadd_parts+0x132>
     220:	96 94       	lsr	r9
     222:	87 94       	ror	r8
     224:	77 94       	ror	r7
     226:	67 94       	ror	r6
     228:	0a 94       	dec	r0
     22a:	d2 f7       	brpl	.-12     	; 0x220 <_fpadd_parts+0x12a>
     22c:	21 e0       	ldi	r18, 0x01	; 1
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	40 e0       	ldi	r20, 0x00	; 0
     232:	50 e0       	ldi	r21, 0x00	; 0
     234:	04 c0       	rjmp	.+8      	; 0x23e <_fpadd_parts+0x148>
     236:	22 0f       	add	r18, r18
     238:	33 1f       	adc	r19, r19
     23a:	44 1f       	adc	r20, r20
     23c:	55 1f       	adc	r21, r21
     23e:	6a 95       	dec	r22
     240:	d2 f7       	brpl	.-12     	; 0x236 <_fpadd_parts+0x140>
     242:	21 50       	subi	r18, 0x01	; 1
     244:	30 40       	sbci	r19, 0x00	; 0
     246:	40 40       	sbci	r20, 0x00	; 0
     248:	50 40       	sbci	r21, 0x00	; 0
     24a:	2a 21       	and	r18, r10
     24c:	3b 21       	and	r19, r11
     24e:	4c 21       	and	r20, r12
     250:	5d 21       	and	r21, r13
     252:	21 15       	cp	r18, r1
     254:	31 05       	cpc	r19, r1
     256:	41 05       	cpc	r20, r1
     258:	51 05       	cpc	r21, r1
     25a:	21 f0       	breq	.+8      	; 0x264 <_fpadd_parts+0x16e>
     25c:	21 e0       	ldi	r18, 0x01	; 1
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	40 e0       	ldi	r20, 0x00	; 0
     262:	50 e0       	ldi	r21, 0x00	; 0
     264:	59 01       	movw	r10, r18
     266:	6a 01       	movw	r12, r20
     268:	a6 28       	or	r10, r6
     26a:	b7 28       	or	r11, r7
     26c:	c8 28       	or	r12, r8
     26e:	d9 28       	or	r13, r9
     270:	0b c0       	rjmp	.+22     	; 0x288 <_fpadd_parts+0x192>
     272:	82 15       	cp	r24, r2
     274:	93 05       	cpc	r25, r3
     276:	2c f0       	brlt	.+10     	; 0x282 <_fpadd_parts+0x18c>
     278:	1c 01       	movw	r2, r24
     27a:	aa 24       	eor	r10, r10
     27c:	bb 24       	eor	r11, r11
     27e:	65 01       	movw	r12, r10
     280:	03 c0       	rjmp	.+6      	; 0x288 <_fpadd_parts+0x192>
     282:	ee 24       	eor	r14, r14
     284:	ff 24       	eor	r15, r15
     286:	87 01       	movw	r16, r14
     288:	11 96       	adiw	r26, 0x01	; 1
     28a:	9c 91       	ld	r25, X
     28c:	d2 01       	movw	r26, r4
     28e:	11 96       	adiw	r26, 0x01	; 1
     290:	8c 91       	ld	r24, X
     292:	98 17       	cp	r25, r24
     294:	09 f4       	brne	.+2      	; 0x298 <_fpadd_parts+0x1a2>
     296:	45 c0       	rjmp	.+138    	; 0x322 <_fpadd_parts+0x22c>
     298:	99 23       	and	r25, r25
     29a:	39 f0       	breq	.+14     	; 0x2aa <_fpadd_parts+0x1b4>
     29c:	a8 01       	movw	r20, r16
     29e:	97 01       	movw	r18, r14
     2a0:	2a 19       	sub	r18, r10
     2a2:	3b 09       	sbc	r19, r11
     2a4:	4c 09       	sbc	r20, r12
     2a6:	5d 09       	sbc	r21, r13
     2a8:	06 c0       	rjmp	.+12     	; 0x2b6 <_fpadd_parts+0x1c0>
     2aa:	a6 01       	movw	r20, r12
     2ac:	95 01       	movw	r18, r10
     2ae:	2e 19       	sub	r18, r14
     2b0:	3f 09       	sbc	r19, r15
     2b2:	40 0b       	sbc	r20, r16
     2b4:	51 0b       	sbc	r21, r17
     2b6:	57 fd       	sbrc	r21, 7
     2b8:	08 c0       	rjmp	.+16     	; 0x2ca <_fpadd_parts+0x1d4>
     2ba:	11 82       	std	Z+1, r1	; 0x01
     2bc:	33 82       	std	Z+3, r3	; 0x03
     2be:	22 82       	std	Z+2, r2	; 0x02
     2c0:	24 83       	std	Z+4, r18	; 0x04
     2c2:	35 83       	std	Z+5, r19	; 0x05
     2c4:	46 83       	std	Z+6, r20	; 0x06
     2c6:	57 83       	std	Z+7, r21	; 0x07
     2c8:	1d c0       	rjmp	.+58     	; 0x304 <_fpadd_parts+0x20e>
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	81 83       	std	Z+1, r24	; 0x01
     2ce:	33 82       	std	Z+3, r3	; 0x03
     2d0:	22 82       	std	Z+2, r2	; 0x02
     2d2:	88 27       	eor	r24, r24
     2d4:	99 27       	eor	r25, r25
     2d6:	dc 01       	movw	r26, r24
     2d8:	82 1b       	sub	r24, r18
     2da:	93 0b       	sbc	r25, r19
     2dc:	a4 0b       	sbc	r26, r20
     2de:	b5 0b       	sbc	r27, r21
     2e0:	84 83       	std	Z+4, r24	; 0x04
     2e2:	95 83       	std	Z+5, r25	; 0x05
     2e4:	a6 83       	std	Z+6, r26	; 0x06
     2e6:	b7 83       	std	Z+7, r27	; 0x07
     2e8:	0d c0       	rjmp	.+26     	; 0x304 <_fpadd_parts+0x20e>
     2ea:	22 0f       	add	r18, r18
     2ec:	33 1f       	adc	r19, r19
     2ee:	44 1f       	adc	r20, r20
     2f0:	55 1f       	adc	r21, r21
     2f2:	24 83       	std	Z+4, r18	; 0x04
     2f4:	35 83       	std	Z+5, r19	; 0x05
     2f6:	46 83       	std	Z+6, r20	; 0x06
     2f8:	57 83       	std	Z+7, r21	; 0x07
     2fa:	82 81       	ldd	r24, Z+2	; 0x02
     2fc:	93 81       	ldd	r25, Z+3	; 0x03
     2fe:	01 97       	sbiw	r24, 0x01	; 1
     300:	93 83       	std	Z+3, r25	; 0x03
     302:	82 83       	std	Z+2, r24	; 0x02
     304:	24 81       	ldd	r18, Z+4	; 0x04
     306:	35 81       	ldd	r19, Z+5	; 0x05
     308:	46 81       	ldd	r20, Z+6	; 0x06
     30a:	57 81       	ldd	r21, Z+7	; 0x07
     30c:	da 01       	movw	r26, r20
     30e:	c9 01       	movw	r24, r18
     310:	01 97       	sbiw	r24, 0x01	; 1
     312:	a1 09       	sbc	r26, r1
     314:	b1 09       	sbc	r27, r1
     316:	8f 5f       	subi	r24, 0xFF	; 255
     318:	9f 4f       	sbci	r25, 0xFF	; 255
     31a:	af 4f       	sbci	r26, 0xFF	; 255
     31c:	bf 43       	sbci	r27, 0x3F	; 63
     31e:	28 f3       	brcs	.-54     	; 0x2ea <_fpadd_parts+0x1f4>
     320:	0b c0       	rjmp	.+22     	; 0x338 <_fpadd_parts+0x242>
     322:	91 83       	std	Z+1, r25	; 0x01
     324:	33 82       	std	Z+3, r3	; 0x03
     326:	22 82       	std	Z+2, r2	; 0x02
     328:	ea 0c       	add	r14, r10
     32a:	fb 1c       	adc	r15, r11
     32c:	0c 1d       	adc	r16, r12
     32e:	1d 1d       	adc	r17, r13
     330:	e4 82       	std	Z+4, r14	; 0x04
     332:	f5 82       	std	Z+5, r15	; 0x05
     334:	06 83       	std	Z+6, r16	; 0x06
     336:	17 83       	std	Z+7, r17	; 0x07
     338:	83 e0       	ldi	r24, 0x03	; 3
     33a:	80 83       	st	Z, r24
     33c:	24 81       	ldd	r18, Z+4	; 0x04
     33e:	35 81       	ldd	r19, Z+5	; 0x05
     340:	46 81       	ldd	r20, Z+6	; 0x06
     342:	57 81       	ldd	r21, Z+7	; 0x07
     344:	57 ff       	sbrs	r21, 7
     346:	1a c0       	rjmp	.+52     	; 0x37c <_fpadd_parts+0x286>
     348:	c9 01       	movw	r24, r18
     34a:	aa 27       	eor	r26, r26
     34c:	97 fd       	sbrc	r25, 7
     34e:	a0 95       	com	r26
     350:	ba 2f       	mov	r27, r26
     352:	81 70       	andi	r24, 0x01	; 1
     354:	90 70       	andi	r25, 0x00	; 0
     356:	a0 70       	andi	r26, 0x00	; 0
     358:	b0 70       	andi	r27, 0x00	; 0
     35a:	56 95       	lsr	r21
     35c:	47 95       	ror	r20
     35e:	37 95       	ror	r19
     360:	27 95       	ror	r18
     362:	82 2b       	or	r24, r18
     364:	93 2b       	or	r25, r19
     366:	a4 2b       	or	r26, r20
     368:	b5 2b       	or	r27, r21
     36a:	84 83       	std	Z+4, r24	; 0x04
     36c:	95 83       	std	Z+5, r25	; 0x05
     36e:	a6 83       	std	Z+6, r26	; 0x06
     370:	b7 83       	std	Z+7, r27	; 0x07
     372:	82 81       	ldd	r24, Z+2	; 0x02
     374:	93 81       	ldd	r25, Z+3	; 0x03
     376:	01 96       	adiw	r24, 0x01	; 1
     378:	93 83       	std	Z+3, r25	; 0x03
     37a:	82 83       	std	Z+2, r24	; 0x02
     37c:	df 01       	movw	r26, r30
     37e:	01 c0       	rjmp	.+2      	; 0x382 <_fpadd_parts+0x28c>
     380:	d2 01       	movw	r26, r4
     382:	cd 01       	movw	r24, r26
     384:	cd b7       	in	r28, 0x3d	; 61
     386:	de b7       	in	r29, 0x3e	; 62
     388:	e2 e1       	ldi	r30, 0x12	; 18
     38a:	0c 94 d9 24 	jmp	0x49b2	; 0x49b2 <__epilogue_restores__>

0000038e <__subsf3>:
     38e:	a0 e2       	ldi	r26, 0x20	; 32
     390:	b0 e0       	ldi	r27, 0x00	; 0
     392:	ed ec       	ldi	r30, 0xCD	; 205
     394:	f1 e0       	ldi	r31, 0x01	; 1
     396:	0c 94 c9 24 	jmp	0x4992	; 0x4992 <__prologue_saves__+0x18>
     39a:	69 83       	std	Y+1, r22	; 0x01
     39c:	7a 83       	std	Y+2, r23	; 0x02
     39e:	8b 83       	std	Y+3, r24	; 0x03
     3a0:	9c 83       	std	Y+4, r25	; 0x04
     3a2:	2d 83       	std	Y+5, r18	; 0x05
     3a4:	3e 83       	std	Y+6, r19	; 0x06
     3a6:	4f 83       	std	Y+7, r20	; 0x07
     3a8:	58 87       	std	Y+8, r21	; 0x08
     3aa:	e9 e0       	ldi	r30, 0x09	; 9
     3ac:	ee 2e       	mov	r14, r30
     3ae:	f1 2c       	mov	r15, r1
     3b0:	ec 0e       	add	r14, r28
     3b2:	fd 1e       	adc	r15, r29
     3b4:	ce 01       	movw	r24, r28
     3b6:	01 96       	adiw	r24, 0x01	; 1
     3b8:	b7 01       	movw	r22, r14
     3ba:	0e 94 31 06 	call	0xc62	; 0xc62 <__unpack_f>
     3be:	8e 01       	movw	r16, r28
     3c0:	0f 5e       	subi	r16, 0xEF	; 239
     3c2:	1f 4f       	sbci	r17, 0xFF	; 255
     3c4:	ce 01       	movw	r24, r28
     3c6:	05 96       	adiw	r24, 0x05	; 5
     3c8:	b8 01       	movw	r22, r16
     3ca:	0e 94 31 06 	call	0xc62	; 0xc62 <__unpack_f>
     3ce:	8a 89       	ldd	r24, Y+18	; 0x12
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	89 27       	eor	r24, r25
     3d4:	8a 8b       	std	Y+18, r24	; 0x12
     3d6:	c7 01       	movw	r24, r14
     3d8:	b8 01       	movw	r22, r16
     3da:	ae 01       	movw	r20, r28
     3dc:	47 5e       	subi	r20, 0xE7	; 231
     3de:	5f 4f       	sbci	r21, 0xFF	; 255
     3e0:	0e 94 7b 00 	call	0xf6	; 0xf6 <_fpadd_parts>
     3e4:	0e 94 5c 05 	call	0xab8	; 0xab8 <__pack_f>
     3e8:	a0 96       	adiw	r28, 0x20	; 32
     3ea:	e6 e0       	ldi	r30, 0x06	; 6
     3ec:	0c 94 e5 24 	jmp	0x49ca	; 0x49ca <__epilogue_restores__+0x18>

000003f0 <__addsf3>:
     3f0:	a0 e2       	ldi	r26, 0x20	; 32
     3f2:	b0 e0       	ldi	r27, 0x00	; 0
     3f4:	ee ef       	ldi	r30, 0xFE	; 254
     3f6:	f1 e0       	ldi	r31, 0x01	; 1
     3f8:	0c 94 c9 24 	jmp	0x4992	; 0x4992 <__prologue_saves__+0x18>
     3fc:	69 83       	std	Y+1, r22	; 0x01
     3fe:	7a 83       	std	Y+2, r23	; 0x02
     400:	8b 83       	std	Y+3, r24	; 0x03
     402:	9c 83       	std	Y+4, r25	; 0x04
     404:	2d 83       	std	Y+5, r18	; 0x05
     406:	3e 83       	std	Y+6, r19	; 0x06
     408:	4f 83       	std	Y+7, r20	; 0x07
     40a:	58 87       	std	Y+8, r21	; 0x08
     40c:	f9 e0       	ldi	r31, 0x09	; 9
     40e:	ef 2e       	mov	r14, r31
     410:	f1 2c       	mov	r15, r1
     412:	ec 0e       	add	r14, r28
     414:	fd 1e       	adc	r15, r29
     416:	ce 01       	movw	r24, r28
     418:	01 96       	adiw	r24, 0x01	; 1
     41a:	b7 01       	movw	r22, r14
     41c:	0e 94 31 06 	call	0xc62	; 0xc62 <__unpack_f>
     420:	8e 01       	movw	r16, r28
     422:	0f 5e       	subi	r16, 0xEF	; 239
     424:	1f 4f       	sbci	r17, 0xFF	; 255
     426:	ce 01       	movw	r24, r28
     428:	05 96       	adiw	r24, 0x05	; 5
     42a:	b8 01       	movw	r22, r16
     42c:	0e 94 31 06 	call	0xc62	; 0xc62 <__unpack_f>
     430:	c7 01       	movw	r24, r14
     432:	b8 01       	movw	r22, r16
     434:	ae 01       	movw	r20, r28
     436:	47 5e       	subi	r20, 0xE7	; 231
     438:	5f 4f       	sbci	r21, 0xFF	; 255
     43a:	0e 94 7b 00 	call	0xf6	; 0xf6 <_fpadd_parts>
     43e:	0e 94 5c 05 	call	0xab8	; 0xab8 <__pack_f>
     442:	a0 96       	adiw	r28, 0x20	; 32
     444:	e6 e0       	ldi	r30, 0x06	; 6
     446:	0c 94 e5 24 	jmp	0x49ca	; 0x49ca <__epilogue_restores__+0x18>

0000044a <__mulsf3>:
     44a:	a0 e2       	ldi	r26, 0x20	; 32
     44c:	b0 e0       	ldi	r27, 0x00	; 0
     44e:	eb e2       	ldi	r30, 0x2B	; 43
     450:	f2 e0       	ldi	r31, 0x02	; 2
     452:	0c 94 bd 24 	jmp	0x497a	; 0x497a <__prologue_saves__>
     456:	69 83       	std	Y+1, r22	; 0x01
     458:	7a 83       	std	Y+2, r23	; 0x02
     45a:	8b 83       	std	Y+3, r24	; 0x03
     45c:	9c 83       	std	Y+4, r25	; 0x04
     45e:	2d 83       	std	Y+5, r18	; 0x05
     460:	3e 83       	std	Y+6, r19	; 0x06
     462:	4f 83       	std	Y+7, r20	; 0x07
     464:	58 87       	std	Y+8, r21	; 0x08
     466:	ce 01       	movw	r24, r28
     468:	01 96       	adiw	r24, 0x01	; 1
     46a:	be 01       	movw	r22, r28
     46c:	67 5f       	subi	r22, 0xF7	; 247
     46e:	7f 4f       	sbci	r23, 0xFF	; 255
     470:	0e 94 31 06 	call	0xc62	; 0xc62 <__unpack_f>
     474:	ce 01       	movw	r24, r28
     476:	05 96       	adiw	r24, 0x05	; 5
     478:	be 01       	movw	r22, r28
     47a:	6f 5e       	subi	r22, 0xEF	; 239
     47c:	7f 4f       	sbci	r23, 0xFF	; 255
     47e:	0e 94 31 06 	call	0xc62	; 0xc62 <__unpack_f>
     482:	99 85       	ldd	r25, Y+9	; 0x09
     484:	92 30       	cpi	r25, 0x02	; 2
     486:	88 f0       	brcs	.+34     	; 0x4aa <__mulsf3+0x60>
     488:	89 89       	ldd	r24, Y+17	; 0x11
     48a:	82 30       	cpi	r24, 0x02	; 2
     48c:	c8 f0       	brcs	.+50     	; 0x4c0 <__mulsf3+0x76>
     48e:	94 30       	cpi	r25, 0x04	; 4
     490:	19 f4       	brne	.+6      	; 0x498 <__mulsf3+0x4e>
     492:	82 30       	cpi	r24, 0x02	; 2
     494:	51 f4       	brne	.+20     	; 0x4aa <__mulsf3+0x60>
     496:	04 c0       	rjmp	.+8      	; 0x4a0 <__mulsf3+0x56>
     498:	84 30       	cpi	r24, 0x04	; 4
     49a:	29 f4       	brne	.+10     	; 0x4a6 <__mulsf3+0x5c>
     49c:	92 30       	cpi	r25, 0x02	; 2
     49e:	81 f4       	brne	.+32     	; 0x4c0 <__mulsf3+0x76>
     4a0:	86 e1       	ldi	r24, 0x16	; 22
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	c6 c0       	rjmp	.+396    	; 0x632 <__mulsf3+0x1e8>
     4a6:	92 30       	cpi	r25, 0x02	; 2
     4a8:	49 f4       	brne	.+18     	; 0x4bc <__mulsf3+0x72>
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     4ae:	8a 89       	ldd	r24, Y+18	; 0x12
     4b0:	98 13       	cpse	r25, r24
     4b2:	21 e0       	ldi	r18, 0x01	; 1
     4b4:	2a 87       	std	Y+10, r18	; 0x0a
     4b6:	ce 01       	movw	r24, r28
     4b8:	09 96       	adiw	r24, 0x09	; 9
     4ba:	bb c0       	rjmp	.+374    	; 0x632 <__mulsf3+0x1e8>
     4bc:	82 30       	cpi	r24, 0x02	; 2
     4be:	49 f4       	brne	.+18     	; 0x4d2 <__mulsf3+0x88>
     4c0:	20 e0       	ldi	r18, 0x00	; 0
     4c2:	9a 85       	ldd	r25, Y+10	; 0x0a
     4c4:	8a 89       	ldd	r24, Y+18	; 0x12
     4c6:	98 13       	cpse	r25, r24
     4c8:	21 e0       	ldi	r18, 0x01	; 1
     4ca:	2a 8b       	std	Y+18, r18	; 0x12
     4cc:	ce 01       	movw	r24, r28
     4ce:	41 96       	adiw	r24, 0x11	; 17
     4d0:	b0 c0       	rjmp	.+352    	; 0x632 <__mulsf3+0x1e8>
     4d2:	2d 84       	ldd	r2, Y+13	; 0x0d
     4d4:	3e 84       	ldd	r3, Y+14	; 0x0e
     4d6:	4f 84       	ldd	r4, Y+15	; 0x0f
     4d8:	58 88       	ldd	r5, Y+16	; 0x10
     4da:	6d 88       	ldd	r6, Y+21	; 0x15
     4dc:	7e 88       	ldd	r7, Y+22	; 0x16
     4de:	8f 88       	ldd	r8, Y+23	; 0x17
     4e0:	98 8c       	ldd	r9, Y+24	; 0x18
     4e2:	ee 24       	eor	r14, r14
     4e4:	ff 24       	eor	r15, r15
     4e6:	87 01       	movw	r16, r14
     4e8:	aa 24       	eor	r10, r10
     4ea:	bb 24       	eor	r11, r11
     4ec:	65 01       	movw	r12, r10
     4ee:	40 e0       	ldi	r20, 0x00	; 0
     4f0:	50 e0       	ldi	r21, 0x00	; 0
     4f2:	60 e0       	ldi	r22, 0x00	; 0
     4f4:	70 e0       	ldi	r23, 0x00	; 0
     4f6:	e0 e0       	ldi	r30, 0x00	; 0
     4f8:	f0 e0       	ldi	r31, 0x00	; 0
     4fa:	c1 01       	movw	r24, r2
     4fc:	81 70       	andi	r24, 0x01	; 1
     4fe:	90 70       	andi	r25, 0x00	; 0
     500:	89 2b       	or	r24, r25
     502:	e9 f0       	breq	.+58     	; 0x53e <__mulsf3+0xf4>
     504:	e6 0c       	add	r14, r6
     506:	f7 1c       	adc	r15, r7
     508:	08 1d       	adc	r16, r8
     50a:	19 1d       	adc	r17, r9
     50c:	9a 01       	movw	r18, r20
     50e:	ab 01       	movw	r20, r22
     510:	2a 0d       	add	r18, r10
     512:	3b 1d       	adc	r19, r11
     514:	4c 1d       	adc	r20, r12
     516:	5d 1d       	adc	r21, r13
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	a0 e0       	ldi	r26, 0x00	; 0
     51e:	b0 e0       	ldi	r27, 0x00	; 0
     520:	e6 14       	cp	r14, r6
     522:	f7 04       	cpc	r15, r7
     524:	08 05       	cpc	r16, r8
     526:	19 05       	cpc	r17, r9
     528:	20 f4       	brcc	.+8      	; 0x532 <__mulsf3+0xe8>
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	a0 e0       	ldi	r26, 0x00	; 0
     530:	b0 e0       	ldi	r27, 0x00	; 0
     532:	ba 01       	movw	r22, r20
     534:	a9 01       	movw	r20, r18
     536:	48 0f       	add	r20, r24
     538:	59 1f       	adc	r21, r25
     53a:	6a 1f       	adc	r22, r26
     53c:	7b 1f       	adc	r23, r27
     53e:	aa 0c       	add	r10, r10
     540:	bb 1c       	adc	r11, r11
     542:	cc 1c       	adc	r12, r12
     544:	dd 1c       	adc	r13, r13
     546:	97 fe       	sbrs	r9, 7
     548:	08 c0       	rjmp	.+16     	; 0x55a <__mulsf3+0x110>
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	a0 e0       	ldi	r26, 0x00	; 0
     550:	b0 e0       	ldi	r27, 0x00	; 0
     552:	a8 2a       	or	r10, r24
     554:	b9 2a       	or	r11, r25
     556:	ca 2a       	or	r12, r26
     558:	db 2a       	or	r13, r27
     55a:	31 96       	adiw	r30, 0x01	; 1
     55c:	e0 32       	cpi	r30, 0x20	; 32
     55e:	f1 05       	cpc	r31, r1
     560:	49 f0       	breq	.+18     	; 0x574 <__mulsf3+0x12a>
     562:	66 0c       	add	r6, r6
     564:	77 1c       	adc	r7, r7
     566:	88 1c       	adc	r8, r8
     568:	99 1c       	adc	r9, r9
     56a:	56 94       	lsr	r5
     56c:	47 94       	ror	r4
     56e:	37 94       	ror	r3
     570:	27 94       	ror	r2
     572:	c3 cf       	rjmp	.-122    	; 0x4fa <__mulsf3+0xb0>
     574:	fa 85       	ldd	r31, Y+10	; 0x0a
     576:	ea 89       	ldd	r30, Y+18	; 0x12
     578:	2b 89       	ldd	r18, Y+19	; 0x13
     57a:	3c 89       	ldd	r19, Y+20	; 0x14
     57c:	8b 85       	ldd	r24, Y+11	; 0x0b
     57e:	9c 85       	ldd	r25, Y+12	; 0x0c
     580:	28 0f       	add	r18, r24
     582:	39 1f       	adc	r19, r25
     584:	2e 5f       	subi	r18, 0xFE	; 254
     586:	3f 4f       	sbci	r19, 0xFF	; 255
     588:	17 c0       	rjmp	.+46     	; 0x5b8 <__mulsf3+0x16e>
     58a:	ca 01       	movw	r24, r20
     58c:	81 70       	andi	r24, 0x01	; 1
     58e:	90 70       	andi	r25, 0x00	; 0
     590:	89 2b       	or	r24, r25
     592:	61 f0       	breq	.+24     	; 0x5ac <__mulsf3+0x162>
     594:	16 95       	lsr	r17
     596:	07 95       	ror	r16
     598:	f7 94       	ror	r15
     59a:	e7 94       	ror	r14
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	a0 e0       	ldi	r26, 0x00	; 0
     5a2:	b0 e8       	ldi	r27, 0x80	; 128
     5a4:	e8 2a       	or	r14, r24
     5a6:	f9 2a       	or	r15, r25
     5a8:	0a 2b       	or	r16, r26
     5aa:	1b 2b       	or	r17, r27
     5ac:	76 95       	lsr	r23
     5ae:	67 95       	ror	r22
     5b0:	57 95       	ror	r21
     5b2:	47 95       	ror	r20
     5b4:	2f 5f       	subi	r18, 0xFF	; 255
     5b6:	3f 4f       	sbci	r19, 0xFF	; 255
     5b8:	77 fd       	sbrc	r23, 7
     5ba:	e7 cf       	rjmp	.-50     	; 0x58a <__mulsf3+0x140>
     5bc:	0c c0       	rjmp	.+24     	; 0x5d6 <__mulsf3+0x18c>
     5be:	44 0f       	add	r20, r20
     5c0:	55 1f       	adc	r21, r21
     5c2:	66 1f       	adc	r22, r22
     5c4:	77 1f       	adc	r23, r23
     5c6:	17 fd       	sbrc	r17, 7
     5c8:	41 60       	ori	r20, 0x01	; 1
     5ca:	ee 0c       	add	r14, r14
     5cc:	ff 1c       	adc	r15, r15
     5ce:	00 1f       	adc	r16, r16
     5d0:	11 1f       	adc	r17, r17
     5d2:	21 50       	subi	r18, 0x01	; 1
     5d4:	30 40       	sbci	r19, 0x00	; 0
     5d6:	40 30       	cpi	r20, 0x00	; 0
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	59 07       	cpc	r21, r25
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	69 07       	cpc	r22, r25
     5e0:	90 e4       	ldi	r25, 0x40	; 64
     5e2:	79 07       	cpc	r23, r25
     5e4:	60 f3       	brcs	.-40     	; 0x5be <__mulsf3+0x174>
     5e6:	2b 8f       	std	Y+27, r18	; 0x1b
     5e8:	3c 8f       	std	Y+28, r19	; 0x1c
     5ea:	db 01       	movw	r26, r22
     5ec:	ca 01       	movw	r24, r20
     5ee:	8f 77       	andi	r24, 0x7F	; 127
     5f0:	90 70       	andi	r25, 0x00	; 0
     5f2:	a0 70       	andi	r26, 0x00	; 0
     5f4:	b0 70       	andi	r27, 0x00	; 0
     5f6:	80 34       	cpi	r24, 0x40	; 64
     5f8:	91 05       	cpc	r25, r1
     5fa:	a1 05       	cpc	r26, r1
     5fc:	b1 05       	cpc	r27, r1
     5fe:	61 f4       	brne	.+24     	; 0x618 <__mulsf3+0x1ce>
     600:	47 fd       	sbrc	r20, 7
     602:	0a c0       	rjmp	.+20     	; 0x618 <__mulsf3+0x1ce>
     604:	e1 14       	cp	r14, r1
     606:	f1 04       	cpc	r15, r1
     608:	01 05       	cpc	r16, r1
     60a:	11 05       	cpc	r17, r1
     60c:	29 f0       	breq	.+10     	; 0x618 <__mulsf3+0x1ce>
     60e:	40 5c       	subi	r20, 0xC0	; 192
     610:	5f 4f       	sbci	r21, 0xFF	; 255
     612:	6f 4f       	sbci	r22, 0xFF	; 255
     614:	7f 4f       	sbci	r23, 0xFF	; 255
     616:	40 78       	andi	r20, 0x80	; 128
     618:	1a 8e       	std	Y+26, r1	; 0x1a
     61a:	fe 17       	cp	r31, r30
     61c:	11 f0       	breq	.+4      	; 0x622 <__mulsf3+0x1d8>
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	8a 8f       	std	Y+26, r24	; 0x1a
     622:	4d 8f       	std	Y+29, r20	; 0x1d
     624:	5e 8f       	std	Y+30, r21	; 0x1e
     626:	6f 8f       	std	Y+31, r22	; 0x1f
     628:	78 a3       	std	Y+32, r23	; 0x20
     62a:	83 e0       	ldi	r24, 0x03	; 3
     62c:	89 8f       	std	Y+25, r24	; 0x19
     62e:	ce 01       	movw	r24, r28
     630:	49 96       	adiw	r24, 0x19	; 25
     632:	0e 94 5c 05 	call	0xab8	; 0xab8 <__pack_f>
     636:	a0 96       	adiw	r28, 0x20	; 32
     638:	e2 e1       	ldi	r30, 0x12	; 18
     63a:	0c 94 d9 24 	jmp	0x49b2	; 0x49b2 <__epilogue_restores__>

0000063e <__divsf3>:
     63e:	a8 e1       	ldi	r26, 0x18	; 24
     640:	b0 e0       	ldi	r27, 0x00	; 0
     642:	e5 e2       	ldi	r30, 0x25	; 37
     644:	f3 e0       	ldi	r31, 0x03	; 3
     646:	0c 94 c5 24 	jmp	0x498a	; 0x498a <__prologue_saves__+0x10>
     64a:	69 83       	std	Y+1, r22	; 0x01
     64c:	7a 83       	std	Y+2, r23	; 0x02
     64e:	8b 83       	std	Y+3, r24	; 0x03
     650:	9c 83       	std	Y+4, r25	; 0x04
     652:	2d 83       	std	Y+5, r18	; 0x05
     654:	3e 83       	std	Y+6, r19	; 0x06
     656:	4f 83       	std	Y+7, r20	; 0x07
     658:	58 87       	std	Y+8, r21	; 0x08
     65a:	b9 e0       	ldi	r27, 0x09	; 9
     65c:	eb 2e       	mov	r14, r27
     65e:	f1 2c       	mov	r15, r1
     660:	ec 0e       	add	r14, r28
     662:	fd 1e       	adc	r15, r29
     664:	ce 01       	movw	r24, r28
     666:	01 96       	adiw	r24, 0x01	; 1
     668:	b7 01       	movw	r22, r14
     66a:	0e 94 31 06 	call	0xc62	; 0xc62 <__unpack_f>
     66e:	8e 01       	movw	r16, r28
     670:	0f 5e       	subi	r16, 0xEF	; 239
     672:	1f 4f       	sbci	r17, 0xFF	; 255
     674:	ce 01       	movw	r24, r28
     676:	05 96       	adiw	r24, 0x05	; 5
     678:	b8 01       	movw	r22, r16
     67a:	0e 94 31 06 	call	0xc62	; 0xc62 <__unpack_f>
     67e:	29 85       	ldd	r18, Y+9	; 0x09
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	08 f4       	brcc	.+2      	; 0x686 <__divsf3+0x48>
     684:	7e c0       	rjmp	.+252    	; 0x782 <__divsf3+0x144>
     686:	39 89       	ldd	r19, Y+17	; 0x11
     688:	32 30       	cpi	r19, 0x02	; 2
     68a:	10 f4       	brcc	.+4      	; 0x690 <__divsf3+0x52>
     68c:	b8 01       	movw	r22, r16
     68e:	7c c0       	rjmp	.+248    	; 0x788 <__divsf3+0x14a>
     690:	8a 85       	ldd	r24, Y+10	; 0x0a
     692:	9a 89       	ldd	r25, Y+18	; 0x12
     694:	89 27       	eor	r24, r25
     696:	8a 87       	std	Y+10, r24	; 0x0a
     698:	24 30       	cpi	r18, 0x04	; 4
     69a:	11 f0       	breq	.+4      	; 0x6a0 <__divsf3+0x62>
     69c:	22 30       	cpi	r18, 0x02	; 2
     69e:	31 f4       	brne	.+12     	; 0x6ac <__divsf3+0x6e>
     6a0:	23 17       	cp	r18, r19
     6a2:	09 f0       	breq	.+2      	; 0x6a6 <__divsf3+0x68>
     6a4:	6e c0       	rjmp	.+220    	; 0x782 <__divsf3+0x144>
     6a6:	66 e1       	ldi	r22, 0x16	; 22
     6a8:	71 e0       	ldi	r23, 0x01	; 1
     6aa:	6e c0       	rjmp	.+220    	; 0x788 <__divsf3+0x14a>
     6ac:	34 30       	cpi	r19, 0x04	; 4
     6ae:	39 f4       	brne	.+14     	; 0x6be <__divsf3+0x80>
     6b0:	1d 86       	std	Y+13, r1	; 0x0d
     6b2:	1e 86       	std	Y+14, r1	; 0x0e
     6b4:	1f 86       	std	Y+15, r1	; 0x0f
     6b6:	18 8a       	std	Y+16, r1	; 0x10
     6b8:	1c 86       	std	Y+12, r1	; 0x0c
     6ba:	1b 86       	std	Y+11, r1	; 0x0b
     6bc:	04 c0       	rjmp	.+8      	; 0x6c6 <__divsf3+0x88>
     6be:	32 30       	cpi	r19, 0x02	; 2
     6c0:	21 f4       	brne	.+8      	; 0x6ca <__divsf3+0x8c>
     6c2:	84 e0       	ldi	r24, 0x04	; 4
     6c4:	89 87       	std	Y+9, r24	; 0x09
     6c6:	b7 01       	movw	r22, r14
     6c8:	5f c0       	rjmp	.+190    	; 0x788 <__divsf3+0x14a>
     6ca:	2b 85       	ldd	r18, Y+11	; 0x0b
     6cc:	3c 85       	ldd	r19, Y+12	; 0x0c
     6ce:	8b 89       	ldd	r24, Y+19	; 0x13
     6d0:	9c 89       	ldd	r25, Y+20	; 0x14
     6d2:	28 1b       	sub	r18, r24
     6d4:	39 0b       	sbc	r19, r25
     6d6:	3c 87       	std	Y+12, r19	; 0x0c
     6d8:	2b 87       	std	Y+11, r18	; 0x0b
     6da:	ed 84       	ldd	r14, Y+13	; 0x0d
     6dc:	fe 84       	ldd	r15, Y+14	; 0x0e
     6de:	0f 85       	ldd	r16, Y+15	; 0x0f
     6e0:	18 89       	ldd	r17, Y+16	; 0x10
     6e2:	ad 88       	ldd	r10, Y+21	; 0x15
     6e4:	be 88       	ldd	r11, Y+22	; 0x16
     6e6:	cf 88       	ldd	r12, Y+23	; 0x17
     6e8:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ea:	ea 14       	cp	r14, r10
     6ec:	fb 04       	cpc	r15, r11
     6ee:	0c 05       	cpc	r16, r12
     6f0:	1d 05       	cpc	r17, r13
     6f2:	40 f4       	brcc	.+16     	; 0x704 <__divsf3+0xc6>
     6f4:	ee 0c       	add	r14, r14
     6f6:	ff 1c       	adc	r15, r15
     6f8:	00 1f       	adc	r16, r16
     6fa:	11 1f       	adc	r17, r17
     6fc:	21 50       	subi	r18, 0x01	; 1
     6fe:	30 40       	sbci	r19, 0x00	; 0
     700:	3c 87       	std	Y+12, r19	; 0x0c
     702:	2b 87       	std	Y+11, r18	; 0x0b
     704:	20 e0       	ldi	r18, 0x00	; 0
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	40 e0       	ldi	r20, 0x00	; 0
     70a:	50 e0       	ldi	r21, 0x00	; 0
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	a0 e0       	ldi	r26, 0x00	; 0
     712:	b0 e4       	ldi	r27, 0x40	; 64
     714:	60 e0       	ldi	r22, 0x00	; 0
     716:	70 e0       	ldi	r23, 0x00	; 0
     718:	ea 14       	cp	r14, r10
     71a:	fb 04       	cpc	r15, r11
     71c:	0c 05       	cpc	r16, r12
     71e:	1d 05       	cpc	r17, r13
     720:	40 f0       	brcs	.+16     	; 0x732 <__divsf3+0xf4>
     722:	28 2b       	or	r18, r24
     724:	39 2b       	or	r19, r25
     726:	4a 2b       	or	r20, r26
     728:	5b 2b       	or	r21, r27
     72a:	ea 18       	sub	r14, r10
     72c:	fb 08       	sbc	r15, r11
     72e:	0c 09       	sbc	r16, r12
     730:	1d 09       	sbc	r17, r13
     732:	b6 95       	lsr	r27
     734:	a7 95       	ror	r26
     736:	97 95       	ror	r25
     738:	87 95       	ror	r24
     73a:	ee 0c       	add	r14, r14
     73c:	ff 1c       	adc	r15, r15
     73e:	00 1f       	adc	r16, r16
     740:	11 1f       	adc	r17, r17
     742:	6f 5f       	subi	r22, 0xFF	; 255
     744:	7f 4f       	sbci	r23, 0xFF	; 255
     746:	6f 31       	cpi	r22, 0x1F	; 31
     748:	71 05       	cpc	r23, r1
     74a:	31 f7       	brne	.-52     	; 0x718 <__divsf3+0xda>
     74c:	da 01       	movw	r26, r20
     74e:	c9 01       	movw	r24, r18
     750:	8f 77       	andi	r24, 0x7F	; 127
     752:	90 70       	andi	r25, 0x00	; 0
     754:	a0 70       	andi	r26, 0x00	; 0
     756:	b0 70       	andi	r27, 0x00	; 0
     758:	80 34       	cpi	r24, 0x40	; 64
     75a:	91 05       	cpc	r25, r1
     75c:	a1 05       	cpc	r26, r1
     75e:	b1 05       	cpc	r27, r1
     760:	61 f4       	brne	.+24     	; 0x77a <__divsf3+0x13c>
     762:	27 fd       	sbrc	r18, 7
     764:	0a c0       	rjmp	.+20     	; 0x77a <__divsf3+0x13c>
     766:	e1 14       	cp	r14, r1
     768:	f1 04       	cpc	r15, r1
     76a:	01 05       	cpc	r16, r1
     76c:	11 05       	cpc	r17, r1
     76e:	29 f0       	breq	.+10     	; 0x77a <__divsf3+0x13c>
     770:	20 5c       	subi	r18, 0xC0	; 192
     772:	3f 4f       	sbci	r19, 0xFF	; 255
     774:	4f 4f       	sbci	r20, 0xFF	; 255
     776:	5f 4f       	sbci	r21, 0xFF	; 255
     778:	20 78       	andi	r18, 0x80	; 128
     77a:	2d 87       	std	Y+13, r18	; 0x0d
     77c:	3e 87       	std	Y+14, r19	; 0x0e
     77e:	4f 87       	std	Y+15, r20	; 0x0f
     780:	58 8b       	std	Y+16, r21	; 0x10
     782:	be 01       	movw	r22, r28
     784:	67 5f       	subi	r22, 0xF7	; 247
     786:	7f 4f       	sbci	r23, 0xFF	; 255
     788:	cb 01       	movw	r24, r22
     78a:	0e 94 5c 05 	call	0xab8	; 0xab8 <__pack_f>
     78e:	68 96       	adiw	r28, 0x18	; 24
     790:	ea e0       	ldi	r30, 0x0A	; 10
     792:	0c 94 e1 24 	jmp	0x49c2	; 0x49c2 <__epilogue_restores__+0x10>

00000796 <__gtsf2>:
     796:	a8 e1       	ldi	r26, 0x18	; 24
     798:	b0 e0       	ldi	r27, 0x00	; 0
     79a:	e1 ed       	ldi	r30, 0xD1	; 209
     79c:	f3 e0       	ldi	r31, 0x03	; 3
     79e:	0c 94 c9 24 	jmp	0x4992	; 0x4992 <__prologue_saves__+0x18>
     7a2:	69 83       	std	Y+1, r22	; 0x01
     7a4:	7a 83       	std	Y+2, r23	; 0x02
     7a6:	8b 83       	std	Y+3, r24	; 0x03
     7a8:	9c 83       	std	Y+4, r25	; 0x04
     7aa:	2d 83       	std	Y+5, r18	; 0x05
     7ac:	3e 83       	std	Y+6, r19	; 0x06
     7ae:	4f 83       	std	Y+7, r20	; 0x07
     7b0:	58 87       	std	Y+8, r21	; 0x08
     7b2:	89 e0       	ldi	r24, 0x09	; 9
     7b4:	e8 2e       	mov	r14, r24
     7b6:	f1 2c       	mov	r15, r1
     7b8:	ec 0e       	add	r14, r28
     7ba:	fd 1e       	adc	r15, r29
     7bc:	ce 01       	movw	r24, r28
     7be:	01 96       	adiw	r24, 0x01	; 1
     7c0:	b7 01       	movw	r22, r14
     7c2:	0e 94 31 06 	call	0xc62	; 0xc62 <__unpack_f>
     7c6:	8e 01       	movw	r16, r28
     7c8:	0f 5e       	subi	r16, 0xEF	; 239
     7ca:	1f 4f       	sbci	r17, 0xFF	; 255
     7cc:	ce 01       	movw	r24, r28
     7ce:	05 96       	adiw	r24, 0x05	; 5
     7d0:	b8 01       	movw	r22, r16
     7d2:	0e 94 31 06 	call	0xc62	; 0xc62 <__unpack_f>
     7d6:	89 85       	ldd	r24, Y+9	; 0x09
     7d8:	82 30       	cpi	r24, 0x02	; 2
     7da:	40 f0       	brcs	.+16     	; 0x7ec <__gtsf2+0x56>
     7dc:	89 89       	ldd	r24, Y+17	; 0x11
     7de:	82 30       	cpi	r24, 0x02	; 2
     7e0:	28 f0       	brcs	.+10     	; 0x7ec <__gtsf2+0x56>
     7e2:	c7 01       	movw	r24, r14
     7e4:	b8 01       	movw	r22, r16
     7e6:	0e 94 a9 06 	call	0xd52	; 0xd52 <__fpcmp_parts_f>
     7ea:	01 c0       	rjmp	.+2      	; 0x7ee <__gtsf2+0x58>
     7ec:	8f ef       	ldi	r24, 0xFF	; 255
     7ee:	68 96       	adiw	r28, 0x18	; 24
     7f0:	e6 e0       	ldi	r30, 0x06	; 6
     7f2:	0c 94 e5 24 	jmp	0x49ca	; 0x49ca <__epilogue_restores__+0x18>

000007f6 <__gesf2>:
     7f6:	a8 e1       	ldi	r26, 0x18	; 24
     7f8:	b0 e0       	ldi	r27, 0x00	; 0
     7fa:	e1 e0       	ldi	r30, 0x01	; 1
     7fc:	f4 e0       	ldi	r31, 0x04	; 4
     7fe:	0c 94 c9 24 	jmp	0x4992	; 0x4992 <__prologue_saves__+0x18>
     802:	69 83       	std	Y+1, r22	; 0x01
     804:	7a 83       	std	Y+2, r23	; 0x02
     806:	8b 83       	std	Y+3, r24	; 0x03
     808:	9c 83       	std	Y+4, r25	; 0x04
     80a:	2d 83       	std	Y+5, r18	; 0x05
     80c:	3e 83       	std	Y+6, r19	; 0x06
     80e:	4f 83       	std	Y+7, r20	; 0x07
     810:	58 87       	std	Y+8, r21	; 0x08
     812:	89 e0       	ldi	r24, 0x09	; 9
     814:	e8 2e       	mov	r14, r24
     816:	f1 2c       	mov	r15, r1
     818:	ec 0e       	add	r14, r28
     81a:	fd 1e       	adc	r15, r29
     81c:	ce 01       	movw	r24, r28
     81e:	01 96       	adiw	r24, 0x01	; 1
     820:	b7 01       	movw	r22, r14
     822:	0e 94 31 06 	call	0xc62	; 0xc62 <__unpack_f>
     826:	8e 01       	movw	r16, r28
     828:	0f 5e       	subi	r16, 0xEF	; 239
     82a:	1f 4f       	sbci	r17, 0xFF	; 255
     82c:	ce 01       	movw	r24, r28
     82e:	05 96       	adiw	r24, 0x05	; 5
     830:	b8 01       	movw	r22, r16
     832:	0e 94 31 06 	call	0xc62	; 0xc62 <__unpack_f>
     836:	89 85       	ldd	r24, Y+9	; 0x09
     838:	82 30       	cpi	r24, 0x02	; 2
     83a:	40 f0       	brcs	.+16     	; 0x84c <__gesf2+0x56>
     83c:	89 89       	ldd	r24, Y+17	; 0x11
     83e:	82 30       	cpi	r24, 0x02	; 2
     840:	28 f0       	brcs	.+10     	; 0x84c <__gesf2+0x56>
     842:	c7 01       	movw	r24, r14
     844:	b8 01       	movw	r22, r16
     846:	0e 94 a9 06 	call	0xd52	; 0xd52 <__fpcmp_parts_f>
     84a:	01 c0       	rjmp	.+2      	; 0x84e <__gesf2+0x58>
     84c:	8f ef       	ldi	r24, 0xFF	; 255
     84e:	68 96       	adiw	r28, 0x18	; 24
     850:	e6 e0       	ldi	r30, 0x06	; 6
     852:	0c 94 e5 24 	jmp	0x49ca	; 0x49ca <__epilogue_restores__+0x18>

00000856 <__ltsf2>:
     856:	a8 e1       	ldi	r26, 0x18	; 24
     858:	b0 e0       	ldi	r27, 0x00	; 0
     85a:	e1 e3       	ldi	r30, 0x31	; 49
     85c:	f4 e0       	ldi	r31, 0x04	; 4
     85e:	0c 94 c9 24 	jmp	0x4992	; 0x4992 <__prologue_saves__+0x18>
     862:	69 83       	std	Y+1, r22	; 0x01
     864:	7a 83       	std	Y+2, r23	; 0x02
     866:	8b 83       	std	Y+3, r24	; 0x03
     868:	9c 83       	std	Y+4, r25	; 0x04
     86a:	2d 83       	std	Y+5, r18	; 0x05
     86c:	3e 83       	std	Y+6, r19	; 0x06
     86e:	4f 83       	std	Y+7, r20	; 0x07
     870:	58 87       	std	Y+8, r21	; 0x08
     872:	89 e0       	ldi	r24, 0x09	; 9
     874:	e8 2e       	mov	r14, r24
     876:	f1 2c       	mov	r15, r1
     878:	ec 0e       	add	r14, r28
     87a:	fd 1e       	adc	r15, r29
     87c:	ce 01       	movw	r24, r28
     87e:	01 96       	adiw	r24, 0x01	; 1
     880:	b7 01       	movw	r22, r14
     882:	0e 94 31 06 	call	0xc62	; 0xc62 <__unpack_f>
     886:	8e 01       	movw	r16, r28
     888:	0f 5e       	subi	r16, 0xEF	; 239
     88a:	1f 4f       	sbci	r17, 0xFF	; 255
     88c:	ce 01       	movw	r24, r28
     88e:	05 96       	adiw	r24, 0x05	; 5
     890:	b8 01       	movw	r22, r16
     892:	0e 94 31 06 	call	0xc62	; 0xc62 <__unpack_f>
     896:	89 85       	ldd	r24, Y+9	; 0x09
     898:	82 30       	cpi	r24, 0x02	; 2
     89a:	40 f0       	brcs	.+16     	; 0x8ac <__stack+0x4d>
     89c:	89 89       	ldd	r24, Y+17	; 0x11
     89e:	82 30       	cpi	r24, 0x02	; 2
     8a0:	28 f0       	brcs	.+10     	; 0x8ac <__stack+0x4d>
     8a2:	c7 01       	movw	r24, r14
     8a4:	b8 01       	movw	r22, r16
     8a6:	0e 94 a9 06 	call	0xd52	; 0xd52 <__fpcmp_parts_f>
     8aa:	01 c0       	rjmp	.+2      	; 0x8ae <__stack+0x4f>
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	68 96       	adiw	r28, 0x18	; 24
     8b0:	e6 e0       	ldi	r30, 0x06	; 6
     8b2:	0c 94 e5 24 	jmp	0x49ca	; 0x49ca <__epilogue_restores__+0x18>

000008b6 <__floatsisf>:
     8b6:	a8 e0       	ldi	r26, 0x08	; 8
     8b8:	b0 e0       	ldi	r27, 0x00	; 0
     8ba:	e1 e6       	ldi	r30, 0x61	; 97
     8bc:	f4 e0       	ldi	r31, 0x04	; 4
     8be:	0c 94 c6 24 	jmp	0x498c	; 0x498c <__prologue_saves__+0x12>
     8c2:	9b 01       	movw	r18, r22
     8c4:	ac 01       	movw	r20, r24
     8c6:	83 e0       	ldi	r24, 0x03	; 3
     8c8:	89 83       	std	Y+1, r24	; 0x01
     8ca:	da 01       	movw	r26, r20
     8cc:	c9 01       	movw	r24, r18
     8ce:	88 27       	eor	r24, r24
     8d0:	b7 fd       	sbrc	r27, 7
     8d2:	83 95       	inc	r24
     8d4:	99 27       	eor	r25, r25
     8d6:	aa 27       	eor	r26, r26
     8d8:	bb 27       	eor	r27, r27
     8da:	b8 2e       	mov	r11, r24
     8dc:	21 15       	cp	r18, r1
     8de:	31 05       	cpc	r19, r1
     8e0:	41 05       	cpc	r20, r1
     8e2:	51 05       	cpc	r21, r1
     8e4:	19 f4       	brne	.+6      	; 0x8ec <__floatsisf+0x36>
     8e6:	82 e0       	ldi	r24, 0x02	; 2
     8e8:	89 83       	std	Y+1, r24	; 0x01
     8ea:	3a c0       	rjmp	.+116    	; 0x960 <__floatsisf+0xaa>
     8ec:	88 23       	and	r24, r24
     8ee:	a9 f0       	breq	.+42     	; 0x91a <__floatsisf+0x64>
     8f0:	20 30       	cpi	r18, 0x00	; 0
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	38 07       	cpc	r19, r24
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	48 07       	cpc	r20, r24
     8fa:	80 e8       	ldi	r24, 0x80	; 128
     8fc:	58 07       	cpc	r21, r24
     8fe:	29 f4       	brne	.+10     	; 0x90a <__floatsisf+0x54>
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	9f ec       	ldi	r25, 0xCF	; 207
     908:	30 c0       	rjmp	.+96     	; 0x96a <__floatsisf+0xb4>
     90a:	ee 24       	eor	r14, r14
     90c:	ff 24       	eor	r15, r15
     90e:	87 01       	movw	r16, r14
     910:	e2 1a       	sub	r14, r18
     912:	f3 0a       	sbc	r15, r19
     914:	04 0b       	sbc	r16, r20
     916:	15 0b       	sbc	r17, r21
     918:	02 c0       	rjmp	.+4      	; 0x91e <__floatsisf+0x68>
     91a:	79 01       	movw	r14, r18
     91c:	8a 01       	movw	r16, r20
     91e:	8e e1       	ldi	r24, 0x1E	; 30
     920:	c8 2e       	mov	r12, r24
     922:	d1 2c       	mov	r13, r1
     924:	dc 82       	std	Y+4, r13	; 0x04
     926:	cb 82       	std	Y+3, r12	; 0x03
     928:	ed 82       	std	Y+5, r14	; 0x05
     92a:	fe 82       	std	Y+6, r15	; 0x06
     92c:	0f 83       	std	Y+7, r16	; 0x07
     92e:	18 87       	std	Y+8, r17	; 0x08
     930:	c8 01       	movw	r24, r16
     932:	b7 01       	movw	r22, r14
     934:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__clzsi2>
     938:	01 97       	sbiw	r24, 0x01	; 1
     93a:	18 16       	cp	r1, r24
     93c:	19 06       	cpc	r1, r25
     93e:	84 f4       	brge	.+32     	; 0x960 <__floatsisf+0xaa>
     940:	08 2e       	mov	r0, r24
     942:	04 c0       	rjmp	.+8      	; 0x94c <__floatsisf+0x96>
     944:	ee 0c       	add	r14, r14
     946:	ff 1c       	adc	r15, r15
     948:	00 1f       	adc	r16, r16
     94a:	11 1f       	adc	r17, r17
     94c:	0a 94       	dec	r0
     94e:	d2 f7       	brpl	.-12     	; 0x944 <__floatsisf+0x8e>
     950:	ed 82       	std	Y+5, r14	; 0x05
     952:	fe 82       	std	Y+6, r15	; 0x06
     954:	0f 83       	std	Y+7, r16	; 0x07
     956:	18 87       	std	Y+8, r17	; 0x08
     958:	c8 1a       	sub	r12, r24
     95a:	d9 0a       	sbc	r13, r25
     95c:	dc 82       	std	Y+4, r13	; 0x04
     95e:	cb 82       	std	Y+3, r12	; 0x03
     960:	ba 82       	std	Y+2, r11	; 0x02
     962:	ce 01       	movw	r24, r28
     964:	01 96       	adiw	r24, 0x01	; 1
     966:	0e 94 5c 05 	call	0xab8	; 0xab8 <__pack_f>
     96a:	28 96       	adiw	r28, 0x08	; 8
     96c:	e9 e0       	ldi	r30, 0x09	; 9
     96e:	0c 94 e2 24 	jmp	0x49c4	; 0x49c4 <__epilogue_restores__+0x12>

00000972 <__fixsfsi>:
     972:	ac e0       	ldi	r26, 0x0C	; 12
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	ef eb       	ldi	r30, 0xBF	; 191
     978:	f4 e0       	ldi	r31, 0x04	; 4
     97a:	0c 94 cd 24 	jmp	0x499a	; 0x499a <__prologue_saves__+0x20>
     97e:	69 83       	std	Y+1, r22	; 0x01
     980:	7a 83       	std	Y+2, r23	; 0x02
     982:	8b 83       	std	Y+3, r24	; 0x03
     984:	9c 83       	std	Y+4, r25	; 0x04
     986:	ce 01       	movw	r24, r28
     988:	01 96       	adiw	r24, 0x01	; 1
     98a:	be 01       	movw	r22, r28
     98c:	6b 5f       	subi	r22, 0xFB	; 251
     98e:	7f 4f       	sbci	r23, 0xFF	; 255
     990:	0e 94 31 06 	call	0xc62	; 0xc62 <__unpack_f>
     994:	8d 81       	ldd	r24, Y+5	; 0x05
     996:	82 30       	cpi	r24, 0x02	; 2
     998:	61 f1       	breq	.+88     	; 0x9f2 <__fixsfsi+0x80>
     99a:	82 30       	cpi	r24, 0x02	; 2
     99c:	50 f1       	brcs	.+84     	; 0x9f2 <__fixsfsi+0x80>
     99e:	84 30       	cpi	r24, 0x04	; 4
     9a0:	21 f4       	brne	.+8      	; 0x9aa <__fixsfsi+0x38>
     9a2:	8e 81       	ldd	r24, Y+6	; 0x06
     9a4:	88 23       	and	r24, r24
     9a6:	51 f1       	breq	.+84     	; 0x9fc <__fixsfsi+0x8a>
     9a8:	2e c0       	rjmp	.+92     	; 0xa06 <__fixsfsi+0x94>
     9aa:	2f 81       	ldd	r18, Y+7	; 0x07
     9ac:	38 85       	ldd	r19, Y+8	; 0x08
     9ae:	37 fd       	sbrc	r19, 7
     9b0:	20 c0       	rjmp	.+64     	; 0x9f2 <__fixsfsi+0x80>
     9b2:	6e 81       	ldd	r22, Y+6	; 0x06
     9b4:	2f 31       	cpi	r18, 0x1F	; 31
     9b6:	31 05       	cpc	r19, r1
     9b8:	1c f0       	brlt	.+6      	; 0x9c0 <__fixsfsi+0x4e>
     9ba:	66 23       	and	r22, r22
     9bc:	f9 f0       	breq	.+62     	; 0x9fc <__fixsfsi+0x8a>
     9be:	23 c0       	rjmp	.+70     	; 0xa06 <__fixsfsi+0x94>
     9c0:	8e e1       	ldi	r24, 0x1E	; 30
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	82 1b       	sub	r24, r18
     9c6:	93 0b       	sbc	r25, r19
     9c8:	29 85       	ldd	r18, Y+9	; 0x09
     9ca:	3a 85       	ldd	r19, Y+10	; 0x0a
     9cc:	4b 85       	ldd	r20, Y+11	; 0x0b
     9ce:	5c 85       	ldd	r21, Y+12	; 0x0c
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__fixsfsi+0x68>
     9d2:	56 95       	lsr	r21
     9d4:	47 95       	ror	r20
     9d6:	37 95       	ror	r19
     9d8:	27 95       	ror	r18
     9da:	8a 95       	dec	r24
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__fixsfsi+0x60>
     9de:	66 23       	and	r22, r22
     9e0:	b1 f0       	breq	.+44     	; 0xa0e <__fixsfsi+0x9c>
     9e2:	50 95       	com	r21
     9e4:	40 95       	com	r20
     9e6:	30 95       	com	r19
     9e8:	21 95       	neg	r18
     9ea:	3f 4f       	sbci	r19, 0xFF	; 255
     9ec:	4f 4f       	sbci	r20, 0xFF	; 255
     9ee:	5f 4f       	sbci	r21, 0xFF	; 255
     9f0:	0e c0       	rjmp	.+28     	; 0xa0e <__fixsfsi+0x9c>
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	40 e0       	ldi	r20, 0x00	; 0
     9f8:	50 e0       	ldi	r21, 0x00	; 0
     9fa:	09 c0       	rjmp	.+18     	; 0xa0e <__fixsfsi+0x9c>
     9fc:	2f ef       	ldi	r18, 0xFF	; 255
     9fe:	3f ef       	ldi	r19, 0xFF	; 255
     a00:	4f ef       	ldi	r20, 0xFF	; 255
     a02:	5f e7       	ldi	r21, 0x7F	; 127
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__fixsfsi+0x9c>
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	40 e0       	ldi	r20, 0x00	; 0
     a0c:	50 e8       	ldi	r21, 0x80	; 128
     a0e:	b9 01       	movw	r22, r18
     a10:	ca 01       	movw	r24, r20
     a12:	2c 96       	adiw	r28, 0x0c	; 12
     a14:	e2 e0       	ldi	r30, 0x02	; 2
     a16:	0c 94 e9 24 	jmp	0x49d2	; 0x49d2 <__epilogue_restores__+0x20>

00000a1a <__clzsi2>:
     a1a:	ef 92       	push	r14
     a1c:	ff 92       	push	r15
     a1e:	0f 93       	push	r16
     a20:	1f 93       	push	r17
     a22:	7b 01       	movw	r14, r22
     a24:	8c 01       	movw	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	e8 16       	cp	r14, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	f8 06       	cpc	r15, r24
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	08 07       	cpc	r16, r24
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	18 07       	cpc	r17, r24
     a36:	88 f4       	brcc	.+34     	; 0xa5a <__clzsi2+0x40>
     a38:	8f ef       	ldi	r24, 0xFF	; 255
     a3a:	e8 16       	cp	r14, r24
     a3c:	f1 04       	cpc	r15, r1
     a3e:	01 05       	cpc	r16, r1
     a40:	11 05       	cpc	r17, r1
     a42:	31 f0       	breq	.+12     	; 0xa50 <__clzsi2+0x36>
     a44:	28 f0       	brcs	.+10     	; 0xa50 <__clzsi2+0x36>
     a46:	88 e0       	ldi	r24, 0x08	; 8
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	a0 e0       	ldi	r26, 0x00	; 0
     a4c:	b0 e0       	ldi	r27, 0x00	; 0
     a4e:	17 c0       	rjmp	.+46     	; 0xa7e <__clzsi2+0x64>
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	12 c0       	rjmp	.+36     	; 0xa7e <__clzsi2+0x64>
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	e8 16       	cp	r14, r24
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	f8 06       	cpc	r15, r24
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	08 07       	cpc	r16, r24
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	18 07       	cpc	r17, r24
     a6a:	28 f0       	brcs	.+10     	; 0xa76 <__clzsi2+0x5c>
     a6c:	88 e1       	ldi	r24, 0x18	; 24
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	a0 e0       	ldi	r26, 0x00	; 0
     a72:	b0 e0       	ldi	r27, 0x00	; 0
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__clzsi2+0x64>
     a76:	80 e1       	ldi	r24, 0x10	; 16
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	20 e2       	ldi	r18, 0x20	; 32
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	40 e0       	ldi	r20, 0x00	; 0
     a84:	50 e0       	ldi	r21, 0x00	; 0
     a86:	28 1b       	sub	r18, r24
     a88:	39 0b       	sbc	r19, r25
     a8a:	4a 0b       	sbc	r20, r26
     a8c:	5b 0b       	sbc	r21, r27
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x7e>
     a90:	16 95       	lsr	r17
     a92:	07 95       	ror	r16
     a94:	f7 94       	ror	r15
     a96:	e7 94       	ror	r14
     a98:	8a 95       	dec	r24
     a9a:	d2 f7       	brpl	.-12     	; 0xa90 <__clzsi2+0x76>
     a9c:	f7 01       	movw	r30, r14
     a9e:	e2 5e       	subi	r30, 0xE2	; 226
     aa0:	fe 4f       	sbci	r31, 0xFE	; 254
     aa2:	80 81       	ld	r24, Z
     aa4:	28 1b       	sub	r18, r24
     aa6:	31 09       	sbc	r19, r1
     aa8:	41 09       	sbc	r20, r1
     aaa:	51 09       	sbc	r21, r1
     aac:	c9 01       	movw	r24, r18
     aae:	1f 91       	pop	r17
     ab0:	0f 91       	pop	r16
     ab2:	ff 90       	pop	r15
     ab4:	ef 90       	pop	r14
     ab6:	08 95       	ret

00000ab8 <__pack_f>:
     ab8:	df 92       	push	r13
     aba:	ef 92       	push	r14
     abc:	ff 92       	push	r15
     abe:	0f 93       	push	r16
     ac0:	1f 93       	push	r17
     ac2:	fc 01       	movw	r30, r24
     ac4:	e4 80       	ldd	r14, Z+4	; 0x04
     ac6:	f5 80       	ldd	r15, Z+5	; 0x05
     ac8:	06 81       	ldd	r16, Z+6	; 0x06
     aca:	17 81       	ldd	r17, Z+7	; 0x07
     acc:	d1 80       	ldd	r13, Z+1	; 0x01
     ace:	80 81       	ld	r24, Z
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	48 f4       	brcc	.+18     	; 0xae6 <__pack_f+0x2e>
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	a0 e1       	ldi	r26, 0x10	; 16
     ada:	b0 e0       	ldi	r27, 0x00	; 0
     adc:	e8 2a       	or	r14, r24
     ade:	f9 2a       	or	r15, r25
     ae0:	0a 2b       	or	r16, r26
     ae2:	1b 2b       	or	r17, r27
     ae4:	a5 c0       	rjmp	.+330    	; 0xc30 <__pack_f+0x178>
     ae6:	84 30       	cpi	r24, 0x04	; 4
     ae8:	09 f4       	brne	.+2      	; 0xaec <__pack_f+0x34>
     aea:	9f c0       	rjmp	.+318    	; 0xc2a <__pack_f+0x172>
     aec:	82 30       	cpi	r24, 0x02	; 2
     aee:	21 f4       	brne	.+8      	; 0xaf8 <__pack_f+0x40>
     af0:	ee 24       	eor	r14, r14
     af2:	ff 24       	eor	r15, r15
     af4:	87 01       	movw	r16, r14
     af6:	05 c0       	rjmp	.+10     	; 0xb02 <__pack_f+0x4a>
     af8:	e1 14       	cp	r14, r1
     afa:	f1 04       	cpc	r15, r1
     afc:	01 05       	cpc	r16, r1
     afe:	11 05       	cpc	r17, r1
     b00:	19 f4       	brne	.+6      	; 0xb08 <__pack_f+0x50>
     b02:	e0 e0       	ldi	r30, 0x00	; 0
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	96 c0       	rjmp	.+300    	; 0xc34 <__pack_f+0x17c>
     b08:	62 81       	ldd	r22, Z+2	; 0x02
     b0a:	73 81       	ldd	r23, Z+3	; 0x03
     b0c:	9f ef       	ldi	r25, 0xFF	; 255
     b0e:	62 38       	cpi	r22, 0x82	; 130
     b10:	79 07       	cpc	r23, r25
     b12:	0c f0       	brlt	.+2      	; 0xb16 <__pack_f+0x5e>
     b14:	5b c0       	rjmp	.+182    	; 0xbcc <__pack_f+0x114>
     b16:	22 e8       	ldi	r18, 0x82	; 130
     b18:	3f ef       	ldi	r19, 0xFF	; 255
     b1a:	26 1b       	sub	r18, r22
     b1c:	37 0b       	sbc	r19, r23
     b1e:	2a 31       	cpi	r18, 0x1A	; 26
     b20:	31 05       	cpc	r19, r1
     b22:	2c f0       	brlt	.+10     	; 0xb2e <__pack_f+0x76>
     b24:	20 e0       	ldi	r18, 0x00	; 0
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	40 e0       	ldi	r20, 0x00	; 0
     b2a:	50 e0       	ldi	r21, 0x00	; 0
     b2c:	2a c0       	rjmp	.+84     	; 0xb82 <__pack_f+0xca>
     b2e:	b8 01       	movw	r22, r16
     b30:	a7 01       	movw	r20, r14
     b32:	02 2e       	mov	r0, r18
     b34:	04 c0       	rjmp	.+8      	; 0xb3e <__pack_f+0x86>
     b36:	76 95       	lsr	r23
     b38:	67 95       	ror	r22
     b3a:	57 95       	ror	r21
     b3c:	47 95       	ror	r20
     b3e:	0a 94       	dec	r0
     b40:	d2 f7       	brpl	.-12     	; 0xb36 <__pack_f+0x7e>
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	b0 e0       	ldi	r27, 0x00	; 0
     b4a:	04 c0       	rjmp	.+8      	; 0xb54 <__pack_f+0x9c>
     b4c:	88 0f       	add	r24, r24
     b4e:	99 1f       	adc	r25, r25
     b50:	aa 1f       	adc	r26, r26
     b52:	bb 1f       	adc	r27, r27
     b54:	2a 95       	dec	r18
     b56:	d2 f7       	brpl	.-12     	; 0xb4c <__pack_f+0x94>
     b58:	01 97       	sbiw	r24, 0x01	; 1
     b5a:	a1 09       	sbc	r26, r1
     b5c:	b1 09       	sbc	r27, r1
     b5e:	8e 21       	and	r24, r14
     b60:	9f 21       	and	r25, r15
     b62:	a0 23       	and	r26, r16
     b64:	b1 23       	and	r27, r17
     b66:	00 97       	sbiw	r24, 0x00	; 0
     b68:	a1 05       	cpc	r26, r1
     b6a:	b1 05       	cpc	r27, r1
     b6c:	21 f0       	breq	.+8      	; 0xb76 <__pack_f+0xbe>
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	a0 e0       	ldi	r26, 0x00	; 0
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	9a 01       	movw	r18, r20
     b78:	ab 01       	movw	r20, r22
     b7a:	28 2b       	or	r18, r24
     b7c:	39 2b       	or	r19, r25
     b7e:	4a 2b       	or	r20, r26
     b80:	5b 2b       	or	r21, r27
     b82:	da 01       	movw	r26, r20
     b84:	c9 01       	movw	r24, r18
     b86:	8f 77       	andi	r24, 0x7F	; 127
     b88:	90 70       	andi	r25, 0x00	; 0
     b8a:	a0 70       	andi	r26, 0x00	; 0
     b8c:	b0 70       	andi	r27, 0x00	; 0
     b8e:	80 34       	cpi	r24, 0x40	; 64
     b90:	91 05       	cpc	r25, r1
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	39 f4       	brne	.+14     	; 0xba6 <__pack_f+0xee>
     b98:	27 ff       	sbrs	r18, 7
     b9a:	09 c0       	rjmp	.+18     	; 0xbae <__pack_f+0xf6>
     b9c:	20 5c       	subi	r18, 0xC0	; 192
     b9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ba0:	4f 4f       	sbci	r20, 0xFF	; 255
     ba2:	5f 4f       	sbci	r21, 0xFF	; 255
     ba4:	04 c0       	rjmp	.+8      	; 0xbae <__pack_f+0xf6>
     ba6:	21 5c       	subi	r18, 0xC1	; 193
     ba8:	3f 4f       	sbci	r19, 0xFF	; 255
     baa:	4f 4f       	sbci	r20, 0xFF	; 255
     bac:	5f 4f       	sbci	r21, 0xFF	; 255
     bae:	e0 e0       	ldi	r30, 0x00	; 0
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	20 30       	cpi	r18, 0x00	; 0
     bb4:	a0 e0       	ldi	r26, 0x00	; 0
     bb6:	3a 07       	cpc	r19, r26
     bb8:	a0 e0       	ldi	r26, 0x00	; 0
     bba:	4a 07       	cpc	r20, r26
     bbc:	a0 e4       	ldi	r26, 0x40	; 64
     bbe:	5a 07       	cpc	r21, r26
     bc0:	10 f0       	brcs	.+4      	; 0xbc6 <__pack_f+0x10e>
     bc2:	e1 e0       	ldi	r30, 0x01	; 1
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	79 01       	movw	r14, r18
     bc8:	8a 01       	movw	r16, r20
     bca:	27 c0       	rjmp	.+78     	; 0xc1a <__pack_f+0x162>
     bcc:	60 38       	cpi	r22, 0x80	; 128
     bce:	71 05       	cpc	r23, r1
     bd0:	64 f5       	brge	.+88     	; 0xc2a <__pack_f+0x172>
     bd2:	fb 01       	movw	r30, r22
     bd4:	e1 58       	subi	r30, 0x81	; 129
     bd6:	ff 4f       	sbci	r31, 0xFF	; 255
     bd8:	d8 01       	movw	r26, r16
     bda:	c7 01       	movw	r24, r14
     bdc:	8f 77       	andi	r24, 0x7F	; 127
     bde:	90 70       	andi	r25, 0x00	; 0
     be0:	a0 70       	andi	r26, 0x00	; 0
     be2:	b0 70       	andi	r27, 0x00	; 0
     be4:	80 34       	cpi	r24, 0x40	; 64
     be6:	91 05       	cpc	r25, r1
     be8:	a1 05       	cpc	r26, r1
     bea:	b1 05       	cpc	r27, r1
     bec:	39 f4       	brne	.+14     	; 0xbfc <__pack_f+0x144>
     bee:	e7 fe       	sbrs	r14, 7
     bf0:	0d c0       	rjmp	.+26     	; 0xc0c <__pack_f+0x154>
     bf2:	80 e4       	ldi	r24, 0x40	; 64
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	a0 e0       	ldi	r26, 0x00	; 0
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	04 c0       	rjmp	.+8      	; 0xc04 <__pack_f+0x14c>
     bfc:	8f e3       	ldi	r24, 0x3F	; 63
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	a0 e0       	ldi	r26, 0x00	; 0
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e8 0e       	add	r14, r24
     c06:	f9 1e       	adc	r15, r25
     c08:	0a 1f       	adc	r16, r26
     c0a:	1b 1f       	adc	r17, r27
     c0c:	17 ff       	sbrs	r17, 7
     c0e:	05 c0       	rjmp	.+10     	; 0xc1a <__pack_f+0x162>
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	31 96       	adiw	r30, 0x01	; 1
     c1a:	87 e0       	ldi	r24, 0x07	; 7
     c1c:	16 95       	lsr	r17
     c1e:	07 95       	ror	r16
     c20:	f7 94       	ror	r15
     c22:	e7 94       	ror	r14
     c24:	8a 95       	dec	r24
     c26:	d1 f7       	brne	.-12     	; 0xc1c <__pack_f+0x164>
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x17c>
     c2a:	ee 24       	eor	r14, r14
     c2c:	ff 24       	eor	r15, r15
     c2e:	87 01       	movw	r16, r14
     c30:	ef ef       	ldi	r30, 0xFF	; 255
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	6e 2f       	mov	r22, r30
     c36:	67 95       	ror	r22
     c38:	66 27       	eor	r22, r22
     c3a:	67 95       	ror	r22
     c3c:	90 2f       	mov	r25, r16
     c3e:	9f 77       	andi	r25, 0x7F	; 127
     c40:	d7 94       	ror	r13
     c42:	dd 24       	eor	r13, r13
     c44:	d7 94       	ror	r13
     c46:	8e 2f       	mov	r24, r30
     c48:	86 95       	lsr	r24
     c4a:	49 2f       	mov	r20, r25
     c4c:	46 2b       	or	r20, r22
     c4e:	58 2f       	mov	r21, r24
     c50:	5d 29       	or	r21, r13
     c52:	b7 01       	movw	r22, r14
     c54:	ca 01       	movw	r24, r20
     c56:	1f 91       	pop	r17
     c58:	0f 91       	pop	r16
     c5a:	ff 90       	pop	r15
     c5c:	ef 90       	pop	r14
     c5e:	df 90       	pop	r13
     c60:	08 95       	ret

00000c62 <__unpack_f>:
     c62:	fc 01       	movw	r30, r24
     c64:	db 01       	movw	r26, r22
     c66:	40 81       	ld	r20, Z
     c68:	51 81       	ldd	r21, Z+1	; 0x01
     c6a:	22 81       	ldd	r18, Z+2	; 0x02
     c6c:	62 2f       	mov	r22, r18
     c6e:	6f 77       	andi	r22, 0x7F	; 127
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	22 1f       	adc	r18, r18
     c74:	22 27       	eor	r18, r18
     c76:	22 1f       	adc	r18, r18
     c78:	93 81       	ldd	r25, Z+3	; 0x03
     c7a:	89 2f       	mov	r24, r25
     c7c:	88 0f       	add	r24, r24
     c7e:	82 2b       	or	r24, r18
     c80:	28 2f       	mov	r18, r24
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	99 1f       	adc	r25, r25
     c86:	99 27       	eor	r25, r25
     c88:	99 1f       	adc	r25, r25
     c8a:	11 96       	adiw	r26, 0x01	; 1
     c8c:	9c 93       	st	X, r25
     c8e:	11 97       	sbiw	r26, 0x01	; 1
     c90:	21 15       	cp	r18, r1
     c92:	31 05       	cpc	r19, r1
     c94:	a9 f5       	brne	.+106    	; 0xd00 <__unpack_f+0x9e>
     c96:	41 15       	cp	r20, r1
     c98:	51 05       	cpc	r21, r1
     c9a:	61 05       	cpc	r22, r1
     c9c:	71 05       	cpc	r23, r1
     c9e:	11 f4       	brne	.+4      	; 0xca4 <__unpack_f+0x42>
     ca0:	82 e0       	ldi	r24, 0x02	; 2
     ca2:	37 c0       	rjmp	.+110    	; 0xd12 <__unpack_f+0xb0>
     ca4:	82 e8       	ldi	r24, 0x82	; 130
     ca6:	9f ef       	ldi	r25, 0xFF	; 255
     ca8:	13 96       	adiw	r26, 0x03	; 3
     caa:	9c 93       	st	X, r25
     cac:	8e 93       	st	-X, r24
     cae:	12 97       	sbiw	r26, 0x02	; 2
     cb0:	9a 01       	movw	r18, r20
     cb2:	ab 01       	movw	r20, r22
     cb4:	67 e0       	ldi	r22, 0x07	; 7
     cb6:	22 0f       	add	r18, r18
     cb8:	33 1f       	adc	r19, r19
     cba:	44 1f       	adc	r20, r20
     cbc:	55 1f       	adc	r21, r21
     cbe:	6a 95       	dec	r22
     cc0:	d1 f7       	brne	.-12     	; 0xcb6 <__unpack_f+0x54>
     cc2:	83 e0       	ldi	r24, 0x03	; 3
     cc4:	8c 93       	st	X, r24
     cc6:	0d c0       	rjmp	.+26     	; 0xce2 <__unpack_f+0x80>
     cc8:	22 0f       	add	r18, r18
     cca:	33 1f       	adc	r19, r19
     ccc:	44 1f       	adc	r20, r20
     cce:	55 1f       	adc	r21, r21
     cd0:	12 96       	adiw	r26, 0x02	; 2
     cd2:	8d 91       	ld	r24, X+
     cd4:	9c 91       	ld	r25, X
     cd6:	13 97       	sbiw	r26, 0x03	; 3
     cd8:	01 97       	sbiw	r24, 0x01	; 1
     cda:	13 96       	adiw	r26, 0x03	; 3
     cdc:	9c 93       	st	X, r25
     cde:	8e 93       	st	-X, r24
     ce0:	12 97       	sbiw	r26, 0x02	; 2
     ce2:	20 30       	cpi	r18, 0x00	; 0
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	38 07       	cpc	r19, r24
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	48 07       	cpc	r20, r24
     cec:	80 e4       	ldi	r24, 0x40	; 64
     cee:	58 07       	cpc	r21, r24
     cf0:	58 f3       	brcs	.-42     	; 0xcc8 <__unpack_f+0x66>
     cf2:	14 96       	adiw	r26, 0x04	; 4
     cf4:	2d 93       	st	X+, r18
     cf6:	3d 93       	st	X+, r19
     cf8:	4d 93       	st	X+, r20
     cfa:	5c 93       	st	X, r21
     cfc:	17 97       	sbiw	r26, 0x07	; 7
     cfe:	08 95       	ret
     d00:	2f 3f       	cpi	r18, 0xFF	; 255
     d02:	31 05       	cpc	r19, r1
     d04:	79 f4       	brne	.+30     	; 0xd24 <__unpack_f+0xc2>
     d06:	41 15       	cp	r20, r1
     d08:	51 05       	cpc	r21, r1
     d0a:	61 05       	cpc	r22, r1
     d0c:	71 05       	cpc	r23, r1
     d0e:	19 f4       	brne	.+6      	; 0xd16 <__unpack_f+0xb4>
     d10:	84 e0       	ldi	r24, 0x04	; 4
     d12:	8c 93       	st	X, r24
     d14:	08 95       	ret
     d16:	64 ff       	sbrs	r22, 4
     d18:	03 c0       	rjmp	.+6      	; 0xd20 <__unpack_f+0xbe>
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	8c 93       	st	X, r24
     d1e:	12 c0       	rjmp	.+36     	; 0xd44 <__unpack_f+0xe2>
     d20:	1c 92       	st	X, r1
     d22:	10 c0       	rjmp	.+32     	; 0xd44 <__unpack_f+0xe2>
     d24:	2f 57       	subi	r18, 0x7F	; 127
     d26:	30 40       	sbci	r19, 0x00	; 0
     d28:	13 96       	adiw	r26, 0x03	; 3
     d2a:	3c 93       	st	X, r19
     d2c:	2e 93       	st	-X, r18
     d2e:	12 97       	sbiw	r26, 0x02	; 2
     d30:	83 e0       	ldi	r24, 0x03	; 3
     d32:	8c 93       	st	X, r24
     d34:	87 e0       	ldi	r24, 0x07	; 7
     d36:	44 0f       	add	r20, r20
     d38:	55 1f       	adc	r21, r21
     d3a:	66 1f       	adc	r22, r22
     d3c:	77 1f       	adc	r23, r23
     d3e:	8a 95       	dec	r24
     d40:	d1 f7       	brne	.-12     	; 0xd36 <__unpack_f+0xd4>
     d42:	70 64       	ori	r23, 0x40	; 64
     d44:	14 96       	adiw	r26, 0x04	; 4
     d46:	4d 93       	st	X+, r20
     d48:	5d 93       	st	X+, r21
     d4a:	6d 93       	st	X+, r22
     d4c:	7c 93       	st	X, r23
     d4e:	17 97       	sbiw	r26, 0x07	; 7
     d50:	08 95       	ret

00000d52 <__fpcmp_parts_f>:
     d52:	1f 93       	push	r17
     d54:	dc 01       	movw	r26, r24
     d56:	fb 01       	movw	r30, r22
     d58:	9c 91       	ld	r25, X
     d5a:	92 30       	cpi	r25, 0x02	; 2
     d5c:	08 f4       	brcc	.+2      	; 0xd60 <__fpcmp_parts_f+0xe>
     d5e:	47 c0       	rjmp	.+142    	; 0xdee <__fpcmp_parts_f+0x9c>
     d60:	80 81       	ld	r24, Z
     d62:	82 30       	cpi	r24, 0x02	; 2
     d64:	08 f4       	brcc	.+2      	; 0xd68 <__fpcmp_parts_f+0x16>
     d66:	43 c0       	rjmp	.+134    	; 0xdee <__fpcmp_parts_f+0x9c>
     d68:	94 30       	cpi	r25, 0x04	; 4
     d6a:	51 f4       	brne	.+20     	; 0xd80 <__fpcmp_parts_f+0x2e>
     d6c:	11 96       	adiw	r26, 0x01	; 1
     d6e:	1c 91       	ld	r17, X
     d70:	84 30       	cpi	r24, 0x04	; 4
     d72:	99 f5       	brne	.+102    	; 0xdda <__fpcmp_parts_f+0x88>
     d74:	81 81       	ldd	r24, Z+1	; 0x01
     d76:	68 2f       	mov	r22, r24
     d78:	70 e0       	ldi	r23, 0x00	; 0
     d7a:	61 1b       	sub	r22, r17
     d7c:	71 09       	sbc	r23, r1
     d7e:	3f c0       	rjmp	.+126    	; 0xdfe <__fpcmp_parts_f+0xac>
     d80:	84 30       	cpi	r24, 0x04	; 4
     d82:	21 f0       	breq	.+8      	; 0xd8c <__fpcmp_parts_f+0x3a>
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	31 f4       	brne	.+12     	; 0xd94 <__fpcmp_parts_f+0x42>
     d88:	82 30       	cpi	r24, 0x02	; 2
     d8a:	b9 f1       	breq	.+110    	; 0xdfa <__fpcmp_parts_f+0xa8>
     d8c:	81 81       	ldd	r24, Z+1	; 0x01
     d8e:	88 23       	and	r24, r24
     d90:	89 f1       	breq	.+98     	; 0xdf4 <__fpcmp_parts_f+0xa2>
     d92:	2d c0       	rjmp	.+90     	; 0xdee <__fpcmp_parts_f+0x9c>
     d94:	11 96       	adiw	r26, 0x01	; 1
     d96:	1c 91       	ld	r17, X
     d98:	11 97       	sbiw	r26, 0x01	; 1
     d9a:	82 30       	cpi	r24, 0x02	; 2
     d9c:	f1 f0       	breq	.+60     	; 0xdda <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	18 17       	cp	r17, r24
     da2:	d9 f4       	brne	.+54     	; 0xdda <__fpcmp_parts_f+0x88>
     da4:	12 96       	adiw	r26, 0x02	; 2
     da6:	2d 91       	ld	r18, X+
     da8:	3c 91       	ld	r19, X
     daa:	13 97       	sbiw	r26, 0x03	; 3
     dac:	82 81       	ldd	r24, Z+2	; 0x02
     dae:	93 81       	ldd	r25, Z+3	; 0x03
     db0:	82 17       	cp	r24, r18
     db2:	93 07       	cpc	r25, r19
     db4:	94 f0       	brlt	.+36     	; 0xdda <__fpcmp_parts_f+0x88>
     db6:	28 17       	cp	r18, r24
     db8:	39 07       	cpc	r19, r25
     dba:	bc f0       	brlt	.+46     	; 0xdea <__fpcmp_parts_f+0x98>
     dbc:	14 96       	adiw	r26, 0x04	; 4
     dbe:	8d 91       	ld	r24, X+
     dc0:	9d 91       	ld	r25, X+
     dc2:	0d 90       	ld	r0, X+
     dc4:	bc 91       	ld	r27, X
     dc6:	a0 2d       	mov	r26, r0
     dc8:	24 81       	ldd	r18, Z+4	; 0x04
     dca:	35 81       	ldd	r19, Z+5	; 0x05
     dcc:	46 81       	ldd	r20, Z+6	; 0x06
     dce:	57 81       	ldd	r21, Z+7	; 0x07
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	4a 07       	cpc	r20, r26
     dd6:	5b 07       	cpc	r21, r27
     dd8:	18 f4       	brcc	.+6      	; 0xde0 <__fpcmp_parts_f+0x8e>
     dda:	11 23       	and	r17, r17
     ddc:	41 f0       	breq	.+16     	; 0xdee <__fpcmp_parts_f+0x9c>
     dde:	0a c0       	rjmp	.+20     	; 0xdf4 <__fpcmp_parts_f+0xa2>
     de0:	82 17       	cp	r24, r18
     de2:	93 07       	cpc	r25, r19
     de4:	a4 07       	cpc	r26, r20
     de6:	b5 07       	cpc	r27, r21
     de8:	40 f4       	brcc	.+16     	; 0xdfa <__fpcmp_parts_f+0xa8>
     dea:	11 23       	and	r17, r17
     dec:	19 f0       	breq	.+6      	; 0xdf4 <__fpcmp_parts_f+0xa2>
     dee:	61 e0       	ldi	r22, 0x01	; 1
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	05 c0       	rjmp	.+10     	; 0xdfe <__fpcmp_parts_f+0xac>
     df4:	6f ef       	ldi	r22, 0xFF	; 255
     df6:	7f ef       	ldi	r23, 0xFF	; 255
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <__fpcmp_parts_f+0xac>
     dfa:	60 e0       	ldi	r22, 0x00	; 0
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	cb 01       	movw	r24, r22
     e00:	1f 91       	pop	r17
     e02:	08 95       	ret

00000e04 <EXTI_INIT>:
 */
#include "EXTI.h"


void EXTI_INIT(void)
{
     e04:	df 93       	push	r29
     e06:	cf 93       	push	r28
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(MCUCR_REG,0);
     e0c:	a5 e5       	ldi	r26, 0x55	; 85
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e5 e5       	ldi	r30, 0x55	; 85
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	8e 7f       	andi	r24, 0xFE	; 254
     e18:	8c 93       	st	X, r24
	CLR_BIT(MCUCR_REG,1);
     e1a:	a5 e5       	ldi	r26, 0x55	; 85
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e5 e5       	ldi	r30, 0x55	; 85
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	8d 7f       	andi	r24, 0xFD	; 253
     e26:	8c 93       	st	X, r24
	CLR_BIT(MCUCR_REG,2);
     e28:	a5 e5       	ldi	r26, 0x55	; 85
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e5 e5       	ldi	r30, 0x55	; 85
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	8b 7f       	andi	r24, 0xFB	; 251
     e34:	8c 93       	st	X, r24
	CLR_BIT(MCUCR_REG,3);
     e36:	a5 e5       	ldi	r26, 0x55	; 85
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e5 e5       	ldi	r30, 0x55	; 85
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	87 7f       	andi	r24, 0xF7	; 247
     e42:	8c 93       	st	X, r24
	CLR_BIT(MCUCSR_REG,6);
     e44:	a4 e5       	ldi	r26, 0x54	; 84
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e4 e5       	ldi	r30, 0x54	; 84
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 7b       	andi	r24, 0xBF	; 191
     e50:	8c 93       	st	X, r24


#if		EXTI0_MODE  == EXTI_LOW_LEVEL
	MCUCR_REG |= EXTI_LOW_LEVEL;
     e52:	a5 e5       	ldi	r26, 0x55	; 85
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e5 e5       	ldi	r30, 0x55	; 85
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8c 93       	st	X, r24
#if		EXTI1_MODE  == EXTI_LOW_LEVEL
	MCUCR_REG |= (EXTI_LOW_LEVEL << 2);
#elif	EXTI1_MODE	== EXTI_ANY_LOGICAL_CHANGE
	MCUCR_REG |= (EXTI_ANY_LOGICAL_CHANGE << 2);
#elif	EXTI1_MODE	== EXTI_FALLING_EDGE
	MCUCR_REG |= (EXTI_FALLING_EDGE<< 2);
     e5e:	a5 e5       	ldi	r26, 0x55	; 85
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e5 e5       	ldi	r30, 0x55	; 85
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	88 60       	ori	r24, 0x08	; 8
     e6a:	8c 93       	st	X, r24
#elif	EXTI1_MODE	== EXTI_RISING_EDGE
	MCUCR_REG |=(EXTI_RISING_EDGE <<2);
#endif

#if		EXTI2_MODE  == EXTI_INT2_FALLING_EDGE
	MCUCSR_REG |= EXTI_INT2_FALLING_EDGE;
     e6c:	a4 e5       	ldi	r26, 0x54	; 84
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e4 e5       	ldi	r30, 0x54	; 84
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	8c 93       	st	X, r24
#elif	EXTI2_MODE	== EXTI_INT2_RISING_EDGE
	MCUCSR_REG |= EXTI_INT2_RISING_EDGE;
#endif
}
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	08 95       	ret

00000e7e <EXTI_ENGlobal>:

void EXTI_ENGlobal(void)  	/*enable Global interrupt*/
{
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,7);
     e86:	af e5       	ldi	r26, 0x5F	; 95
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	ef e5       	ldi	r30, 0x5F	; 95
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	80 68       	ori	r24, 0x80	; 128
     e92:	8c 93       	st	X, r24
}
     e94:	cf 91       	pop	r28
     e96:	df 91       	pop	r29
     e98:	08 95       	ret

00000e9a <EXTI_DIGlobal>:

void EXTI_DIGlobal(void) /*Disable Global interrupt*/
{
     e9a:	df 93       	push	r29
     e9c:	cf 93       	push	r28
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG,7);
     ea2:	af e5       	ldi	r26, 0x5F	; 95
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	ef e5       	ldi	r30, 0x5F	; 95
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	8f 77       	andi	r24, 0x7F	; 127
     eae:	8c 93       	st	X, r24
}
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <EXTI_EN0>:


void EXTI_EN0(void)			/*enable external interrupt*/
{
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR_REG,6);
     ebe:	ab e5       	ldi	r26, 0x5B	; 91
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	eb e5       	ldi	r30, 0x5B	; 91
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	80 64       	ori	r24, 0x40	; 64
     eca:	8c 93       	st	X, r24
}
     ecc:	cf 91       	pop	r28
     ece:	df 91       	pop	r29
     ed0:	08 95       	ret

00000ed2 <EXTI_DI0>:

void EXTI_DI0(void)			/*disable external interrupt*/
{
     ed2:	df 93       	push	r29
     ed4:	cf 93       	push	r28
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(GICR_REG,6);
     eda:	ab e5       	ldi	r26, 0x5B	; 91
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	eb e5       	ldi	r30, 0x5B	; 91
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	8f 7b       	andi	r24, 0xBF	; 191
     ee6:	8c 93       	st	X, r24

}
     ee8:	cf 91       	pop	r28
     eea:	df 91       	pop	r29
     eec:	08 95       	ret

00000eee <EXTI_SetCallBack>:

void EXTI_SetCallBack( void (*CopyFuncPtr) (void))
{
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <EXTI_SetCallBack+0x6>
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	9a 83       	std	Y+2, r25	; 0x02
     efa:	89 83       	std	Y+1, r24	; 0x01

}
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <DIO_SetPortDirection>:
#include"bit_math.h"



void DIO_SetPortDirection(DIO_PORT_ID port_ID , DIO_Direction direction)
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	00 d0       	rcall	.+0      	; 0xf0c <DIO_SetPortDirection+0x6>
     f0c:	00 d0       	rcall	.+0      	; 0xf0e <DIO_SetPortDirection+0x8>
     f0e:	00 d0       	rcall	.+0      	; 0xf10 <DIO_SetPortDirection+0xa>
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	89 83       	std	Y+1, r24	; 0x01
     f16:	6a 83       	std	Y+2, r22	; 0x02
	if(output == direction)
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	99 f5       	brne	.+102    	; 0xf84 <DIO_SetPortDirection+0x7e>
	{
		switch(port_ID)
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	3e 83       	std	Y+6, r19	; 0x06
     f26:	2d 83       	std	Y+5, r18	; 0x05
     f28:	8d 81       	ldd	r24, Y+5	; 0x05
     f2a:	9e 81       	ldd	r25, Y+6	; 0x06
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	91 05       	cpc	r25, r1
     f30:	d1 f0       	breq	.+52     	; 0xf66 <DIO_SetPortDirection+0x60>
     f32:	2d 81       	ldd	r18, Y+5	; 0x05
     f34:	3e 81       	ldd	r19, Y+6	; 0x06
     f36:	22 30       	cpi	r18, 0x02	; 2
     f38:	31 05       	cpc	r19, r1
     f3a:	2c f4       	brge	.+10     	; 0xf46 <DIO_SetPortDirection+0x40>
     f3c:	8d 81       	ldd	r24, Y+5	; 0x05
     f3e:	9e 81       	ldd	r25, Y+6	; 0x06
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	61 f0       	breq	.+24     	; 0xf5c <DIO_SetPortDirection+0x56>
     f44:	50 c0       	rjmp	.+160    	; 0xfe6 <DIO_SetPortDirection+0xe0>
     f46:	2d 81       	ldd	r18, Y+5	; 0x05
     f48:	3e 81       	ldd	r19, Y+6	; 0x06
     f4a:	22 30       	cpi	r18, 0x02	; 2
     f4c:	31 05       	cpc	r19, r1
     f4e:	81 f0       	breq	.+32     	; 0xf70 <DIO_SetPortDirection+0x6a>
     f50:	8d 81       	ldd	r24, Y+5	; 0x05
     f52:	9e 81       	ldd	r25, Y+6	; 0x06
     f54:	83 30       	cpi	r24, 0x03	; 3
     f56:	91 05       	cpc	r25, r1
     f58:	81 f0       	breq	.+32     	; 0xf7a <DIO_SetPortDirection+0x74>
     f5a:	45 c0       	rjmp	.+138    	; 0xfe6 <DIO_SetPortDirection+0xe0>
		{
		case PORTA: DDRA_REG = 0xFF ; break;
     f5c:	ea e3       	ldi	r30, 0x3A	; 58
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	8f ef       	ldi	r24, 0xFF	; 255
     f62:	80 83       	st	Z, r24
     f64:	40 c0       	rjmp	.+128    	; 0xfe6 <DIO_SetPortDirection+0xe0>
		case PORTB: DDRB_REG = 0xFF ; break;
     f66:	e7 e3       	ldi	r30, 0x37	; 55
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	8f ef       	ldi	r24, 0xFF	; 255
     f6c:	80 83       	st	Z, r24
     f6e:	3b c0       	rjmp	.+118    	; 0xfe6 <DIO_SetPortDirection+0xe0>
		case PORTC: DDRC_REG = 0xFF ; break;
     f70:	e4 e3       	ldi	r30, 0x34	; 52
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	8f ef       	ldi	r24, 0xFF	; 255
     f76:	80 83       	st	Z, r24
     f78:	36 c0       	rjmp	.+108    	; 0xfe6 <DIO_SetPortDirection+0xe0>
		case PORTD: DDRD_REG = 0xFF ; break;
     f7a:	e1 e3       	ldi	r30, 0x31	; 49
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	8f ef       	ldi	r24, 0xFF	; 255
     f80:	80 83       	st	Z, r24
     f82:	31 c0       	rjmp	.+98     	; 0xfe6 <DIO_SetPortDirection+0xe0>
		}
	}
	else if(input == direction)
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	88 23       	and	r24, r24
     f88:	71 f5       	brne	.+92     	; 0xfe6 <DIO_SetPortDirection+0xe0>
	{
		switch(port_ID)
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	3c 83       	std	Y+4, r19	; 0x04
     f92:	2b 83       	std	Y+3, r18	; 0x03
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	9c 81       	ldd	r25, Y+4	; 0x04
     f98:	81 30       	cpi	r24, 0x01	; 1
     f9a:	91 05       	cpc	r25, r1
     f9c:	c9 f0       	breq	.+50     	; 0xfd0 <DIO_SetPortDirection+0xca>
     f9e:	2b 81       	ldd	r18, Y+3	; 0x03
     fa0:	3c 81       	ldd	r19, Y+4	; 0x04
     fa2:	22 30       	cpi	r18, 0x02	; 2
     fa4:	31 05       	cpc	r19, r1
     fa6:	2c f4       	brge	.+10     	; 0xfb2 <DIO_SetPortDirection+0xac>
     fa8:	8b 81       	ldd	r24, Y+3	; 0x03
     faa:	9c 81       	ldd	r25, Y+4	; 0x04
     fac:	00 97       	sbiw	r24, 0x00	; 0
     fae:	61 f0       	breq	.+24     	; 0xfc8 <DIO_SetPortDirection+0xc2>
     fb0:	1a c0       	rjmp	.+52     	; 0xfe6 <DIO_SetPortDirection+0xe0>
     fb2:	2b 81       	ldd	r18, Y+3	; 0x03
     fb4:	3c 81       	ldd	r19, Y+4	; 0x04
     fb6:	22 30       	cpi	r18, 0x02	; 2
     fb8:	31 05       	cpc	r19, r1
     fba:	71 f0       	breq	.+28     	; 0xfd8 <DIO_SetPortDirection+0xd2>
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	9c 81       	ldd	r25, Y+4	; 0x04
     fc0:	83 30       	cpi	r24, 0x03	; 3
     fc2:	91 05       	cpc	r25, r1
     fc4:	69 f0       	breq	.+26     	; 0xfe0 <DIO_SetPortDirection+0xda>
     fc6:	0f c0       	rjmp	.+30     	; 0xfe6 <DIO_SetPortDirection+0xe0>
	{
		case PORTA: DDRA_REG = 0x00 ; break;
     fc8:	ea e3       	ldi	r30, 0x3A	; 58
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	10 82       	st	Z, r1
     fce:	0b c0       	rjmp	.+22     	; 0xfe6 <DIO_SetPortDirection+0xe0>
		case PORTB: DDRB_REG = 0x00 ; break;
     fd0:	e7 e3       	ldi	r30, 0x37	; 55
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	10 82       	st	Z, r1
     fd6:	07 c0       	rjmp	.+14     	; 0xfe6 <DIO_SetPortDirection+0xe0>
		case PORTC: DDRC_REG = 0x00 ; break;
     fd8:	e4 e3       	ldi	r30, 0x34	; 52
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	10 82       	st	Z, r1
     fde:	03 c0       	rjmp	.+6      	; 0xfe6 <DIO_SetPortDirection+0xe0>
		case PORTD: DDRD_REG = 0x00 ; break;
     fe0:	e1 e3       	ldi	r30, 0x31	; 49
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	10 82       	st	Z, r1

	}
	}

}
     fe6:	26 96       	adiw	r28, 0x06	; 6
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	de bf       	out	0x3e, r29	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	cd bf       	out	0x3d, r28	; 61
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	08 95       	ret

00000ff8 <DIO_SetPortValue>:

void DIO_SetPortValue(DIO_PORT_ID port_ID , u8 value)
{
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	00 d0       	rcall	.+0      	; 0xffe <DIO_SetPortValue+0x6>
     ffe:	00 d0       	rcall	.+0      	; 0x1000 <DIO_SetPortValue+0x8>
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
    1004:	89 83       	std	Y+1, r24	; 0x01
    1006:	6a 83       	std	Y+2, r22	; 0x02
	switch(port_ID)
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	3c 83       	std	Y+4, r19	; 0x04
    1010:	2b 83       	std	Y+3, r18	; 0x03
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	9c 81       	ldd	r25, Y+4	; 0x04
    1016:	81 30       	cpi	r24, 0x01	; 1
    1018:	91 05       	cpc	r25, r1
    101a:	d1 f0       	breq	.+52     	; 0x1050 <DIO_SetPortValue+0x58>
    101c:	2b 81       	ldd	r18, Y+3	; 0x03
    101e:	3c 81       	ldd	r19, Y+4	; 0x04
    1020:	22 30       	cpi	r18, 0x02	; 2
    1022:	31 05       	cpc	r19, r1
    1024:	2c f4       	brge	.+10     	; 0x1030 <DIO_SetPortValue+0x38>
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	9c 81       	ldd	r25, Y+4	; 0x04
    102a:	00 97       	sbiw	r24, 0x00	; 0
    102c:	61 f0       	breq	.+24     	; 0x1046 <DIO_SetPortValue+0x4e>
    102e:	1e c0       	rjmp	.+60     	; 0x106c <DIO_SetPortValue+0x74>
    1030:	2b 81       	ldd	r18, Y+3	; 0x03
    1032:	3c 81       	ldd	r19, Y+4	; 0x04
    1034:	22 30       	cpi	r18, 0x02	; 2
    1036:	31 05       	cpc	r19, r1
    1038:	81 f0       	breq	.+32     	; 0x105a <DIO_SetPortValue+0x62>
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	9c 81       	ldd	r25, Y+4	; 0x04
    103e:	83 30       	cpi	r24, 0x03	; 3
    1040:	91 05       	cpc	r25, r1
    1042:	81 f0       	breq	.+32     	; 0x1064 <DIO_SetPortValue+0x6c>
    1044:	13 c0       	rjmp	.+38     	; 0x106c <DIO_SetPortValue+0x74>
	{
	case PORTA : PORTA_REG = value ; break;
    1046:	eb e3       	ldi	r30, 0x3B	; 59
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	80 83       	st	Z, r24
    104e:	0e c0       	rjmp	.+28     	; 0x106c <DIO_SetPortValue+0x74>
	case PORTB : PORTB_REG = value ; break;
    1050:	e8 e3       	ldi	r30, 0x38	; 56
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	80 83       	st	Z, r24
    1058:	09 c0       	rjmp	.+18     	; 0x106c <DIO_SetPortValue+0x74>
	case PORTC : PORTC_REG = value ; break;
    105a:	e5 e3       	ldi	r30, 0x35	; 53
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	80 83       	st	Z, r24
    1062:	04 c0       	rjmp	.+8      	; 0x106c <DIO_SetPortValue+0x74>
	case PORTD : PORTD_REG = value ; break;
    1064:	e2 e3       	ldi	r30, 0x32	; 50
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	80 83       	st	Z, r24

	}
}
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	08 95       	ret

0000107a <DIO_SetPinDirection>:


void DIO_SetPinDirection(DIO_PORT_ID port_ID , DIO_PIN_ID pin_ID, DIO_Direction direction)
{
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	27 97       	sbiw	r28, 0x07	; 7
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	f8 94       	cli
    1088:	de bf       	out	0x3e, r29	; 62
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	cd bf       	out	0x3d, r28	; 61
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	6a 83       	std	Y+2, r22	; 0x02
    1092:	4b 83       	std	Y+3, r20	; 0x03
	if(port_ID <= PORTD && pin_ID <=7)
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	84 30       	cpi	r24, 0x04	; 4
    1098:	08 f0       	brcs	.+2      	; 0x109c <DIO_SetPinDirection+0x22>
    109a:	ee c0       	rjmp	.+476    	; 0x1278 <DIO_SetPinDirection+0x1fe>
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	88 30       	cpi	r24, 0x08	; 8
    10a0:	08 f0       	brcs	.+2      	; 0x10a4 <DIO_SetPinDirection+0x2a>
    10a2:	ea c0       	rjmp	.+468    	; 0x1278 <DIO_SetPinDirection+0x1fe>
	{
		if(output == direction)
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	81 30       	cpi	r24, 0x01	; 1
    10a8:	09 f0       	breq	.+2      	; 0x10ac <DIO_SetPinDirection+0x32>
    10aa:	6f c0       	rjmp	.+222    	; 0x118a <DIO_SetPinDirection+0x110>
		{
			switch(port_ID)
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	3f 83       	std	Y+7, r19	; 0x07
    10b4:	2e 83       	std	Y+6, r18	; 0x06
    10b6:	8e 81       	ldd	r24, Y+6	; 0x06
    10b8:	9f 81       	ldd	r25, Y+7	; 0x07
    10ba:	81 30       	cpi	r24, 0x01	; 1
    10bc:	91 05       	cpc	r25, r1
    10be:	49 f1       	breq	.+82     	; 0x1112 <DIO_SetPinDirection+0x98>
    10c0:	2e 81       	ldd	r18, Y+6	; 0x06
    10c2:	3f 81       	ldd	r19, Y+7	; 0x07
    10c4:	22 30       	cpi	r18, 0x02	; 2
    10c6:	31 05       	cpc	r19, r1
    10c8:	2c f4       	brge	.+10     	; 0x10d4 <DIO_SetPinDirection+0x5a>
    10ca:	8e 81       	ldd	r24, Y+6	; 0x06
    10cc:	9f 81       	ldd	r25, Y+7	; 0x07
    10ce:	00 97       	sbiw	r24, 0x00	; 0
    10d0:	61 f0       	breq	.+24     	; 0x10ea <DIO_SetPinDirection+0x70>
    10d2:	d2 c0       	rjmp	.+420    	; 0x1278 <DIO_SetPinDirection+0x1fe>
    10d4:	2e 81       	ldd	r18, Y+6	; 0x06
    10d6:	3f 81       	ldd	r19, Y+7	; 0x07
    10d8:	22 30       	cpi	r18, 0x02	; 2
    10da:	31 05       	cpc	r19, r1
    10dc:	71 f1       	breq	.+92     	; 0x113a <DIO_SetPinDirection+0xc0>
    10de:	8e 81       	ldd	r24, Y+6	; 0x06
    10e0:	9f 81       	ldd	r25, Y+7	; 0x07
    10e2:	83 30       	cpi	r24, 0x03	; 3
    10e4:	91 05       	cpc	r25, r1
    10e6:	e9 f1       	breq	.+122    	; 0x1162 <DIO_SetPinDirection+0xe8>
    10e8:	c7 c0       	rjmp	.+398    	; 0x1278 <DIO_SetPinDirection+0x1fe>
			{
			case PORTA: DDRA_REG |= (1<<pin_ID); break;
    10ea:	aa e3       	ldi	r26, 0x3A	; 58
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	ea e3       	ldi	r30, 0x3A	; 58
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	48 2f       	mov	r20, r24
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	02 2e       	mov	r0, r18
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <DIO_SetPinDirection+0x8e>
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	0a 94       	dec	r0
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <DIO_SetPinDirection+0x8a>
    110c:	84 2b       	or	r24, r20
    110e:	8c 93       	st	X, r24
    1110:	b3 c0       	rjmp	.+358    	; 0x1278 <DIO_SetPinDirection+0x1fe>
			case PORTB: DDRB_REG |= (1<<pin_ID); break;
    1112:	a7 e3       	ldi	r26, 0x37	; 55
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e7 e3       	ldi	r30, 0x37	; 55
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	48 2f       	mov	r20, r24
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	02 2e       	mov	r0, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <DIO_SetPinDirection+0xb6>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	0a 94       	dec	r0
    1132:	e2 f7       	brpl	.-8      	; 0x112c <DIO_SetPinDirection+0xb2>
    1134:	84 2b       	or	r24, r20
    1136:	8c 93       	st	X, r24
    1138:	9f c0       	rjmp	.+318    	; 0x1278 <DIO_SetPinDirection+0x1fe>
			case PORTC: DDRC_REG |= (1<<pin_ID); break;
    113a:	a4 e3       	ldi	r26, 0x34	; 52
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e4 e3       	ldi	r30, 0x34	; 52
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	48 2f       	mov	r20, r24
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	02 2e       	mov	r0, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <DIO_SetPinDirection+0xde>
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	0a 94       	dec	r0
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <DIO_SetPinDirection+0xda>
    115c:	84 2b       	or	r24, r20
    115e:	8c 93       	st	X, r24
    1160:	8b c0       	rjmp	.+278    	; 0x1278 <DIO_SetPinDirection+0x1fe>
			case PORTD: DDRD_REG  |= (1<<pin_ID); break;
    1162:	a1 e3       	ldi	r26, 0x31	; 49
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e1 e3       	ldi	r30, 0x31	; 49
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	48 2f       	mov	r20, r24
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 2e       	mov	r0, r18
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <DIO_SetPinDirection+0x106>
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	0a 94       	dec	r0
    1182:	e2 f7       	brpl	.-8      	; 0x117c <DIO_SetPinDirection+0x102>
    1184:	84 2b       	or	r24, r20
    1186:	8c 93       	st	X, r24
    1188:	77 c0       	rjmp	.+238    	; 0x1278 <DIO_SetPinDirection+0x1fe>

			}
		}

		else if(input == direction)
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	88 23       	and	r24, r24
    118e:	09 f0       	breq	.+2      	; 0x1192 <DIO_SetPinDirection+0x118>
    1190:	73 c0       	rjmp	.+230    	; 0x1278 <DIO_SetPinDirection+0x1fe>
		{
			switch(port_ID)
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	3d 83       	std	Y+5, r19	; 0x05
    119a:	2c 83       	std	Y+4, r18	; 0x04
    119c:	8c 81       	ldd	r24, Y+4	; 0x04
    119e:	9d 81       	ldd	r25, Y+5	; 0x05
    11a0:	81 30       	cpi	r24, 0x01	; 1
    11a2:	91 05       	cpc	r25, r1
    11a4:	59 f1       	breq	.+86     	; 0x11fc <DIO_SetPinDirection+0x182>
    11a6:	2c 81       	ldd	r18, Y+4	; 0x04
    11a8:	3d 81       	ldd	r19, Y+5	; 0x05
    11aa:	22 30       	cpi	r18, 0x02	; 2
    11ac:	31 05       	cpc	r19, r1
    11ae:	2c f4       	brge	.+10     	; 0x11ba <DIO_SetPinDirection+0x140>
    11b0:	8c 81       	ldd	r24, Y+4	; 0x04
    11b2:	9d 81       	ldd	r25, Y+5	; 0x05
    11b4:	00 97       	sbiw	r24, 0x00	; 0
    11b6:	69 f0       	breq	.+26     	; 0x11d2 <DIO_SetPinDirection+0x158>
    11b8:	5f c0       	rjmp	.+190    	; 0x1278 <DIO_SetPinDirection+0x1fe>
    11ba:	2c 81       	ldd	r18, Y+4	; 0x04
    11bc:	3d 81       	ldd	r19, Y+5	; 0x05
    11be:	22 30       	cpi	r18, 0x02	; 2
    11c0:	31 05       	cpc	r19, r1
    11c2:	89 f1       	breq	.+98     	; 0x1226 <DIO_SetPinDirection+0x1ac>
    11c4:	8c 81       	ldd	r24, Y+4	; 0x04
    11c6:	9d 81       	ldd	r25, Y+5	; 0x05
    11c8:	83 30       	cpi	r24, 0x03	; 3
    11ca:	91 05       	cpc	r25, r1
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <DIO_SetPinDirection+0x156>
    11ce:	40 c0       	rjmp	.+128    	; 0x1250 <DIO_SetPinDirection+0x1d6>
    11d0:	53 c0       	rjmp	.+166    	; 0x1278 <DIO_SetPinDirection+0x1fe>
			{
			case PORTA: DDRA_REG &= ~(1<<pin_ID); break;
    11d2:	aa e3       	ldi	r26, 0x3A	; 58
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	ea e3       	ldi	r30, 0x3A	; 58
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	48 2f       	mov	r20, r24
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	02 2e       	mov	r0, r18
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <DIO_SetPinDirection+0x176>
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	0a 94       	dec	r0
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <DIO_SetPinDirection+0x172>
    11f4:	80 95       	com	r24
    11f6:	84 23       	and	r24, r20
    11f8:	8c 93       	st	X, r24
    11fa:	3e c0       	rjmp	.+124    	; 0x1278 <DIO_SetPinDirection+0x1fe>
			case PORTB: DDRB_REG &= ~(1<<pin_ID); break;
    11fc:	a7 e3       	ldi	r26, 0x37	; 55
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e7 e3       	ldi	r30, 0x37	; 55
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	48 2f       	mov	r20, r24
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	02 2e       	mov	r0, r18
    1214:	02 c0       	rjmp	.+4      	; 0x121a <DIO_SetPinDirection+0x1a0>
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	0a 94       	dec	r0
    121c:	e2 f7       	brpl	.-8      	; 0x1216 <DIO_SetPinDirection+0x19c>
    121e:	80 95       	com	r24
    1220:	84 23       	and	r24, r20
    1222:	8c 93       	st	X, r24
    1224:	29 c0       	rjmp	.+82     	; 0x1278 <DIO_SetPinDirection+0x1fe>
			case PORTC: DDRC_REG &= ~(1<<pin_ID); break;
    1226:	a4 e3       	ldi	r26, 0x34	; 52
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e4 e3       	ldi	r30, 0x34	; 52
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	48 2f       	mov	r20, r24
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	02 2e       	mov	r0, r18
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <DIO_SetPinDirection+0x1ca>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	0a 94       	dec	r0
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <DIO_SetPinDirection+0x1c6>
    1248:	80 95       	com	r24
    124a:	84 23       	and	r24, r20
    124c:	8c 93       	st	X, r24
    124e:	14 c0       	rjmp	.+40     	; 0x1278 <DIO_SetPinDirection+0x1fe>
			case PORTD: DDRD_REG &= ~(1<<pin_ID); break;
    1250:	a1 e3       	ldi	r26, 0x31	; 49
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e1 e3       	ldi	r30, 0x31	; 49
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	48 2f       	mov	r20, r24
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	02 2e       	mov	r0, r18
    1268:	02 c0       	rjmp	.+4      	; 0x126e <DIO_SetPinDirection+0x1f4>
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	0a 94       	dec	r0
    1270:	e2 f7       	brpl	.-8      	; 0x126a <DIO_SetPinDirection+0x1f0>
    1272:	80 95       	com	r24
    1274:	84 23       	and	r24, r20
    1276:	8c 93       	st	X, r24

			}
		}
	}

}
    1278:	27 96       	adiw	r28, 0x07	; 7
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	cd bf       	out	0x3d, r28	; 61
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <DIO_SetPinValue>:

void DIO_SetPinValue(DIO_PORT_ID port_ID , DIO_PIN_ID pin_ID , DIO_Value value)
{
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	27 97       	sbiw	r28, 0x07	; 7
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	89 83       	std	Y+1, r24	; 0x01
    12a0:	6a 83       	std	Y+2, r22	; 0x02
    12a2:	4b 83       	std	Y+3, r20	; 0x03
    if(port_ID <= PORTD && pin_ID <=7)
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	84 30       	cpi	r24, 0x04	; 4
    12a8:	08 f0       	brcs	.+2      	; 0x12ac <DIO_SetPinValue+0x22>
    12aa:	ee c0       	rjmp	.+476    	; 0x1488 <DIO_SetPinValue+0x1fe>
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	88 30       	cpi	r24, 0x08	; 8
    12b0:	08 f0       	brcs	.+2      	; 0x12b4 <DIO_SetPinValue+0x2a>
    12b2:	ea c0       	rjmp	.+468    	; 0x1488 <DIO_SetPinValue+0x1fe>
    {
        if(value == HIGH)
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	09 f0       	breq	.+2      	; 0x12bc <DIO_SetPinValue+0x32>
    12ba:	6f c0       	rjmp	.+222    	; 0x139a <DIO_SetPinValue+0x110>
        {
            switch(port_ID)
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	3f 83       	std	Y+7, r19	; 0x07
    12c4:	2e 83       	std	Y+6, r18	; 0x06
    12c6:	8e 81       	ldd	r24, Y+6	; 0x06
    12c8:	9f 81       	ldd	r25, Y+7	; 0x07
    12ca:	81 30       	cpi	r24, 0x01	; 1
    12cc:	91 05       	cpc	r25, r1
    12ce:	49 f1       	breq	.+82     	; 0x1322 <DIO_SetPinValue+0x98>
    12d0:	2e 81       	ldd	r18, Y+6	; 0x06
    12d2:	3f 81       	ldd	r19, Y+7	; 0x07
    12d4:	22 30       	cpi	r18, 0x02	; 2
    12d6:	31 05       	cpc	r19, r1
    12d8:	2c f4       	brge	.+10     	; 0x12e4 <DIO_SetPinValue+0x5a>
    12da:	8e 81       	ldd	r24, Y+6	; 0x06
    12dc:	9f 81       	ldd	r25, Y+7	; 0x07
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	61 f0       	breq	.+24     	; 0x12fa <DIO_SetPinValue+0x70>
    12e2:	d2 c0       	rjmp	.+420    	; 0x1488 <DIO_SetPinValue+0x1fe>
    12e4:	2e 81       	ldd	r18, Y+6	; 0x06
    12e6:	3f 81       	ldd	r19, Y+7	; 0x07
    12e8:	22 30       	cpi	r18, 0x02	; 2
    12ea:	31 05       	cpc	r19, r1
    12ec:	71 f1       	breq	.+92     	; 0x134a <DIO_SetPinValue+0xc0>
    12ee:	8e 81       	ldd	r24, Y+6	; 0x06
    12f0:	9f 81       	ldd	r25, Y+7	; 0x07
    12f2:	83 30       	cpi	r24, 0x03	; 3
    12f4:	91 05       	cpc	r25, r1
    12f6:	e9 f1       	breq	.+122    	; 0x1372 <DIO_SetPinValue+0xe8>
    12f8:	c7 c0       	rjmp	.+398    	; 0x1488 <DIO_SetPinValue+0x1fe>
            {
            case PORTA : SET_BIT(PORTA_REG , pin_ID); break;
    12fa:	ab e3       	ldi	r26, 0x3B	; 59
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	eb e3       	ldi	r30, 0x3B	; 59
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	48 2f       	mov	r20, r24
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	02 2e       	mov	r0, r18
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <DIO_SetPinValue+0x8e>
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	0a 94       	dec	r0
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <DIO_SetPinValue+0x8a>
    131c:	84 2b       	or	r24, r20
    131e:	8c 93       	st	X, r24
    1320:	b3 c0       	rjmp	.+358    	; 0x1488 <DIO_SetPinValue+0x1fe>
            case PORTB : SET_BIT(PORTB_REG , pin_ID); break;
    1322:	a8 e3       	ldi	r26, 0x38	; 56
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e8 e3       	ldi	r30, 0x38	; 56
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	48 2f       	mov	r20, r24
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	02 2e       	mov	r0, r18
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <DIO_SetPinValue+0xb6>
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	0a 94       	dec	r0
    1342:	e2 f7       	brpl	.-8      	; 0x133c <DIO_SetPinValue+0xb2>
    1344:	84 2b       	or	r24, r20
    1346:	8c 93       	st	X, r24
    1348:	9f c0       	rjmp	.+318    	; 0x1488 <DIO_SetPinValue+0x1fe>
            case PORTC : SET_BIT(PORTC_REG , pin_ID); break;
    134a:	a5 e3       	ldi	r26, 0x35	; 53
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e5 e3       	ldi	r30, 0x35	; 53
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	48 2f       	mov	r20, r24
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 2e       	mov	r0, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <DIO_SetPinValue+0xde>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <DIO_SetPinValue+0xda>
    136c:	84 2b       	or	r24, r20
    136e:	8c 93       	st	X, r24
    1370:	8b c0       	rjmp	.+278    	; 0x1488 <DIO_SetPinValue+0x1fe>
            case PORTD : SET_BIT(PORTD_REG , pin_ID); break;
    1372:	a2 e3       	ldi	r26, 0x32	; 50
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	e2 e3       	ldi	r30, 0x32	; 50
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	48 2f       	mov	r20, r24
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	02 2e       	mov	r0, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <DIO_SetPinValue+0x106>
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	0a 94       	dec	r0
    1392:	e2 f7       	brpl	.-8      	; 0x138c <DIO_SetPinValue+0x102>
    1394:	84 2b       	or	r24, r20
    1396:	8c 93       	st	X, r24
    1398:	77 c0       	rjmp	.+238    	; 0x1488 <DIO_SetPinValue+0x1fe>
            default: break; // Added default case to handle unexpected port_ID
            }
        }
        else if(value == LOW)
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	88 23       	and	r24, r24
    139e:	09 f0       	breq	.+2      	; 0x13a2 <DIO_SetPinValue+0x118>
    13a0:	73 c0       	rjmp	.+230    	; 0x1488 <DIO_SetPinValue+0x1fe>
        {
            switch(port_ID)
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	3d 83       	std	Y+5, r19	; 0x05
    13aa:	2c 83       	std	Y+4, r18	; 0x04
    13ac:	8c 81       	ldd	r24, Y+4	; 0x04
    13ae:	9d 81       	ldd	r25, Y+5	; 0x05
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	91 05       	cpc	r25, r1
    13b4:	59 f1       	breq	.+86     	; 0x140c <DIO_SetPinValue+0x182>
    13b6:	2c 81       	ldd	r18, Y+4	; 0x04
    13b8:	3d 81       	ldd	r19, Y+5	; 0x05
    13ba:	22 30       	cpi	r18, 0x02	; 2
    13bc:	31 05       	cpc	r19, r1
    13be:	2c f4       	brge	.+10     	; 0x13ca <DIO_SetPinValue+0x140>
    13c0:	8c 81       	ldd	r24, Y+4	; 0x04
    13c2:	9d 81       	ldd	r25, Y+5	; 0x05
    13c4:	00 97       	sbiw	r24, 0x00	; 0
    13c6:	69 f0       	breq	.+26     	; 0x13e2 <DIO_SetPinValue+0x158>
    13c8:	5f c0       	rjmp	.+190    	; 0x1488 <DIO_SetPinValue+0x1fe>
    13ca:	2c 81       	ldd	r18, Y+4	; 0x04
    13cc:	3d 81       	ldd	r19, Y+5	; 0x05
    13ce:	22 30       	cpi	r18, 0x02	; 2
    13d0:	31 05       	cpc	r19, r1
    13d2:	89 f1       	breq	.+98     	; 0x1436 <DIO_SetPinValue+0x1ac>
    13d4:	8c 81       	ldd	r24, Y+4	; 0x04
    13d6:	9d 81       	ldd	r25, Y+5	; 0x05
    13d8:	83 30       	cpi	r24, 0x03	; 3
    13da:	91 05       	cpc	r25, r1
    13dc:	09 f4       	brne	.+2      	; 0x13e0 <DIO_SetPinValue+0x156>
    13de:	40 c0       	rjmp	.+128    	; 0x1460 <DIO_SetPinValue+0x1d6>
    13e0:	53 c0       	rjmp	.+166    	; 0x1488 <DIO_SetPinValue+0x1fe>
            {
            case PORTA : CLR_BIT(PORTA_REG , pin_ID); break;
    13e2:	ab e3       	ldi	r26, 0x3B	; 59
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	eb e3       	ldi	r30, 0x3B	; 59
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	48 2f       	mov	r20, r24
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	02 2e       	mov	r0, r18
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <DIO_SetPinValue+0x176>
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	0a 94       	dec	r0
    1402:	e2 f7       	brpl	.-8      	; 0x13fc <DIO_SetPinValue+0x172>
    1404:	80 95       	com	r24
    1406:	84 23       	and	r24, r20
    1408:	8c 93       	st	X, r24
    140a:	3e c0       	rjmp	.+124    	; 0x1488 <DIO_SetPinValue+0x1fe>
            case PORTB : CLR_BIT(PORTB_REG , pin_ID); break;
    140c:	a8 e3       	ldi	r26, 0x38	; 56
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e8 e3       	ldi	r30, 0x38	; 56
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	48 2f       	mov	r20, r24
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 2e       	mov	r0, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <DIO_SetPinValue+0x1a0>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <DIO_SetPinValue+0x19c>
    142e:	80 95       	com	r24
    1430:	84 23       	and	r24, r20
    1432:	8c 93       	st	X, r24
    1434:	29 c0       	rjmp	.+82     	; 0x1488 <DIO_SetPinValue+0x1fe>
            case PORTC : CLR_BIT(PORTC_REG , pin_ID); break;
    1436:	a5 e3       	ldi	r26, 0x35	; 53
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e5 e3       	ldi	r30, 0x35	; 53
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	48 2f       	mov	r20, r24
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	02 2e       	mov	r0, r18
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <DIO_SetPinValue+0x1ca>
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	0a 94       	dec	r0
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <DIO_SetPinValue+0x1c6>
    1458:	80 95       	com	r24
    145a:	84 23       	and	r24, r20
    145c:	8c 93       	st	X, r24
    145e:	14 c0       	rjmp	.+40     	; 0x1488 <DIO_SetPinValue+0x1fe>
            case PORTD : CLR_BIT(PORTD_REG , pin_ID); break;
    1460:	a2 e3       	ldi	r26, 0x32	; 50
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e2 e3       	ldi	r30, 0x32	; 50
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	48 2f       	mov	r20, r24
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	02 2e       	mov	r0, r18
    1478:	02 c0       	rjmp	.+4      	; 0x147e <DIO_SetPinValue+0x1f4>
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	0a 94       	dec	r0
    1480:	e2 f7       	brpl	.-8      	; 0x147a <DIO_SetPinValue+0x1f0>
    1482:	80 95       	com	r24
    1484:	84 23       	and	r24, r20
    1486:	8c 93       	st	X, r24
            default: break; // Added default case to handle unexpected port_ID
            }
        }
    }
}
    1488:	27 96       	adiw	r28, 0x07	; 7
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	de bf       	out	0x3e, r29	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	cd bf       	out	0x3d, r28	; 61
    1494:	cf 91       	pop	r28
    1496:	df 91       	pop	r29
    1498:	08 95       	ret

0000149a <DIO_GetPinValue>:
			}
}*/


DIO_Value DIO_GetPinValue(DIO_PORT_ID port_ID , DIO_PIN_ID pin_ID)
{
    149a:	df 93       	push	r29
    149c:	cf 93       	push	r28
    149e:	00 d0       	rcall	.+0      	; 0x14a0 <DIO_GetPinValue+0x6>
    14a0:	00 d0       	rcall	.+0      	; 0x14a2 <DIO_GetPinValue+0x8>
    14a2:	0f 92       	push	r0
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
    14a8:	8a 83       	std	Y+2, r24	; 0x02
    14aa:	6b 83       	std	Y+3, r22	; 0x03
	DIO_Value PinValue;

	if(port_ID <= PORTD && pin_ID <= PIN7)
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	84 30       	cpi	r24, 0x04	; 4
    14b0:	08 f0       	brcs	.+2      	; 0x14b4 <DIO_GetPinValue+0x1a>
    14b2:	6b c0       	rjmp	.+214    	; 0x158a <DIO_GetPinValue+0xf0>
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	88 30       	cpi	r24, 0x08	; 8
    14b8:	08 f0       	brcs	.+2      	; 0x14bc <DIO_GetPinValue+0x22>
    14ba:	67 c0       	rjmp	.+206    	; 0x158a <DIO_GetPinValue+0xf0>
	{

		switch(port_ID)
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	3d 83       	std	Y+5, r19	; 0x05
    14c4:	2c 83       	std	Y+4, r18	; 0x04
    14c6:	4c 81       	ldd	r20, Y+4	; 0x04
    14c8:	5d 81       	ldd	r21, Y+5	; 0x05
    14ca:	41 30       	cpi	r20, 0x01	; 1
    14cc:	51 05       	cpc	r21, r1
    14ce:	41 f1       	breq	.+80     	; 0x1520 <DIO_GetPinValue+0x86>
    14d0:	8c 81       	ldd	r24, Y+4	; 0x04
    14d2:	9d 81       	ldd	r25, Y+5	; 0x05
    14d4:	82 30       	cpi	r24, 0x02	; 2
    14d6:	91 05       	cpc	r25, r1
    14d8:	34 f4       	brge	.+12     	; 0x14e6 <DIO_GetPinValue+0x4c>
    14da:	2c 81       	ldd	r18, Y+4	; 0x04
    14dc:	3d 81       	ldd	r19, Y+5	; 0x05
    14de:	21 15       	cp	r18, r1
    14e0:	31 05       	cpc	r19, r1
    14e2:	61 f0       	breq	.+24     	; 0x14fc <DIO_GetPinValue+0x62>
    14e4:	52 c0       	rjmp	.+164    	; 0x158a <DIO_GetPinValue+0xf0>
    14e6:	4c 81       	ldd	r20, Y+4	; 0x04
    14e8:	5d 81       	ldd	r21, Y+5	; 0x05
    14ea:	42 30       	cpi	r20, 0x02	; 2
    14ec:	51 05       	cpc	r21, r1
    14ee:	51 f1       	breq	.+84     	; 0x1544 <DIO_GetPinValue+0xaa>
    14f0:	8c 81       	ldd	r24, Y+4	; 0x04
    14f2:	9d 81       	ldd	r25, Y+5	; 0x05
    14f4:	83 30       	cpi	r24, 0x03	; 3
    14f6:	91 05       	cpc	r25, r1
    14f8:	b9 f1       	breq	.+110    	; 0x1568 <DIO_GetPinValue+0xce>
    14fa:	47 c0       	rjmp	.+142    	; 0x158a <DIO_GetPinValue+0xf0>
				{
				case PORTA : PinValue = GET_BIT(PINA_REG , pin_ID); break;
    14fc:	e9 e3       	ldi	r30, 0x39	; 57
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	88 2f       	mov	r24, r24
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	a9 01       	movw	r20, r18
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <DIO_GetPinValue+0x7a>
    1510:	55 95       	asr	r21
    1512:	47 95       	ror	r20
    1514:	8a 95       	dec	r24
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <DIO_GetPinValue+0x76>
    1518:	ca 01       	movw	r24, r20
    151a:	81 70       	andi	r24, 0x01	; 1
    151c:	89 83       	std	Y+1, r24	; 0x01
    151e:	35 c0       	rjmp	.+106    	; 0x158a <DIO_GetPinValue+0xf0>
				case PORTB : PinValue = GET_BIT(PINB_REG , pin_ID); break;
    1520:	e6 e3       	ldi	r30, 0x36	; 54
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	88 2f       	mov	r24, r24
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	a9 01       	movw	r20, r18
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <DIO_GetPinValue+0x9e>
    1534:	55 95       	asr	r21
    1536:	47 95       	ror	r20
    1538:	8a 95       	dec	r24
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <DIO_GetPinValue+0x9a>
    153c:	ca 01       	movw	r24, r20
    153e:	81 70       	andi	r24, 0x01	; 1
    1540:	89 83       	std	Y+1, r24	; 0x01
    1542:	23 c0       	rjmp	.+70     	; 0x158a <DIO_GetPinValue+0xf0>
				case PORTC : PinValue = GET_BIT(PINC_REG , pin_ID); break;
    1544:	e3 e3       	ldi	r30, 0x33	; 51
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	28 2f       	mov	r18, r24
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	88 2f       	mov	r24, r24
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	a9 01       	movw	r20, r18
    1556:	02 c0       	rjmp	.+4      	; 0x155c <DIO_GetPinValue+0xc2>
    1558:	55 95       	asr	r21
    155a:	47 95       	ror	r20
    155c:	8a 95       	dec	r24
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <DIO_GetPinValue+0xbe>
    1560:	ca 01       	movw	r24, r20
    1562:	81 70       	andi	r24, 0x01	; 1
    1564:	89 83       	std	Y+1, r24	; 0x01
    1566:	11 c0       	rjmp	.+34     	; 0x158a <DIO_GetPinValue+0xf0>
				case PORTD : PinValue = GET_BIT(PIND_REG , pin_ID); break;
    1568:	e0 e3       	ldi	r30, 0x30	; 48
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	88 2f       	mov	r24, r24
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	a9 01       	movw	r20, r18
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <DIO_GetPinValue+0xe6>
    157c:	55 95       	asr	r21
    157e:	47 95       	ror	r20
    1580:	8a 95       	dec	r24
    1582:	e2 f7       	brpl	.-8      	; 0x157c <DIO_GetPinValue+0xe2>
    1584:	ca 01       	movw	r24, r20
    1586:	81 70       	andi	r24, 0x01	; 1
    1588:	89 83       	std	Y+1, r24	; 0x01

				}
		}

		return PinValue;
    158a:	89 81       	ldd	r24, Y+1	; 0x01
	}
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	cf 91       	pop	r28
    1598:	df 91       	pop	r29
    159a:	08 95       	ret

0000159c <KEYPAD_getPressedKey>:
 |                               Functions Definitions                          |
 |______________________________________________________________________________|
 */

u8 KEYPAD_getPressedKey(void)
{
    159c:	df 93       	push	r29
    159e:	cf 93       	push	r28
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    15a4:	60 97       	sbiw	r28, 0x10	; 16
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	f8 94       	cli
    15aa:	de bf       	out	0x3e, r29	; 62
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	cd bf       	out	0x3d, r28	; 61
	u8 col,row;
	DIO_SetPinDirection(PORTC, PIN0, input);
    15b0:	82 e0       	ldi	r24, 0x02	; 2
    15b2:	60 e0       	ldi	r22, 0x00	; 0
    15b4:	40 e0       	ldi	r20, 0x00	; 0
    15b6:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTC, PIN1, input);
    15ba:	82 e0       	ldi	r24, 0x02	; 2
    15bc:	61 e0       	ldi	r22, 0x01	; 1
    15be:	40 e0       	ldi	r20, 0x00	; 0
    15c0:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTC, PIN2, input);
    15c4:	82 e0       	ldi	r24, 0x02	; 2
    15c6:	62 e0       	ldi	r22, 0x02	; 2
    15c8:	40 e0       	ldi	r20, 0x00	; 0
    15ca:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTC, PIN3, input);
    15ce:	82 e0       	ldi	r24, 0x02	; 2
    15d0:	63 e0       	ldi	r22, 0x03	; 3
    15d2:	40 e0       	ldi	r20, 0x00	; 0
    15d4:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_SetPinDirection>

	DIO_SetPinDirection(PORTC,PIN4, input);
    15d8:	82 e0       	ldi	r24, 0x02	; 2
    15da:	64 e0       	ldi	r22, 0x04	; 4
    15dc:	40 e0       	ldi	r20, 0x00	; 0
    15de:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTC, PIN5, input);
    15e2:	82 e0       	ldi	r24, 0x02	; 2
    15e4:	65 e0       	ldi	r22, 0x05	; 5
    15e6:	40 e0       	ldi	r20, 0x00	; 0
    15e8:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTC, PIN6, input);
    15ec:	82 e0       	ldi	r24, 0x02	; 2
    15ee:	66 e0       	ldi	r22, 0x06	; 6
    15f0:	40 e0       	ldi	r20, 0x00	; 0
    15f2:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_SetPinDirection>
#if(KEYPAD_NUM_COLS == 4) //to characterize it between other keypads (4*3,4*6)
	DIO_SetPinDirection(PORTC, PIN7, input);
    15f6:	82 e0       	ldi	r24, 0x02	; 2
    15f8:	67 e0       	ldi	r22, 0x07	; 7
    15fa:	40 e0       	ldi	r20, 0x00	; 0
    15fc:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_SetPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1600:	1f 86       	std	Y+15, r1	; 0x0f
    1602:	af c0       	rjmp	.+350    	; 0x1762 <KEYPAD_getPressedKey+0x1c6>
		{
			/*
			 -> Each time setup the direction for all keypad port as input pins,
			    except this row will be output pin
			 */
			DIO_SetPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,output);
    1604:	82 e0       	ldi	r24, 0x02	; 2
    1606:	6f 85       	ldd	r22, Y+15	; 0x0f
    1608:	41 e0       	ldi	r20, 0x01	; 1
    160a:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_SetPinDirection>

			/* Set/Clear the row output pin */
			DIO_SetPinValue(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    160e:	82 e0       	ldi	r24, 0x02	; 2
    1610:	6f 85       	ldd	r22, Y+15	; 0x0f
    1612:	40 e0       	ldi	r20, 0x00	; 0
    1614:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPinValue>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1618:	18 8a       	std	Y+16, r1	; 0x10
    161a:	26 c0       	rjmp	.+76     	; 0x1668 <KEYPAD_getPressedKey+0xcc>
			{
				/* Check if the switch is pressed in this column */
				if(DIO_GetPinValue(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    161c:	88 89       	ldd	r24, Y+16	; 0x10
    161e:	98 2f       	mov	r25, r24
    1620:	9c 5f       	subi	r25, 0xFC	; 252
    1622:	82 e0       	ldi	r24, 0x02	; 2
    1624:	69 2f       	mov	r22, r25
    1626:	0e 94 4d 0a 	call	0x149a	; 0x149a <DIO_GetPinValue>
    162a:	88 23       	and	r24, r24
    162c:	d1 f4       	brne	.+52     	; 0x1662 <KEYPAD_getPressedKey+0xc6>
				{
					return KEYPAD_Buttons_Arr [row][col];
    162e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1630:	48 2f       	mov	r20, r24
    1632:	50 e0       	ldi	r21, 0x00	; 0
    1634:	88 89       	ldd	r24, Y+16	; 0x10
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	ca 01       	movw	r24, r20
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	82 0f       	add	r24, r18
    1646:	93 1f       	adc	r25, r19
    1648:	fc 01       	movw	r30, r24
    164a:	e2 5e       	subi	r30, 0xE2	; 226
    164c:	fd 4f       	sbci	r31, 0xFD	; 253
    164e:	80 81       	ld	r24, Z
			}
			DIO_SetPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,input);
			_delay_ms(10); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
    1650:	60 96       	adiw	r28, 0x10	; 16
    1652:	0f b6       	in	r0, 0x3f	; 63
    1654:	f8 94       	cli
    1656:	de bf       	out	0x3e, r29	; 62
    1658:	0f be       	out	0x3f, r0	; 63
    165a:	cd bf       	out	0x3d, r28	; 61
    165c:	cf 91       	pop	r28
    165e:	df 91       	pop	r29
    1660:	08 95       	ret
			DIO_SetPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,output);

			/* Set/Clear the row output pin */
			DIO_SetPinValue(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1662:	88 89       	ldd	r24, Y+16	; 0x10
    1664:	8f 5f       	subi	r24, 0xFF	; 255
    1666:	88 8b       	std	Y+16, r24	; 0x10
    1668:	88 89       	ldd	r24, Y+16	; 0x10
    166a:	84 30       	cpi	r24, 0x04	; 4
    166c:	b8 f2       	brcs	.-82     	; 0x161c <KEYPAD_getPressedKey+0x80>
				if(DIO_GetPinValue(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
				{
					return KEYPAD_Buttons_Arr [row][col];
				}
			}
			DIO_SetPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,input);
    166e:	82 e0       	ldi	r24, 0x02	; 2
    1670:	6f 85       	ldd	r22, Y+15	; 0x0f
    1672:	40 e0       	ldi	r20, 0x00	; 0
    1674:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_SetPinDirection>
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	a0 e2       	ldi	r26, 0x20	; 32
    167e:	b1 e4       	ldi	r27, 0x41	; 65
    1680:	8b 87       	std	Y+11, r24	; 0x0b
    1682:	9c 87       	std	Y+12, r25	; 0x0c
    1684:	ad 87       	std	Y+13, r26	; 0x0d
    1686:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1688:	6b 85       	ldd	r22, Y+11	; 0x0b
    168a:	7c 85       	ldd	r23, Y+12	; 0x0c
    168c:	8d 85       	ldd	r24, Y+13	; 0x0d
    168e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	4a e7       	ldi	r20, 0x7A	; 122
    1696:	55 e4       	ldi	r21, 0x45	; 69
    1698:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	8f 83       	std	Y+7, r24	; 0x07
    16a2:	98 87       	std	Y+8, r25	; 0x08
    16a4:	a9 87       	std	Y+9, r26	; 0x09
    16a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16a8:	6f 81       	ldd	r22, Y+7	; 0x07
    16aa:	78 85       	ldd	r23, Y+8	; 0x08
    16ac:	89 85       	ldd	r24, Y+9	; 0x09
    16ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e8       	ldi	r20, 0x80	; 128
    16b6:	5f e3       	ldi	r21, 0x3F	; 63
    16b8:	0e 94 2b 04 	call	0x856	; 0x856 <__ltsf2>
    16bc:	88 23       	and	r24, r24
    16be:	2c f4       	brge	.+10     	; 0x16ca <KEYPAD_getPressedKey+0x12e>
		__ticks = 1;
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	9e 83       	std	Y+6, r25	; 0x06
    16c6:	8d 83       	std	Y+5, r24	; 0x05
    16c8:	3f c0       	rjmp	.+126    	; 0x1748 <KEYPAD_getPressedKey+0x1ac>
	else if (__tmp > 65535)
    16ca:	6f 81       	ldd	r22, Y+7	; 0x07
    16cc:	78 85       	ldd	r23, Y+8	; 0x08
    16ce:	89 85       	ldd	r24, Y+9	; 0x09
    16d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	3f ef       	ldi	r19, 0xFF	; 255
    16d6:	4f e7       	ldi	r20, 0x7F	; 127
    16d8:	57 e4       	ldi	r21, 0x47	; 71
    16da:	0e 94 cb 03 	call	0x796	; 0x796 <__gtsf2>
    16de:	18 16       	cp	r1, r24
    16e0:	4c f5       	brge	.+82     	; 0x1734 <KEYPAD_getPressedKey+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	40 e2       	ldi	r20, 0x20	; 32
    16f0:	51 e4       	ldi	r21, 0x41	; 65
    16f2:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	bc 01       	movw	r22, r24
    16fc:	cd 01       	movw	r24, r26
    16fe:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	9e 83       	std	Y+6, r25	; 0x06
    1708:	8d 83       	std	Y+5, r24	; 0x05
    170a:	0f c0       	rjmp	.+30     	; 0x172a <KEYPAD_getPressedKey+0x18e>
    170c:	80 e9       	ldi	r24, 0x90	; 144
    170e:	91 e0       	ldi	r25, 0x01	; 1
    1710:	9c 83       	std	Y+4, r25	; 0x04
    1712:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	9c 81       	ldd	r25, Y+4	; 0x04
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	f1 f7       	brne	.-4      	; 0x1718 <KEYPAD_getPressedKey+0x17c>
    171c:	9c 83       	std	Y+4, r25	; 0x04
    171e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1720:	8d 81       	ldd	r24, Y+5	; 0x05
    1722:	9e 81       	ldd	r25, Y+6	; 0x06
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	9e 83       	std	Y+6, r25	; 0x06
    1728:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172a:	8d 81       	ldd	r24, Y+5	; 0x05
    172c:	9e 81       	ldd	r25, Y+6	; 0x06
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	69 f7       	brne	.-38     	; 0x170c <KEYPAD_getPressedKey+0x170>
    1732:	14 c0       	rjmp	.+40     	; 0x175c <KEYPAD_getPressedKey+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1734:	6f 81       	ldd	r22, Y+7	; 0x07
    1736:	78 85       	ldd	r23, Y+8	; 0x08
    1738:	89 85       	ldd	r24, Y+9	; 0x09
    173a:	9a 85       	ldd	r25, Y+10	; 0x0a
    173c:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	9e 83       	std	Y+6, r25	; 0x06
    1746:	8d 83       	std	Y+5, r24	; 0x05
    1748:	8d 81       	ldd	r24, Y+5	; 0x05
    174a:	9e 81       	ldd	r25, Y+6	; 0x06
    174c:	9a 83       	std	Y+2, r25	; 0x02
    174e:	89 83       	std	Y+1, r24	; 0x01
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	9a 81       	ldd	r25, Y+2	; 0x02
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	f1 f7       	brne	.-4      	; 0x1754 <KEYPAD_getPressedKey+0x1b8>
    1758:	9a 83       	std	Y+2, r25	; 0x02
    175a:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4) //to characterize it between other keypads (4*3,4*6)
	DIO_SetPinDirection(PORTC, PIN7, input);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    175c:	8f 85       	ldd	r24, Y+15	; 0x0f
    175e:	8f 5f       	subi	r24, 0xFF	; 255
    1760:	8f 87       	std	Y+15, r24	; 0x0f
    1762:	8f 85       	ldd	r24, Y+15	; 0x0f
    1764:	84 30       	cpi	r24, 0x04	; 4
    1766:	08 f4       	brcc	.+2      	; 0x176a <KEYPAD_getPressedKey+0x1ce>
    1768:	4d cf       	rjmp	.-358    	; 0x1604 <KEYPAD_getPressedKey+0x68>
    176a:	4a cf       	rjmp	.-364    	; 0x1600 <KEYPAD_getPressedKey+0x64>

0000176c <LCD_Initilaize>:

static u8 InitStepFinished = 0;


void LCD_Initilaize(void)//initialize the LCD
{
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	e8 97       	sbiw	r28, 0x38	; 56
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	f8 94       	cli
    177a:	de bf       	out	0x3e, r29	; 62
    177c:	0f be       	out	0x3f, r0	; 63
    177e:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPortDirection(PORTA , output);
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	61 e0       	ldi	r22, 0x01	; 1
    1784:	0e 94 83 07 	call	0xf06	; 0xf06 <DIO_SetPortDirection>
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	a0 ef       	ldi	r26, 0xF0	; 240
    178e:	b1 e4       	ldi	r27, 0x41	; 65
    1790:	8d ab       	std	Y+53, r24	; 0x35
    1792:	9e ab       	std	Y+54, r25	; 0x36
    1794:	af ab       	std	Y+55, r26	; 0x37
    1796:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1798:	6d a9       	ldd	r22, Y+53	; 0x35
    179a:	7e a9       	ldd	r23, Y+54	; 0x36
    179c:	8f a9       	ldd	r24, Y+55	; 0x37
    179e:	98 ad       	ldd	r25, Y+56	; 0x38
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	4a e7       	ldi	r20, 0x7A	; 122
    17a6:	55 e4       	ldi	r21, 0x45	; 69
    17a8:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	89 ab       	std	Y+49, r24	; 0x31
    17b2:	9a ab       	std	Y+50, r25	; 0x32
    17b4:	ab ab       	std	Y+51, r26	; 0x33
    17b6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17b8:	69 a9       	ldd	r22, Y+49	; 0x31
    17ba:	7a a9       	ldd	r23, Y+50	; 0x32
    17bc:	8b a9       	ldd	r24, Y+51	; 0x33
    17be:	9c a9       	ldd	r25, Y+52	; 0x34
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	40 e8       	ldi	r20, 0x80	; 128
    17c6:	5f e3       	ldi	r21, 0x3F	; 63
    17c8:	0e 94 2b 04 	call	0x856	; 0x856 <__ltsf2>
    17cc:	88 23       	and	r24, r24
    17ce:	2c f4       	brge	.+10     	; 0x17da <LCD_Initilaize+0x6e>
		__ticks = 1;
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	98 ab       	std	Y+48, r25	; 0x30
    17d6:	8f a7       	std	Y+47, r24	; 0x2f
    17d8:	3f c0       	rjmp	.+126    	; 0x1858 <LCD_Initilaize+0xec>
	else if (__tmp > 65535)
    17da:	69 a9       	ldd	r22, Y+49	; 0x31
    17dc:	7a a9       	ldd	r23, Y+50	; 0x32
    17de:	8b a9       	ldd	r24, Y+51	; 0x33
    17e0:	9c a9       	ldd	r25, Y+52	; 0x34
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	3f ef       	ldi	r19, 0xFF	; 255
    17e6:	4f e7       	ldi	r20, 0x7F	; 127
    17e8:	57 e4       	ldi	r21, 0x47	; 71
    17ea:	0e 94 cb 03 	call	0x796	; 0x796 <__gtsf2>
    17ee:	18 16       	cp	r1, r24
    17f0:	4c f5       	brge	.+82     	; 0x1844 <LCD_Initilaize+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f2:	6d a9       	ldd	r22, Y+53	; 0x35
    17f4:	7e a9       	ldd	r23, Y+54	; 0x36
    17f6:	8f a9       	ldd	r24, Y+55	; 0x37
    17f8:	98 ad       	ldd	r25, Y+56	; 0x38
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	40 e2       	ldi	r20, 0x20	; 32
    1800:	51 e4       	ldi	r21, 0x41	; 65
    1802:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	bc 01       	movw	r22, r24
    180c:	cd 01       	movw	r24, r26
    180e:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	98 ab       	std	Y+48, r25	; 0x30
    1818:	8f a7       	std	Y+47, r24	; 0x2f
    181a:	0f c0       	rjmp	.+30     	; 0x183a <LCD_Initilaize+0xce>
    181c:	80 e9       	ldi	r24, 0x90	; 144
    181e:	91 e0       	ldi	r25, 0x01	; 1
    1820:	9e a7       	std	Y+46, r25	; 0x2e
    1822:	8d a7       	std	Y+45, r24	; 0x2d
    1824:	8d a5       	ldd	r24, Y+45	; 0x2d
    1826:	9e a5       	ldd	r25, Y+46	; 0x2e
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	f1 f7       	brne	.-4      	; 0x1828 <LCD_Initilaize+0xbc>
    182c:	9e a7       	std	Y+46, r25	; 0x2e
    182e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1830:	8f a5       	ldd	r24, Y+47	; 0x2f
    1832:	98 a9       	ldd	r25, Y+48	; 0x30
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	98 ab       	std	Y+48, r25	; 0x30
    1838:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    183a:	8f a5       	ldd	r24, Y+47	; 0x2f
    183c:	98 a9       	ldd	r25, Y+48	; 0x30
    183e:	00 97       	sbiw	r24, 0x00	; 0
    1840:	69 f7       	brne	.-38     	; 0x181c <LCD_Initilaize+0xb0>
    1842:	14 c0       	rjmp	.+40     	; 0x186c <LCD_Initilaize+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1844:	69 a9       	ldd	r22, Y+49	; 0x31
    1846:	7a a9       	ldd	r23, Y+50	; 0x32
    1848:	8b a9       	ldd	r24, Y+51	; 0x33
    184a:	9c a9       	ldd	r25, Y+52	; 0x34
    184c:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	98 ab       	std	Y+48, r25	; 0x30
    1856:	8f a7       	std	Y+47, r24	; 0x2f
    1858:	8f a5       	ldd	r24, Y+47	; 0x2f
    185a:	98 a9       	ldd	r25, Y+48	; 0x30
    185c:	9c a7       	std	Y+44, r25	; 0x2c
    185e:	8b a7       	std	Y+43, r24	; 0x2b
    1860:	8b a5       	ldd	r24, Y+43	; 0x2b
    1862:	9c a5       	ldd	r25, Y+44	; 0x2c
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	f1 f7       	brne	.-4      	; 0x1864 <LCD_Initilaize+0xf8>
    1868:	9c a7       	std	Y+44, r25	; 0x2c
    186a:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(30);

	LCD_WriteCmd(0x20); //0010 0000 (LCD 4-BIT mode)
    186c:	80 e2       	ldi	r24, 0x20	; 32
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <LCD_WriteCmd>
	LCD_WriteCmd(0x20); //0010 0000 (repeat)
    1874:	80 e2       	ldi	r24, 0x20	; 32
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <LCD_WriteCmd>
	LCD_WriteCmd(0x80); //1000 0000 (2-line display)
    187c:	80 e8       	ldi	r24, 0x80	; 128
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <LCD_WriteCmd>
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	a0 e8       	ldi	r26, 0x80	; 128
    188a:	bf e3       	ldi	r27, 0x3F	; 63
    188c:	8f a3       	std	Y+39, r24	; 0x27
    188e:	98 a7       	std	Y+40, r25	; 0x28
    1890:	a9 a7       	std	Y+41, r26	; 0x29
    1892:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1894:	6f a1       	ldd	r22, Y+39	; 0x27
    1896:	78 a5       	ldd	r23, Y+40	; 0x28
    1898:	89 a5       	ldd	r24, Y+41	; 0x29
    189a:	9a a5       	ldd	r25, Y+42	; 0x2a
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	4a e7       	ldi	r20, 0x7A	; 122
    18a2:	55 e4       	ldi	r21, 0x45	; 69
    18a4:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	8b a3       	std	Y+35, r24	; 0x23
    18ae:	9c a3       	std	Y+36, r25	; 0x24
    18b0:	ad a3       	std	Y+37, r26	; 0x25
    18b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18b4:	6b a1       	ldd	r22, Y+35	; 0x23
    18b6:	7c a1       	ldd	r23, Y+36	; 0x24
    18b8:	8d a1       	ldd	r24, Y+37	; 0x25
    18ba:	9e a1       	ldd	r25, Y+38	; 0x26
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	40 e8       	ldi	r20, 0x80	; 128
    18c2:	5f e3       	ldi	r21, 0x3F	; 63
    18c4:	0e 94 2b 04 	call	0x856	; 0x856 <__ltsf2>
    18c8:	88 23       	and	r24, r24
    18ca:	2c f4       	brge	.+10     	; 0x18d6 <LCD_Initilaize+0x16a>
		__ticks = 1;
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	9a a3       	std	Y+34, r25	; 0x22
    18d2:	89 a3       	std	Y+33, r24	; 0x21
    18d4:	3f c0       	rjmp	.+126    	; 0x1954 <LCD_Initilaize+0x1e8>
	else if (__tmp > 65535)
    18d6:	6b a1       	ldd	r22, Y+35	; 0x23
    18d8:	7c a1       	ldd	r23, Y+36	; 0x24
    18da:	8d a1       	ldd	r24, Y+37	; 0x25
    18dc:	9e a1       	ldd	r25, Y+38	; 0x26
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	3f ef       	ldi	r19, 0xFF	; 255
    18e2:	4f e7       	ldi	r20, 0x7F	; 127
    18e4:	57 e4       	ldi	r21, 0x47	; 71
    18e6:	0e 94 cb 03 	call	0x796	; 0x796 <__gtsf2>
    18ea:	18 16       	cp	r1, r24
    18ec:	4c f5       	brge	.+82     	; 0x1940 <LCD_Initilaize+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ee:	6f a1       	ldd	r22, Y+39	; 0x27
    18f0:	78 a5       	ldd	r23, Y+40	; 0x28
    18f2:	89 a5       	ldd	r24, Y+41	; 0x29
    18f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	40 e2       	ldi	r20, 0x20	; 32
    18fc:	51 e4       	ldi	r21, 0x41	; 65
    18fe:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	bc 01       	movw	r22, r24
    1908:	cd 01       	movw	r24, r26
    190a:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	9a a3       	std	Y+34, r25	; 0x22
    1914:	89 a3       	std	Y+33, r24	; 0x21
    1916:	0f c0       	rjmp	.+30     	; 0x1936 <LCD_Initilaize+0x1ca>
    1918:	80 e9       	ldi	r24, 0x90	; 144
    191a:	91 e0       	ldi	r25, 0x01	; 1
    191c:	98 a3       	std	Y+32, r25	; 0x20
    191e:	8f 8f       	std	Y+31, r24	; 0x1f
    1920:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1922:	98 a1       	ldd	r25, Y+32	; 0x20
    1924:	01 97       	sbiw	r24, 0x01	; 1
    1926:	f1 f7       	brne	.-4      	; 0x1924 <LCD_Initilaize+0x1b8>
    1928:	98 a3       	std	Y+32, r25	; 0x20
    192a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192c:	89 a1       	ldd	r24, Y+33	; 0x21
    192e:	9a a1       	ldd	r25, Y+34	; 0x22
    1930:	01 97       	sbiw	r24, 0x01	; 1
    1932:	9a a3       	std	Y+34, r25	; 0x22
    1934:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1936:	89 a1       	ldd	r24, Y+33	; 0x21
    1938:	9a a1       	ldd	r25, Y+34	; 0x22
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	69 f7       	brne	.-38     	; 0x1918 <LCD_Initilaize+0x1ac>
    193e:	14 c0       	rjmp	.+40     	; 0x1968 <LCD_Initilaize+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1940:	6b a1       	ldd	r22, Y+35	; 0x23
    1942:	7c a1       	ldd	r23, Y+36	; 0x24
    1944:	8d a1       	ldd	r24, Y+37	; 0x25
    1946:	9e a1       	ldd	r25, Y+38	; 0x26
    1948:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	9a a3       	std	Y+34, r25	; 0x22
    1952:	89 a3       	std	Y+33, r24	; 0x21
    1954:	89 a1       	ldd	r24, Y+33	; 0x21
    1956:	9a a1       	ldd	r25, Y+34	; 0x22
    1958:	9e 8f       	std	Y+30, r25	; 0x1e
    195a:	8d 8f       	std	Y+29, r24	; 0x1d
    195c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    195e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1960:	01 97       	sbiw	r24, 0x01	; 1
    1962:	f1 f7       	brne	.-4      	; 0x1960 <LCD_Initilaize+0x1f4>
    1964:	9e 8f       	std	Y+30, r25	; 0x1e
    1966:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1);

	LCD_WriteCmd(0x00); //next command
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <LCD_WriteCmd>
	LCD_WriteCmd(0xF0); //1DCB, to turn on the display,cursor,and blinking
    1970:	80 ef       	ldi	r24, 0xF0	; 240
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <LCD_WriteCmd>
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	a0 e8       	ldi	r26, 0x80	; 128
    197e:	bf e3       	ldi	r27, 0x3F	; 63
    1980:	89 8f       	std	Y+25, r24	; 0x19
    1982:	9a 8f       	std	Y+26, r25	; 0x1a
    1984:	ab 8f       	std	Y+27, r26	; 0x1b
    1986:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1988:	69 8d       	ldd	r22, Y+25	; 0x19
    198a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    198c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    198e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	4a e7       	ldi	r20, 0x7A	; 122
    1996:	55 e4       	ldi	r21, 0x45	; 69
    1998:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	8d 8b       	std	Y+21, r24	; 0x15
    19a2:	9e 8b       	std	Y+22, r25	; 0x16
    19a4:	af 8b       	std	Y+23, r26	; 0x17
    19a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19a8:	6d 89       	ldd	r22, Y+21	; 0x15
    19aa:	7e 89       	ldd	r23, Y+22	; 0x16
    19ac:	8f 89       	ldd	r24, Y+23	; 0x17
    19ae:	98 8d       	ldd	r25, Y+24	; 0x18
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	40 e8       	ldi	r20, 0x80	; 128
    19b6:	5f e3       	ldi	r21, 0x3F	; 63
    19b8:	0e 94 2b 04 	call	0x856	; 0x856 <__ltsf2>
    19bc:	88 23       	and	r24, r24
    19be:	2c f4       	brge	.+10     	; 0x19ca <LCD_Initilaize+0x25e>
		__ticks = 1;
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	9c 8b       	std	Y+20, r25	; 0x14
    19c6:	8b 8b       	std	Y+19, r24	; 0x13
    19c8:	3f c0       	rjmp	.+126    	; 0x1a48 <LCD_Initilaize+0x2dc>
	else if (__tmp > 65535)
    19ca:	6d 89       	ldd	r22, Y+21	; 0x15
    19cc:	7e 89       	ldd	r23, Y+22	; 0x16
    19ce:	8f 89       	ldd	r24, Y+23	; 0x17
    19d0:	98 8d       	ldd	r25, Y+24	; 0x18
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	3f ef       	ldi	r19, 0xFF	; 255
    19d6:	4f e7       	ldi	r20, 0x7F	; 127
    19d8:	57 e4       	ldi	r21, 0x47	; 71
    19da:	0e 94 cb 03 	call	0x796	; 0x796 <__gtsf2>
    19de:	18 16       	cp	r1, r24
    19e0:	4c f5       	brge	.+82     	; 0x1a34 <LCD_Initilaize+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e2:	69 8d       	ldd	r22, Y+25	; 0x19
    19e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	40 e2       	ldi	r20, 0x20	; 32
    19f0:	51 e4       	ldi	r21, 0x41	; 65
    19f2:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	bc 01       	movw	r22, r24
    19fc:	cd 01       	movw	r24, r26
    19fe:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	9c 8b       	std	Y+20, r25	; 0x14
    1a08:	8b 8b       	std	Y+19, r24	; 0x13
    1a0a:	0f c0       	rjmp	.+30     	; 0x1a2a <LCD_Initilaize+0x2be>
    1a0c:	80 e9       	ldi	r24, 0x90	; 144
    1a0e:	91 e0       	ldi	r25, 0x01	; 1
    1a10:	9a 8b       	std	Y+18, r25	; 0x12
    1a12:	89 8b       	std	Y+17, r24	; 0x11
    1a14:	89 89       	ldd	r24, Y+17	; 0x11
    1a16:	9a 89       	ldd	r25, Y+18	; 0x12
    1a18:	01 97       	sbiw	r24, 0x01	; 1
    1a1a:	f1 f7       	brne	.-4      	; 0x1a18 <LCD_Initilaize+0x2ac>
    1a1c:	9a 8b       	std	Y+18, r25	; 0x12
    1a1e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a20:	8b 89       	ldd	r24, Y+19	; 0x13
    1a22:	9c 89       	ldd	r25, Y+20	; 0x14
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	9c 8b       	std	Y+20, r25	; 0x14
    1a28:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	69 f7       	brne	.-38     	; 0x1a0c <LCD_Initilaize+0x2a0>
    1a32:	14 c0       	rjmp	.+40     	; 0x1a5c <LCD_Initilaize+0x2f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a34:	6d 89       	ldd	r22, Y+21	; 0x15
    1a36:	7e 89       	ldd	r23, Y+22	; 0x16
    1a38:	8f 89       	ldd	r24, Y+23	; 0x17
    1a3a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a3c:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	9c 8b       	std	Y+20, r25	; 0x14
    1a46:	8b 8b       	std	Y+19, r24	; 0x13
    1a48:	8b 89       	ldd	r24, Y+19	; 0x13
    1a4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a4c:	98 8b       	std	Y+16, r25	; 0x10
    1a4e:	8f 87       	std	Y+15, r24	; 0x0f
    1a50:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a52:	98 89       	ldd	r25, Y+16	; 0x10
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	f1 f7       	brne	.-4      	; 0x1a54 <LCD_Initilaize+0x2e8>
    1a58:	98 8b       	std	Y+16, r25	; 0x10
    1a5a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	LCD_WriteCmd(0x00);  //next command
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <LCD_WriteCmd>
	LCD_WriteCmd(0x01); //for display clear as datasheet
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <LCD_WriteCmd>
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	a0 e0       	ldi	r26, 0x00	; 0
    1a72:	b0 e4       	ldi	r27, 0x40	; 64
    1a74:	8b 87       	std	Y+11, r24	; 0x0b
    1a76:	9c 87       	std	Y+12, r25	; 0x0c
    1a78:	ad 87       	std	Y+13, r26	; 0x0d
    1a7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	4a e7       	ldi	r20, 0x7A	; 122
    1a8a:	55 e4       	ldi	r21, 0x45	; 69
    1a8c:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	8f 83       	std	Y+7, r24	; 0x07
    1a96:	98 87       	std	Y+8, r25	; 0x08
    1a98:	a9 87       	std	Y+9, r26	; 0x09
    1a9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9e:	78 85       	ldd	r23, Y+8	; 0x08
    1aa0:	89 85       	ldd	r24, Y+9	; 0x09
    1aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e8       	ldi	r20, 0x80	; 128
    1aaa:	5f e3       	ldi	r21, 0x3F	; 63
    1aac:	0e 94 2b 04 	call	0x856	; 0x856 <__ltsf2>
    1ab0:	88 23       	and	r24, r24
    1ab2:	2c f4       	brge	.+10     	; 0x1abe <LCD_Initilaize+0x352>
		__ticks = 1;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	9e 83       	std	Y+6, r25	; 0x06
    1aba:	8d 83       	std	Y+5, r24	; 0x05
    1abc:	3f c0       	rjmp	.+126    	; 0x1b3c <LCD_Initilaize+0x3d0>
	else if (__tmp > 65535)
    1abe:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac0:	78 85       	ldd	r23, Y+8	; 0x08
    1ac2:	89 85       	ldd	r24, Y+9	; 0x09
    1ac4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	3f ef       	ldi	r19, 0xFF	; 255
    1aca:	4f e7       	ldi	r20, 0x7F	; 127
    1acc:	57 e4       	ldi	r21, 0x47	; 71
    1ace:	0e 94 cb 03 	call	0x796	; 0x796 <__gtsf2>
    1ad2:	18 16       	cp	r1, r24
    1ad4:	4c f5       	brge	.+82     	; 0x1b28 <LCD_Initilaize+0x3bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ada:	8d 85       	ldd	r24, Y+13	; 0x0d
    1adc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e2       	ldi	r20, 0x20	; 32
    1ae4:	51 e4       	ldi	r21, 0x41	; 65
    1ae6:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	bc 01       	movw	r22, r24
    1af0:	cd 01       	movw	r24, r26
    1af2:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	9e 83       	std	Y+6, r25	; 0x06
    1afc:	8d 83       	std	Y+5, r24	; 0x05
    1afe:	0f c0       	rjmp	.+30     	; 0x1b1e <LCD_Initilaize+0x3b2>
    1b00:	80 e9       	ldi	r24, 0x90	; 144
    1b02:	91 e0       	ldi	r25, 0x01	; 1
    1b04:	9c 83       	std	Y+4, r25	; 0x04
    1b06:	8b 83       	std	Y+3, r24	; 0x03
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	f1 f7       	brne	.-4      	; 0x1b0c <LCD_Initilaize+0x3a0>
    1b10:	9c 83       	std	Y+4, r25	; 0x04
    1b12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b14:	8d 81       	ldd	r24, Y+5	; 0x05
    1b16:	9e 81       	ldd	r25, Y+6	; 0x06
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	9e 83       	std	Y+6, r25	; 0x06
    1b1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b20:	9e 81       	ldd	r25, Y+6	; 0x06
    1b22:	00 97       	sbiw	r24, 0x00	; 0
    1b24:	69 f7       	brne	.-38     	; 0x1b00 <LCD_Initilaize+0x394>
    1b26:	14 c0       	rjmp	.+40     	; 0x1b50 <LCD_Initilaize+0x3e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b28:	6f 81       	ldd	r22, Y+7	; 0x07
    1b2a:	78 85       	ldd	r23, Y+8	; 0x08
    1b2c:	89 85       	ldd	r24, Y+9	; 0x09
    1b2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b30:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	9e 83       	std	Y+6, r25	; 0x06
    1b3a:	8d 83       	std	Y+5, r24	; 0x05
    1b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b40:	9a 83       	std	Y+2, r25	; 0x02
    1b42:	89 83       	std	Y+1, r24	; 0x01
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	9a 81       	ldd	r25, Y+2	; 0x02
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	f1 f7       	brne	.-4      	; 0x1b48 <LCD_Initilaize+0x3dc>
    1b4c:	9a 83       	std	Y+2, r25	; 0x02
    1b4e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);



	InitStepFinished=1;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	80 93 36 02 	sts	0x0236, r24
}
    1b56:	e8 96       	adiw	r28, 0x38	; 56
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	f8 94       	cli
    1b5c:	de bf       	out	0x3e, r29	; 62
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	cd bf       	out	0x3d, r28	; 61
    1b62:	cf 91       	pop	r28
    1b64:	df 91       	pop	r29
    1b66:	08 95       	ret

00001b68 <LCD_WriteCmd>:


void LCD_WriteCmd(u8 CMD)//to send instruction to the LCD

{
    1b68:	df 93       	push	r29
    1b6a:	cf 93       	push	r28
    1b6c:	cd b7       	in	r28, 0x3d	; 61
    1b6e:	de b7       	in	r29, 0x3e	; 62
    1b70:	ab 97       	sbiw	r28, 0x2b	; 43
    1b72:	0f b6       	in	r0, 0x3f	; 63
    1b74:	f8 94       	cli
    1b76:	de bf       	out	0x3e, r29	; 62
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	cd bf       	out	0x3d, r28	; 61
    1b7c:	8b a7       	std	Y+43, r24	; 0x2b


	DIO_SetPinValue(PORTA ,PIN1,LOW);  //RS=0
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	61 e0       	ldi	r22, 0x01	; 1
    1b82:	40 e0       	ldi	r20, 0x00	; 0
    1b84:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPinValue>
	DIO_SetPinValue(PORTA ,PIN2,LOW);  //RW=0
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	62 e0       	ldi	r22, 0x02	; 2
    1b8c:	40 e0       	ldi	r20, 0x00	; 0
    1b8e:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPinValue>


	/*MSB ON THE LEFT SIDE*/

	DIO_SetPinValue(PORTA ,PIN4,GET_BIT(CMD , 4));  //DB4
    1b92:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b94:	82 95       	swap	r24
    1b96:	8f 70       	andi	r24, 0x0F	; 15
    1b98:	98 2f       	mov	r25, r24
    1b9a:	91 70       	andi	r25, 0x01	; 1
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	64 e0       	ldi	r22, 0x04	; 4
    1ba0:	49 2f       	mov	r20, r25
    1ba2:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPinValue>
	DIO_SetPinValue(PORTA ,PIN5,GET_BIT(CMD , 5));  //DB5
    1ba6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ba8:	82 95       	swap	r24
    1baa:	86 95       	lsr	r24
    1bac:	87 70       	andi	r24, 0x07	; 7
    1bae:	98 2f       	mov	r25, r24
    1bb0:	91 70       	andi	r25, 0x01	; 1
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
    1bb4:	65 e0       	ldi	r22, 0x05	; 5
    1bb6:	49 2f       	mov	r20, r25
    1bb8:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPinValue>
	DIO_SetPinValue(PORTA ,PIN6,GET_BIT(CMD , 6));  //DB6
    1bbc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bbe:	82 95       	swap	r24
    1bc0:	86 95       	lsr	r24
    1bc2:	86 95       	lsr	r24
    1bc4:	83 70       	andi	r24, 0x03	; 3
    1bc6:	98 2f       	mov	r25, r24
    1bc8:	91 70       	andi	r25, 0x01	; 1
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	66 e0       	ldi	r22, 0x06	; 6
    1bce:	49 2f       	mov	r20, r25
    1bd0:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPinValue>
	DIO_SetPinValue(PORTA ,PIN7,GET_BIT(CMD , 7));  //DB7
    1bd4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bd6:	98 2f       	mov	r25, r24
    1bd8:	99 1f       	adc	r25, r25
    1bda:	99 27       	eor	r25, r25
    1bdc:	99 1f       	adc	r25, r25
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	67 e0       	ldi	r22, 0x07	; 7
    1be2:	49 2f       	mov	r20, r25
    1be4:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPinValue>

	DIO_SetPinValue(PORTA,PIN3,HIGH); //EN
    1be8:	80 e0       	ldi	r24, 0x00	; 0
    1bea:	63 e0       	ldi	r22, 0x03	; 3
    1bec:	41 e0       	ldi	r20, 0x01	; 1
    1bee:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPinValue>
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	a0 e8       	ldi	r26, 0x80	; 128
    1bf8:	bf e3       	ldi	r27, 0x3F	; 63
    1bfa:	8f a3       	std	Y+39, r24	; 0x27
    1bfc:	98 a7       	std	Y+40, r25	; 0x28
    1bfe:	a9 a7       	std	Y+41, r26	; 0x29
    1c00:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c02:	6f a1       	ldd	r22, Y+39	; 0x27
    1c04:	78 a5       	ldd	r23, Y+40	; 0x28
    1c06:	89 a5       	ldd	r24, Y+41	; 0x29
    1c08:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	4a e7       	ldi	r20, 0x7A	; 122
    1c10:	55 e4       	ldi	r21, 0x45	; 69
    1c12:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	8b a3       	std	Y+35, r24	; 0x23
    1c1c:	9c a3       	std	Y+36, r25	; 0x24
    1c1e:	ad a3       	std	Y+37, r26	; 0x25
    1c20:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c22:	6b a1       	ldd	r22, Y+35	; 0x23
    1c24:	7c a1       	ldd	r23, Y+36	; 0x24
    1c26:	8d a1       	ldd	r24, Y+37	; 0x25
    1c28:	9e a1       	ldd	r25, Y+38	; 0x26
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	40 e8       	ldi	r20, 0x80	; 128
    1c30:	5f e3       	ldi	r21, 0x3F	; 63
    1c32:	0e 94 2b 04 	call	0x856	; 0x856 <__ltsf2>
    1c36:	88 23       	and	r24, r24
    1c38:	2c f4       	brge	.+10     	; 0x1c44 <LCD_WriteCmd+0xdc>
		__ticks = 1;
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	9a a3       	std	Y+34, r25	; 0x22
    1c40:	89 a3       	std	Y+33, r24	; 0x21
    1c42:	3f c0       	rjmp	.+126    	; 0x1cc2 <LCD_WriteCmd+0x15a>
	else if (__tmp > 65535)
    1c44:	6b a1       	ldd	r22, Y+35	; 0x23
    1c46:	7c a1       	ldd	r23, Y+36	; 0x24
    1c48:	8d a1       	ldd	r24, Y+37	; 0x25
    1c4a:	9e a1       	ldd	r25, Y+38	; 0x26
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	3f ef       	ldi	r19, 0xFF	; 255
    1c50:	4f e7       	ldi	r20, 0x7F	; 127
    1c52:	57 e4       	ldi	r21, 0x47	; 71
    1c54:	0e 94 cb 03 	call	0x796	; 0x796 <__gtsf2>
    1c58:	18 16       	cp	r1, r24
    1c5a:	4c f5       	brge	.+82     	; 0x1cae <LCD_WriteCmd+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5c:	6f a1       	ldd	r22, Y+39	; 0x27
    1c5e:	78 a5       	ldd	r23, Y+40	; 0x28
    1c60:	89 a5       	ldd	r24, Y+41	; 0x29
    1c62:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	40 e2       	ldi	r20, 0x20	; 32
    1c6a:	51 e4       	ldi	r21, 0x41	; 65
    1c6c:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	bc 01       	movw	r22, r24
    1c76:	cd 01       	movw	r24, r26
    1c78:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	9a a3       	std	Y+34, r25	; 0x22
    1c82:	89 a3       	std	Y+33, r24	; 0x21
    1c84:	0f c0       	rjmp	.+30     	; 0x1ca4 <LCD_WriteCmd+0x13c>
    1c86:	80 e9       	ldi	r24, 0x90	; 144
    1c88:	91 e0       	ldi	r25, 0x01	; 1
    1c8a:	98 a3       	std	Y+32, r25	; 0x20
    1c8c:	8f 8f       	std	Y+31, r24	; 0x1f
    1c8e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c90:	98 a1       	ldd	r25, Y+32	; 0x20
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	f1 f7       	brne	.-4      	; 0x1c92 <LCD_WriteCmd+0x12a>
    1c96:	98 a3       	std	Y+32, r25	; 0x20
    1c98:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c9a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c9c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	9a a3       	std	Y+34, r25	; 0x22
    1ca2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ca6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ca8:	00 97       	sbiw	r24, 0x00	; 0
    1caa:	69 f7       	brne	.-38     	; 0x1c86 <LCD_WriteCmd+0x11e>
    1cac:	14 c0       	rjmp	.+40     	; 0x1cd6 <LCD_WriteCmd+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cae:	6b a1       	ldd	r22, Y+35	; 0x23
    1cb0:	7c a1       	ldd	r23, Y+36	; 0x24
    1cb2:	8d a1       	ldd	r24, Y+37	; 0x25
    1cb4:	9e a1       	ldd	r25, Y+38	; 0x26
    1cb6:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	9a a3       	std	Y+34, r25	; 0x22
    1cc0:	89 a3       	std	Y+33, r24	; 0x21
    1cc2:	89 a1       	ldd	r24, Y+33	; 0x21
    1cc4:	9a a1       	ldd	r25, Y+34	; 0x22
    1cc6:	9e 8f       	std	Y+30, r25	; 0x1e
    1cc8:	8d 8f       	std	Y+29, r24	; 0x1d
    1cca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ccc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	f1 f7       	brne	.-4      	; 0x1cce <LCD_WriteCmd+0x166>
    1cd2:	9e 8f       	std	Y+30, r25	; 0x1e
    1cd4:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1);//because of the falling edge from high to low

	DIO_SetPinValue(PORTA,PIN3,LOW); //EN
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	63 e0       	ldi	r22, 0x03	; 3
    1cda:	40 e0       	ldi	r20, 0x00	; 0
    1cdc:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPinValue>

	if(InitStepFinished)//since it becomes 1 the LSB will work
    1ce0:	80 91 36 02 	lds	r24, 0x0236
    1ce4:	88 23       	and	r24, r24
    1ce6:	09 f4       	brne	.+2      	; 0x1cea <LCD_WriteCmd+0x182>
    1ce8:	a2 c0       	rjmp	.+324    	; 0x1e2e <LCD_WriteCmd+0x2c6>
	{

	/*LSB ON THE RIGHT SIDE*/

	DIO_SetPinValue(PORTA ,PIN4,GET_BIT(CMD , 0));  //DB4
    1cea:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cec:	98 2f       	mov	r25, r24
    1cee:	91 70       	andi	r25, 0x01	; 1
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	64 e0       	ldi	r22, 0x04	; 4
    1cf4:	49 2f       	mov	r20, r25
    1cf6:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPinValue>
	DIO_SetPinValue(PORTA ,PIN5,GET_BIT(CMD , 1));  //DB5
    1cfa:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cfc:	86 95       	lsr	r24
    1cfe:	98 2f       	mov	r25, r24
    1d00:	91 70       	andi	r25, 0x01	; 1
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	65 e0       	ldi	r22, 0x05	; 5
    1d06:	49 2f       	mov	r20, r25
    1d08:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPinValue>
	DIO_SetPinValue(PORTA ,PIN6,GET_BIT(CMD , 2));  //DB6
    1d0c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d0e:	86 95       	lsr	r24
    1d10:	86 95       	lsr	r24
    1d12:	98 2f       	mov	r25, r24
    1d14:	91 70       	andi	r25, 0x01	; 1
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	66 e0       	ldi	r22, 0x06	; 6
    1d1a:	49 2f       	mov	r20, r25
    1d1c:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPinValue>
	DIO_SetPinValue(PORTA ,PIN7,GET_BIT(CMD , 3));  //DB7
    1d20:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d22:	86 95       	lsr	r24
    1d24:	86 95       	lsr	r24
    1d26:	86 95       	lsr	r24
    1d28:	98 2f       	mov	r25, r24
    1d2a:	91 70       	andi	r25, 0x01	; 1
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	67 e0       	ldi	r22, 0x07	; 7
    1d30:	49 2f       	mov	r20, r25
    1d32:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPinValue>

	DIO_SetPinValue(PORTA,PIN3,HIGH);  //EN
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	63 e0       	ldi	r22, 0x03	; 3
    1d3a:	41 e0       	ldi	r20, 0x01	; 1
    1d3c:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPinValue>
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	a0 e8       	ldi	r26, 0x80	; 128
    1d46:	bf e3       	ldi	r27, 0x3F	; 63
    1d48:	89 8f       	std	Y+25, r24	; 0x19
    1d4a:	9a 8f       	std	Y+26, r25	; 0x1a
    1d4c:	ab 8f       	std	Y+27, r26	; 0x1b
    1d4e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d50:	69 8d       	ldd	r22, Y+25	; 0x19
    1d52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	4a e7       	ldi	r20, 0x7A	; 122
    1d5e:	55 e4       	ldi	r21, 0x45	; 69
    1d60:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	8d 8b       	std	Y+21, r24	; 0x15
    1d6a:	9e 8b       	std	Y+22, r25	; 0x16
    1d6c:	af 8b       	std	Y+23, r26	; 0x17
    1d6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d70:	6d 89       	ldd	r22, Y+21	; 0x15
    1d72:	7e 89       	ldd	r23, Y+22	; 0x16
    1d74:	8f 89       	ldd	r24, Y+23	; 0x17
    1d76:	98 8d       	ldd	r25, Y+24	; 0x18
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	40 e8       	ldi	r20, 0x80	; 128
    1d7e:	5f e3       	ldi	r21, 0x3F	; 63
    1d80:	0e 94 2b 04 	call	0x856	; 0x856 <__ltsf2>
    1d84:	88 23       	and	r24, r24
    1d86:	2c f4       	brge	.+10     	; 0x1d92 <LCD_WriteCmd+0x22a>
		__ticks = 1;
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	9c 8b       	std	Y+20, r25	; 0x14
    1d8e:	8b 8b       	std	Y+19, r24	; 0x13
    1d90:	3f c0       	rjmp	.+126    	; 0x1e10 <LCD_WriteCmd+0x2a8>
	else if (__tmp > 65535)
    1d92:	6d 89       	ldd	r22, Y+21	; 0x15
    1d94:	7e 89       	ldd	r23, Y+22	; 0x16
    1d96:	8f 89       	ldd	r24, Y+23	; 0x17
    1d98:	98 8d       	ldd	r25, Y+24	; 0x18
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	3f ef       	ldi	r19, 0xFF	; 255
    1d9e:	4f e7       	ldi	r20, 0x7F	; 127
    1da0:	57 e4       	ldi	r21, 0x47	; 71
    1da2:	0e 94 cb 03 	call	0x796	; 0x796 <__gtsf2>
    1da6:	18 16       	cp	r1, r24
    1da8:	4c f5       	brge	.+82     	; 0x1dfc <LCD_WriteCmd+0x294>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1daa:	69 8d       	ldd	r22, Y+25	; 0x19
    1dac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1db0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	40 e2       	ldi	r20, 0x20	; 32
    1db8:	51 e4       	ldi	r21, 0x41	; 65
    1dba:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	bc 01       	movw	r22, r24
    1dc4:	cd 01       	movw	r24, r26
    1dc6:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	9c 8b       	std	Y+20, r25	; 0x14
    1dd0:	8b 8b       	std	Y+19, r24	; 0x13
    1dd2:	0f c0       	rjmp	.+30     	; 0x1df2 <LCD_WriteCmd+0x28a>
    1dd4:	80 e9       	ldi	r24, 0x90	; 144
    1dd6:	91 e0       	ldi	r25, 0x01	; 1
    1dd8:	9a 8b       	std	Y+18, r25	; 0x12
    1dda:	89 8b       	std	Y+17, r24	; 0x11
    1ddc:	89 89       	ldd	r24, Y+17	; 0x11
    1dde:	9a 89       	ldd	r25, Y+18	; 0x12
    1de0:	01 97       	sbiw	r24, 0x01	; 1
    1de2:	f1 f7       	brne	.-4      	; 0x1de0 <LCD_WriteCmd+0x278>
    1de4:	9a 8b       	std	Y+18, r25	; 0x12
    1de6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dea:	9c 89       	ldd	r25, Y+20	; 0x14
    1dec:	01 97       	sbiw	r24, 0x01	; 1
    1dee:	9c 8b       	std	Y+20, r25	; 0x14
    1df0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df2:	8b 89       	ldd	r24, Y+19	; 0x13
    1df4:	9c 89       	ldd	r25, Y+20	; 0x14
    1df6:	00 97       	sbiw	r24, 0x00	; 0
    1df8:	69 f7       	brne	.-38     	; 0x1dd4 <LCD_WriteCmd+0x26c>
    1dfa:	14 c0       	rjmp	.+40     	; 0x1e24 <LCD_WriteCmd+0x2bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfc:	6d 89       	ldd	r22, Y+21	; 0x15
    1dfe:	7e 89       	ldd	r23, Y+22	; 0x16
    1e00:	8f 89       	ldd	r24, Y+23	; 0x17
    1e02:	98 8d       	ldd	r25, Y+24	; 0x18
    1e04:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	9c 8b       	std	Y+20, r25	; 0x14
    1e0e:	8b 8b       	std	Y+19, r24	; 0x13
    1e10:	8b 89       	ldd	r24, Y+19	; 0x13
    1e12:	9c 89       	ldd	r25, Y+20	; 0x14
    1e14:	98 8b       	std	Y+16, r25	; 0x10
    1e16:	8f 87       	std	Y+15, r24	; 0x0f
    1e18:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e1a:	98 89       	ldd	r25, Y+16	; 0x10
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	f1 f7       	brne	.-4      	; 0x1e1c <LCD_WriteCmd+0x2b4>
    1e20:	98 8b       	std	Y+16, r25	; 0x10
    1e22:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	DIO_SetPinValue(PORTA,PIN3,LOW);   //EN
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	63 e0       	ldi	r22, 0x03	; 3
    1e28:	40 e0       	ldi	r20, 0x00	; 0
    1e2a:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPinValue>
    1e2e:	80 e0       	ldi	r24, 0x00	; 0
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	a0 e0       	ldi	r26, 0x00	; 0
    1e34:	b0 e4       	ldi	r27, 0x40	; 64
    1e36:	8b 87       	std	Y+11, r24	; 0x0b
    1e38:	9c 87       	std	Y+12, r25	; 0x0c
    1e3a:	ad 87       	std	Y+13, r26	; 0x0d
    1e3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e40:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e42:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e44:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	4a e7       	ldi	r20, 0x7A	; 122
    1e4c:	55 e4       	ldi	r21, 0x45	; 69
    1e4e:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	8f 83       	std	Y+7, r24	; 0x07
    1e58:	98 87       	std	Y+8, r25	; 0x08
    1e5a:	a9 87       	std	Y+9, r26	; 0x09
    1e5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e60:	78 85       	ldd	r23, Y+8	; 0x08
    1e62:	89 85       	ldd	r24, Y+9	; 0x09
    1e64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	40 e8       	ldi	r20, 0x80	; 128
    1e6c:	5f e3       	ldi	r21, 0x3F	; 63
    1e6e:	0e 94 2b 04 	call	0x856	; 0x856 <__ltsf2>
    1e72:	88 23       	and	r24, r24
    1e74:	2c f4       	brge	.+10     	; 0x1e80 <LCD_WriteCmd+0x318>
		__ticks = 1;
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	9e 83       	std	Y+6, r25	; 0x06
    1e7c:	8d 83       	std	Y+5, r24	; 0x05
    1e7e:	3f c0       	rjmp	.+126    	; 0x1efe <LCD_WriteCmd+0x396>
	else if (__tmp > 65535)
    1e80:	6f 81       	ldd	r22, Y+7	; 0x07
    1e82:	78 85       	ldd	r23, Y+8	; 0x08
    1e84:	89 85       	ldd	r24, Y+9	; 0x09
    1e86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	3f ef       	ldi	r19, 0xFF	; 255
    1e8c:	4f e7       	ldi	r20, 0x7F	; 127
    1e8e:	57 e4       	ldi	r21, 0x47	; 71
    1e90:	0e 94 cb 03 	call	0x796	; 0x796 <__gtsf2>
    1e94:	18 16       	cp	r1, r24
    1e96:	4c f5       	brge	.+82     	; 0x1eea <LCD_WriteCmd+0x382>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e98:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	40 e2       	ldi	r20, 0x20	; 32
    1ea6:	51 e4       	ldi	r21, 0x41	; 65
    1ea8:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	bc 01       	movw	r22, r24
    1eb2:	cd 01       	movw	r24, r26
    1eb4:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	9e 83       	std	Y+6, r25	; 0x06
    1ebe:	8d 83       	std	Y+5, r24	; 0x05
    1ec0:	0f c0       	rjmp	.+30     	; 0x1ee0 <LCD_WriteCmd+0x378>
    1ec2:	80 e9       	ldi	r24, 0x90	; 144
    1ec4:	91 e0       	ldi	r25, 0x01	; 1
    1ec6:	9c 83       	std	Y+4, r25	; 0x04
    1ec8:	8b 83       	std	Y+3, r24	; 0x03
    1eca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ecc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ece:	01 97       	sbiw	r24, 0x01	; 1
    1ed0:	f1 f7       	brne	.-4      	; 0x1ece <LCD_WriteCmd+0x366>
    1ed2:	9c 83       	std	Y+4, r25	; 0x04
    1ed4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eda:	01 97       	sbiw	r24, 0x01	; 1
    1edc:	9e 83       	std	Y+6, r25	; 0x06
    1ede:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee4:	00 97       	sbiw	r24, 0x00	; 0
    1ee6:	69 f7       	brne	.-38     	; 0x1ec2 <LCD_WriteCmd+0x35a>
    1ee8:	14 c0       	rjmp	.+40     	; 0x1f12 <LCD_WriteCmd+0x3aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eea:	6f 81       	ldd	r22, Y+7	; 0x07
    1eec:	78 85       	ldd	r23, Y+8	; 0x08
    1eee:	89 85       	ldd	r24, Y+9	; 0x09
    1ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef2:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	9e 83       	std	Y+6, r25	; 0x06
    1efc:	8d 83       	std	Y+5, r24	; 0x05
    1efe:	8d 81       	ldd	r24, Y+5	; 0x05
    1f00:	9e 81       	ldd	r25, Y+6	; 0x06
    1f02:	9a 83       	std	Y+2, r25	; 0x02
    1f04:	89 83       	std	Y+1, r24	; 0x01
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	f1 f7       	brne	.-4      	; 0x1f0a <LCD_WriteCmd+0x3a2>
    1f0e:	9a 83       	std	Y+2, r25	; 0x02
    1f10:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(2);//because maximum seconds can an instruction wait is 1.53ms so we choose 2 in general


}
    1f12:	ab 96       	adiw	r28, 0x2b	; 43
    1f14:	0f b6       	in	r0, 0x3f	; 63
    1f16:	f8 94       	cli
    1f18:	de bf       	out	0x3e, r29	; 62
    1f1a:	0f be       	out	0x3f, r0	; 63
    1f1c:	cd bf       	out	0x3d, r28	; 61
    1f1e:	cf 91       	pop	r28
    1f20:	df 91       	pop	r29
    1f22:	08 95       	ret

00001f24 <LCD_WriteData>:

void LCD_WriteData(u8 DATA)

{
    1f24:	df 93       	push	r29
    1f26:	cf 93       	push	r28
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	ab 97       	sbiw	r28, 0x2b	; 43
    1f2e:	0f b6       	in	r0, 0x3f	; 63
    1f30:	f8 94       	cli
    1f32:	de bf       	out	0x3e, r29	; 62
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	cd bf       	out	0x3d, r28	; 61
    1f38:	8b a7       	std	Y+43, r24	; 0x2b
		DIO_SetPinValue(PORTA ,PIN1,HIGH);  //RS=1,when it comes to write data on the LCD RS=1,RW=0;
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	61 e0       	ldi	r22, 0x01	; 1
    1f3e:	41 e0       	ldi	r20, 0x01	; 1
    1f40:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPinValue>
		DIO_SetPinValue(PORTA ,PIN2,LOW);  //RW=0
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	62 e0       	ldi	r22, 0x02	; 2
    1f48:	40 e0       	ldi	r20, 0x00	; 0
    1f4a:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPinValue>


		/*MSB ON THE LEFT SIDE*/

		DIO_SetPinValue(PORTA ,PIN4,GET_BIT(DATA , 4));  //DB4
    1f4e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f50:	82 95       	swap	r24
    1f52:	8f 70       	andi	r24, 0x0F	; 15
    1f54:	98 2f       	mov	r25, r24
    1f56:	91 70       	andi	r25, 0x01	; 1
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	64 e0       	ldi	r22, 0x04	; 4
    1f5c:	49 2f       	mov	r20, r25
    1f5e:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPinValue>
		DIO_SetPinValue(PORTA ,PIN5,GET_BIT(DATA , 5));  //DB5
    1f62:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f64:	82 95       	swap	r24
    1f66:	86 95       	lsr	r24
    1f68:	87 70       	andi	r24, 0x07	; 7
    1f6a:	98 2f       	mov	r25, r24
    1f6c:	91 70       	andi	r25, 0x01	; 1
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
    1f70:	65 e0       	ldi	r22, 0x05	; 5
    1f72:	49 2f       	mov	r20, r25
    1f74:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPinValue>
		DIO_SetPinValue(PORTA ,PIN6,GET_BIT(DATA , 6));  //DB6
    1f78:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f7a:	82 95       	swap	r24
    1f7c:	86 95       	lsr	r24
    1f7e:	86 95       	lsr	r24
    1f80:	83 70       	andi	r24, 0x03	; 3
    1f82:	98 2f       	mov	r25, r24
    1f84:	91 70       	andi	r25, 0x01	; 1
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	66 e0       	ldi	r22, 0x06	; 6
    1f8a:	49 2f       	mov	r20, r25
    1f8c:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPinValue>
		DIO_SetPinValue(PORTA ,PIN7,GET_BIT(DATA , 7));  //DB7
    1f90:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f92:	98 2f       	mov	r25, r24
    1f94:	99 1f       	adc	r25, r25
    1f96:	99 27       	eor	r25, r25
    1f98:	99 1f       	adc	r25, r25
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	67 e0       	ldi	r22, 0x07	; 7
    1f9e:	49 2f       	mov	r20, r25
    1fa0:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPinValue>

		DIO_SetPinValue(PORTA,PIN3,HIGH);  //EN
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	63 e0       	ldi	r22, 0x03	; 3
    1fa8:	41 e0       	ldi	r20, 0x01	; 1
    1faa:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPinValue>
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	a0 e8       	ldi	r26, 0x80	; 128
    1fb4:	bf e3       	ldi	r27, 0x3F	; 63
    1fb6:	8f a3       	std	Y+39, r24	; 0x27
    1fb8:	98 a7       	std	Y+40, r25	; 0x28
    1fba:	a9 a7       	std	Y+41, r26	; 0x29
    1fbc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fbe:	6f a1       	ldd	r22, Y+39	; 0x27
    1fc0:	78 a5       	ldd	r23, Y+40	; 0x28
    1fc2:	89 a5       	ldd	r24, Y+41	; 0x29
    1fc4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	4a e7       	ldi	r20, 0x7A	; 122
    1fcc:	55 e4       	ldi	r21, 0x45	; 69
    1fce:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	8b a3       	std	Y+35, r24	; 0x23
    1fd8:	9c a3       	std	Y+36, r25	; 0x24
    1fda:	ad a3       	std	Y+37, r26	; 0x25
    1fdc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fde:	6b a1       	ldd	r22, Y+35	; 0x23
    1fe0:	7c a1       	ldd	r23, Y+36	; 0x24
    1fe2:	8d a1       	ldd	r24, Y+37	; 0x25
    1fe4:	9e a1       	ldd	r25, Y+38	; 0x26
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	40 e8       	ldi	r20, 0x80	; 128
    1fec:	5f e3       	ldi	r21, 0x3F	; 63
    1fee:	0e 94 2b 04 	call	0x856	; 0x856 <__ltsf2>
    1ff2:	88 23       	and	r24, r24
    1ff4:	2c f4       	brge	.+10     	; 0x2000 <LCD_WriteData+0xdc>
		__ticks = 1;
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	9a a3       	std	Y+34, r25	; 0x22
    1ffc:	89 a3       	std	Y+33, r24	; 0x21
    1ffe:	3f c0       	rjmp	.+126    	; 0x207e <LCD_WriteData+0x15a>
	else if (__tmp > 65535)
    2000:	6b a1       	ldd	r22, Y+35	; 0x23
    2002:	7c a1       	ldd	r23, Y+36	; 0x24
    2004:	8d a1       	ldd	r24, Y+37	; 0x25
    2006:	9e a1       	ldd	r25, Y+38	; 0x26
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	3f ef       	ldi	r19, 0xFF	; 255
    200c:	4f e7       	ldi	r20, 0x7F	; 127
    200e:	57 e4       	ldi	r21, 0x47	; 71
    2010:	0e 94 cb 03 	call	0x796	; 0x796 <__gtsf2>
    2014:	18 16       	cp	r1, r24
    2016:	4c f5       	brge	.+82     	; 0x206a <LCD_WriteData+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2018:	6f a1       	ldd	r22, Y+39	; 0x27
    201a:	78 a5       	ldd	r23, Y+40	; 0x28
    201c:	89 a5       	ldd	r24, Y+41	; 0x29
    201e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	40 e2       	ldi	r20, 0x20	; 32
    2026:	51 e4       	ldi	r21, 0x41	; 65
    2028:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	bc 01       	movw	r22, r24
    2032:	cd 01       	movw	r24, r26
    2034:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	9a a3       	std	Y+34, r25	; 0x22
    203e:	89 a3       	std	Y+33, r24	; 0x21
    2040:	0f c0       	rjmp	.+30     	; 0x2060 <LCD_WriteData+0x13c>
    2042:	80 e9       	ldi	r24, 0x90	; 144
    2044:	91 e0       	ldi	r25, 0x01	; 1
    2046:	98 a3       	std	Y+32, r25	; 0x20
    2048:	8f 8f       	std	Y+31, r24	; 0x1f
    204a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    204c:	98 a1       	ldd	r25, Y+32	; 0x20
    204e:	01 97       	sbiw	r24, 0x01	; 1
    2050:	f1 f7       	brne	.-4      	; 0x204e <LCD_WriteData+0x12a>
    2052:	98 a3       	std	Y+32, r25	; 0x20
    2054:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2056:	89 a1       	ldd	r24, Y+33	; 0x21
    2058:	9a a1       	ldd	r25, Y+34	; 0x22
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	9a a3       	std	Y+34, r25	; 0x22
    205e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2060:	89 a1       	ldd	r24, Y+33	; 0x21
    2062:	9a a1       	ldd	r25, Y+34	; 0x22
    2064:	00 97       	sbiw	r24, 0x00	; 0
    2066:	69 f7       	brne	.-38     	; 0x2042 <LCD_WriteData+0x11e>
    2068:	14 c0       	rjmp	.+40     	; 0x2092 <LCD_WriteData+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206a:	6b a1       	ldd	r22, Y+35	; 0x23
    206c:	7c a1       	ldd	r23, Y+36	; 0x24
    206e:	8d a1       	ldd	r24, Y+37	; 0x25
    2070:	9e a1       	ldd	r25, Y+38	; 0x26
    2072:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	9a a3       	std	Y+34, r25	; 0x22
    207c:	89 a3       	std	Y+33, r24	; 0x21
    207e:	89 a1       	ldd	r24, Y+33	; 0x21
    2080:	9a a1       	ldd	r25, Y+34	; 0x22
    2082:	9e 8f       	std	Y+30, r25	; 0x1e
    2084:	8d 8f       	std	Y+29, r24	; 0x1d
    2086:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2088:	9e 8d       	ldd	r25, Y+30	; 0x1e
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	f1 f7       	brne	.-4      	; 0x208a <LCD_WriteData+0x166>
    208e:	9e 8f       	std	Y+30, r25	; 0x1e
    2090:	8d 8f       	std	Y+29, r24	; 0x1d

		_delay_ms(1);//because of the falling edge from high to low

		DIO_SetPinValue(PORTA,PIN3,LOW);   //EN
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	63 e0       	ldi	r22, 0x03	; 3
    2096:	40 e0       	ldi	r20, 0x00	; 0
    2098:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPinValue>



		/*LSB ON THE RIGHT SIDE*/

		DIO_SetPinValue(PORTA ,PIN4,GET_BIT(DATA , 0));  //DB4
    209c:	8b a5       	ldd	r24, Y+43	; 0x2b
    209e:	98 2f       	mov	r25, r24
    20a0:	91 70       	andi	r25, 0x01	; 1
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	64 e0       	ldi	r22, 0x04	; 4
    20a6:	49 2f       	mov	r20, r25
    20a8:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPinValue>
		DIO_SetPinValue(PORTA ,PIN5,GET_BIT(DATA , 1));  //DB5
    20ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    20ae:	86 95       	lsr	r24
    20b0:	98 2f       	mov	r25, r24
    20b2:	91 70       	andi	r25, 0x01	; 1
    20b4:	80 e0       	ldi	r24, 0x00	; 0
    20b6:	65 e0       	ldi	r22, 0x05	; 5
    20b8:	49 2f       	mov	r20, r25
    20ba:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPinValue>
		DIO_SetPinValue(PORTA ,PIN6,GET_BIT(DATA , 2));  //DB6
    20be:	8b a5       	ldd	r24, Y+43	; 0x2b
    20c0:	86 95       	lsr	r24
    20c2:	86 95       	lsr	r24
    20c4:	98 2f       	mov	r25, r24
    20c6:	91 70       	andi	r25, 0x01	; 1
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	66 e0       	ldi	r22, 0x06	; 6
    20cc:	49 2f       	mov	r20, r25
    20ce:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPinValue>
		DIO_SetPinValue(PORTA ,PIN7,GET_BIT(DATA , 3));  //DB7
    20d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    20d4:	86 95       	lsr	r24
    20d6:	86 95       	lsr	r24
    20d8:	86 95       	lsr	r24
    20da:	98 2f       	mov	r25, r24
    20dc:	91 70       	andi	r25, 0x01	; 1
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	67 e0       	ldi	r22, 0x07	; 7
    20e2:	49 2f       	mov	r20, r25
    20e4:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPinValue>

		DIO_SetPinValue(PORTA,PIN3,HIGH);
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	63 e0       	ldi	r22, 0x03	; 3
    20ec:	41 e0       	ldi	r20, 0x01	; 1
    20ee:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPinValue>
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	a0 e8       	ldi	r26, 0x80	; 128
    20f8:	bf e3       	ldi	r27, 0x3F	; 63
    20fa:	89 8f       	std	Y+25, r24	; 0x19
    20fc:	9a 8f       	std	Y+26, r25	; 0x1a
    20fe:	ab 8f       	std	Y+27, r26	; 0x1b
    2100:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2102:	69 8d       	ldd	r22, Y+25	; 0x19
    2104:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2106:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2108:	9c 8d       	ldd	r25, Y+28	; 0x1c
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	4a e7       	ldi	r20, 0x7A	; 122
    2110:	55 e4       	ldi	r21, 0x45	; 69
    2112:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	8d 8b       	std	Y+21, r24	; 0x15
    211c:	9e 8b       	std	Y+22, r25	; 0x16
    211e:	af 8b       	std	Y+23, r26	; 0x17
    2120:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2122:	6d 89       	ldd	r22, Y+21	; 0x15
    2124:	7e 89       	ldd	r23, Y+22	; 0x16
    2126:	8f 89       	ldd	r24, Y+23	; 0x17
    2128:	98 8d       	ldd	r25, Y+24	; 0x18
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	40 e8       	ldi	r20, 0x80	; 128
    2130:	5f e3       	ldi	r21, 0x3F	; 63
    2132:	0e 94 2b 04 	call	0x856	; 0x856 <__ltsf2>
    2136:	88 23       	and	r24, r24
    2138:	2c f4       	brge	.+10     	; 0x2144 <LCD_WriteData+0x220>
		__ticks = 1;
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	9c 8b       	std	Y+20, r25	; 0x14
    2140:	8b 8b       	std	Y+19, r24	; 0x13
    2142:	3f c0       	rjmp	.+126    	; 0x21c2 <LCD_WriteData+0x29e>
	else if (__tmp > 65535)
    2144:	6d 89       	ldd	r22, Y+21	; 0x15
    2146:	7e 89       	ldd	r23, Y+22	; 0x16
    2148:	8f 89       	ldd	r24, Y+23	; 0x17
    214a:	98 8d       	ldd	r25, Y+24	; 0x18
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	3f ef       	ldi	r19, 0xFF	; 255
    2150:	4f e7       	ldi	r20, 0x7F	; 127
    2152:	57 e4       	ldi	r21, 0x47	; 71
    2154:	0e 94 cb 03 	call	0x796	; 0x796 <__gtsf2>
    2158:	18 16       	cp	r1, r24
    215a:	4c f5       	brge	.+82     	; 0x21ae <LCD_WriteData+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    215c:	69 8d       	ldd	r22, Y+25	; 0x19
    215e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2160:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2162:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	40 e2       	ldi	r20, 0x20	; 32
    216a:	51 e4       	ldi	r21, 0x41	; 65
    216c:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	bc 01       	movw	r22, r24
    2176:	cd 01       	movw	r24, r26
    2178:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	9c 8b       	std	Y+20, r25	; 0x14
    2182:	8b 8b       	std	Y+19, r24	; 0x13
    2184:	0f c0       	rjmp	.+30     	; 0x21a4 <LCD_WriteData+0x280>
    2186:	80 e9       	ldi	r24, 0x90	; 144
    2188:	91 e0       	ldi	r25, 0x01	; 1
    218a:	9a 8b       	std	Y+18, r25	; 0x12
    218c:	89 8b       	std	Y+17, r24	; 0x11
    218e:	89 89       	ldd	r24, Y+17	; 0x11
    2190:	9a 89       	ldd	r25, Y+18	; 0x12
    2192:	01 97       	sbiw	r24, 0x01	; 1
    2194:	f1 f7       	brne	.-4      	; 0x2192 <LCD_WriteData+0x26e>
    2196:	9a 8b       	std	Y+18, r25	; 0x12
    2198:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    219a:	8b 89       	ldd	r24, Y+19	; 0x13
    219c:	9c 89       	ldd	r25, Y+20	; 0x14
    219e:	01 97       	sbiw	r24, 0x01	; 1
    21a0:	9c 8b       	std	Y+20, r25	; 0x14
    21a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a4:	8b 89       	ldd	r24, Y+19	; 0x13
    21a6:	9c 89       	ldd	r25, Y+20	; 0x14
    21a8:	00 97       	sbiw	r24, 0x00	; 0
    21aa:	69 f7       	brne	.-38     	; 0x2186 <LCD_WriteData+0x262>
    21ac:	14 c0       	rjmp	.+40     	; 0x21d6 <LCD_WriteData+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ae:	6d 89       	ldd	r22, Y+21	; 0x15
    21b0:	7e 89       	ldd	r23, Y+22	; 0x16
    21b2:	8f 89       	ldd	r24, Y+23	; 0x17
    21b4:	98 8d       	ldd	r25, Y+24	; 0x18
    21b6:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	9c 8b       	std	Y+20, r25	; 0x14
    21c0:	8b 8b       	std	Y+19, r24	; 0x13
    21c2:	8b 89       	ldd	r24, Y+19	; 0x13
    21c4:	9c 89       	ldd	r25, Y+20	; 0x14
    21c6:	98 8b       	std	Y+16, r25	; 0x10
    21c8:	8f 87       	std	Y+15, r24	; 0x0f
    21ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    21cc:	98 89       	ldd	r25, Y+16	; 0x10
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	f1 f7       	brne	.-4      	; 0x21ce <LCD_WriteData+0x2aa>
    21d2:	98 8b       	std	Y+16, r25	; 0x10
    21d4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);

		DIO_SetPinValue(PORTA,PIN3,LOW);
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	63 e0       	ldi	r22, 0x03	; 3
    21da:	40 e0       	ldi	r20, 0x00	; 0
    21dc:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPinValue>
    21e0:	80 e0       	ldi	r24, 0x00	; 0
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	a0 e0       	ldi	r26, 0x00	; 0
    21e6:	b0 e4       	ldi	r27, 0x40	; 64
    21e8:	8b 87       	std	Y+11, r24	; 0x0b
    21ea:	9c 87       	std	Y+12, r25	; 0x0c
    21ec:	ad 87       	std	Y+13, r26	; 0x0d
    21ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	4a e7       	ldi	r20, 0x7A	; 122
    21fe:	55 e4       	ldi	r21, 0x45	; 69
    2200:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	8f 83       	std	Y+7, r24	; 0x07
    220a:	98 87       	std	Y+8, r25	; 0x08
    220c:	a9 87       	std	Y+9, r26	; 0x09
    220e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2210:	6f 81       	ldd	r22, Y+7	; 0x07
    2212:	78 85       	ldd	r23, Y+8	; 0x08
    2214:	89 85       	ldd	r24, Y+9	; 0x09
    2216:	9a 85       	ldd	r25, Y+10	; 0x0a
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	40 e8       	ldi	r20, 0x80	; 128
    221e:	5f e3       	ldi	r21, 0x3F	; 63
    2220:	0e 94 2b 04 	call	0x856	; 0x856 <__ltsf2>
    2224:	88 23       	and	r24, r24
    2226:	2c f4       	brge	.+10     	; 0x2232 <LCD_WriteData+0x30e>
		__ticks = 1;
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	9e 83       	std	Y+6, r25	; 0x06
    222e:	8d 83       	std	Y+5, r24	; 0x05
    2230:	3f c0       	rjmp	.+126    	; 0x22b0 <LCD_WriteData+0x38c>
	else if (__tmp > 65535)
    2232:	6f 81       	ldd	r22, Y+7	; 0x07
    2234:	78 85       	ldd	r23, Y+8	; 0x08
    2236:	89 85       	ldd	r24, Y+9	; 0x09
    2238:	9a 85       	ldd	r25, Y+10	; 0x0a
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	3f ef       	ldi	r19, 0xFF	; 255
    223e:	4f e7       	ldi	r20, 0x7F	; 127
    2240:	57 e4       	ldi	r21, 0x47	; 71
    2242:	0e 94 cb 03 	call	0x796	; 0x796 <__gtsf2>
    2246:	18 16       	cp	r1, r24
    2248:	4c f5       	brge	.+82     	; 0x229c <LCD_WriteData+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    224a:	6b 85       	ldd	r22, Y+11	; 0x0b
    224c:	7c 85       	ldd	r23, Y+12	; 0x0c
    224e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2250:	9e 85       	ldd	r25, Y+14	; 0x0e
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	40 e2       	ldi	r20, 0x20	; 32
    2258:	51 e4       	ldi	r21, 0x41	; 65
    225a:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	bc 01       	movw	r22, r24
    2264:	cd 01       	movw	r24, r26
    2266:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	9e 83       	std	Y+6, r25	; 0x06
    2270:	8d 83       	std	Y+5, r24	; 0x05
    2272:	0f c0       	rjmp	.+30     	; 0x2292 <LCD_WriteData+0x36e>
    2274:	80 e9       	ldi	r24, 0x90	; 144
    2276:	91 e0       	ldi	r25, 0x01	; 1
    2278:	9c 83       	std	Y+4, r25	; 0x04
    227a:	8b 83       	std	Y+3, r24	; 0x03
    227c:	8b 81       	ldd	r24, Y+3	; 0x03
    227e:	9c 81       	ldd	r25, Y+4	; 0x04
    2280:	01 97       	sbiw	r24, 0x01	; 1
    2282:	f1 f7       	brne	.-4      	; 0x2280 <LCD_WriteData+0x35c>
    2284:	9c 83       	std	Y+4, r25	; 0x04
    2286:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2288:	8d 81       	ldd	r24, Y+5	; 0x05
    228a:	9e 81       	ldd	r25, Y+6	; 0x06
    228c:	01 97       	sbiw	r24, 0x01	; 1
    228e:	9e 83       	std	Y+6, r25	; 0x06
    2290:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2292:	8d 81       	ldd	r24, Y+5	; 0x05
    2294:	9e 81       	ldd	r25, Y+6	; 0x06
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	69 f7       	brne	.-38     	; 0x2274 <LCD_WriteData+0x350>
    229a:	14 c0       	rjmp	.+40     	; 0x22c4 <LCD_WriteData+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    229c:	6f 81       	ldd	r22, Y+7	; 0x07
    229e:	78 85       	ldd	r23, Y+8	; 0x08
    22a0:	89 85       	ldd	r24, Y+9	; 0x09
    22a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a4:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    22a8:	dc 01       	movw	r26, r24
    22aa:	cb 01       	movw	r24, r22
    22ac:	9e 83       	std	Y+6, r25	; 0x06
    22ae:	8d 83       	std	Y+5, r24	; 0x05
    22b0:	8d 81       	ldd	r24, Y+5	; 0x05
    22b2:	9e 81       	ldd	r25, Y+6	; 0x06
    22b4:	9a 83       	std	Y+2, r25	; 0x02
    22b6:	89 83       	std	Y+1, r24	; 0x01
    22b8:	89 81       	ldd	r24, Y+1	; 0x01
    22ba:	9a 81       	ldd	r25, Y+2	; 0x02
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	f1 f7       	brne	.-4      	; 0x22bc <LCD_WriteData+0x398>
    22c0:	9a 83       	std	Y+2, r25	; 0x02
    22c2:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(2);//because maximum seconds can an instruction wait is 1.53ms so we choose 2 in general


}
    22c4:	ab 96       	adiw	r28, 0x2b	; 43
    22c6:	0f b6       	in	r0, 0x3f	; 63
    22c8:	f8 94       	cli
    22ca:	de bf       	out	0x3e, r29	; 62
    22cc:	0f be       	out	0x3f, r0	; 63
    22ce:	cd bf       	out	0x3d, r28	; 61
    22d0:	cf 91       	pop	r28
    22d2:	df 91       	pop	r29
    22d4:	08 95       	ret

000022d6 <LCD_GoToPos>:

void LCD_GoToPos(u8 ROW , u8 COL)
{
    22d6:	df 93       	push	r29
    22d8:	cf 93       	push	r28
    22da:	00 d0       	rcall	.+0      	; 0x22dc <LCD_GoToPos+0x6>
    22dc:	0f 92       	push	r0
    22de:	cd b7       	in	r28, 0x3d	; 61
    22e0:	de b7       	in	r29, 0x3e	; 62
    22e2:	8a 83       	std	Y+2, r24	; 0x02
    22e4:	6b 83       	std	Y+3, r22	; 0x03
	u8 address;
	if(ROW < 2 && COL <16)
    22e6:	8a 81       	ldd	r24, Y+2	; 0x02
    22e8:	82 30       	cpi	r24, 0x02	; 2
    22ea:	c8 f4       	brcc	.+50     	; 0x231e <LCD_GoToPos+0x48>
    22ec:	8b 81       	ldd	r24, Y+3	; 0x03
    22ee:	80 31       	cpi	r24, 0x10	; 16
    22f0:	b0 f4       	brcc	.+44     	; 0x231e <LCD_GoToPos+0x48>
	{
		address = (ROW *0x40)+COL;
    22f2:	8a 81       	ldd	r24, Y+2	; 0x02
    22f4:	88 2f       	mov	r24, r24
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	00 24       	eor	r0, r0
    22fa:	96 95       	lsr	r25
    22fc:	87 95       	ror	r24
    22fe:	07 94       	ror	r0
    2300:	96 95       	lsr	r25
    2302:	87 95       	ror	r24
    2304:	07 94       	ror	r0
    2306:	98 2f       	mov	r25, r24
    2308:	80 2d       	mov	r24, r0
    230a:	98 2f       	mov	r25, r24
    230c:	8b 81       	ldd	r24, Y+3	; 0x03
    230e:	89 0f       	add	r24, r25
    2310:	89 83       	std	Y+1, r24	; 0x01
		address = SET_BIT(address,7);
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	80 68       	ori	r24, 0x80	; 128
    2316:	89 83       	std	Y+1, r24	; 0x01
		LCD_WriteCmd(address);
    2318:	89 81       	ldd	r24, Y+1	; 0x01
    231a:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <LCD_WriteCmd>
	}
}
    231e:	0f 90       	pop	r0
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	08 95       	ret

0000232a <LCD_WriteString>:
void LCD_WriteString(u8 *str,u8 ROW , u8 COL)
{
    232a:	df 93       	push	r29
    232c:	cf 93       	push	r28
    232e:	00 d0       	rcall	.+0      	; 0x2330 <LCD_WriteString+0x6>
    2330:	00 d0       	rcall	.+0      	; 0x2332 <LCD_WriteString+0x8>
    2332:	00 d0       	rcall	.+0      	; 0x2334 <LCD_WriteString+0xa>
    2334:	cd b7       	in	r28, 0x3d	; 61
    2336:	de b7       	in	r29, 0x3e	; 62
    2338:	9c 83       	std	Y+4, r25	; 0x04
    233a:	8b 83       	std	Y+3, r24	; 0x03
    233c:	6d 83       	std	Y+5, r22	; 0x05
    233e:	4e 83       	std	Y+6, r20	; 0x06
	LCD_GoToPos(ROW,COL);
    2340:	8d 81       	ldd	r24, Y+5	; 0x05
    2342:	6e 81       	ldd	r22, Y+6	; 0x06
    2344:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <LCD_GoToPos>
	u8 index = 0;
    2348:	1a 82       	std	Y+2, r1	; 0x02
	u8 line0 = 0;
    234a:	19 82       	std	Y+1, r1	; 0x01
    234c:	70 c0       	rjmp	.+224    	; 0x242e <LCD_WriteString+0x104>
	while(str[index] != '\0' && ((ROW * 16) + (index + COL ))< 32)//by default it will continue working until finding '\0'
	{
		if(((ROW * 16) + (index + COL ))< 16) //row=0,col=0,index=0
    234e:	8d 81       	ldd	r24, Y+5	; 0x05
    2350:	88 2f       	mov	r24, r24
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	ac 01       	movw	r20, r24
    2356:	42 95       	swap	r20
    2358:	52 95       	swap	r21
    235a:	50 7f       	andi	r21, 0xF0	; 240
    235c:	54 27       	eor	r21, r20
    235e:	40 7f       	andi	r20, 0xF0	; 240
    2360:	54 27       	eor	r21, r20
    2362:	8a 81       	ldd	r24, Y+2	; 0x02
    2364:	28 2f       	mov	r18, r24
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	8e 81       	ldd	r24, Y+6	; 0x06
    236a:	88 2f       	mov	r24, r24
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	82 0f       	add	r24, r18
    2370:	93 1f       	adc	r25, r19
    2372:	84 0f       	add	r24, r20
    2374:	95 1f       	adc	r25, r21
    2376:	80 31       	cpi	r24, 0x10	; 16
    2378:	91 05       	cpc	r25, r1
    237a:	7c f4       	brge	.+30     	; 0x239a <LCD_WriteString+0x70>
		{
		LCD_WriteData(str[index]); //r=0,col=1,index=1
    237c:	8a 81       	ldd	r24, Y+2	; 0x02
    237e:	28 2f       	mov	r18, r24
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	8b 81       	ldd	r24, Y+3	; 0x03
    2384:	9c 81       	ldd	r25, Y+4	; 0x04
    2386:	fc 01       	movw	r30, r24
    2388:	e2 0f       	add	r30, r18
    238a:	f3 1f       	adc	r31, r19
    238c:	80 81       	ld	r24, Z
    238e:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <LCD_WriteData>
		index++;
    2392:	8a 81       	ldd	r24, Y+2	; 0x02
    2394:	8f 5f       	subi	r24, 0xFF	; 255
    2396:	8a 83       	std	Y+2, r24	; 0x02
    2398:	4a c0       	rjmp	.+148    	; 0x242e <LCD_WriteString+0x104>
		}
		else if(((ROW * 16) + (index + COL ))==16 && line0 ==0)
    239a:	8d 81       	ldd	r24, Y+5	; 0x05
    239c:	88 2f       	mov	r24, r24
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	ac 01       	movw	r20, r24
    23a2:	42 95       	swap	r20
    23a4:	52 95       	swap	r21
    23a6:	50 7f       	andi	r21, 0xF0	; 240
    23a8:	54 27       	eor	r21, r20
    23aa:	40 7f       	andi	r20, 0xF0	; 240
    23ac:	54 27       	eor	r21, r20
    23ae:	8a 81       	ldd	r24, Y+2	; 0x02
    23b0:	28 2f       	mov	r18, r24
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	8e 81       	ldd	r24, Y+6	; 0x06
    23b6:	88 2f       	mov	r24, r24
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	82 0f       	add	r24, r18
    23bc:	93 1f       	adc	r25, r19
    23be:	84 0f       	add	r24, r20
    23c0:	95 1f       	adc	r25, r21
    23c2:	80 31       	cpi	r24, 0x10	; 16
    23c4:	91 05       	cpc	r25, r1
    23c6:	59 f4       	brne	.+22     	; 0x23de <LCD_WriteString+0xb4>
    23c8:	89 81       	ldd	r24, Y+1	; 0x01
    23ca:	88 23       	and	r24, r24
    23cc:	41 f4       	brne	.+16     	; 0x23de <LCD_WriteString+0xb4>
		{
			LCD_GoToPos(1,0);
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	60 e0       	ldi	r22, 0x00	; 0
    23d2:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <LCD_GoToPos>
			line0++;
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	8f 5f       	subi	r24, 0xFF	; 255
    23da:	89 83       	std	Y+1, r24	; 0x01
    23dc:	28 c0       	rjmp	.+80     	; 0x242e <LCD_WriteString+0x104>
		}
		else if(((ROW * 16) + (index + COL ))<32 && line0 ==1)
    23de:	8d 81       	ldd	r24, Y+5	; 0x05
    23e0:	88 2f       	mov	r24, r24
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	ac 01       	movw	r20, r24
    23e6:	42 95       	swap	r20
    23e8:	52 95       	swap	r21
    23ea:	50 7f       	andi	r21, 0xF0	; 240
    23ec:	54 27       	eor	r21, r20
    23ee:	40 7f       	andi	r20, 0xF0	; 240
    23f0:	54 27       	eor	r21, r20
    23f2:	8a 81       	ldd	r24, Y+2	; 0x02
    23f4:	28 2f       	mov	r18, r24
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	8e 81       	ldd	r24, Y+6	; 0x06
    23fa:	88 2f       	mov	r24, r24
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	82 0f       	add	r24, r18
    2400:	93 1f       	adc	r25, r19
    2402:	84 0f       	add	r24, r20
    2404:	95 1f       	adc	r25, r21
    2406:	80 32       	cpi	r24, 0x20	; 32
    2408:	91 05       	cpc	r25, r1
    240a:	8c f4       	brge	.+34     	; 0x242e <LCD_WriteString+0x104>
    240c:	89 81       	ldd	r24, Y+1	; 0x01
    240e:	81 30       	cpi	r24, 0x01	; 1
    2410:	71 f4       	brne	.+28     	; 0x242e <LCD_WriteString+0x104>
		{
			LCD_WriteData(str[index]);
    2412:	8a 81       	ldd	r24, Y+2	; 0x02
    2414:	28 2f       	mov	r18, r24
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	8b 81       	ldd	r24, Y+3	; 0x03
    241a:	9c 81       	ldd	r25, Y+4	; 0x04
    241c:	fc 01       	movw	r30, r24
    241e:	e2 0f       	add	r30, r18
    2420:	f3 1f       	adc	r31, r19
    2422:	80 81       	ld	r24, Z
    2424:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <LCD_WriteData>
			index++;
    2428:	8a 81       	ldd	r24, Y+2	; 0x02
    242a:	8f 5f       	subi	r24, 0xFF	; 255
    242c:	8a 83       	std	Y+2, r24	; 0x02
void LCD_WriteString(u8 *str,u8 ROW , u8 COL)
{
	LCD_GoToPos(ROW,COL);
	u8 index = 0;
	u8 line0 = 0;
	while(str[index] != '\0' && ((ROW * 16) + (index + COL ))< 32)//by default it will continue working until finding '\0'
    242e:	8a 81       	ldd	r24, Y+2	; 0x02
    2430:	28 2f       	mov	r18, r24
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	8b 81       	ldd	r24, Y+3	; 0x03
    2436:	9c 81       	ldd	r25, Y+4	; 0x04
    2438:	fc 01       	movw	r30, r24
    243a:	e2 0f       	add	r30, r18
    243c:	f3 1f       	adc	r31, r19
    243e:	80 81       	ld	r24, Z
    2440:	88 23       	and	r24, r24
    2442:	c1 f0       	breq	.+48     	; 0x2474 <LCD_WriteString+0x14a>
    2444:	8d 81       	ldd	r24, Y+5	; 0x05
    2446:	88 2f       	mov	r24, r24
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	ac 01       	movw	r20, r24
    244c:	42 95       	swap	r20
    244e:	52 95       	swap	r21
    2450:	50 7f       	andi	r21, 0xF0	; 240
    2452:	54 27       	eor	r21, r20
    2454:	40 7f       	andi	r20, 0xF0	; 240
    2456:	54 27       	eor	r21, r20
    2458:	8a 81       	ldd	r24, Y+2	; 0x02
    245a:	28 2f       	mov	r18, r24
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	8e 81       	ldd	r24, Y+6	; 0x06
    2460:	88 2f       	mov	r24, r24
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	82 0f       	add	r24, r18
    2466:	93 1f       	adc	r25, r19
    2468:	84 0f       	add	r24, r20
    246a:	95 1f       	adc	r25, r21
    246c:	80 32       	cpi	r24, 0x20	; 32
    246e:	91 05       	cpc	r25, r1
    2470:	0c f4       	brge	.+2      	; 0x2474 <LCD_WriteString+0x14a>
    2472:	6d cf       	rjmp	.-294    	; 0x234e <LCD_WriteString+0x24>
			LCD_WriteData(str[index]);
			index++;
		}

	}
}
    2474:	26 96       	adiw	r28, 0x06	; 6
    2476:	0f b6       	in	r0, 0x3f	; 63
    2478:	f8 94       	cli
    247a:	de bf       	out	0x3e, r29	; 62
    247c:	0f be       	out	0x3f, r0	; 63
    247e:	cd bf       	out	0x3d, r28	; 61
    2480:	cf 91       	pop	r28
    2482:	df 91       	pop	r29
    2484:	08 95       	ret

00002486 <LCD_Clear>:

void LCD_Clear()
{
    2486:	df 93       	push	r29
    2488:	cf 93       	push	r28
    248a:	cd b7       	in	r28, 0x3d	; 61
    248c:	de b7       	in	r29, 0x3e	; 62
	LCD_WriteCmd(0x01);
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <LCD_WriteCmd>
}
    2494:	cf 91       	pop	r28
    2496:	df 91       	pop	r29
    2498:	08 95       	ret

0000249a <floatToString>:
volatile unsigned int hours = 0;
volatile unsigned int minutes = 0;
volatile unsigned int seconds = 0;
volatile char time_paused = 0; // To track if the clock is paused

void floatToString(char *str, float value) {
    249a:	df 93       	push	r29
    249c:	cf 93       	push	r28
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
    24a2:	60 97       	sbiw	r28, 0x10	; 16
    24a4:	0f b6       	in	r0, 0x3f	; 63
    24a6:	f8 94       	cli
    24a8:	de bf       	out	0x3e, r29	; 62
    24aa:	0f be       	out	0x3f, r0	; 63
    24ac:	cd bf       	out	0x3d, r28	; 61
    24ae:	9a 87       	std	Y+10, r25	; 0x0a
    24b0:	89 87       	std	Y+9, r24	; 0x09
    24b2:	4b 87       	std	Y+11, r20	; 0x0b
    24b4:	5c 87       	std	Y+12, r21	; 0x0c
    24b6:	6d 87       	std	Y+13, r22	; 0x0d
    24b8:	7e 87       	std	Y+14, r23	; 0x0e
    int tmpInt1 = (int)value;
    24ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    24bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    24be:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c2:	0e 94 b9 04 	call	0x972	; 0x972 <__fixsfsi>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	98 87       	std	Y+8, r25	; 0x08
    24cc:	8f 83       	std	Y+7, r24	; 0x07
    float tmpFrac = value - tmpInt1;
    24ce:	8f 81       	ldd	r24, Y+7	; 0x07
    24d0:	98 85       	ldd	r25, Y+8	; 0x08
    24d2:	aa 27       	eor	r26, r26
    24d4:	97 fd       	sbrc	r25, 7
    24d6:	a0 95       	com	r26
    24d8:	ba 2f       	mov	r27, r26
    24da:	bc 01       	movw	r22, r24
    24dc:	cd 01       	movw	r24, r26
    24de:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatsisf>
    24e2:	9b 01       	movw	r18, r22
    24e4:	ac 01       	movw	r20, r24
    24e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ee:	0e 94 c7 01 	call	0x38e	; 0x38e <__subsf3>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	8b 83       	std	Y+3, r24	; 0x03
    24f8:	9c 83       	std	Y+4, r25	; 0x04
    24fa:	ad 83       	std	Y+5, r26	; 0x05
    24fc:	be 83       	std	Y+6, r27	; 0x06
    int tmpInt2 = trunc(tmpFrac * 1000);
    24fe:	6b 81       	ldd	r22, Y+3	; 0x03
    2500:	7c 81       	ldd	r23, Y+4	; 0x04
    2502:	8d 81       	ldd	r24, Y+5	; 0x05
    2504:	9e 81       	ldd	r25, Y+6	; 0x06
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	4a e7       	ldi	r20, 0x7A	; 122
    250c:	54 e4       	ldi	r21, 0x44	; 68
    250e:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    2512:	dc 01       	movw	r26, r24
    2514:	cb 01       	movw	r24, r22
    2516:	bc 01       	movw	r22, r24
    2518:	cd 01       	movw	r24, r26
    251a:	0e 94 32 25 	call	0x4a64	; 0x4a64 <trunc>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	bc 01       	movw	r22, r24
    2524:	cd 01       	movw	r24, r26
    2526:	0e 94 b9 04 	call	0x972	; 0x972 <__fixsfsi>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	9a 83       	std	Y+2, r25	; 0x02
    2530:	89 83       	std	Y+1, r24	; 0x01
    sprintf(str, "%d.%03d", tmpInt1, tmpInt2 < 0 ? -tmpInt2 : tmpInt2);  // Handle negative fractions
    2532:	89 81       	ldd	r24, Y+1	; 0x01
    2534:	9a 81       	ldd	r25, Y+2	; 0x02
    2536:	98 8b       	std	Y+16, r25	; 0x10
    2538:	8f 87       	std	Y+15, r24	; 0x0f
    253a:	8f 85       	ldd	r24, Y+15	; 0x0f
    253c:	98 89       	ldd	r25, Y+16	; 0x10
    253e:	99 23       	and	r25, r25
    2540:	3c f4       	brge	.+14     	; 0x2550 <floatToString+0xb6>
    2542:	8f 85       	ldd	r24, Y+15	; 0x0f
    2544:	98 89       	ldd	r25, Y+16	; 0x10
    2546:	90 95       	com	r25
    2548:	81 95       	neg	r24
    254a:	9f 4f       	sbci	r25, 0xFF	; 255
    254c:	98 8b       	std	Y+16, r25	; 0x10
    254e:	8f 87       	std	Y+15, r24	; 0x0f
    2550:	8d b7       	in	r24, 0x3d	; 61
    2552:	9e b7       	in	r25, 0x3e	; 62
    2554:	08 97       	sbiw	r24, 0x08	; 8
    2556:	0f b6       	in	r0, 0x3f	; 63
    2558:	f8 94       	cli
    255a:	9e bf       	out	0x3e, r25	; 62
    255c:	0f be       	out	0x3f, r0	; 63
    255e:	8d bf       	out	0x3d, r24	; 61
    2560:	ed b7       	in	r30, 0x3d	; 61
    2562:	fe b7       	in	r31, 0x3e	; 62
    2564:	31 96       	adiw	r30, 0x01	; 1
    2566:	89 85       	ldd	r24, Y+9	; 0x09
    2568:	9a 85       	ldd	r25, Y+10	; 0x0a
    256a:	91 83       	std	Z+1, r25	; 0x01
    256c:	80 83       	st	Z, r24
    256e:	80 e6       	ldi	r24, 0x60	; 96
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	93 83       	std	Z+3, r25	; 0x03
    2574:	82 83       	std	Z+2, r24	; 0x02
    2576:	8f 81       	ldd	r24, Y+7	; 0x07
    2578:	98 85       	ldd	r25, Y+8	; 0x08
    257a:	95 83       	std	Z+5, r25	; 0x05
    257c:	84 83       	std	Z+4, r24	; 0x04
    257e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2580:	98 89       	ldd	r25, Y+16	; 0x10
    2582:	97 83       	std	Z+7, r25	; 0x07
    2584:	86 83       	std	Z+6, r24	; 0x06
    2586:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <sprintf>
    258a:	8d b7       	in	r24, 0x3d	; 61
    258c:	9e b7       	in	r25, 0x3e	; 62
    258e:	08 96       	adiw	r24, 0x08	; 8
    2590:	0f b6       	in	r0, 0x3f	; 63
    2592:	f8 94       	cli
    2594:	9e bf       	out	0x3e, r25	; 62
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	8d bf       	out	0x3d, r24	; 61
}
    259a:	60 96       	adiw	r28, 0x10	; 16
    259c:	0f b6       	in	r0, 0x3f	; 63
    259e:	f8 94       	cli
    25a0:	de bf       	out	0x3e, r29	; 62
    25a2:	0f be       	out	0x3f, r0	; 63
    25a4:	cd bf       	out	0x3d, r28	; 61
    25a6:	cf 91       	pop	r28
    25a8:	df 91       	pop	r29
    25aa:	08 95       	ret

000025ac <intToString>:


void intToString(char *str, int32_t value) {
    25ac:	df 93       	push	r29
    25ae:	cf 93       	push	r28
    25b0:	00 d0       	rcall	.+0      	; 0x25b2 <intToString+0x6>
    25b2:	00 d0       	rcall	.+0      	; 0x25b4 <intToString+0x8>
    25b4:	00 d0       	rcall	.+0      	; 0x25b6 <intToString+0xa>
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
    25ba:	9a 83       	std	Y+2, r25	; 0x02
    25bc:	89 83       	std	Y+1, r24	; 0x01
    25be:	4b 83       	std	Y+3, r20	; 0x03
    25c0:	5c 83       	std	Y+4, r21	; 0x04
    25c2:	6d 83       	std	Y+5, r22	; 0x05
    25c4:	7e 83       	std	Y+6, r23	; 0x06
    sprintf(str, "%ld", value);
    25c6:	8d b7       	in	r24, 0x3d	; 61
    25c8:	9e b7       	in	r25, 0x3e	; 62
    25ca:	08 97       	sbiw	r24, 0x08	; 8
    25cc:	0f b6       	in	r0, 0x3f	; 63
    25ce:	f8 94       	cli
    25d0:	9e bf       	out	0x3e, r25	; 62
    25d2:	0f be       	out	0x3f, r0	; 63
    25d4:	8d bf       	out	0x3d, r24	; 61
    25d6:	ed b7       	in	r30, 0x3d	; 61
    25d8:	fe b7       	in	r31, 0x3e	; 62
    25da:	31 96       	adiw	r30, 0x01	; 1
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
    25de:	9a 81       	ldd	r25, Y+2	; 0x02
    25e0:	91 83       	std	Z+1, r25	; 0x01
    25e2:	80 83       	st	Z, r24
    25e4:	88 e6       	ldi	r24, 0x68	; 104
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	93 83       	std	Z+3, r25	; 0x03
    25ea:	82 83       	std	Z+2, r24	; 0x02
    25ec:	8b 81       	ldd	r24, Y+3	; 0x03
    25ee:	9c 81       	ldd	r25, Y+4	; 0x04
    25f0:	ad 81       	ldd	r26, Y+5	; 0x05
    25f2:	be 81       	ldd	r27, Y+6	; 0x06
    25f4:	84 83       	std	Z+4, r24	; 0x04
    25f6:	95 83       	std	Z+5, r25	; 0x05
    25f8:	a6 83       	std	Z+6, r26	; 0x06
    25fa:	b7 83       	std	Z+7, r27	; 0x07
    25fc:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <sprintf>
    2600:	8d b7       	in	r24, 0x3d	; 61
    2602:	9e b7       	in	r25, 0x3e	; 62
    2604:	08 96       	adiw	r24, 0x08	; 8
    2606:	0f b6       	in	r0, 0x3f	; 63
    2608:	f8 94       	cli
    260a:	9e bf       	out	0x3e, r25	; 62
    260c:	0f be       	out	0x3f, r0	; 63
    260e:	8d bf       	out	0x3d, r24	; 61
}
    2610:	26 96       	adiw	r28, 0x06	; 6
    2612:	0f b6       	in	r0, 0x3f	; 63
    2614:	f8 94       	cli
    2616:	de bf       	out	0x3e, r29	; 62
    2618:	0f be       	out	0x3f, r0	; 63
    261a:	cd bf       	out	0x3d, r28	; 61
    261c:	cf 91       	pop	r28
    261e:	df 91       	pop	r29
    2620:	08 95       	ret

00002622 <setupIO>:

void setupIO() {
    2622:	df 93       	push	r29
    2624:	cf 93       	push	r28
    2626:	cd b7       	in	r28, 0x3d	; 61
    2628:	de b7       	in	r29, 0x3e	; 62
    // Set PORTD.4 as output
    DDRD |= (1 << 4);
    262a:	a1 e3       	ldi	r26, 0x31	; 49
    262c:	b0 e0       	ldi	r27, 0x00	; 0
    262e:	e1 e3       	ldi	r30, 0x31	; 49
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	80 81       	ld	r24, Z
    2634:	80 61       	ori	r24, 0x10	; 16
    2636:	8c 93       	st	X, r24
    PORTD &= ~(1 << 4);  // Initially set the LED to off
    2638:	a2 e3       	ldi	r26, 0x32	; 50
    263a:	b0 e0       	ldi	r27, 0x00	; 0
    263c:	e2 e3       	ldi	r30, 0x32	; 50
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	80 81       	ld	r24, Z
    2642:	8f 7e       	andi	r24, 0xEF	; 239
    2644:	8c 93       	st	X, r24
}
    2646:	cf 91       	pop	r28
    2648:	df 91       	pop	r29
    264a:	08 95       	ret

0000264c <__vector_1>:

// INT0 Interrupt Service Routine - Toggles pause/resume for the clock
ISR(INT0_vect) {
    264c:	1f 92       	push	r1
    264e:	0f 92       	push	r0
    2650:	0f b6       	in	r0, 0x3f	; 63
    2652:	0f 92       	push	r0
    2654:	11 24       	eor	r1, r1
    2656:	2f 93       	push	r18
    2658:	3f 93       	push	r19
    265a:	4f 93       	push	r20
    265c:	5f 93       	push	r21
    265e:	6f 93       	push	r22
    2660:	7f 93       	push	r23
    2662:	8f 93       	push	r24
    2664:	9f 93       	push	r25
    2666:	af 93       	push	r26
    2668:	bf 93       	push	r27
    266a:	ef 93       	push	r30
    266c:	ff 93       	push	r31
    266e:	df 93       	push	r29
    2670:	cf 93       	push	r28
    2672:	0f 92       	push	r0
    2674:	cd b7       	in	r28, 0x3d	; 61
    2676:	de b7       	in	r29, 0x3e	; 62
    if (currentMode == STOPWATCH || currentMode == TIMER) {
    2678:	80 91 37 02 	lds	r24, 0x0237
    267c:	81 30       	cpi	r24, 0x01	; 1
    267e:	21 f0       	breq	.+8      	; 0x2688 <__vector_1+0x3c>
    2680:	80 91 37 02 	lds	r24, 0x0237
    2684:	82 30       	cpi	r24, 0x02	; 2
    2686:	61 f4       	brne	.+24     	; 0x26a0 <__vector_1+0x54>
        time_paused = !time_paused; // Toggle the pause state only in clock mode
    2688:	80 91 3f 02 	lds	r24, 0x023F
    268c:	19 82       	std	Y+1, r1	; 0x01
    268e:	88 23       	and	r24, r24
    2690:	11 f4       	brne	.+4      	; 0x2696 <__vector_1+0x4a>
    2692:	81 e0       	ldi	r24, 0x01	; 1
    2694:	89 83       	std	Y+1, r24	; 0x01
    2696:	89 81       	ldd	r24, Y+1	; 0x01
    2698:	80 93 3f 02 	sts	0x023F, r24
        LCD_Clear();
    269c:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_Clear>
    }
}
    26a0:	0f 90       	pop	r0
    26a2:	cf 91       	pop	r28
    26a4:	df 91       	pop	r29
    26a6:	ff 91       	pop	r31
    26a8:	ef 91       	pop	r30
    26aa:	bf 91       	pop	r27
    26ac:	af 91       	pop	r26
    26ae:	9f 91       	pop	r25
    26b0:	8f 91       	pop	r24
    26b2:	7f 91       	pop	r23
    26b4:	6f 91       	pop	r22
    26b6:	5f 91       	pop	r21
    26b8:	4f 91       	pop	r20
    26ba:	3f 91       	pop	r19
    26bc:	2f 91       	pop	r18
    26be:	0f 90       	pop	r0
    26c0:	0f be       	out	0x3f, r0	; 63
    26c2:	0f 90       	pop	r0
    26c4:	1f 90       	pop	r1
    26c6:	18 95       	reti

000026c8 <__vector_2>:

// INT1 Interrupt Service Routine - Resets the time in clock mode
ISR(INT1_vect) {
    26c8:	1f 92       	push	r1
    26ca:	0f 92       	push	r0
    26cc:	0f b6       	in	r0, 0x3f	; 63
    26ce:	0f 92       	push	r0
    26d0:	11 24       	eor	r1, r1
    26d2:	2f 93       	push	r18
    26d4:	3f 93       	push	r19
    26d6:	4f 93       	push	r20
    26d8:	5f 93       	push	r21
    26da:	6f 93       	push	r22
    26dc:	7f 93       	push	r23
    26de:	8f 93       	push	r24
    26e0:	9f 93       	push	r25
    26e2:	af 93       	push	r26
    26e4:	bf 93       	push	r27
    26e6:	ef 93       	push	r30
    26e8:	ff 93       	push	r31
    26ea:	df 93       	push	r29
    26ec:	cf 93       	push	r28
    26ee:	cd b7       	in	r28, 0x3d	; 61
    26f0:	de b7       	in	r29, 0x3e	; 62
    if (currentMode == STOPWATCH) {
    26f2:	80 91 37 02 	lds	r24, 0x0237
    26f6:	81 30       	cpi	r24, 0x01	; 1
    26f8:	79 f4       	brne	.+30     	; 0x2718 <__vector_2+0x50>
        hours = 0;
    26fa:	10 92 3a 02 	sts	0x023A, r1
    26fe:	10 92 39 02 	sts	0x0239, r1
        minutes = 0;
    2702:	10 92 3c 02 	sts	0x023C, r1
    2706:	10 92 3b 02 	sts	0x023B, r1
        seconds = 0;
    270a:	10 92 3e 02 	sts	0x023E, r1
    270e:	10 92 3d 02 	sts	0x023D, r1
        LCD_Clear();
    2712:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_Clear>
    2716:	15 c0       	rjmp	.+42     	; 0x2742 <__vector_2+0x7a>
    } else if (currentMode == TIMER) {
    2718:	80 91 37 02 	lds	r24, 0x0237
    271c:	82 30       	cpi	r24, 0x02	; 2
    271e:	89 f4       	brne	.+34     	; 0x2742 <__vector_2+0x7a>
        minutes = 0;
    2720:	10 92 3c 02 	sts	0x023C, r1
    2724:	10 92 3b 02 	sts	0x023B, r1
        seconds = 0;
    2728:	10 92 3e 02 	sts	0x023E, r1
    272c:	10 92 3d 02 	sts	0x023D, r1
        PORTD |= (1 << 4);
    2730:	a2 e3       	ldi	r26, 0x32	; 50
    2732:	b0 e0       	ldi	r27, 0x00	; 0
    2734:	e2 e3       	ldi	r30, 0x32	; 50
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	80 81       	ld	r24, Z
    273a:	80 61       	ori	r24, 0x10	; 16
    273c:	8c 93       	st	X, r24
        LCD_Clear();
    273e:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_Clear>
    }
}
    2742:	cf 91       	pop	r28
    2744:	df 91       	pop	r29
    2746:	ff 91       	pop	r31
    2748:	ef 91       	pop	r30
    274a:	bf 91       	pop	r27
    274c:	af 91       	pop	r26
    274e:	9f 91       	pop	r25
    2750:	8f 91       	pop	r24
    2752:	7f 91       	pop	r23
    2754:	6f 91       	pop	r22
    2756:	5f 91       	pop	r21
    2758:	4f 91       	pop	r20
    275a:	3f 91       	pop	r19
    275c:	2f 91       	pop	r18
    275e:	0f 90       	pop	r0
    2760:	0f be       	out	0x3f, r0	; 63
    2762:	0f 90       	pop	r0
    2764:	1f 90       	pop	r1
    2766:	18 95       	reti

00002768 <__vector_3>:

// INT2 Interrupt Service Routine - Switches modes flexibly
ISR(INT2_vect) {
    2768:	1f 92       	push	r1
    276a:	0f 92       	push	r0
    276c:	0f b6       	in	r0, 0x3f	; 63
    276e:	0f 92       	push	r0
    2770:	11 24       	eor	r1, r1
    2772:	2f 93       	push	r18
    2774:	3f 93       	push	r19
    2776:	4f 93       	push	r20
    2778:	5f 93       	push	r21
    277a:	6f 93       	push	r22
    277c:	7f 93       	push	r23
    277e:	8f 93       	push	r24
    2780:	9f 93       	push	r25
    2782:	af 93       	push	r26
    2784:	bf 93       	push	r27
    2786:	ef 93       	push	r30
    2788:	ff 93       	push	r31
    278a:	df 93       	push	r29
    278c:	cf 93       	push	r28
    278e:	cd b7       	in	r28, 0x3d	; 61
    2790:	de b7       	in	r29, 0x3e	; 62
    if (currentMode == STOPWATCH) {
    2792:	80 91 37 02 	lds	r24, 0x0237
    2796:	81 30       	cpi	r24, 0x01	; 1
    2798:	21 f4       	brne	.+8      	; 0x27a2 <__vector_3+0x3a>
        currentMode = TIMER; // Direct switch to Clock from Timer
    279a:	82 e0       	ldi	r24, 0x02	; 2
    279c:	80 93 37 02 	sts	0x0237, r24
    27a0:	0c c0       	rjmp	.+24     	; 0x27ba <__vector_3+0x52>
    } else {
        currentMode = (currentMode + 1) % 3; // Cycles through the modes normally
    27a2:	80 91 37 02 	lds	r24, 0x0237
    27a6:	88 2f       	mov	r24, r24
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	01 96       	adiw	r24, 0x01	; 1
    27ac:	23 e0       	ldi	r18, 0x03	; 3
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	b9 01       	movw	r22, r18
    27b2:	0e 94 96 24 	call	0x492c	; 0x492c <__divmodhi4>
    27b6:	80 93 37 02 	sts	0x0237, r24
    }
    LCD_Clear(); // Clear Display command
    27ba:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_Clear>
}
    27be:	cf 91       	pop	r28
    27c0:	df 91       	pop	r29
    27c2:	ff 91       	pop	r31
    27c4:	ef 91       	pop	r30
    27c6:	bf 91       	pop	r27
    27c8:	af 91       	pop	r26
    27ca:	9f 91       	pop	r25
    27cc:	8f 91       	pop	r24
    27ce:	7f 91       	pop	r23
    27d0:	6f 91       	pop	r22
    27d2:	5f 91       	pop	r21
    27d4:	4f 91       	pop	r20
    27d6:	3f 91       	pop	r19
    27d8:	2f 91       	pop	r18
    27da:	0f 90       	pop	r0
    27dc:	0f be       	out	0x3f, r0	; 63
    27de:	0f 90       	pop	r0
    27e0:	1f 90       	pop	r1
    27e2:	18 95       	reti

000027e4 <setupInterrupts>:

void setupInterrupts() {
    27e4:	df 93       	push	r29
    27e6:	cf 93       	push	r28
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
    // Configure INT0,INT1,and INT2 to trigger on the rising edge
    MCUCR |= (1 << ISC01) | (1 << ISC00) | (1 << ISC11) | (1 << ISC10) | (1 << ISC2);
    27ec:	a5 e5       	ldi	r26, 0x55	; 85
    27ee:	b0 e0       	ldi	r27, 0x00	; 0
    27f0:	e5 e5       	ldi	r30, 0x55	; 85
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 81       	ld	r24, Z
    27f6:	8f 64       	ori	r24, 0x4F	; 79
    27f8:	8c 93       	st	X, r24

    // Enable INT0, INT1, and INT2
    GICR |= (1 << INT0) | (1 << INT1) | (1 << INT2);
    27fa:	ab e5       	ldi	r26, 0x5B	; 91
    27fc:	b0 e0       	ldi	r27, 0x00	; 0
    27fe:	eb e5       	ldi	r30, 0x5B	; 91
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	80 6e       	ori	r24, 0xE0	; 224
    2806:	8c 93       	st	X, r24

    // Global interrupt enable
    sei();
    2808:	78 94       	sei
}
    280a:	cf 91       	pop	r28
    280c:	df 91       	pop	r29
    280e:	08 95       	ret

00002810 <main>:

int main(void) {
    2810:	cf 92       	push	r12
    2812:	df 92       	push	r13
    2814:	ef 92       	push	r14
    2816:	ff 92       	push	r15
    2818:	0f 93       	push	r16
    281a:	1f 93       	push	r17
    281c:	df 93       	push	r29
    281e:	cf 93       	push	r28
    2820:	cd b7       	in	r28, 0x3d	; 61
    2822:	de b7       	in	r29, 0x3e	; 62
    2824:	c1 57       	subi	r28, 0x71	; 113
    2826:	d1 40       	sbci	r29, 0x01	; 1
    2828:	0f b6       	in	r0, 0x3f	; 63
    282a:	f8 94       	cli
    282c:	de bf       	out	0x3e, r29	; 62
    282e:	0f be       	out	0x3f, r0	; 63
    2830:	cd bf       	out	0x3d, r28	; 61
    // Initialize LCD
    LCD_Initilaize();
    2832:	0e 94 b6 0b 	call	0x176c	; 0x176c <LCD_Initilaize>
    setupIO();
    2836:	0e 94 11 13 	call	0x2622	; 0x2622 <setupIO>
    char key; // Define key variable here
    int32_t num1 = 0, num2 = 0, result = 0;
    283a:	fe 01       	movw	r30, r28
    283c:	e4 5f       	subi	r30, 0xF4	; 244
    283e:	fe 4f       	sbci	r31, 0xFE	; 254
    2840:	10 82       	st	Z, r1
    2842:	11 82       	std	Z+1, r1	; 0x01
    2844:	12 82       	std	Z+2, r1	; 0x02
    2846:	13 82       	std	Z+3, r1	; 0x03
    2848:	fe 01       	movw	r30, r28
    284a:	e8 5f       	subi	r30, 0xF8	; 248
    284c:	fe 4f       	sbci	r31, 0xFE	; 254
    284e:	10 82       	st	Z, r1
    2850:	11 82       	std	Z+1, r1	; 0x01
    2852:	12 82       	std	Z+2, r1	; 0x02
    2854:	13 82       	std	Z+3, r1	; 0x03
    2856:	fe 01       	movw	r30, r28
    2858:	ec 5f       	subi	r30, 0xFC	; 252
    285a:	fe 4f       	sbci	r31, 0xFE	; 254
    285c:	10 82       	st	Z, r1
    285e:	11 82       	std	Z+1, r1	; 0x01
    2860:	12 82       	std	Z+2, r1	; 0x02
    2862:	13 82       	std	Z+3, r1	; 0x03
    float result1=0;
    2864:	fe 01       	movw	r30, r28
    2866:	e0 50       	subi	r30, 0x00	; 0
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	80 e0       	ldi	r24, 0x00	; 0
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	a0 e0       	ldi	r26, 0x00	; 0
    2870:	b0 e0       	ldi	r27, 0x00	; 0
    2872:	80 83       	st	Z, r24
    2874:	91 83       	std	Z+1, r25	; 0x01
    2876:	a2 83       	std	Z+2, r26	; 0x02
    2878:	b3 83       	std	Z+3, r27	; 0x03
    char resultStr[32];
    char result1Str[32]; // Buffer to store the result string

    if (!welcomeDisplayed) {
    287a:	80 91 38 02 	lds	r24, 0x0238
    287e:	88 23       	and	r24, r24
    2880:	09 f0       	breq	.+2      	; 0x2884 <main+0x74>
    2882:	be c0       	rjmp	.+380    	; 0x2a00 <main+0x1f0>
        LCD_WriteString("Welcome", LCD_ROW_1, 0);
    2884:	8c e6       	ldi	r24, 0x6C	; 108
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	60 e0       	ldi	r22, 0x00	; 0
    288a:	40 e0       	ldi	r20, 0x00	; 0
    288c:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_WriteString>
    2890:	fe 01       	movw	r30, r28
    2892:	e7 50       	subi	r30, 0x07	; 7
    2894:	ff 4f       	sbci	r31, 0xFF	; 255
    2896:	80 e0       	ldi	r24, 0x00	; 0
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	aa e7       	ldi	r26, 0x7A	; 122
    289c:	b4 e4       	ldi	r27, 0x44	; 68
    289e:	80 83       	st	Z, r24
    28a0:	91 83       	std	Z+1, r25	; 0x01
    28a2:	a2 83       	std	Z+2, r26	; 0x02
    28a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28a6:	8e 01       	movw	r16, r28
    28a8:	0b 50       	subi	r16, 0x0B	; 11
    28aa:	1f 4f       	sbci	r17, 0xFF	; 255
    28ac:	fe 01       	movw	r30, r28
    28ae:	e7 50       	subi	r30, 0x07	; 7
    28b0:	ff 4f       	sbci	r31, 0xFF	; 255
    28b2:	60 81       	ld	r22, Z
    28b4:	71 81       	ldd	r23, Z+1	; 0x01
    28b6:	82 81       	ldd	r24, Z+2	; 0x02
    28b8:	93 81       	ldd	r25, Z+3	; 0x03
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	4a e7       	ldi	r20, 0x7A	; 122
    28c0:	55 e4       	ldi	r21, 0x45	; 69
    28c2:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    28c6:	dc 01       	movw	r26, r24
    28c8:	cb 01       	movw	r24, r22
    28ca:	f8 01       	movw	r30, r16
    28cc:	80 83       	st	Z, r24
    28ce:	91 83       	std	Z+1, r25	; 0x01
    28d0:	a2 83       	std	Z+2, r26	; 0x02
    28d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28d4:	fe 01       	movw	r30, r28
    28d6:	eb 50       	subi	r30, 0x0B	; 11
    28d8:	ff 4f       	sbci	r31, 0xFF	; 255
    28da:	60 81       	ld	r22, Z
    28dc:	71 81       	ldd	r23, Z+1	; 0x01
    28de:	82 81       	ldd	r24, Z+2	; 0x02
    28e0:	93 81       	ldd	r25, Z+3	; 0x03
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	40 e8       	ldi	r20, 0x80	; 128
    28e8:	5f e3       	ldi	r21, 0x3F	; 63
    28ea:	0e 94 2b 04 	call	0x856	; 0x856 <__ltsf2>
    28ee:	88 23       	and	r24, r24
    28f0:	44 f4       	brge	.+16     	; 0x2902 <main+0xf2>
		__ticks = 1;
    28f2:	fe 01       	movw	r30, r28
    28f4:	ed 50       	subi	r30, 0x0D	; 13
    28f6:	ff 4f       	sbci	r31, 0xFF	; 255
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	91 83       	std	Z+1, r25	; 0x01
    28fe:	80 83       	st	Z, r24
    2900:	64 c0       	rjmp	.+200    	; 0x29ca <main+0x1ba>
	else if (__tmp > 65535)
    2902:	fe 01       	movw	r30, r28
    2904:	eb 50       	subi	r30, 0x0B	; 11
    2906:	ff 4f       	sbci	r31, 0xFF	; 255
    2908:	60 81       	ld	r22, Z
    290a:	71 81       	ldd	r23, Z+1	; 0x01
    290c:	82 81       	ldd	r24, Z+2	; 0x02
    290e:	93 81       	ldd	r25, Z+3	; 0x03
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	3f ef       	ldi	r19, 0xFF	; 255
    2914:	4f e7       	ldi	r20, 0x7F	; 127
    2916:	57 e4       	ldi	r21, 0x47	; 71
    2918:	0e 94 cb 03 	call	0x796	; 0x796 <__gtsf2>
    291c:	18 16       	cp	r1, r24
    291e:	0c f0       	brlt	.+2      	; 0x2922 <main+0x112>
    2920:	43 c0       	rjmp	.+134    	; 0x29a8 <main+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2922:	fe 01       	movw	r30, r28
    2924:	e7 50       	subi	r30, 0x07	; 7
    2926:	ff 4f       	sbci	r31, 0xFF	; 255
    2928:	60 81       	ld	r22, Z
    292a:	71 81       	ldd	r23, Z+1	; 0x01
    292c:	82 81       	ldd	r24, Z+2	; 0x02
    292e:	93 81       	ldd	r25, Z+3	; 0x03
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	40 e2       	ldi	r20, 0x20	; 32
    2936:	51 e4       	ldi	r21, 0x41	; 65
    2938:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    293c:	dc 01       	movw	r26, r24
    293e:	cb 01       	movw	r24, r22
    2940:	8e 01       	movw	r16, r28
    2942:	0d 50       	subi	r16, 0x0D	; 13
    2944:	1f 4f       	sbci	r17, 0xFF	; 255
    2946:	bc 01       	movw	r22, r24
    2948:	cd 01       	movw	r24, r26
    294a:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    294e:	dc 01       	movw	r26, r24
    2950:	cb 01       	movw	r24, r22
    2952:	f8 01       	movw	r30, r16
    2954:	91 83       	std	Z+1, r25	; 0x01
    2956:	80 83       	st	Z, r24
    2958:	1f c0       	rjmp	.+62     	; 0x2998 <main+0x188>
    295a:	fe 01       	movw	r30, r28
    295c:	ef 50       	subi	r30, 0x0F	; 15
    295e:	ff 4f       	sbci	r31, 0xFF	; 255
    2960:	80 e9       	ldi	r24, 0x90	; 144
    2962:	91 e0       	ldi	r25, 0x01	; 1
    2964:	91 83       	std	Z+1, r25	; 0x01
    2966:	80 83       	st	Z, r24
    2968:	fe 01       	movw	r30, r28
    296a:	ef 50       	subi	r30, 0x0F	; 15
    296c:	ff 4f       	sbci	r31, 0xFF	; 255
    296e:	80 81       	ld	r24, Z
    2970:	91 81       	ldd	r25, Z+1	; 0x01
    2972:	01 97       	sbiw	r24, 0x01	; 1
    2974:	f1 f7       	brne	.-4      	; 0x2972 <main+0x162>
    2976:	fe 01       	movw	r30, r28
    2978:	ef 50       	subi	r30, 0x0F	; 15
    297a:	ff 4f       	sbci	r31, 0xFF	; 255
    297c:	91 83       	std	Z+1, r25	; 0x01
    297e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2980:	de 01       	movw	r26, r28
    2982:	ad 50       	subi	r26, 0x0D	; 13
    2984:	bf 4f       	sbci	r27, 0xFF	; 255
    2986:	fe 01       	movw	r30, r28
    2988:	ed 50       	subi	r30, 0x0D	; 13
    298a:	ff 4f       	sbci	r31, 0xFF	; 255
    298c:	80 81       	ld	r24, Z
    298e:	91 81       	ldd	r25, Z+1	; 0x01
    2990:	01 97       	sbiw	r24, 0x01	; 1
    2992:	11 96       	adiw	r26, 0x01	; 1
    2994:	9c 93       	st	X, r25
    2996:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2998:	fe 01       	movw	r30, r28
    299a:	ed 50       	subi	r30, 0x0D	; 13
    299c:	ff 4f       	sbci	r31, 0xFF	; 255
    299e:	80 81       	ld	r24, Z
    29a0:	91 81       	ldd	r25, Z+1	; 0x01
    29a2:	00 97       	sbiw	r24, 0x00	; 0
    29a4:	d1 f6       	brne	.-76     	; 0x295a <main+0x14a>
    29a6:	27 c0       	rjmp	.+78     	; 0x29f6 <main+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a8:	8e 01       	movw	r16, r28
    29aa:	0d 50       	subi	r16, 0x0D	; 13
    29ac:	1f 4f       	sbci	r17, 0xFF	; 255
    29ae:	fe 01       	movw	r30, r28
    29b0:	eb 50       	subi	r30, 0x0B	; 11
    29b2:	ff 4f       	sbci	r31, 0xFF	; 255
    29b4:	60 81       	ld	r22, Z
    29b6:	71 81       	ldd	r23, Z+1	; 0x01
    29b8:	82 81       	ldd	r24, Z+2	; 0x02
    29ba:	93 81       	ldd	r25, Z+3	; 0x03
    29bc:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	f8 01       	movw	r30, r16
    29c6:	91 83       	std	Z+1, r25	; 0x01
    29c8:	80 83       	st	Z, r24
    29ca:	de 01       	movw	r26, r28
    29cc:	a1 51       	subi	r26, 0x11	; 17
    29ce:	bf 4f       	sbci	r27, 0xFF	; 255
    29d0:	fe 01       	movw	r30, r28
    29d2:	ed 50       	subi	r30, 0x0D	; 13
    29d4:	ff 4f       	sbci	r31, 0xFF	; 255
    29d6:	80 81       	ld	r24, Z
    29d8:	91 81       	ldd	r25, Z+1	; 0x01
    29da:	8d 93       	st	X+, r24
    29dc:	9c 93       	st	X, r25
    29de:	fe 01       	movw	r30, r28
    29e0:	e1 51       	subi	r30, 0x11	; 17
    29e2:	ff 4f       	sbci	r31, 0xFF	; 255
    29e4:	80 81       	ld	r24, Z
    29e6:	91 81       	ldd	r25, Z+1	; 0x01
    29e8:	01 97       	sbiw	r24, 0x01	; 1
    29ea:	f1 f7       	brne	.-4      	; 0x29e8 <main+0x1d8>
    29ec:	fe 01       	movw	r30, r28
    29ee:	e1 51       	subi	r30, 0x11	; 17
    29f0:	ff 4f       	sbci	r31, 0xFF	; 255
    29f2:	91 83       	std	Z+1, r25	; 0x01
    29f4:	80 83       	st	Z, r24
        _delay_ms(1000);  // Display welcome message for 2 seconds
        welcomeDisplayed = 1;  // Set the flag to prevent re-displaying
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	80 93 38 02 	sts	0x0238, r24
        LCD_Clear(); // Clear Display after welcome message
    29fc:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_Clear>
    }

    // Setup interrupts for INT0, INT1, and INT2
    setupInterrupts();
    2a00:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <setupInterrupts>

    char timeInput[6] = {'0', '0', ':', '0', '0', '\0'};  // Preformatted time input MM:SS
    2a04:	ce 01       	movw	r24, r28
    2a06:	8f 5a       	subi	r24, 0xAF	; 175
    2a08:	9e 4f       	sbci	r25, 0xFE	; 254
    2a0a:	c3 59       	subi	r28, 0x93	; 147
    2a0c:	de 4f       	sbci	r29, 0xFE	; 254
    2a0e:	99 83       	std	Y+1, r25	; 0x01
    2a10:	88 83       	st	Y, r24
    2a12:	cd 56       	subi	r28, 0x6D	; 109
    2a14:	d1 40       	sbci	r29, 0x01	; 1
    2a16:	0f e2       	ldi	r16, 0x2F	; 47
    2a18:	12 e0       	ldi	r17, 0x02	; 2
    2a1a:	c1 59       	subi	r28, 0x91	; 145
    2a1c:	de 4f       	sbci	r29, 0xFE	; 254
    2a1e:	19 83       	std	Y+1, r17	; 0x01
    2a20:	08 83       	st	Y, r16
    2a22:	cf 56       	subi	r28, 0x6F	; 111
    2a24:	d1 40       	sbci	r29, 0x01	; 1
    2a26:	16 e0       	ldi	r17, 0x06	; 6
    2a28:	cf 58       	subi	r28, 0x8F	; 143
    2a2a:	de 4f       	sbci	r29, 0xFE	; 254
    2a2c:	18 83       	st	Y, r17
    2a2e:	c1 57       	subi	r28, 0x71	; 113
    2a30:	d1 40       	sbci	r29, 0x01	; 1
    2a32:	c1 59       	subi	r28, 0x91	; 145
    2a34:	de 4f       	sbci	r29, 0xFE	; 254
    2a36:	e8 81       	ld	r30, Y
    2a38:	f9 81       	ldd	r31, Y+1	; 0x01
    2a3a:	cf 56       	subi	r28, 0x6F	; 111
    2a3c:	d1 40       	sbci	r29, 0x01	; 1
    2a3e:	00 80       	ld	r0, Z
    2a40:	c1 59       	subi	r28, 0x91	; 145
    2a42:	de 4f       	sbci	r29, 0xFE	; 254
    2a44:	08 81       	ld	r16, Y
    2a46:	19 81       	ldd	r17, Y+1	; 0x01
    2a48:	cf 56       	subi	r28, 0x6F	; 111
    2a4a:	d1 40       	sbci	r29, 0x01	; 1
    2a4c:	0f 5f       	subi	r16, 0xFF	; 255
    2a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a50:	c1 59       	subi	r28, 0x91	; 145
    2a52:	de 4f       	sbci	r29, 0xFE	; 254
    2a54:	19 83       	std	Y+1, r17	; 0x01
    2a56:	08 83       	st	Y, r16
    2a58:	cf 56       	subi	r28, 0x6F	; 111
    2a5a:	d1 40       	sbci	r29, 0x01	; 1
    2a5c:	c3 59       	subi	r28, 0x93	; 147
    2a5e:	de 4f       	sbci	r29, 0xFE	; 254
    2a60:	e8 81       	ld	r30, Y
    2a62:	f9 81       	ldd	r31, Y+1	; 0x01
    2a64:	cd 56       	subi	r28, 0x6D	; 109
    2a66:	d1 40       	sbci	r29, 0x01	; 1
    2a68:	00 82       	st	Z, r0
    2a6a:	c3 59       	subi	r28, 0x93	; 147
    2a6c:	de 4f       	sbci	r29, 0xFE	; 254
    2a6e:	08 81       	ld	r16, Y
    2a70:	19 81       	ldd	r17, Y+1	; 0x01
    2a72:	cd 56       	subi	r28, 0x6D	; 109
    2a74:	d1 40       	sbci	r29, 0x01	; 1
    2a76:	0f 5f       	subi	r16, 0xFF	; 255
    2a78:	1f 4f       	sbci	r17, 0xFF	; 255
    2a7a:	c3 59       	subi	r28, 0x93	; 147
    2a7c:	de 4f       	sbci	r29, 0xFE	; 254
    2a7e:	19 83       	std	Y+1, r17	; 0x01
    2a80:	08 83       	st	Y, r16
    2a82:	cd 56       	subi	r28, 0x6D	; 109
    2a84:	d1 40       	sbci	r29, 0x01	; 1
    2a86:	cf 58       	subi	r28, 0x8F	; 143
    2a88:	de 4f       	sbci	r29, 0xFE	; 254
    2a8a:	18 81       	ld	r17, Y
    2a8c:	c1 57       	subi	r28, 0x71	; 113
    2a8e:	d1 40       	sbci	r29, 0x01	; 1
    2a90:	11 50       	subi	r17, 0x01	; 1
    2a92:	cf 58       	subi	r28, 0x8F	; 143
    2a94:	de 4f       	sbci	r29, 0xFE	; 254
    2a96:	18 83       	st	Y, r17
    2a98:	c1 57       	subi	r28, 0x71	; 113
    2a9a:	d1 40       	sbci	r29, 0x01	; 1
    2a9c:	cf 58       	subi	r28, 0x8F	; 143
    2a9e:	de 4f       	sbci	r29, 0xFE	; 254
    2aa0:	28 81       	ld	r18, Y
    2aa2:	c1 57       	subi	r28, 0x71	; 113
    2aa4:	d1 40       	sbci	r29, 0x01	; 1
    2aa6:	22 23       	and	r18, r18
    2aa8:	21 f6       	brne	.-120    	; 0x2a32 <main+0x222>
    int timeIndex = 0;  // To navigate the timeInput array
    2aaa:	fe 01       	movw	r30, r28
    2aac:	e2 50       	subi	r30, 0x02	; 2
    2aae:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab0:	11 82       	std	Z+1, r1	; 0x01
    2ab2:	10 82       	st	Z, r1

    while (1) {
        // Check if the mode has changed to avoid redundant LCD updates
        if (lastMode != currentMode) {
    2ab4:	90 91 2e 02 	lds	r25, 0x022E
    2ab8:	80 91 37 02 	lds	r24, 0x0237
    2abc:	98 17       	cp	r25, r24
    2abe:	09 f4       	brne	.+2      	; 0x2ac2 <main+0x2b2>
    2ac0:	25 c3       	rjmp	.+1610   	; 0x310c <main+0x8fc>
            LCD_Clear();
    2ac2:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_Clear>
            lastMode = currentMode; // Update lastMode to currentMode
    2ac6:	80 91 37 02 	lds	r24, 0x0237
    2aca:	80 93 2e 02 	sts	0x022E, r24

            if (currentMode == TIMER) {
    2ace:	80 91 37 02 	lds	r24, 0x0237
    2ad2:	82 30       	cpi	r24, 0x02	; 2
    2ad4:	09 f0       	breq	.+2      	; 0x2ad8 <main+0x2c8>
    2ad6:	d1 c0       	rjmp	.+418    	; 0x2c7a <main+0x46a>
                LCD_WriteString("Timer Mode", LCD_ROW_1, 0);
    2ad8:	84 e7       	ldi	r24, 0x74	; 116
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	60 e0       	ldi	r22, 0x00	; 0
    2ade:	40 e0       	ldi	r20, 0x00	; 0
    2ae0:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_WriteString>
    2ae4:	fe 01       	movw	r30, r28
    2ae6:	e5 51       	subi	r30, 0x15	; 21
    2ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aea:	80 e0       	ldi	r24, 0x00	; 0
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	aa e7       	ldi	r26, 0x7A	; 122
    2af0:	b4 e4       	ldi	r27, 0x44	; 68
    2af2:	80 83       	st	Z, r24
    2af4:	91 83       	std	Z+1, r25	; 0x01
    2af6:	a2 83       	std	Z+2, r26	; 0x02
    2af8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2afa:	8e 01       	movw	r16, r28
    2afc:	09 51       	subi	r16, 0x19	; 25
    2afe:	1f 4f       	sbci	r17, 0xFF	; 255
    2b00:	fe 01       	movw	r30, r28
    2b02:	e5 51       	subi	r30, 0x15	; 21
    2b04:	ff 4f       	sbci	r31, 0xFF	; 255
    2b06:	60 81       	ld	r22, Z
    2b08:	71 81       	ldd	r23, Z+1	; 0x01
    2b0a:	82 81       	ldd	r24, Z+2	; 0x02
    2b0c:	93 81       	ldd	r25, Z+3	; 0x03
    2b0e:	20 e0       	ldi	r18, 0x00	; 0
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	4a e7       	ldi	r20, 0x7A	; 122
    2b14:	55 e4       	ldi	r21, 0x45	; 69
    2b16:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	f8 01       	movw	r30, r16
    2b20:	80 83       	st	Z, r24
    2b22:	91 83       	std	Z+1, r25	; 0x01
    2b24:	a2 83       	std	Z+2, r26	; 0x02
    2b26:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b28:	fe 01       	movw	r30, r28
    2b2a:	e9 51       	subi	r30, 0x19	; 25
    2b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2e:	60 81       	ld	r22, Z
    2b30:	71 81       	ldd	r23, Z+1	; 0x01
    2b32:	82 81       	ldd	r24, Z+2	; 0x02
    2b34:	93 81       	ldd	r25, Z+3	; 0x03
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	40 e8       	ldi	r20, 0x80	; 128
    2b3c:	5f e3       	ldi	r21, 0x3F	; 63
    2b3e:	0e 94 2b 04 	call	0x856	; 0x856 <__ltsf2>
    2b42:	88 23       	and	r24, r24
    2b44:	44 f4       	brge	.+16     	; 0x2b56 <main+0x346>
		__ticks = 1;
    2b46:	fe 01       	movw	r30, r28
    2b48:	eb 51       	subi	r30, 0x1B	; 27
    2b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	91 83       	std	Z+1, r25	; 0x01
    2b52:	80 83       	st	Z, r24
    2b54:	64 c0       	rjmp	.+200    	; 0x2c1e <main+0x40e>
	else if (__tmp > 65535)
    2b56:	fe 01       	movw	r30, r28
    2b58:	e9 51       	subi	r30, 0x19	; 25
    2b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5c:	60 81       	ld	r22, Z
    2b5e:	71 81       	ldd	r23, Z+1	; 0x01
    2b60:	82 81       	ldd	r24, Z+2	; 0x02
    2b62:	93 81       	ldd	r25, Z+3	; 0x03
    2b64:	20 e0       	ldi	r18, 0x00	; 0
    2b66:	3f ef       	ldi	r19, 0xFF	; 255
    2b68:	4f e7       	ldi	r20, 0x7F	; 127
    2b6a:	57 e4       	ldi	r21, 0x47	; 71
    2b6c:	0e 94 cb 03 	call	0x796	; 0x796 <__gtsf2>
    2b70:	18 16       	cp	r1, r24
    2b72:	0c f0       	brlt	.+2      	; 0x2b76 <main+0x366>
    2b74:	43 c0       	rjmp	.+134    	; 0x2bfc <main+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b76:	fe 01       	movw	r30, r28
    2b78:	e5 51       	subi	r30, 0x15	; 21
    2b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7c:	60 81       	ld	r22, Z
    2b7e:	71 81       	ldd	r23, Z+1	; 0x01
    2b80:	82 81       	ldd	r24, Z+2	; 0x02
    2b82:	93 81       	ldd	r25, Z+3	; 0x03
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	40 e2       	ldi	r20, 0x20	; 32
    2b8a:	51 e4       	ldi	r21, 0x41	; 65
    2b8c:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	8e 01       	movw	r16, r28
    2b96:	0b 51       	subi	r16, 0x1B	; 27
    2b98:	1f 4f       	sbci	r17, 0xFF	; 255
    2b9a:	bc 01       	movw	r22, r24
    2b9c:	cd 01       	movw	r24, r26
    2b9e:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	f8 01       	movw	r30, r16
    2ba8:	91 83       	std	Z+1, r25	; 0x01
    2baa:	80 83       	st	Z, r24
    2bac:	1f c0       	rjmp	.+62     	; 0x2bec <main+0x3dc>
    2bae:	fe 01       	movw	r30, r28
    2bb0:	ed 51       	subi	r30, 0x1D	; 29
    2bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb4:	80 e9       	ldi	r24, 0x90	; 144
    2bb6:	91 e0       	ldi	r25, 0x01	; 1
    2bb8:	91 83       	std	Z+1, r25	; 0x01
    2bba:	80 83       	st	Z, r24
    2bbc:	fe 01       	movw	r30, r28
    2bbe:	ed 51       	subi	r30, 0x1D	; 29
    2bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc2:	80 81       	ld	r24, Z
    2bc4:	91 81       	ldd	r25, Z+1	; 0x01
    2bc6:	01 97       	sbiw	r24, 0x01	; 1
    2bc8:	f1 f7       	brne	.-4      	; 0x2bc6 <main+0x3b6>
    2bca:	fe 01       	movw	r30, r28
    2bcc:	ed 51       	subi	r30, 0x1D	; 29
    2bce:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd0:	91 83       	std	Z+1, r25	; 0x01
    2bd2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd4:	de 01       	movw	r26, r28
    2bd6:	ab 51       	subi	r26, 0x1B	; 27
    2bd8:	bf 4f       	sbci	r27, 0xFF	; 255
    2bda:	fe 01       	movw	r30, r28
    2bdc:	eb 51       	subi	r30, 0x1B	; 27
    2bde:	ff 4f       	sbci	r31, 0xFF	; 255
    2be0:	80 81       	ld	r24, Z
    2be2:	91 81       	ldd	r25, Z+1	; 0x01
    2be4:	01 97       	sbiw	r24, 0x01	; 1
    2be6:	11 96       	adiw	r26, 0x01	; 1
    2be8:	9c 93       	st	X, r25
    2bea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bec:	fe 01       	movw	r30, r28
    2bee:	eb 51       	subi	r30, 0x1B	; 27
    2bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf2:	80 81       	ld	r24, Z
    2bf4:	91 81       	ldd	r25, Z+1	; 0x01
    2bf6:	00 97       	sbiw	r24, 0x00	; 0
    2bf8:	d1 f6       	brne	.-76     	; 0x2bae <main+0x39e>
    2bfa:	27 c0       	rjmp	.+78     	; 0x2c4a <main+0x43a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bfc:	8e 01       	movw	r16, r28
    2bfe:	0b 51       	subi	r16, 0x1B	; 27
    2c00:	1f 4f       	sbci	r17, 0xFF	; 255
    2c02:	fe 01       	movw	r30, r28
    2c04:	e9 51       	subi	r30, 0x19	; 25
    2c06:	ff 4f       	sbci	r31, 0xFF	; 255
    2c08:	60 81       	ld	r22, Z
    2c0a:	71 81       	ldd	r23, Z+1	; 0x01
    2c0c:	82 81       	ldd	r24, Z+2	; 0x02
    2c0e:	93 81       	ldd	r25, Z+3	; 0x03
    2c10:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	f8 01       	movw	r30, r16
    2c1a:	91 83       	std	Z+1, r25	; 0x01
    2c1c:	80 83       	st	Z, r24
    2c1e:	de 01       	movw	r26, r28
    2c20:	af 51       	subi	r26, 0x1F	; 31
    2c22:	bf 4f       	sbci	r27, 0xFF	; 255
    2c24:	fe 01       	movw	r30, r28
    2c26:	eb 51       	subi	r30, 0x1B	; 27
    2c28:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2a:	80 81       	ld	r24, Z
    2c2c:	91 81       	ldd	r25, Z+1	; 0x01
    2c2e:	8d 93       	st	X+, r24
    2c30:	9c 93       	st	X, r25
    2c32:	fe 01       	movw	r30, r28
    2c34:	ef 51       	subi	r30, 0x1F	; 31
    2c36:	ff 4f       	sbci	r31, 0xFF	; 255
    2c38:	80 81       	ld	r24, Z
    2c3a:	91 81       	ldd	r25, Z+1	; 0x01
    2c3c:	01 97       	sbiw	r24, 0x01	; 1
    2c3e:	f1 f7       	brne	.-4      	; 0x2c3c <main+0x42c>
    2c40:	fe 01       	movw	r30, r28
    2c42:	ef 51       	subi	r30, 0x1F	; 31
    2c44:	ff 4f       	sbci	r31, 0xFF	; 255
    2c46:	91 83       	std	Z+1, r25	; 0x01
    2c48:	80 83       	st	Z, r24
                _delay_ms(1000);
                LCD_Clear();
    2c4a:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_Clear>
                LCD_WriteString("Enter MM:SS", LCD_ROW_1, 0);
    2c4e:	8f e7       	ldi	r24, 0x7F	; 127
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	60 e0       	ldi	r22, 0x00	; 0
    2c54:	40 e0       	ldi	r20, 0x00	; 0
    2c56:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_WriteString>
                LCD_GoToPos(LCD_ROW_2, 0);
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	60 e0       	ldi	r22, 0x00	; 0
    2c5e:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <LCD_GoToPos>
                LCD_WriteString(timeInput, LCD_ROW_2, 0);
    2c62:	ce 01       	movw	r24, r28
    2c64:	8f 5a       	subi	r24, 0xAF	; 175
    2c66:	9e 4f       	sbci	r25, 0xFE	; 254
    2c68:	61 e0       	ldi	r22, 0x01	; 1
    2c6a:	40 e0       	ldi	r20, 0x00	; 0
    2c6c:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_WriteString>
                timeIndex = 0;
    2c70:	fe 01       	movw	r30, r28
    2c72:	e2 50       	subi	r30, 0x02	; 2
    2c74:	ff 4f       	sbci	r31, 0xFF	; 255
    2c76:	11 82       	std	Z+1, r1	; 0x01
    2c78:	10 82       	st	Z, r1
            }

            switch (currentMode) {
    2c7a:	80 91 37 02 	lds	r24, 0x0237
    2c7e:	e8 2e       	mov	r14, r24
    2c80:	ff 24       	eor	r15, r15
    2c82:	c5 59       	subi	r28, 0x95	; 149
    2c84:	de 4f       	sbci	r29, 0xFE	; 254
    2c86:	f9 82       	std	Y+1, r15	; 0x01
    2c88:	e8 82       	st	Y, r14
    2c8a:	cb 56       	subi	r28, 0x6B	; 107
    2c8c:	d1 40       	sbci	r29, 0x01	; 1
    2c8e:	c5 59       	subi	r28, 0x95	; 149
    2c90:	de 4f       	sbci	r29, 0xFE	; 254
    2c92:	08 81       	ld	r16, Y
    2c94:	19 81       	ldd	r17, Y+1	; 0x01
    2c96:	cb 56       	subi	r28, 0x6B	; 107
    2c98:	d1 40       	sbci	r29, 0x01	; 1
    2c9a:	01 15       	cp	r16, r1
    2c9c:	11 05       	cpc	r17, r1
    2c9e:	59 f0       	breq	.+22     	; 0x2cb6 <main+0x4a6>
    2ca0:	c5 59       	subi	r28, 0x95	; 149
    2ca2:	de 4f       	sbci	r29, 0xFE	; 254
    2ca4:	28 81       	ld	r18, Y
    2ca6:	39 81       	ldd	r19, Y+1	; 0x01
    2ca8:	cb 56       	subi	r28, 0x6B	; 107
    2caa:	d1 40       	sbci	r29, 0x01	; 1
    2cac:	21 30       	cpi	r18, 0x01	; 1
    2cae:	31 05       	cpc	r19, r1
    2cb0:	09 f4       	brne	.+2      	; 0x2cb4 <main+0x4a4>
    2cb2:	bd c0       	rjmp	.+378    	; 0x2e2e <main+0x61e>
    2cb4:	77 c1       	rjmp	.+750    	; 0x2fa4 <main+0x794>
                case CALCULATOR:
                    LCD_WriteString("Calculator Mode", LCD_ROW_1, 0);
    2cb6:	8b e8       	ldi	r24, 0x8B	; 139
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	60 e0       	ldi	r22, 0x00	; 0
    2cbc:	40 e0       	ldi	r20, 0x00	; 0
    2cbe:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_WriteString>
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	e3 52       	subi	r30, 0x23	; 35
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	80 e0       	ldi	r24, 0x00	; 0
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	aa e7       	ldi	r26, 0x7A	; 122
    2cce:	b4 e4       	ldi	r27, 0x44	; 68
    2cd0:	80 83       	st	Z, r24
    2cd2:	91 83       	std	Z+1, r25	; 0x01
    2cd4:	a2 83       	std	Z+2, r26	; 0x02
    2cd6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cd8:	8e 01       	movw	r16, r28
    2cda:	07 52       	subi	r16, 0x27	; 39
    2cdc:	1f 4f       	sbci	r17, 0xFF	; 255
    2cde:	fe 01       	movw	r30, r28
    2ce0:	e3 52       	subi	r30, 0x23	; 35
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	60 81       	ld	r22, Z
    2ce6:	71 81       	ldd	r23, Z+1	; 0x01
    2ce8:	82 81       	ldd	r24, Z+2	; 0x02
    2cea:	93 81       	ldd	r25, Z+3	; 0x03
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	4a e7       	ldi	r20, 0x7A	; 122
    2cf2:	55 e4       	ldi	r21, 0x45	; 69
    2cf4:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    2cf8:	dc 01       	movw	r26, r24
    2cfa:	cb 01       	movw	r24, r22
    2cfc:	f8 01       	movw	r30, r16
    2cfe:	80 83       	st	Z, r24
    2d00:	91 83       	std	Z+1, r25	; 0x01
    2d02:	a2 83       	std	Z+2, r26	; 0x02
    2d04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d06:	fe 01       	movw	r30, r28
    2d08:	e7 52       	subi	r30, 0x27	; 39
    2d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0c:	60 81       	ld	r22, Z
    2d0e:	71 81       	ldd	r23, Z+1	; 0x01
    2d10:	82 81       	ldd	r24, Z+2	; 0x02
    2d12:	93 81       	ldd	r25, Z+3	; 0x03
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	40 e8       	ldi	r20, 0x80	; 128
    2d1a:	5f e3       	ldi	r21, 0x3F	; 63
    2d1c:	0e 94 2b 04 	call	0x856	; 0x856 <__ltsf2>
    2d20:	88 23       	and	r24, r24
    2d22:	44 f4       	brge	.+16     	; 0x2d34 <main+0x524>
		__ticks = 1;
    2d24:	fe 01       	movw	r30, r28
    2d26:	e9 52       	subi	r30, 0x29	; 41
    2d28:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	91 83       	std	Z+1, r25	; 0x01
    2d30:	80 83       	st	Z, r24
    2d32:	64 c0       	rjmp	.+200    	; 0x2dfc <main+0x5ec>
	else if (__tmp > 65535)
    2d34:	fe 01       	movw	r30, r28
    2d36:	e7 52       	subi	r30, 0x27	; 39
    2d38:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3a:	60 81       	ld	r22, Z
    2d3c:	71 81       	ldd	r23, Z+1	; 0x01
    2d3e:	82 81       	ldd	r24, Z+2	; 0x02
    2d40:	93 81       	ldd	r25, Z+3	; 0x03
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	3f ef       	ldi	r19, 0xFF	; 255
    2d46:	4f e7       	ldi	r20, 0x7F	; 127
    2d48:	57 e4       	ldi	r21, 0x47	; 71
    2d4a:	0e 94 cb 03 	call	0x796	; 0x796 <__gtsf2>
    2d4e:	18 16       	cp	r1, r24
    2d50:	0c f0       	brlt	.+2      	; 0x2d54 <main+0x544>
    2d52:	43 c0       	rjmp	.+134    	; 0x2dda <main+0x5ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d54:	fe 01       	movw	r30, r28
    2d56:	e3 52       	subi	r30, 0x23	; 35
    2d58:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5a:	60 81       	ld	r22, Z
    2d5c:	71 81       	ldd	r23, Z+1	; 0x01
    2d5e:	82 81       	ldd	r24, Z+2	; 0x02
    2d60:	93 81       	ldd	r25, Z+3	; 0x03
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	40 e2       	ldi	r20, 0x20	; 32
    2d68:	51 e4       	ldi	r21, 0x41	; 65
    2d6a:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	8e 01       	movw	r16, r28
    2d74:	09 52       	subi	r16, 0x29	; 41
    2d76:	1f 4f       	sbci	r17, 0xFF	; 255
    2d78:	bc 01       	movw	r22, r24
    2d7a:	cd 01       	movw	r24, r26
    2d7c:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    2d80:	dc 01       	movw	r26, r24
    2d82:	cb 01       	movw	r24, r22
    2d84:	f8 01       	movw	r30, r16
    2d86:	91 83       	std	Z+1, r25	; 0x01
    2d88:	80 83       	st	Z, r24
    2d8a:	1f c0       	rjmp	.+62     	; 0x2dca <main+0x5ba>
    2d8c:	fe 01       	movw	r30, r28
    2d8e:	eb 52       	subi	r30, 0x2B	; 43
    2d90:	ff 4f       	sbci	r31, 0xFF	; 255
    2d92:	80 e9       	ldi	r24, 0x90	; 144
    2d94:	91 e0       	ldi	r25, 0x01	; 1
    2d96:	91 83       	std	Z+1, r25	; 0x01
    2d98:	80 83       	st	Z, r24
    2d9a:	fe 01       	movw	r30, r28
    2d9c:	eb 52       	subi	r30, 0x2B	; 43
    2d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2da0:	80 81       	ld	r24, Z
    2da2:	91 81       	ldd	r25, Z+1	; 0x01
    2da4:	01 97       	sbiw	r24, 0x01	; 1
    2da6:	f1 f7       	brne	.-4      	; 0x2da4 <main+0x594>
    2da8:	fe 01       	movw	r30, r28
    2daa:	eb 52       	subi	r30, 0x2B	; 43
    2dac:	ff 4f       	sbci	r31, 0xFF	; 255
    2dae:	91 83       	std	Z+1, r25	; 0x01
    2db0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db2:	de 01       	movw	r26, r28
    2db4:	a9 52       	subi	r26, 0x29	; 41
    2db6:	bf 4f       	sbci	r27, 0xFF	; 255
    2db8:	fe 01       	movw	r30, r28
    2dba:	e9 52       	subi	r30, 0x29	; 41
    2dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbe:	80 81       	ld	r24, Z
    2dc0:	91 81       	ldd	r25, Z+1	; 0x01
    2dc2:	01 97       	sbiw	r24, 0x01	; 1
    2dc4:	11 96       	adiw	r26, 0x01	; 1
    2dc6:	9c 93       	st	X, r25
    2dc8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dca:	fe 01       	movw	r30, r28
    2dcc:	e9 52       	subi	r30, 0x29	; 41
    2dce:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd0:	80 81       	ld	r24, Z
    2dd2:	91 81       	ldd	r25, Z+1	; 0x01
    2dd4:	00 97       	sbiw	r24, 0x00	; 0
    2dd6:	d1 f6       	brne	.-76     	; 0x2d8c <main+0x57c>
    2dd8:	27 c0       	rjmp	.+78     	; 0x2e28 <main+0x618>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dda:	8e 01       	movw	r16, r28
    2ddc:	09 52       	subi	r16, 0x29	; 41
    2dde:	1f 4f       	sbci	r17, 0xFF	; 255
    2de0:	fe 01       	movw	r30, r28
    2de2:	e7 52       	subi	r30, 0x27	; 39
    2de4:	ff 4f       	sbci	r31, 0xFF	; 255
    2de6:	60 81       	ld	r22, Z
    2de8:	71 81       	ldd	r23, Z+1	; 0x01
    2dea:	82 81       	ldd	r24, Z+2	; 0x02
    2dec:	93 81       	ldd	r25, Z+3	; 0x03
    2dee:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    2df2:	dc 01       	movw	r26, r24
    2df4:	cb 01       	movw	r24, r22
    2df6:	f8 01       	movw	r30, r16
    2df8:	91 83       	std	Z+1, r25	; 0x01
    2dfa:	80 83       	st	Z, r24
    2dfc:	de 01       	movw	r26, r28
    2dfe:	ad 52       	subi	r26, 0x2D	; 45
    2e00:	bf 4f       	sbci	r27, 0xFF	; 255
    2e02:	fe 01       	movw	r30, r28
    2e04:	e9 52       	subi	r30, 0x29	; 41
    2e06:	ff 4f       	sbci	r31, 0xFF	; 255
    2e08:	80 81       	ld	r24, Z
    2e0a:	91 81       	ldd	r25, Z+1	; 0x01
    2e0c:	8d 93       	st	X+, r24
    2e0e:	9c 93       	st	X, r25
    2e10:	fe 01       	movw	r30, r28
    2e12:	ed 52       	subi	r30, 0x2D	; 45
    2e14:	ff 4f       	sbci	r31, 0xFF	; 255
    2e16:	80 81       	ld	r24, Z
    2e18:	91 81       	ldd	r25, Z+1	; 0x01
    2e1a:	01 97       	sbiw	r24, 0x01	; 1
    2e1c:	f1 f7       	brne	.-4      	; 0x2e1a <main+0x60a>
    2e1e:	fe 01       	movw	r30, r28
    2e20:	ed 52       	subi	r30, 0x2D	; 45
    2e22:	ff 4f       	sbci	r31, 0xFF	; 255
    2e24:	91 83       	std	Z+1, r25	; 0x01
    2e26:	80 83       	st	Z, r24
                    _delay_ms(1000);
                    LCD_Clear();
    2e28:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_Clear>
    2e2c:	bb c0       	rjmp	.+374    	; 0x2fa4 <main+0x794>
                    break;
                case STOPWATCH:
                    LCD_WriteString("Stopwatch mode", LCD_ROW_1, 0);
    2e2e:	8b e9       	ldi	r24, 0x9B	; 155
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	60 e0       	ldi	r22, 0x00	; 0
    2e34:	40 e0       	ldi	r20, 0x00	; 0
    2e36:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_WriteString>
    2e3a:	fe 01       	movw	r30, r28
    2e3c:	e1 53       	subi	r30, 0x31	; 49
    2e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e40:	80 e0       	ldi	r24, 0x00	; 0
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	aa e7       	ldi	r26, 0x7A	; 122
    2e46:	b4 e4       	ldi	r27, 0x44	; 68
    2e48:	80 83       	st	Z, r24
    2e4a:	91 83       	std	Z+1, r25	; 0x01
    2e4c:	a2 83       	std	Z+2, r26	; 0x02
    2e4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e50:	8e 01       	movw	r16, r28
    2e52:	05 53       	subi	r16, 0x35	; 53
    2e54:	1f 4f       	sbci	r17, 0xFF	; 255
    2e56:	fe 01       	movw	r30, r28
    2e58:	e1 53       	subi	r30, 0x31	; 49
    2e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5c:	60 81       	ld	r22, Z
    2e5e:	71 81       	ldd	r23, Z+1	; 0x01
    2e60:	82 81       	ldd	r24, Z+2	; 0x02
    2e62:	93 81       	ldd	r25, Z+3	; 0x03
    2e64:	20 e0       	ldi	r18, 0x00	; 0
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	4a e7       	ldi	r20, 0x7A	; 122
    2e6a:	55 e4       	ldi	r21, 0x45	; 69
    2e6c:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    2e70:	dc 01       	movw	r26, r24
    2e72:	cb 01       	movw	r24, r22
    2e74:	f8 01       	movw	r30, r16
    2e76:	80 83       	st	Z, r24
    2e78:	91 83       	std	Z+1, r25	; 0x01
    2e7a:	a2 83       	std	Z+2, r26	; 0x02
    2e7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e7e:	fe 01       	movw	r30, r28
    2e80:	e5 53       	subi	r30, 0x35	; 53
    2e82:	ff 4f       	sbci	r31, 0xFF	; 255
    2e84:	60 81       	ld	r22, Z
    2e86:	71 81       	ldd	r23, Z+1	; 0x01
    2e88:	82 81       	ldd	r24, Z+2	; 0x02
    2e8a:	93 81       	ldd	r25, Z+3	; 0x03
    2e8c:	20 e0       	ldi	r18, 0x00	; 0
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	40 e8       	ldi	r20, 0x80	; 128
    2e92:	5f e3       	ldi	r21, 0x3F	; 63
    2e94:	0e 94 2b 04 	call	0x856	; 0x856 <__ltsf2>
    2e98:	88 23       	and	r24, r24
    2e9a:	44 f4       	brge	.+16     	; 0x2eac <main+0x69c>
		__ticks = 1;
    2e9c:	fe 01       	movw	r30, r28
    2e9e:	e7 53       	subi	r30, 0x37	; 55
    2ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	91 83       	std	Z+1, r25	; 0x01
    2ea8:	80 83       	st	Z, r24
    2eaa:	64 c0       	rjmp	.+200    	; 0x2f74 <main+0x764>
	else if (__tmp > 65535)
    2eac:	fe 01       	movw	r30, r28
    2eae:	e5 53       	subi	r30, 0x35	; 53
    2eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb2:	60 81       	ld	r22, Z
    2eb4:	71 81       	ldd	r23, Z+1	; 0x01
    2eb6:	82 81       	ldd	r24, Z+2	; 0x02
    2eb8:	93 81       	ldd	r25, Z+3	; 0x03
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	3f ef       	ldi	r19, 0xFF	; 255
    2ebe:	4f e7       	ldi	r20, 0x7F	; 127
    2ec0:	57 e4       	ldi	r21, 0x47	; 71
    2ec2:	0e 94 cb 03 	call	0x796	; 0x796 <__gtsf2>
    2ec6:	18 16       	cp	r1, r24
    2ec8:	0c f0       	brlt	.+2      	; 0x2ecc <main+0x6bc>
    2eca:	43 c0       	rjmp	.+134    	; 0x2f52 <main+0x742>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ecc:	fe 01       	movw	r30, r28
    2ece:	e1 53       	subi	r30, 0x31	; 49
    2ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed2:	60 81       	ld	r22, Z
    2ed4:	71 81       	ldd	r23, Z+1	; 0x01
    2ed6:	82 81       	ldd	r24, Z+2	; 0x02
    2ed8:	93 81       	ldd	r25, Z+3	; 0x03
    2eda:	20 e0       	ldi	r18, 0x00	; 0
    2edc:	30 e0       	ldi	r19, 0x00	; 0
    2ede:	40 e2       	ldi	r20, 0x20	; 32
    2ee0:	51 e4       	ldi	r21, 0x41	; 65
    2ee2:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    2ee6:	dc 01       	movw	r26, r24
    2ee8:	cb 01       	movw	r24, r22
    2eea:	8e 01       	movw	r16, r28
    2eec:	07 53       	subi	r16, 0x37	; 55
    2eee:	1f 4f       	sbci	r17, 0xFF	; 255
    2ef0:	bc 01       	movw	r22, r24
    2ef2:	cd 01       	movw	r24, r26
    2ef4:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	f8 01       	movw	r30, r16
    2efe:	91 83       	std	Z+1, r25	; 0x01
    2f00:	80 83       	st	Z, r24
    2f02:	1f c0       	rjmp	.+62     	; 0x2f42 <main+0x732>
    2f04:	fe 01       	movw	r30, r28
    2f06:	e9 53       	subi	r30, 0x39	; 57
    2f08:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0a:	80 e9       	ldi	r24, 0x90	; 144
    2f0c:	91 e0       	ldi	r25, 0x01	; 1
    2f0e:	91 83       	std	Z+1, r25	; 0x01
    2f10:	80 83       	st	Z, r24
    2f12:	fe 01       	movw	r30, r28
    2f14:	e9 53       	subi	r30, 0x39	; 57
    2f16:	ff 4f       	sbci	r31, 0xFF	; 255
    2f18:	80 81       	ld	r24, Z
    2f1a:	91 81       	ldd	r25, Z+1	; 0x01
    2f1c:	01 97       	sbiw	r24, 0x01	; 1
    2f1e:	f1 f7       	brne	.-4      	; 0x2f1c <main+0x70c>
    2f20:	fe 01       	movw	r30, r28
    2f22:	e9 53       	subi	r30, 0x39	; 57
    2f24:	ff 4f       	sbci	r31, 0xFF	; 255
    2f26:	91 83       	std	Z+1, r25	; 0x01
    2f28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f2a:	de 01       	movw	r26, r28
    2f2c:	a7 53       	subi	r26, 0x37	; 55
    2f2e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f30:	fe 01       	movw	r30, r28
    2f32:	e7 53       	subi	r30, 0x37	; 55
    2f34:	ff 4f       	sbci	r31, 0xFF	; 255
    2f36:	80 81       	ld	r24, Z
    2f38:	91 81       	ldd	r25, Z+1	; 0x01
    2f3a:	01 97       	sbiw	r24, 0x01	; 1
    2f3c:	11 96       	adiw	r26, 0x01	; 1
    2f3e:	9c 93       	st	X, r25
    2f40:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f42:	fe 01       	movw	r30, r28
    2f44:	e7 53       	subi	r30, 0x37	; 55
    2f46:	ff 4f       	sbci	r31, 0xFF	; 255
    2f48:	80 81       	ld	r24, Z
    2f4a:	91 81       	ldd	r25, Z+1	; 0x01
    2f4c:	00 97       	sbiw	r24, 0x00	; 0
    2f4e:	d1 f6       	brne	.-76     	; 0x2f04 <main+0x6f4>
    2f50:	27 c0       	rjmp	.+78     	; 0x2fa0 <main+0x790>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f52:	8e 01       	movw	r16, r28
    2f54:	07 53       	subi	r16, 0x37	; 55
    2f56:	1f 4f       	sbci	r17, 0xFF	; 255
    2f58:	fe 01       	movw	r30, r28
    2f5a:	e5 53       	subi	r30, 0x35	; 53
    2f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5e:	60 81       	ld	r22, Z
    2f60:	71 81       	ldd	r23, Z+1	; 0x01
    2f62:	82 81       	ldd	r24, Z+2	; 0x02
    2f64:	93 81       	ldd	r25, Z+3	; 0x03
    2f66:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    2f6a:	dc 01       	movw	r26, r24
    2f6c:	cb 01       	movw	r24, r22
    2f6e:	f8 01       	movw	r30, r16
    2f70:	91 83       	std	Z+1, r25	; 0x01
    2f72:	80 83       	st	Z, r24
    2f74:	de 01       	movw	r26, r28
    2f76:	ab 53       	subi	r26, 0x3B	; 59
    2f78:	bf 4f       	sbci	r27, 0xFF	; 255
    2f7a:	fe 01       	movw	r30, r28
    2f7c:	e7 53       	subi	r30, 0x37	; 55
    2f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f80:	80 81       	ld	r24, Z
    2f82:	91 81       	ldd	r25, Z+1	; 0x01
    2f84:	8d 93       	st	X+, r24
    2f86:	9c 93       	st	X, r25
    2f88:	fe 01       	movw	r30, r28
    2f8a:	eb 53       	subi	r30, 0x3B	; 59
    2f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8e:	80 81       	ld	r24, Z
    2f90:	91 81       	ldd	r25, Z+1	; 0x01
    2f92:	01 97       	sbiw	r24, 0x01	; 1
    2f94:	f1 f7       	brne	.-4      	; 0x2f92 <main+0x782>
    2f96:	fe 01       	movw	r30, r28
    2f98:	eb 53       	subi	r30, 0x3B	; 59
    2f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9c:	91 83       	std	Z+1, r25	; 0x01
    2f9e:	80 83       	st	Z, r24
                    _delay_ms(1000);  // Display welcome message for 2 seconds
                    LCD_Clear();
    2fa0:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_Clear>
    2fa4:	fe 01       	movw	r30, r28
    2fa6:	ef 53       	subi	r30, 0x3F	; 63
    2fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2faa:	80 e0       	ldi	r24, 0x00	; 0
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	aa ef       	ldi	r26, 0xFA	; 250
    2fb0:	b3 e4       	ldi	r27, 0x43	; 67
    2fb2:	80 83       	st	Z, r24
    2fb4:	91 83       	std	Z+1, r25	; 0x01
    2fb6:	a2 83       	std	Z+2, r26	; 0x02
    2fb8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fba:	8e 01       	movw	r16, r28
    2fbc:	03 54       	subi	r16, 0x43	; 67
    2fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc0:	fe 01       	movw	r30, r28
    2fc2:	ef 53       	subi	r30, 0x3F	; 63
    2fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc6:	60 81       	ld	r22, Z
    2fc8:	71 81       	ldd	r23, Z+1	; 0x01
    2fca:	82 81       	ldd	r24, Z+2	; 0x02
    2fcc:	93 81       	ldd	r25, Z+3	; 0x03
    2fce:	20 e0       	ldi	r18, 0x00	; 0
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	4a e7       	ldi	r20, 0x7A	; 122
    2fd4:	55 e4       	ldi	r21, 0x45	; 69
    2fd6:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    2fda:	dc 01       	movw	r26, r24
    2fdc:	cb 01       	movw	r24, r22
    2fde:	f8 01       	movw	r30, r16
    2fe0:	80 83       	st	Z, r24
    2fe2:	91 83       	std	Z+1, r25	; 0x01
    2fe4:	a2 83       	std	Z+2, r26	; 0x02
    2fe6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fe8:	fe 01       	movw	r30, r28
    2fea:	e3 54       	subi	r30, 0x43	; 67
    2fec:	ff 4f       	sbci	r31, 0xFF	; 255
    2fee:	60 81       	ld	r22, Z
    2ff0:	71 81       	ldd	r23, Z+1	; 0x01
    2ff2:	82 81       	ldd	r24, Z+2	; 0x02
    2ff4:	93 81       	ldd	r25, Z+3	; 0x03
    2ff6:	20 e0       	ldi	r18, 0x00	; 0
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	40 e8       	ldi	r20, 0x80	; 128
    2ffc:	5f e3       	ldi	r21, 0x3F	; 63
    2ffe:	0e 94 2b 04 	call	0x856	; 0x856 <__ltsf2>
    3002:	88 23       	and	r24, r24
    3004:	44 f4       	brge	.+16     	; 0x3016 <main+0x806>
		__ticks = 1;
    3006:	fe 01       	movw	r30, r28
    3008:	e5 54       	subi	r30, 0x45	; 69
    300a:	ff 4f       	sbci	r31, 0xFF	; 255
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	91 83       	std	Z+1, r25	; 0x01
    3012:	80 83       	st	Z, r24
    3014:	64 c0       	rjmp	.+200    	; 0x30de <main+0x8ce>
	else if (__tmp > 65535)
    3016:	fe 01       	movw	r30, r28
    3018:	e3 54       	subi	r30, 0x43	; 67
    301a:	ff 4f       	sbci	r31, 0xFF	; 255
    301c:	60 81       	ld	r22, Z
    301e:	71 81       	ldd	r23, Z+1	; 0x01
    3020:	82 81       	ldd	r24, Z+2	; 0x02
    3022:	93 81       	ldd	r25, Z+3	; 0x03
    3024:	20 e0       	ldi	r18, 0x00	; 0
    3026:	3f ef       	ldi	r19, 0xFF	; 255
    3028:	4f e7       	ldi	r20, 0x7F	; 127
    302a:	57 e4       	ldi	r21, 0x47	; 71
    302c:	0e 94 cb 03 	call	0x796	; 0x796 <__gtsf2>
    3030:	18 16       	cp	r1, r24
    3032:	0c f0       	brlt	.+2      	; 0x3036 <main+0x826>
    3034:	43 c0       	rjmp	.+134    	; 0x30bc <main+0x8ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3036:	fe 01       	movw	r30, r28
    3038:	ef 53       	subi	r30, 0x3F	; 63
    303a:	ff 4f       	sbci	r31, 0xFF	; 255
    303c:	60 81       	ld	r22, Z
    303e:	71 81       	ldd	r23, Z+1	; 0x01
    3040:	82 81       	ldd	r24, Z+2	; 0x02
    3042:	93 81       	ldd	r25, Z+3	; 0x03
    3044:	20 e0       	ldi	r18, 0x00	; 0
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	40 e2       	ldi	r20, 0x20	; 32
    304a:	51 e4       	ldi	r21, 0x41	; 65
    304c:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    3050:	dc 01       	movw	r26, r24
    3052:	cb 01       	movw	r24, r22
    3054:	8e 01       	movw	r16, r28
    3056:	05 54       	subi	r16, 0x45	; 69
    3058:	1f 4f       	sbci	r17, 0xFF	; 255
    305a:	bc 01       	movw	r22, r24
    305c:	cd 01       	movw	r24, r26
    305e:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	f8 01       	movw	r30, r16
    3068:	91 83       	std	Z+1, r25	; 0x01
    306a:	80 83       	st	Z, r24
    306c:	1f c0       	rjmp	.+62     	; 0x30ac <main+0x89c>
    306e:	fe 01       	movw	r30, r28
    3070:	e7 54       	subi	r30, 0x47	; 71
    3072:	ff 4f       	sbci	r31, 0xFF	; 255
    3074:	80 e9       	ldi	r24, 0x90	; 144
    3076:	91 e0       	ldi	r25, 0x01	; 1
    3078:	91 83       	std	Z+1, r25	; 0x01
    307a:	80 83       	st	Z, r24
    307c:	fe 01       	movw	r30, r28
    307e:	e7 54       	subi	r30, 0x47	; 71
    3080:	ff 4f       	sbci	r31, 0xFF	; 255
    3082:	80 81       	ld	r24, Z
    3084:	91 81       	ldd	r25, Z+1	; 0x01
    3086:	01 97       	sbiw	r24, 0x01	; 1
    3088:	f1 f7       	brne	.-4      	; 0x3086 <main+0x876>
    308a:	fe 01       	movw	r30, r28
    308c:	e7 54       	subi	r30, 0x47	; 71
    308e:	ff 4f       	sbci	r31, 0xFF	; 255
    3090:	91 83       	std	Z+1, r25	; 0x01
    3092:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3094:	de 01       	movw	r26, r28
    3096:	a5 54       	subi	r26, 0x45	; 69
    3098:	bf 4f       	sbci	r27, 0xFF	; 255
    309a:	fe 01       	movw	r30, r28
    309c:	e5 54       	subi	r30, 0x45	; 69
    309e:	ff 4f       	sbci	r31, 0xFF	; 255
    30a0:	80 81       	ld	r24, Z
    30a2:	91 81       	ldd	r25, Z+1	; 0x01
    30a4:	01 97       	sbiw	r24, 0x01	; 1
    30a6:	11 96       	adiw	r26, 0x01	; 1
    30a8:	9c 93       	st	X, r25
    30aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ac:	fe 01       	movw	r30, r28
    30ae:	e5 54       	subi	r30, 0x45	; 69
    30b0:	ff 4f       	sbci	r31, 0xFF	; 255
    30b2:	80 81       	ld	r24, Z
    30b4:	91 81       	ldd	r25, Z+1	; 0x01
    30b6:	00 97       	sbiw	r24, 0x00	; 0
    30b8:	d1 f6       	brne	.-76     	; 0x306e <main+0x85e>
    30ba:	28 c0       	rjmp	.+80     	; 0x310c <main+0x8fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30bc:	8e 01       	movw	r16, r28
    30be:	05 54       	subi	r16, 0x45	; 69
    30c0:	1f 4f       	sbci	r17, 0xFF	; 255
    30c2:	fe 01       	movw	r30, r28
    30c4:	e3 54       	subi	r30, 0x43	; 67
    30c6:	ff 4f       	sbci	r31, 0xFF	; 255
    30c8:	60 81       	ld	r22, Z
    30ca:	71 81       	ldd	r23, Z+1	; 0x01
    30cc:	82 81       	ldd	r24, Z+2	; 0x02
    30ce:	93 81       	ldd	r25, Z+3	; 0x03
    30d0:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    30d4:	dc 01       	movw	r26, r24
    30d6:	cb 01       	movw	r24, r22
    30d8:	f8 01       	movw	r30, r16
    30da:	91 83       	std	Z+1, r25	; 0x01
    30dc:	80 83       	st	Z, r24
    30de:	de 01       	movw	r26, r28
    30e0:	a9 54       	subi	r26, 0x49	; 73
    30e2:	bf 4f       	sbci	r27, 0xFF	; 255
    30e4:	fe 01       	movw	r30, r28
    30e6:	e5 54       	subi	r30, 0x45	; 69
    30e8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ea:	80 81       	ld	r24, Z
    30ec:	91 81       	ldd	r25, Z+1	; 0x01
    30ee:	11 96       	adiw	r26, 0x01	; 1
    30f0:	9c 93       	st	X, r25
    30f2:	8e 93       	st	-X, r24
    30f4:	fe 01       	movw	r30, r28
    30f6:	e9 54       	subi	r30, 0x49	; 73
    30f8:	ff 4f       	sbci	r31, 0xFF	; 255
    30fa:	80 81       	ld	r24, Z
    30fc:	91 81       	ldd	r25, Z+1	; 0x01
    30fe:	01 97       	sbiw	r24, 0x01	; 1
    3100:	f1 f7       	brne	.-4      	; 0x30fe <main+0x8ee>
    3102:	fe 01       	movw	r30, r28
    3104:	e9 54       	subi	r30, 0x49	; 73
    3106:	ff 4f       	sbci	r31, 0xFF	; 255
    3108:	91 83       	std	Z+1, r25	; 0x01
    310a:	80 83       	st	Z, r24
            }
            _delay_ms(500); // Allow display to stabilize
        }

        // Mode-specific operations
        switch (currentMode) {
    310c:	80 91 37 02 	lds	r24, 0x0237
    3110:	e8 2e       	mov	r14, r24
    3112:	ff 24       	eor	r15, r15
    3114:	c7 59       	subi	r28, 0x97	; 151
    3116:	de 4f       	sbci	r29, 0xFE	; 254
    3118:	f9 82       	std	Y+1, r15	; 0x01
    311a:	e8 82       	st	Y, r14
    311c:	c9 56       	subi	r28, 0x69	; 105
    311e:	d1 40       	sbci	r29, 0x01	; 1
    3120:	c7 59       	subi	r28, 0x97	; 151
    3122:	de 4f       	sbci	r29, 0xFE	; 254
    3124:	08 81       	ld	r16, Y
    3126:	19 81       	ldd	r17, Y+1	; 0x01
    3128:	c9 56       	subi	r28, 0x69	; 105
    312a:	d1 40       	sbci	r29, 0x01	; 1
    312c:	01 30       	cpi	r16, 0x01	; 1
    312e:	11 05       	cpc	r17, r1
    3130:	09 f4       	brne	.+2      	; 0x3134 <main+0x924>
    3132:	44 c6       	rjmp	.+3208   	; 0x3dbc <main+0x15ac>
    3134:	c7 59       	subi	r28, 0x97	; 151
    3136:	de 4f       	sbci	r29, 0xFE	; 254
    3138:	28 81       	ld	r18, Y
    313a:	39 81       	ldd	r19, Y+1	; 0x01
    313c:	c9 56       	subi	r28, 0x69	; 105
    313e:	d1 40       	sbci	r29, 0x01	; 1
    3140:	22 30       	cpi	r18, 0x02	; 2
    3142:	31 05       	cpc	r19, r1
    3144:	11 f4       	brne	.+4      	; 0x314a <main+0x93a>
    3146:	0c 94 fd 23 	jmp	0x47fa	; 0x47fa <main+0x1fea>
    314a:	c7 59       	subi	r28, 0x97	; 151
    314c:	de 4f       	sbci	r29, 0xFE	; 254
    314e:	88 81       	ld	r24, Y
    3150:	99 81       	ldd	r25, Y+1	; 0x01
    3152:	c9 56       	subi	r28, 0x69	; 105
    3154:	d1 40       	sbci	r29, 0x01	; 1
    3156:	00 97       	sbiw	r24, 0x00	; 0
    3158:	11 f0       	breq	.+4      	; 0x315e <main+0x94e>
    315a:	0c 94 02 24 	jmp	0x4804	; 0x4804 <main+0x1ff4>
            case CALCULATOR:
                // Read the first operand
                LCD_WriteString("Enter num1:", LCD_ROW_1, 0);
    315e:	8a ea       	ldi	r24, 0xAA	; 170
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	60 e0       	ldi	r22, 0x00	; 0
    3164:	40 e0       	ldi	r20, 0x00	; 0
    3166:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_WriteString>
                LCD_GoToPos(LCD_ROW_2, 0);
    316a:	81 e0       	ldi	r24, 0x01	; 1
    316c:	60 e0       	ldi	r22, 0x00	; 0
    316e:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <LCD_GoToPos>
                num1 = 0;
    3172:	fe 01       	movw	r30, r28
    3174:	e4 5f       	subi	r30, 0xF4	; 244
    3176:	fe 4f       	sbci	r31, 0xFE	; 254
    3178:	10 82       	st	Z, r1
    317a:	11 82       	std	Z+1, r1	; 0x01
    317c:	12 82       	std	Z+2, r1	; 0x02
    317e:	13 82       	std	Z+3, r1	; 0x03
    3180:	0e c1       	rjmp	.+540    	; 0x339e <main+0xb8e>
                while (1 && currentMode == CALCULATOR) {
                    key = KEYPAD_getPressedKey();
    3182:	0e 94 ce 0a 	call	0x159c	; 0x159c <KEYPAD_getPressedKey>
    3186:	fe 01       	movw	r30, r28
    3188:	e0 5f       	subi	r30, 0xF0	; 240
    318a:	fe 4f       	sbci	r31, 0xFE	; 254
    318c:	80 83       	st	Z, r24
                    if (key >= '0' && key <= '9') {
    318e:	fe 01       	movw	r30, r28
    3190:	e0 5f       	subi	r30, 0xF0	; 240
    3192:	fe 4f       	sbci	r31, 0xFE	; 254
    3194:	80 81       	ld	r24, Z
    3196:	80 33       	cpi	r24, 0x30	; 48
    3198:	08 f4       	brcc	.+2      	; 0x319c <main+0x98c>
    319a:	e9 c0       	rjmp	.+466    	; 0x336e <main+0xb5e>
    319c:	fe 01       	movw	r30, r28
    319e:	e0 5f       	subi	r30, 0xF0	; 240
    31a0:	fe 4f       	sbci	r31, 0xFE	; 254
    31a2:	80 81       	ld	r24, Z
    31a4:	8a 33       	cpi	r24, 0x3A	; 58
    31a6:	08 f0       	brcs	.+2      	; 0x31aa <main+0x99a>
    31a8:	e2 c0       	rjmp	.+452    	; 0x336e <main+0xb5e>
                        num1 = num1 * 10 + (key - '0');
    31aa:	fe 01       	movw	r30, r28
    31ac:	e4 5f       	subi	r30, 0xF4	; 244
    31ae:	fe 4f       	sbci	r31, 0xFE	; 254
    31b0:	80 81       	ld	r24, Z
    31b2:	91 81       	ldd	r25, Z+1	; 0x01
    31b4:	a2 81       	ldd	r26, Z+2	; 0x02
    31b6:	b3 81       	ldd	r27, Z+3	; 0x03
    31b8:	2a e0       	ldi	r18, 0x0A	; 10
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	40 e0       	ldi	r20, 0x00	; 0
    31be:	50 e0       	ldi	r21, 0x00	; 0
    31c0:	bc 01       	movw	r22, r24
    31c2:	cd 01       	movw	r24, r26
    31c4:	0e 94 77 24 	call	0x48ee	; 0x48ee <__mulsi3>
    31c8:	9b 01       	movw	r18, r22
    31ca:	ac 01       	movw	r20, r24
    31cc:	fe 01       	movw	r30, r28
    31ce:	e0 5f       	subi	r30, 0xF0	; 240
    31d0:	fe 4f       	sbci	r31, 0xFE	; 254
    31d2:	80 81       	ld	r24, Z
    31d4:	88 2f       	mov	r24, r24
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	c0 97       	sbiw	r24, 0x30	; 48
    31da:	aa 27       	eor	r26, r26
    31dc:	97 fd       	sbrc	r25, 7
    31de:	a0 95       	com	r26
    31e0:	ba 2f       	mov	r27, r26
    31e2:	fe 01       	movw	r30, r28
    31e4:	e4 5f       	subi	r30, 0xF4	; 244
    31e6:	fe 4f       	sbci	r31, 0xFE	; 254
    31e8:	82 0f       	add	r24, r18
    31ea:	93 1f       	adc	r25, r19
    31ec:	a4 1f       	adc	r26, r20
    31ee:	b5 1f       	adc	r27, r21
    31f0:	80 83       	st	Z, r24
    31f2:	91 83       	std	Z+1, r25	; 0x01
    31f4:	a2 83       	std	Z+2, r26	; 0x02
    31f6:	b3 83       	std	Z+3, r27	; 0x03
                        LCD_WriteData(key);
    31f8:	fe 01       	movw	r30, r28
    31fa:	e0 5f       	subi	r30, 0xF0	; 240
    31fc:	fe 4f       	sbci	r31, 0xFE	; 254
    31fe:	80 81       	ld	r24, Z
    3200:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <LCD_WriteData>
    3204:	fe 01       	movw	r30, r28
    3206:	ed 54       	subi	r30, 0x4D	; 77
    3208:	ff 4f       	sbci	r31, 0xFF	; 255
    320a:	80 e0       	ldi	r24, 0x00	; 0
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	aa e7       	ldi	r26, 0x7A	; 122
    3210:	b3 e4       	ldi	r27, 0x43	; 67
    3212:	80 83       	st	Z, r24
    3214:	91 83       	std	Z+1, r25	; 0x01
    3216:	a2 83       	std	Z+2, r26	; 0x02
    3218:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    321a:	8e 01       	movw	r16, r28
    321c:	01 55       	subi	r16, 0x51	; 81
    321e:	1f 4f       	sbci	r17, 0xFF	; 255
    3220:	fe 01       	movw	r30, r28
    3222:	ed 54       	subi	r30, 0x4D	; 77
    3224:	ff 4f       	sbci	r31, 0xFF	; 255
    3226:	60 81       	ld	r22, Z
    3228:	71 81       	ldd	r23, Z+1	; 0x01
    322a:	82 81       	ldd	r24, Z+2	; 0x02
    322c:	93 81       	ldd	r25, Z+3	; 0x03
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	4a e7       	ldi	r20, 0x7A	; 122
    3234:	55 e4       	ldi	r21, 0x45	; 69
    3236:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    323a:	dc 01       	movw	r26, r24
    323c:	cb 01       	movw	r24, r22
    323e:	f8 01       	movw	r30, r16
    3240:	80 83       	st	Z, r24
    3242:	91 83       	std	Z+1, r25	; 0x01
    3244:	a2 83       	std	Z+2, r26	; 0x02
    3246:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3248:	fe 01       	movw	r30, r28
    324a:	e1 55       	subi	r30, 0x51	; 81
    324c:	ff 4f       	sbci	r31, 0xFF	; 255
    324e:	60 81       	ld	r22, Z
    3250:	71 81       	ldd	r23, Z+1	; 0x01
    3252:	82 81       	ldd	r24, Z+2	; 0x02
    3254:	93 81       	ldd	r25, Z+3	; 0x03
    3256:	20 e0       	ldi	r18, 0x00	; 0
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	40 e8       	ldi	r20, 0x80	; 128
    325c:	5f e3       	ldi	r21, 0x3F	; 63
    325e:	0e 94 2b 04 	call	0x856	; 0x856 <__ltsf2>
    3262:	88 23       	and	r24, r24
    3264:	44 f4       	brge	.+16     	; 0x3276 <main+0xa66>
		__ticks = 1;
    3266:	fe 01       	movw	r30, r28
    3268:	e3 55       	subi	r30, 0x53	; 83
    326a:	ff 4f       	sbci	r31, 0xFF	; 255
    326c:	81 e0       	ldi	r24, 0x01	; 1
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	91 83       	std	Z+1, r25	; 0x01
    3272:	80 83       	st	Z, r24
    3274:	64 c0       	rjmp	.+200    	; 0x333e <main+0xb2e>
	else if (__tmp > 65535)
    3276:	fe 01       	movw	r30, r28
    3278:	e1 55       	subi	r30, 0x51	; 81
    327a:	ff 4f       	sbci	r31, 0xFF	; 255
    327c:	60 81       	ld	r22, Z
    327e:	71 81       	ldd	r23, Z+1	; 0x01
    3280:	82 81       	ldd	r24, Z+2	; 0x02
    3282:	93 81       	ldd	r25, Z+3	; 0x03
    3284:	20 e0       	ldi	r18, 0x00	; 0
    3286:	3f ef       	ldi	r19, 0xFF	; 255
    3288:	4f e7       	ldi	r20, 0x7F	; 127
    328a:	57 e4       	ldi	r21, 0x47	; 71
    328c:	0e 94 cb 03 	call	0x796	; 0x796 <__gtsf2>
    3290:	18 16       	cp	r1, r24
    3292:	0c f0       	brlt	.+2      	; 0x3296 <main+0xa86>
    3294:	43 c0       	rjmp	.+134    	; 0x331c <main+0xb0c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3296:	fe 01       	movw	r30, r28
    3298:	ed 54       	subi	r30, 0x4D	; 77
    329a:	ff 4f       	sbci	r31, 0xFF	; 255
    329c:	60 81       	ld	r22, Z
    329e:	71 81       	ldd	r23, Z+1	; 0x01
    32a0:	82 81       	ldd	r24, Z+2	; 0x02
    32a2:	93 81       	ldd	r25, Z+3	; 0x03
    32a4:	20 e0       	ldi	r18, 0x00	; 0
    32a6:	30 e0       	ldi	r19, 0x00	; 0
    32a8:	40 e2       	ldi	r20, 0x20	; 32
    32aa:	51 e4       	ldi	r21, 0x41	; 65
    32ac:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    32b0:	dc 01       	movw	r26, r24
    32b2:	cb 01       	movw	r24, r22
    32b4:	8e 01       	movw	r16, r28
    32b6:	03 55       	subi	r16, 0x53	; 83
    32b8:	1f 4f       	sbci	r17, 0xFF	; 255
    32ba:	bc 01       	movw	r22, r24
    32bc:	cd 01       	movw	r24, r26
    32be:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    32c2:	dc 01       	movw	r26, r24
    32c4:	cb 01       	movw	r24, r22
    32c6:	f8 01       	movw	r30, r16
    32c8:	91 83       	std	Z+1, r25	; 0x01
    32ca:	80 83       	st	Z, r24
    32cc:	1f c0       	rjmp	.+62     	; 0x330c <main+0xafc>
    32ce:	fe 01       	movw	r30, r28
    32d0:	e5 55       	subi	r30, 0x55	; 85
    32d2:	ff 4f       	sbci	r31, 0xFF	; 255
    32d4:	80 e9       	ldi	r24, 0x90	; 144
    32d6:	91 e0       	ldi	r25, 0x01	; 1
    32d8:	91 83       	std	Z+1, r25	; 0x01
    32da:	80 83       	st	Z, r24
    32dc:	fe 01       	movw	r30, r28
    32de:	e5 55       	subi	r30, 0x55	; 85
    32e0:	ff 4f       	sbci	r31, 0xFF	; 255
    32e2:	80 81       	ld	r24, Z
    32e4:	91 81       	ldd	r25, Z+1	; 0x01
    32e6:	01 97       	sbiw	r24, 0x01	; 1
    32e8:	f1 f7       	brne	.-4      	; 0x32e6 <main+0xad6>
    32ea:	fe 01       	movw	r30, r28
    32ec:	e5 55       	subi	r30, 0x55	; 85
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	91 83       	std	Z+1, r25	; 0x01
    32f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32f4:	de 01       	movw	r26, r28
    32f6:	a3 55       	subi	r26, 0x53	; 83
    32f8:	bf 4f       	sbci	r27, 0xFF	; 255
    32fa:	fe 01       	movw	r30, r28
    32fc:	e3 55       	subi	r30, 0x53	; 83
    32fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3300:	80 81       	ld	r24, Z
    3302:	91 81       	ldd	r25, Z+1	; 0x01
    3304:	01 97       	sbiw	r24, 0x01	; 1
    3306:	11 96       	adiw	r26, 0x01	; 1
    3308:	9c 93       	st	X, r25
    330a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    330c:	fe 01       	movw	r30, r28
    330e:	e3 55       	subi	r30, 0x53	; 83
    3310:	ff 4f       	sbci	r31, 0xFF	; 255
    3312:	80 81       	ld	r24, Z
    3314:	91 81       	ldd	r25, Z+1	; 0x01
    3316:	00 97       	sbiw	r24, 0x00	; 0
    3318:	d1 f6       	brne	.-76     	; 0x32ce <main+0xabe>
    331a:	41 c0       	rjmp	.+130    	; 0x339e <main+0xb8e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    331c:	8e 01       	movw	r16, r28
    331e:	03 55       	subi	r16, 0x53	; 83
    3320:	1f 4f       	sbci	r17, 0xFF	; 255
    3322:	fe 01       	movw	r30, r28
    3324:	e1 55       	subi	r30, 0x51	; 81
    3326:	ff 4f       	sbci	r31, 0xFF	; 255
    3328:	60 81       	ld	r22, Z
    332a:	71 81       	ldd	r23, Z+1	; 0x01
    332c:	82 81       	ldd	r24, Z+2	; 0x02
    332e:	93 81       	ldd	r25, Z+3	; 0x03
    3330:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    3334:	dc 01       	movw	r26, r24
    3336:	cb 01       	movw	r24, r22
    3338:	f8 01       	movw	r30, r16
    333a:	91 83       	std	Z+1, r25	; 0x01
    333c:	80 83       	st	Z, r24
    333e:	de 01       	movw	r26, r28
    3340:	a7 55       	subi	r26, 0x57	; 87
    3342:	bf 4f       	sbci	r27, 0xFF	; 255
    3344:	fe 01       	movw	r30, r28
    3346:	e3 55       	subi	r30, 0x53	; 83
    3348:	ff 4f       	sbci	r31, 0xFF	; 255
    334a:	80 81       	ld	r24, Z
    334c:	91 81       	ldd	r25, Z+1	; 0x01
    334e:	11 96       	adiw	r26, 0x01	; 1
    3350:	9c 93       	st	X, r25
    3352:	8e 93       	st	-X, r24
    3354:	fe 01       	movw	r30, r28
    3356:	e7 55       	subi	r30, 0x57	; 87
    3358:	ff 4f       	sbci	r31, 0xFF	; 255
    335a:	80 81       	ld	r24, Z
    335c:	91 81       	ldd	r25, Z+1	; 0x01
    335e:	01 97       	sbiw	r24, 0x01	; 1
    3360:	f1 f7       	brne	.-4      	; 0x335e <main+0xb4e>
    3362:	fe 01       	movw	r30, r28
    3364:	e7 55       	subi	r30, 0x57	; 87
    3366:	ff 4f       	sbci	r31, 0xFF	; 255
    3368:	91 83       	std	Z+1, r25	; 0x01
    336a:	80 83       	st	Z, r24
    336c:	18 c0       	rjmp	.+48     	; 0x339e <main+0xb8e>
                        _delay_ms(250); // Debounce delay
                    } else if (key == '+' || key == '-' || key == '*' || key == '/') {
    336e:	fe 01       	movw	r30, r28
    3370:	e0 5f       	subi	r30, 0xF0	; 240
    3372:	fe 4f       	sbci	r31, 0xFE	; 254
    3374:	80 81       	ld	r24, Z
    3376:	8b 32       	cpi	r24, 0x2B	; 43
    3378:	b9 f0       	breq	.+46     	; 0x33a8 <main+0xb98>
    337a:	fe 01       	movw	r30, r28
    337c:	e0 5f       	subi	r30, 0xF0	; 240
    337e:	fe 4f       	sbci	r31, 0xFE	; 254
    3380:	80 81       	ld	r24, Z
    3382:	8d 32       	cpi	r24, 0x2D	; 45
    3384:	89 f0       	breq	.+34     	; 0x33a8 <main+0xb98>
    3386:	fe 01       	movw	r30, r28
    3388:	e0 5f       	subi	r30, 0xF0	; 240
    338a:	fe 4f       	sbci	r31, 0xFE	; 254
    338c:	80 81       	ld	r24, Z
    338e:	8a 32       	cpi	r24, 0x2A	; 42
    3390:	59 f0       	breq	.+22     	; 0x33a8 <main+0xb98>
    3392:	fe 01       	movw	r30, r28
    3394:	e0 5f       	subi	r30, 0xF0	; 240
    3396:	fe 4f       	sbci	r31, 0xFE	; 254
    3398:	80 81       	ld	r24, Z
    339a:	8f 32       	cpi	r24, 0x2F	; 47
    339c:	29 f0       	breq	.+10     	; 0x33a8 <main+0xb98>
            case CALCULATOR:
                // Read the first operand
                LCD_WriteString("Enter num1:", LCD_ROW_1, 0);
                LCD_GoToPos(LCD_ROW_2, 0);
                num1 = 0;
                while (1 && currentMode == CALCULATOR) {
    339e:	80 91 37 02 	lds	r24, 0x0237
    33a2:	88 23       	and	r24, r24
    33a4:	09 f4       	brne	.+2      	; 0x33a8 <main+0xb98>
    33a6:	ed ce       	rjmp	.-550    	; 0x3182 <main+0x972>
                        _delay_ms(250); // Debounce delay
                    } else if (key == '+' || key == '-' || key == '*' || key == '/') {
                        break;
                    }
                }
                LCD_Clear();
    33a8:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_Clear>
                LCD_WriteString("Enter operator:", LCD_ROW_1, 0);
    33ac:	86 eb       	ldi	r24, 0xB6	; 182
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	60 e0       	ldi	r22, 0x00	; 0
    33b2:	40 e0       	ldi	r20, 0x00	; 0
    33b4:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_WriteString>
                char op = key; // Store operator
    33b8:	de 01       	movw	r26, r28
    33ba:	a3 50       	subi	r26, 0x03	; 3
    33bc:	bf 4f       	sbci	r27, 0xFF	; 255
    33be:	fe 01       	movw	r30, r28
    33c0:	e0 5f       	subi	r30, 0xF0	; 240
    33c2:	fe 4f       	sbci	r31, 0xFE	; 254
    33c4:	80 81       	ld	r24, Z
    33c6:	8c 93       	st	X, r24

                LCD_GoToPos(1, 0);
    33c8:	81 e0       	ldi	r24, 0x01	; 1
    33ca:	60 e0       	ldi	r22, 0x00	; 0
    33cc:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <LCD_GoToPos>
                LCD_WriteData(key);
    33d0:	fe 01       	movw	r30, r28
    33d2:	e0 5f       	subi	r30, 0xF0	; 240
    33d4:	fe 4f       	sbci	r31, 0xFE	; 254
    33d6:	80 81       	ld	r24, Z
    33d8:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <LCD_WriteData>
    33dc:	fe 01       	movw	r30, r28
    33de:	eb 55       	subi	r30, 0x5B	; 91
    33e0:	ff 4f       	sbci	r31, 0xFF	; 255
    33e2:	80 e0       	ldi	r24, 0x00	; 0
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	aa ef       	ldi	r26, 0xFA	; 250
    33e8:	b3 e4       	ldi	r27, 0x43	; 67
    33ea:	80 83       	st	Z, r24
    33ec:	91 83       	std	Z+1, r25	; 0x01
    33ee:	a2 83       	std	Z+2, r26	; 0x02
    33f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33f2:	8e 01       	movw	r16, r28
    33f4:	0f 55       	subi	r16, 0x5F	; 95
    33f6:	1f 4f       	sbci	r17, 0xFF	; 255
    33f8:	fe 01       	movw	r30, r28
    33fa:	eb 55       	subi	r30, 0x5B	; 91
    33fc:	ff 4f       	sbci	r31, 0xFF	; 255
    33fe:	60 81       	ld	r22, Z
    3400:	71 81       	ldd	r23, Z+1	; 0x01
    3402:	82 81       	ldd	r24, Z+2	; 0x02
    3404:	93 81       	ldd	r25, Z+3	; 0x03
    3406:	20 e0       	ldi	r18, 0x00	; 0
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	4a e7       	ldi	r20, 0x7A	; 122
    340c:	55 e4       	ldi	r21, 0x45	; 69
    340e:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    3412:	dc 01       	movw	r26, r24
    3414:	cb 01       	movw	r24, r22
    3416:	f8 01       	movw	r30, r16
    3418:	80 83       	st	Z, r24
    341a:	91 83       	std	Z+1, r25	; 0x01
    341c:	a2 83       	std	Z+2, r26	; 0x02
    341e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3420:	fe 01       	movw	r30, r28
    3422:	ef 55       	subi	r30, 0x5F	; 95
    3424:	ff 4f       	sbci	r31, 0xFF	; 255
    3426:	60 81       	ld	r22, Z
    3428:	71 81       	ldd	r23, Z+1	; 0x01
    342a:	82 81       	ldd	r24, Z+2	; 0x02
    342c:	93 81       	ldd	r25, Z+3	; 0x03
    342e:	20 e0       	ldi	r18, 0x00	; 0
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	40 e8       	ldi	r20, 0x80	; 128
    3434:	5f e3       	ldi	r21, 0x3F	; 63
    3436:	0e 94 2b 04 	call	0x856	; 0x856 <__ltsf2>
    343a:	88 23       	and	r24, r24
    343c:	44 f4       	brge	.+16     	; 0x344e <main+0xc3e>
		__ticks = 1;
    343e:	fe 01       	movw	r30, r28
    3440:	e1 56       	subi	r30, 0x61	; 97
    3442:	ff 4f       	sbci	r31, 0xFF	; 255
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	91 83       	std	Z+1, r25	; 0x01
    344a:	80 83       	st	Z, r24
    344c:	64 c0       	rjmp	.+200    	; 0x3516 <main+0xd06>
	else if (__tmp > 65535)
    344e:	fe 01       	movw	r30, r28
    3450:	ef 55       	subi	r30, 0x5F	; 95
    3452:	ff 4f       	sbci	r31, 0xFF	; 255
    3454:	60 81       	ld	r22, Z
    3456:	71 81       	ldd	r23, Z+1	; 0x01
    3458:	82 81       	ldd	r24, Z+2	; 0x02
    345a:	93 81       	ldd	r25, Z+3	; 0x03
    345c:	20 e0       	ldi	r18, 0x00	; 0
    345e:	3f ef       	ldi	r19, 0xFF	; 255
    3460:	4f e7       	ldi	r20, 0x7F	; 127
    3462:	57 e4       	ldi	r21, 0x47	; 71
    3464:	0e 94 cb 03 	call	0x796	; 0x796 <__gtsf2>
    3468:	18 16       	cp	r1, r24
    346a:	0c f0       	brlt	.+2      	; 0x346e <main+0xc5e>
    346c:	43 c0       	rjmp	.+134    	; 0x34f4 <main+0xce4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    346e:	fe 01       	movw	r30, r28
    3470:	eb 55       	subi	r30, 0x5B	; 91
    3472:	ff 4f       	sbci	r31, 0xFF	; 255
    3474:	60 81       	ld	r22, Z
    3476:	71 81       	ldd	r23, Z+1	; 0x01
    3478:	82 81       	ldd	r24, Z+2	; 0x02
    347a:	93 81       	ldd	r25, Z+3	; 0x03
    347c:	20 e0       	ldi	r18, 0x00	; 0
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	40 e2       	ldi	r20, 0x20	; 32
    3482:	51 e4       	ldi	r21, 0x41	; 65
    3484:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    3488:	dc 01       	movw	r26, r24
    348a:	cb 01       	movw	r24, r22
    348c:	8e 01       	movw	r16, r28
    348e:	01 56       	subi	r16, 0x61	; 97
    3490:	1f 4f       	sbci	r17, 0xFF	; 255
    3492:	bc 01       	movw	r22, r24
    3494:	cd 01       	movw	r24, r26
    3496:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    349a:	dc 01       	movw	r26, r24
    349c:	cb 01       	movw	r24, r22
    349e:	f8 01       	movw	r30, r16
    34a0:	91 83       	std	Z+1, r25	; 0x01
    34a2:	80 83       	st	Z, r24
    34a4:	1f c0       	rjmp	.+62     	; 0x34e4 <main+0xcd4>
    34a6:	fe 01       	movw	r30, r28
    34a8:	e3 56       	subi	r30, 0x63	; 99
    34aa:	ff 4f       	sbci	r31, 0xFF	; 255
    34ac:	80 e9       	ldi	r24, 0x90	; 144
    34ae:	91 e0       	ldi	r25, 0x01	; 1
    34b0:	91 83       	std	Z+1, r25	; 0x01
    34b2:	80 83       	st	Z, r24
    34b4:	fe 01       	movw	r30, r28
    34b6:	e3 56       	subi	r30, 0x63	; 99
    34b8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ba:	80 81       	ld	r24, Z
    34bc:	91 81       	ldd	r25, Z+1	; 0x01
    34be:	01 97       	sbiw	r24, 0x01	; 1
    34c0:	f1 f7       	brne	.-4      	; 0x34be <main+0xcae>
    34c2:	fe 01       	movw	r30, r28
    34c4:	e3 56       	subi	r30, 0x63	; 99
    34c6:	ff 4f       	sbci	r31, 0xFF	; 255
    34c8:	91 83       	std	Z+1, r25	; 0x01
    34ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34cc:	de 01       	movw	r26, r28
    34ce:	a1 56       	subi	r26, 0x61	; 97
    34d0:	bf 4f       	sbci	r27, 0xFF	; 255
    34d2:	fe 01       	movw	r30, r28
    34d4:	e1 56       	subi	r30, 0x61	; 97
    34d6:	ff 4f       	sbci	r31, 0xFF	; 255
    34d8:	80 81       	ld	r24, Z
    34da:	91 81       	ldd	r25, Z+1	; 0x01
    34dc:	01 97       	sbiw	r24, 0x01	; 1
    34de:	11 96       	adiw	r26, 0x01	; 1
    34e0:	9c 93       	st	X, r25
    34e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34e4:	fe 01       	movw	r30, r28
    34e6:	e1 56       	subi	r30, 0x61	; 97
    34e8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ea:	80 81       	ld	r24, Z
    34ec:	91 81       	ldd	r25, Z+1	; 0x01
    34ee:	00 97       	sbiw	r24, 0x00	; 0
    34f0:	d1 f6       	brne	.-76     	; 0x34a6 <main+0xc96>
    34f2:	27 c0       	rjmp	.+78     	; 0x3542 <main+0xd32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34f4:	8e 01       	movw	r16, r28
    34f6:	01 56       	subi	r16, 0x61	; 97
    34f8:	1f 4f       	sbci	r17, 0xFF	; 255
    34fa:	fe 01       	movw	r30, r28
    34fc:	ef 55       	subi	r30, 0x5F	; 95
    34fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3500:	60 81       	ld	r22, Z
    3502:	71 81       	ldd	r23, Z+1	; 0x01
    3504:	82 81       	ldd	r24, Z+2	; 0x02
    3506:	93 81       	ldd	r25, Z+3	; 0x03
    3508:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    350c:	dc 01       	movw	r26, r24
    350e:	cb 01       	movw	r24, r22
    3510:	f8 01       	movw	r30, r16
    3512:	91 83       	std	Z+1, r25	; 0x01
    3514:	80 83       	st	Z, r24
    3516:	de 01       	movw	r26, r28
    3518:	a5 56       	subi	r26, 0x65	; 101
    351a:	bf 4f       	sbci	r27, 0xFF	; 255
    351c:	fe 01       	movw	r30, r28
    351e:	e1 56       	subi	r30, 0x61	; 97
    3520:	ff 4f       	sbci	r31, 0xFF	; 255
    3522:	80 81       	ld	r24, Z
    3524:	91 81       	ldd	r25, Z+1	; 0x01
    3526:	8d 93       	st	X+, r24
    3528:	9c 93       	st	X, r25
    352a:	fe 01       	movw	r30, r28
    352c:	e5 56       	subi	r30, 0x65	; 101
    352e:	ff 4f       	sbci	r31, 0xFF	; 255
    3530:	80 81       	ld	r24, Z
    3532:	91 81       	ldd	r25, Z+1	; 0x01
    3534:	01 97       	sbiw	r24, 0x01	; 1
    3536:	f1 f7       	brne	.-4      	; 0x3534 <main+0xd24>
    3538:	fe 01       	movw	r30, r28
    353a:	e5 56       	subi	r30, 0x65	; 101
    353c:	ff 4f       	sbci	r31, 0xFF	; 255
    353e:	91 83       	std	Z+1, r25	; 0x01
    3540:	80 83       	st	Z, r24
                _delay_ms(500);
                LCD_Clear(); // Clear Display command
    3542:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_Clear>

                LCD_WriteString("Enter num2:", LCD_ROW_1, 0);
    3546:	86 ec       	ldi	r24, 0xC6	; 198
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	60 e0       	ldi	r22, 0x00	; 0
    354c:	40 e0       	ldi	r20, 0x00	; 0
    354e:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_WriteString>
                LCD_GoToPos(LCD_ROW_2, 0);
    3552:	81 e0       	ldi	r24, 0x01	; 1
    3554:	60 e0       	ldi	r22, 0x00	; 0
    3556:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <LCD_GoToPos>
                num2 = 0;
    355a:	fe 01       	movw	r30, r28
    355c:	e8 5f       	subi	r30, 0xF8	; 248
    355e:	fe 4f       	sbci	r31, 0xFE	; 254
    3560:	10 82       	st	Z, r1
    3562:	11 82       	std	Z+1, r1	; 0x01
    3564:	12 82       	std	Z+2, r1	; 0x02
    3566:	13 82       	std	Z+3, r1	; 0x03
    3568:	fc c0       	rjmp	.+504    	; 0x3762 <main+0xf52>
                while (1 && currentMode == CALCULATOR) {
                    key = KEYPAD_getPressedKey();
    356a:	0e 94 ce 0a 	call	0x159c	; 0x159c <KEYPAD_getPressedKey>
    356e:	fe 01       	movw	r30, r28
    3570:	e0 5f       	subi	r30, 0xF0	; 240
    3572:	fe 4f       	sbci	r31, 0xFE	; 254
    3574:	80 83       	st	Z, r24
                    if (key >= '0' && key <= '9') {
    3576:	fe 01       	movw	r30, r28
    3578:	e0 5f       	subi	r30, 0xF0	; 240
    357a:	fe 4f       	sbci	r31, 0xFE	; 254
    357c:	80 81       	ld	r24, Z
    357e:	80 33       	cpi	r24, 0x30	; 48
    3580:	08 f4       	brcc	.+2      	; 0x3584 <main+0xd74>
    3582:	e9 c0       	rjmp	.+466    	; 0x3756 <main+0xf46>
    3584:	fe 01       	movw	r30, r28
    3586:	e0 5f       	subi	r30, 0xF0	; 240
    3588:	fe 4f       	sbci	r31, 0xFE	; 254
    358a:	80 81       	ld	r24, Z
    358c:	8a 33       	cpi	r24, 0x3A	; 58
    358e:	08 f0       	brcs	.+2      	; 0x3592 <main+0xd82>
    3590:	e2 c0       	rjmp	.+452    	; 0x3756 <main+0xf46>
                        num2 = num2 * 10 + (key - '0');
    3592:	fe 01       	movw	r30, r28
    3594:	e8 5f       	subi	r30, 0xF8	; 248
    3596:	fe 4f       	sbci	r31, 0xFE	; 254
    3598:	80 81       	ld	r24, Z
    359a:	91 81       	ldd	r25, Z+1	; 0x01
    359c:	a2 81       	ldd	r26, Z+2	; 0x02
    359e:	b3 81       	ldd	r27, Z+3	; 0x03
    35a0:	2a e0       	ldi	r18, 0x0A	; 10
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	40 e0       	ldi	r20, 0x00	; 0
    35a6:	50 e0       	ldi	r21, 0x00	; 0
    35a8:	bc 01       	movw	r22, r24
    35aa:	cd 01       	movw	r24, r26
    35ac:	0e 94 77 24 	call	0x48ee	; 0x48ee <__mulsi3>
    35b0:	9b 01       	movw	r18, r22
    35b2:	ac 01       	movw	r20, r24
    35b4:	fe 01       	movw	r30, r28
    35b6:	e0 5f       	subi	r30, 0xF0	; 240
    35b8:	fe 4f       	sbci	r31, 0xFE	; 254
    35ba:	80 81       	ld	r24, Z
    35bc:	88 2f       	mov	r24, r24
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	c0 97       	sbiw	r24, 0x30	; 48
    35c2:	aa 27       	eor	r26, r26
    35c4:	97 fd       	sbrc	r25, 7
    35c6:	a0 95       	com	r26
    35c8:	ba 2f       	mov	r27, r26
    35ca:	fe 01       	movw	r30, r28
    35cc:	e8 5f       	subi	r30, 0xF8	; 248
    35ce:	fe 4f       	sbci	r31, 0xFE	; 254
    35d0:	82 0f       	add	r24, r18
    35d2:	93 1f       	adc	r25, r19
    35d4:	a4 1f       	adc	r26, r20
    35d6:	b5 1f       	adc	r27, r21
    35d8:	80 83       	st	Z, r24
    35da:	91 83       	std	Z+1, r25	; 0x01
    35dc:	a2 83       	std	Z+2, r26	; 0x02
    35de:	b3 83       	std	Z+3, r27	; 0x03
                        LCD_WriteData(key);
    35e0:	fe 01       	movw	r30, r28
    35e2:	e0 5f       	subi	r30, 0xF0	; 240
    35e4:	fe 4f       	sbci	r31, 0xFE	; 254
    35e6:	80 81       	ld	r24, Z
    35e8:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <LCD_WriteData>
    35ec:	fe 01       	movw	r30, r28
    35ee:	e9 56       	subi	r30, 0x69	; 105
    35f0:	ff 4f       	sbci	r31, 0xFF	; 255
    35f2:	80 e0       	ldi	r24, 0x00	; 0
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	aa e7       	ldi	r26, 0x7A	; 122
    35f8:	b3 e4       	ldi	r27, 0x43	; 67
    35fa:	80 83       	st	Z, r24
    35fc:	91 83       	std	Z+1, r25	; 0x01
    35fe:	a2 83       	std	Z+2, r26	; 0x02
    3600:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3602:	8e 01       	movw	r16, r28
    3604:	0d 56       	subi	r16, 0x6D	; 109
    3606:	1f 4f       	sbci	r17, 0xFF	; 255
    3608:	fe 01       	movw	r30, r28
    360a:	e9 56       	subi	r30, 0x69	; 105
    360c:	ff 4f       	sbci	r31, 0xFF	; 255
    360e:	60 81       	ld	r22, Z
    3610:	71 81       	ldd	r23, Z+1	; 0x01
    3612:	82 81       	ldd	r24, Z+2	; 0x02
    3614:	93 81       	ldd	r25, Z+3	; 0x03
    3616:	20 e0       	ldi	r18, 0x00	; 0
    3618:	30 e0       	ldi	r19, 0x00	; 0
    361a:	4a e7       	ldi	r20, 0x7A	; 122
    361c:	55 e4       	ldi	r21, 0x45	; 69
    361e:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    3622:	dc 01       	movw	r26, r24
    3624:	cb 01       	movw	r24, r22
    3626:	f8 01       	movw	r30, r16
    3628:	80 83       	st	Z, r24
    362a:	91 83       	std	Z+1, r25	; 0x01
    362c:	a2 83       	std	Z+2, r26	; 0x02
    362e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3630:	fe 01       	movw	r30, r28
    3632:	ed 56       	subi	r30, 0x6D	; 109
    3634:	ff 4f       	sbci	r31, 0xFF	; 255
    3636:	60 81       	ld	r22, Z
    3638:	71 81       	ldd	r23, Z+1	; 0x01
    363a:	82 81       	ldd	r24, Z+2	; 0x02
    363c:	93 81       	ldd	r25, Z+3	; 0x03
    363e:	20 e0       	ldi	r18, 0x00	; 0
    3640:	30 e0       	ldi	r19, 0x00	; 0
    3642:	40 e8       	ldi	r20, 0x80	; 128
    3644:	5f e3       	ldi	r21, 0x3F	; 63
    3646:	0e 94 2b 04 	call	0x856	; 0x856 <__ltsf2>
    364a:	88 23       	and	r24, r24
    364c:	44 f4       	brge	.+16     	; 0x365e <main+0xe4e>
		__ticks = 1;
    364e:	fe 01       	movw	r30, r28
    3650:	ef 56       	subi	r30, 0x6F	; 111
    3652:	ff 4f       	sbci	r31, 0xFF	; 255
    3654:	81 e0       	ldi	r24, 0x01	; 1
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	91 83       	std	Z+1, r25	; 0x01
    365a:	80 83       	st	Z, r24
    365c:	64 c0       	rjmp	.+200    	; 0x3726 <main+0xf16>
	else if (__tmp > 65535)
    365e:	fe 01       	movw	r30, r28
    3660:	ed 56       	subi	r30, 0x6D	; 109
    3662:	ff 4f       	sbci	r31, 0xFF	; 255
    3664:	60 81       	ld	r22, Z
    3666:	71 81       	ldd	r23, Z+1	; 0x01
    3668:	82 81       	ldd	r24, Z+2	; 0x02
    366a:	93 81       	ldd	r25, Z+3	; 0x03
    366c:	20 e0       	ldi	r18, 0x00	; 0
    366e:	3f ef       	ldi	r19, 0xFF	; 255
    3670:	4f e7       	ldi	r20, 0x7F	; 127
    3672:	57 e4       	ldi	r21, 0x47	; 71
    3674:	0e 94 cb 03 	call	0x796	; 0x796 <__gtsf2>
    3678:	18 16       	cp	r1, r24
    367a:	0c f0       	brlt	.+2      	; 0x367e <main+0xe6e>
    367c:	43 c0       	rjmp	.+134    	; 0x3704 <main+0xef4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    367e:	fe 01       	movw	r30, r28
    3680:	e9 56       	subi	r30, 0x69	; 105
    3682:	ff 4f       	sbci	r31, 0xFF	; 255
    3684:	60 81       	ld	r22, Z
    3686:	71 81       	ldd	r23, Z+1	; 0x01
    3688:	82 81       	ldd	r24, Z+2	; 0x02
    368a:	93 81       	ldd	r25, Z+3	; 0x03
    368c:	20 e0       	ldi	r18, 0x00	; 0
    368e:	30 e0       	ldi	r19, 0x00	; 0
    3690:	40 e2       	ldi	r20, 0x20	; 32
    3692:	51 e4       	ldi	r21, 0x41	; 65
    3694:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    3698:	dc 01       	movw	r26, r24
    369a:	cb 01       	movw	r24, r22
    369c:	8e 01       	movw	r16, r28
    369e:	0f 56       	subi	r16, 0x6F	; 111
    36a0:	1f 4f       	sbci	r17, 0xFF	; 255
    36a2:	bc 01       	movw	r22, r24
    36a4:	cd 01       	movw	r24, r26
    36a6:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    36aa:	dc 01       	movw	r26, r24
    36ac:	cb 01       	movw	r24, r22
    36ae:	f8 01       	movw	r30, r16
    36b0:	91 83       	std	Z+1, r25	; 0x01
    36b2:	80 83       	st	Z, r24
    36b4:	1f c0       	rjmp	.+62     	; 0x36f4 <main+0xee4>
    36b6:	fe 01       	movw	r30, r28
    36b8:	e1 57       	subi	r30, 0x71	; 113
    36ba:	ff 4f       	sbci	r31, 0xFF	; 255
    36bc:	80 e9       	ldi	r24, 0x90	; 144
    36be:	91 e0       	ldi	r25, 0x01	; 1
    36c0:	91 83       	std	Z+1, r25	; 0x01
    36c2:	80 83       	st	Z, r24
    36c4:	fe 01       	movw	r30, r28
    36c6:	e1 57       	subi	r30, 0x71	; 113
    36c8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ca:	80 81       	ld	r24, Z
    36cc:	91 81       	ldd	r25, Z+1	; 0x01
    36ce:	01 97       	sbiw	r24, 0x01	; 1
    36d0:	f1 f7       	brne	.-4      	; 0x36ce <main+0xebe>
    36d2:	fe 01       	movw	r30, r28
    36d4:	e1 57       	subi	r30, 0x71	; 113
    36d6:	ff 4f       	sbci	r31, 0xFF	; 255
    36d8:	91 83       	std	Z+1, r25	; 0x01
    36da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36dc:	de 01       	movw	r26, r28
    36de:	af 56       	subi	r26, 0x6F	; 111
    36e0:	bf 4f       	sbci	r27, 0xFF	; 255
    36e2:	fe 01       	movw	r30, r28
    36e4:	ef 56       	subi	r30, 0x6F	; 111
    36e6:	ff 4f       	sbci	r31, 0xFF	; 255
    36e8:	80 81       	ld	r24, Z
    36ea:	91 81       	ldd	r25, Z+1	; 0x01
    36ec:	01 97       	sbiw	r24, 0x01	; 1
    36ee:	11 96       	adiw	r26, 0x01	; 1
    36f0:	9c 93       	st	X, r25
    36f2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36f4:	fe 01       	movw	r30, r28
    36f6:	ef 56       	subi	r30, 0x6F	; 111
    36f8:	ff 4f       	sbci	r31, 0xFF	; 255
    36fa:	80 81       	ld	r24, Z
    36fc:	91 81       	ldd	r25, Z+1	; 0x01
    36fe:	00 97       	sbiw	r24, 0x00	; 0
    3700:	d1 f6       	brne	.-76     	; 0x36b6 <main+0xea6>
    3702:	2f c0       	rjmp	.+94     	; 0x3762 <main+0xf52>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3704:	8e 01       	movw	r16, r28
    3706:	0f 56       	subi	r16, 0x6F	; 111
    3708:	1f 4f       	sbci	r17, 0xFF	; 255
    370a:	fe 01       	movw	r30, r28
    370c:	ed 56       	subi	r30, 0x6D	; 109
    370e:	ff 4f       	sbci	r31, 0xFF	; 255
    3710:	60 81       	ld	r22, Z
    3712:	71 81       	ldd	r23, Z+1	; 0x01
    3714:	82 81       	ldd	r24, Z+2	; 0x02
    3716:	93 81       	ldd	r25, Z+3	; 0x03
    3718:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    371c:	dc 01       	movw	r26, r24
    371e:	cb 01       	movw	r24, r22
    3720:	f8 01       	movw	r30, r16
    3722:	91 83       	std	Z+1, r25	; 0x01
    3724:	80 83       	st	Z, r24
    3726:	de 01       	movw	r26, r28
    3728:	a3 57       	subi	r26, 0x73	; 115
    372a:	bf 4f       	sbci	r27, 0xFF	; 255
    372c:	fe 01       	movw	r30, r28
    372e:	ef 56       	subi	r30, 0x6F	; 111
    3730:	ff 4f       	sbci	r31, 0xFF	; 255
    3732:	80 81       	ld	r24, Z
    3734:	91 81       	ldd	r25, Z+1	; 0x01
    3736:	11 96       	adiw	r26, 0x01	; 1
    3738:	9c 93       	st	X, r25
    373a:	8e 93       	st	-X, r24
    373c:	fe 01       	movw	r30, r28
    373e:	e3 57       	subi	r30, 0x73	; 115
    3740:	ff 4f       	sbci	r31, 0xFF	; 255
    3742:	80 81       	ld	r24, Z
    3744:	91 81       	ldd	r25, Z+1	; 0x01
    3746:	01 97       	sbiw	r24, 0x01	; 1
    3748:	f1 f7       	brne	.-4      	; 0x3746 <main+0xf36>
    374a:	fe 01       	movw	r30, r28
    374c:	e3 57       	subi	r30, 0x73	; 115
    374e:	ff 4f       	sbci	r31, 0xFF	; 255
    3750:	91 83       	std	Z+1, r25	; 0x01
    3752:	80 83       	st	Z, r24
    3754:	06 c0       	rjmp	.+12     	; 0x3762 <main+0xf52>
                        _delay_ms(250); // Debounce delay
                    } else if (key == '=') {
    3756:	fe 01       	movw	r30, r28
    3758:	e0 5f       	subi	r30, 0xF0	; 240
    375a:	fe 4f       	sbci	r31, 0xFE	; 254
    375c:	80 81       	ld	r24, Z
    375e:	8d 33       	cpi	r24, 0x3D	; 61
    3760:	29 f0       	breq	.+10     	; 0x376c <main+0xf5c>
                LCD_Clear(); // Clear Display command

                LCD_WriteString("Enter num2:", LCD_ROW_1, 0);
                LCD_GoToPos(LCD_ROW_2, 0);
                num2 = 0;
                while (1 && currentMode == CALCULATOR) {
    3762:	80 91 37 02 	lds	r24, 0x0237
    3766:	88 23       	and	r24, r24
    3768:	09 f4       	brne	.+2      	; 0x376c <main+0xf5c>
    376a:	ff ce       	rjmp	.-514    	; 0x356a <main+0xd5a>
                    } else if (key == '=') {
                        break;
                    }
                }

                switch (op) {
    376c:	fe 01       	movw	r30, r28
    376e:	e3 50       	subi	r30, 0x03	; 3
    3770:	ff 4f       	sbci	r31, 0xFF	; 255
    3772:	80 81       	ld	r24, Z
    3774:	e8 2e       	mov	r14, r24
    3776:	ff 24       	eor	r15, r15
    3778:	c9 59       	subi	r28, 0x99	; 153
    377a:	de 4f       	sbci	r29, 0xFE	; 254
    377c:	f9 82       	std	Y+1, r15	; 0x01
    377e:	e8 82       	st	Y, r14
    3780:	c7 56       	subi	r28, 0x67	; 103
    3782:	d1 40       	sbci	r29, 0x01	; 1
    3784:	c9 59       	subi	r28, 0x99	; 153
    3786:	de 4f       	sbci	r29, 0xFE	; 254
    3788:	08 81       	ld	r16, Y
    378a:	19 81       	ldd	r17, Y+1	; 0x01
    378c:	c7 56       	subi	r28, 0x67	; 103
    378e:	d1 40       	sbci	r29, 0x01	; 1
    3790:	0b 32       	cpi	r16, 0x2B	; 43
    3792:	11 05       	cpc	r17, r1
    3794:	41 f1       	breq	.+80     	; 0x37e6 <main+0xfd6>
    3796:	c9 59       	subi	r28, 0x99	; 153
    3798:	de 4f       	sbci	r29, 0xFE	; 254
    379a:	28 81       	ld	r18, Y
    379c:	39 81       	ldd	r19, Y+1	; 0x01
    379e:	c7 56       	subi	r28, 0x67	; 103
    37a0:	d1 40       	sbci	r29, 0x01	; 1
    37a2:	2c 32       	cpi	r18, 0x2C	; 44
    37a4:	31 05       	cpc	r19, r1
    37a6:	5c f4       	brge	.+22     	; 0x37be <main+0xfae>
    37a8:	c9 59       	subi	r28, 0x99	; 153
    37aa:	de 4f       	sbci	r29, 0xFE	; 254
    37ac:	88 81       	ld	r24, Y
    37ae:	99 81       	ldd	r25, Y+1	; 0x01
    37b0:	c7 56       	subi	r28, 0x67	; 103
    37b2:	d1 40       	sbci	r29, 0x01	; 1
    37b4:	8a 32       	cpi	r24, 0x2A	; 42
    37b6:	91 05       	cpc	r25, r1
    37b8:	09 f4       	brne	.+2      	; 0x37bc <main+0xfac>
    37ba:	51 c0       	rjmp	.+162    	; 0x385e <main+0x104e>
    37bc:	7b c9       	rjmp	.-3338   	; 0x2ab4 <main+0x2a4>
    37be:	c9 59       	subi	r28, 0x99	; 153
    37c0:	de 4f       	sbci	r29, 0xFE	; 254
    37c2:	e8 81       	ld	r30, Y
    37c4:	f9 81       	ldd	r31, Y+1	; 0x01
    37c6:	c7 56       	subi	r28, 0x67	; 103
    37c8:	d1 40       	sbci	r29, 0x01	; 1
    37ca:	ed 32       	cpi	r30, 0x2D	; 45
    37cc:	f1 05       	cpc	r31, r1
    37ce:	39 f1       	breq	.+78     	; 0x381e <main+0x100e>
    37d0:	c9 59       	subi	r28, 0x99	; 153
    37d2:	de 4f       	sbci	r29, 0xFE	; 254
    37d4:	08 81       	ld	r16, Y
    37d6:	19 81       	ldd	r17, Y+1	; 0x01
    37d8:	c7 56       	subi	r28, 0x67	; 103
    37da:	d1 40       	sbci	r29, 0x01	; 1
    37dc:	0f 32       	cpi	r16, 0x2F	; 47
    37de:	11 05       	cpc	r17, r1
    37e0:	09 f4       	brne	.+2      	; 0x37e4 <main+0xfd4>
    37e2:	5b c0       	rjmp	.+182    	; 0x389a <main+0x108a>
    37e4:	67 c9       	rjmp	.-3378   	; 0x2ab4 <main+0x2a4>
                    case '+':
                        result = num1 + num2;
    37e6:	be 01       	movw	r22, r28
    37e8:	6c 5f       	subi	r22, 0xFC	; 252
    37ea:	7e 4f       	sbci	r23, 0xFE	; 254
    37ec:	fe 01       	movw	r30, r28
    37ee:	e4 5f       	subi	r30, 0xF4	; 244
    37f0:	fe 4f       	sbci	r31, 0xFE	; 254
    37f2:	de 01       	movw	r26, r28
    37f4:	a8 5f       	subi	r26, 0xF8	; 248
    37f6:	be 4f       	sbci	r27, 0xFE	; 254
    37f8:	20 81       	ld	r18, Z
    37fa:	31 81       	ldd	r19, Z+1	; 0x01
    37fc:	42 81       	ldd	r20, Z+2	; 0x02
    37fe:	53 81       	ldd	r21, Z+3	; 0x03
    3800:	8d 91       	ld	r24, X+
    3802:	9d 91       	ld	r25, X+
    3804:	0d 90       	ld	r0, X+
    3806:	bc 91       	ld	r27, X
    3808:	a0 2d       	mov	r26, r0
    380a:	82 0f       	add	r24, r18
    380c:	93 1f       	adc	r25, r19
    380e:	a4 1f       	adc	r26, r20
    3810:	b5 1f       	adc	r27, r21
    3812:	fb 01       	movw	r30, r22
    3814:	80 83       	st	Z, r24
    3816:	91 83       	std	Z+1, r25	; 0x01
    3818:	a2 83       	std	Z+2, r26	; 0x02
    381a:	b3 83       	std	Z+3, r27	; 0x03
    381c:	2e c1       	rjmp	.+604    	; 0x3a7a <main+0x126a>
                        break;
                    case '-':
                        result = num1 - num2;
    381e:	be 01       	movw	r22, r28
    3820:	6c 5f       	subi	r22, 0xFC	; 252
    3822:	7e 4f       	sbci	r23, 0xFE	; 254
    3824:	fe 01       	movw	r30, r28
    3826:	e4 5f       	subi	r30, 0xF4	; 244
    3828:	fe 4f       	sbci	r31, 0xFE	; 254
    382a:	de 01       	movw	r26, r28
    382c:	a8 5f       	subi	r26, 0xF8	; 248
    382e:	be 4f       	sbci	r27, 0xFE	; 254
    3830:	20 81       	ld	r18, Z
    3832:	31 81       	ldd	r19, Z+1	; 0x01
    3834:	42 81       	ldd	r20, Z+2	; 0x02
    3836:	53 81       	ldd	r21, Z+3	; 0x03
    3838:	8d 91       	ld	r24, X+
    383a:	9d 91       	ld	r25, X+
    383c:	0d 90       	ld	r0, X+
    383e:	bc 91       	ld	r27, X
    3840:	a0 2d       	mov	r26, r0
    3842:	79 01       	movw	r14, r18
    3844:	8a 01       	movw	r16, r20
    3846:	e8 1a       	sub	r14, r24
    3848:	f9 0a       	sbc	r15, r25
    384a:	0a 0b       	sbc	r16, r26
    384c:	1b 0b       	sbc	r17, r27
    384e:	d8 01       	movw	r26, r16
    3850:	c7 01       	movw	r24, r14
    3852:	fb 01       	movw	r30, r22
    3854:	80 83       	st	Z, r24
    3856:	91 83       	std	Z+1, r25	; 0x01
    3858:	a2 83       	std	Z+2, r26	; 0x02
    385a:	b3 83       	std	Z+3, r27	; 0x03
    385c:	0e c1       	rjmp	.+540    	; 0x3a7a <main+0x126a>
                        break;
                    case '*':
                        result = num1 * num2;
    385e:	8e 01       	movw	r16, r28
    3860:	0c 5f       	subi	r16, 0xFC	; 252
    3862:	1e 4f       	sbci	r17, 0xFE	; 254
    3864:	fe 01       	movw	r30, r28
    3866:	e4 5f       	subi	r30, 0xF4	; 244
    3868:	fe 4f       	sbci	r31, 0xFE	; 254
    386a:	9e 01       	movw	r18, r28
    386c:	28 5f       	subi	r18, 0xF8	; 248
    386e:	3e 4f       	sbci	r19, 0xFE	; 254
    3870:	80 81       	ld	r24, Z
    3872:	91 81       	ldd	r25, Z+1	; 0x01
    3874:	a2 81       	ldd	r26, Z+2	; 0x02
    3876:	b3 81       	ldd	r27, Z+3	; 0x03
    3878:	f9 01       	movw	r30, r18
    387a:	20 81       	ld	r18, Z
    387c:	31 81       	ldd	r19, Z+1	; 0x01
    387e:	42 81       	ldd	r20, Z+2	; 0x02
    3880:	53 81       	ldd	r21, Z+3	; 0x03
    3882:	bc 01       	movw	r22, r24
    3884:	cd 01       	movw	r24, r26
    3886:	0e 94 77 24 	call	0x48ee	; 0x48ee <__mulsi3>
    388a:	dc 01       	movw	r26, r24
    388c:	cb 01       	movw	r24, r22
    388e:	f8 01       	movw	r30, r16
    3890:	80 83       	st	Z, r24
    3892:	91 83       	std	Z+1, r25	; 0x01
    3894:	a2 83       	std	Z+2, r26	; 0x02
    3896:	b3 83       	std	Z+3, r27	; 0x03
    3898:	f0 c0       	rjmp	.+480    	; 0x3a7a <main+0x126a>
                        break;
                    case '/':
                        if (num2 == 0) {
    389a:	fe 01       	movw	r30, r28
    389c:	e8 5f       	subi	r30, 0xF8	; 248
    389e:	fe 4f       	sbci	r31, 0xFE	; 254
    38a0:	80 81       	ld	r24, Z
    38a2:	91 81       	ldd	r25, Z+1	; 0x01
    38a4:	a2 81       	ldd	r26, Z+2	; 0x02
    38a6:	b3 81       	ldd	r27, Z+3	; 0x03
    38a8:	00 97       	sbiw	r24, 0x00	; 0
    38aa:	a1 05       	cpc	r26, r1
    38ac:	b1 05       	cpc	r27, r1
    38ae:	09 f0       	breq	.+2      	; 0x38b2 <main+0x10a2>
    38b0:	bd c0       	rjmp	.+378    	; 0x3a2c <main+0x121c>
                            LCD_Clear();
    38b2:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_Clear>
                            LCD_WriteString("Math Error", LCD_ROW_1, 0);
    38b6:	82 ed       	ldi	r24, 0xD2	; 210
    38b8:	90 e0       	ldi	r25, 0x00	; 0
    38ba:	60 e0       	ldi	r22, 0x00	; 0
    38bc:	40 e0       	ldi	r20, 0x00	; 0
    38be:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_WriteString>
    38c2:	fe 01       	movw	r30, r28
    38c4:	e7 57       	subi	r30, 0x77	; 119
    38c6:	ff 4f       	sbci	r31, 0xFF	; 255
    38c8:	80 e0       	ldi	r24, 0x00	; 0
    38ca:	90 e0       	ldi	r25, 0x00	; 0
    38cc:	aa ef       	ldi	r26, 0xFA	; 250
    38ce:	b4 e4       	ldi	r27, 0x44	; 68
    38d0:	80 83       	st	Z, r24
    38d2:	91 83       	std	Z+1, r25	; 0x01
    38d4:	a2 83       	std	Z+2, r26	; 0x02
    38d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38d8:	8e 01       	movw	r16, r28
    38da:	0b 57       	subi	r16, 0x7B	; 123
    38dc:	1f 4f       	sbci	r17, 0xFF	; 255
    38de:	fe 01       	movw	r30, r28
    38e0:	e7 57       	subi	r30, 0x77	; 119
    38e2:	ff 4f       	sbci	r31, 0xFF	; 255
    38e4:	60 81       	ld	r22, Z
    38e6:	71 81       	ldd	r23, Z+1	; 0x01
    38e8:	82 81       	ldd	r24, Z+2	; 0x02
    38ea:	93 81       	ldd	r25, Z+3	; 0x03
    38ec:	20 e0       	ldi	r18, 0x00	; 0
    38ee:	30 e0       	ldi	r19, 0x00	; 0
    38f0:	4a e7       	ldi	r20, 0x7A	; 122
    38f2:	55 e4       	ldi	r21, 0x45	; 69
    38f4:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    38f8:	dc 01       	movw	r26, r24
    38fa:	cb 01       	movw	r24, r22
    38fc:	f8 01       	movw	r30, r16
    38fe:	80 83       	st	Z, r24
    3900:	91 83       	std	Z+1, r25	; 0x01
    3902:	a2 83       	std	Z+2, r26	; 0x02
    3904:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3906:	fe 01       	movw	r30, r28
    3908:	eb 57       	subi	r30, 0x7B	; 123
    390a:	ff 4f       	sbci	r31, 0xFF	; 255
    390c:	60 81       	ld	r22, Z
    390e:	71 81       	ldd	r23, Z+1	; 0x01
    3910:	82 81       	ldd	r24, Z+2	; 0x02
    3912:	93 81       	ldd	r25, Z+3	; 0x03
    3914:	20 e0       	ldi	r18, 0x00	; 0
    3916:	30 e0       	ldi	r19, 0x00	; 0
    3918:	40 e8       	ldi	r20, 0x80	; 128
    391a:	5f e3       	ldi	r21, 0x3F	; 63
    391c:	0e 94 2b 04 	call	0x856	; 0x856 <__ltsf2>
    3920:	88 23       	and	r24, r24
    3922:	44 f4       	brge	.+16     	; 0x3934 <main+0x1124>
		__ticks = 1;
    3924:	fe 01       	movw	r30, r28
    3926:	ed 57       	subi	r30, 0x7D	; 125
    3928:	ff 4f       	sbci	r31, 0xFF	; 255
    392a:	81 e0       	ldi	r24, 0x01	; 1
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	91 83       	std	Z+1, r25	; 0x01
    3930:	80 83       	st	Z, r24
    3932:	64 c0       	rjmp	.+200    	; 0x39fc <main+0x11ec>
	else if (__tmp > 65535)
    3934:	fe 01       	movw	r30, r28
    3936:	eb 57       	subi	r30, 0x7B	; 123
    3938:	ff 4f       	sbci	r31, 0xFF	; 255
    393a:	60 81       	ld	r22, Z
    393c:	71 81       	ldd	r23, Z+1	; 0x01
    393e:	82 81       	ldd	r24, Z+2	; 0x02
    3940:	93 81       	ldd	r25, Z+3	; 0x03
    3942:	20 e0       	ldi	r18, 0x00	; 0
    3944:	3f ef       	ldi	r19, 0xFF	; 255
    3946:	4f e7       	ldi	r20, 0x7F	; 127
    3948:	57 e4       	ldi	r21, 0x47	; 71
    394a:	0e 94 cb 03 	call	0x796	; 0x796 <__gtsf2>
    394e:	18 16       	cp	r1, r24
    3950:	0c f0       	brlt	.+2      	; 0x3954 <main+0x1144>
    3952:	43 c0       	rjmp	.+134    	; 0x39da <main+0x11ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3954:	fe 01       	movw	r30, r28
    3956:	e7 57       	subi	r30, 0x77	; 119
    3958:	ff 4f       	sbci	r31, 0xFF	; 255
    395a:	60 81       	ld	r22, Z
    395c:	71 81       	ldd	r23, Z+1	; 0x01
    395e:	82 81       	ldd	r24, Z+2	; 0x02
    3960:	93 81       	ldd	r25, Z+3	; 0x03
    3962:	20 e0       	ldi	r18, 0x00	; 0
    3964:	30 e0       	ldi	r19, 0x00	; 0
    3966:	40 e2       	ldi	r20, 0x20	; 32
    3968:	51 e4       	ldi	r21, 0x41	; 65
    396a:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    396e:	dc 01       	movw	r26, r24
    3970:	cb 01       	movw	r24, r22
    3972:	8e 01       	movw	r16, r28
    3974:	0d 57       	subi	r16, 0x7D	; 125
    3976:	1f 4f       	sbci	r17, 0xFF	; 255
    3978:	bc 01       	movw	r22, r24
    397a:	cd 01       	movw	r24, r26
    397c:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    3980:	dc 01       	movw	r26, r24
    3982:	cb 01       	movw	r24, r22
    3984:	f8 01       	movw	r30, r16
    3986:	91 83       	std	Z+1, r25	; 0x01
    3988:	80 83       	st	Z, r24
    398a:	1f c0       	rjmp	.+62     	; 0x39ca <main+0x11ba>
    398c:	fe 01       	movw	r30, r28
    398e:	ef 57       	subi	r30, 0x7F	; 127
    3990:	ff 4f       	sbci	r31, 0xFF	; 255
    3992:	80 e9       	ldi	r24, 0x90	; 144
    3994:	91 e0       	ldi	r25, 0x01	; 1
    3996:	91 83       	std	Z+1, r25	; 0x01
    3998:	80 83       	st	Z, r24
    399a:	fe 01       	movw	r30, r28
    399c:	ef 57       	subi	r30, 0x7F	; 127
    399e:	ff 4f       	sbci	r31, 0xFF	; 255
    39a0:	80 81       	ld	r24, Z
    39a2:	91 81       	ldd	r25, Z+1	; 0x01
    39a4:	01 97       	sbiw	r24, 0x01	; 1
    39a6:	f1 f7       	brne	.-4      	; 0x39a4 <main+0x1194>
    39a8:	fe 01       	movw	r30, r28
    39aa:	ef 57       	subi	r30, 0x7F	; 127
    39ac:	ff 4f       	sbci	r31, 0xFF	; 255
    39ae:	91 83       	std	Z+1, r25	; 0x01
    39b0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39b2:	de 01       	movw	r26, r28
    39b4:	ad 57       	subi	r26, 0x7D	; 125
    39b6:	bf 4f       	sbci	r27, 0xFF	; 255
    39b8:	fe 01       	movw	r30, r28
    39ba:	ed 57       	subi	r30, 0x7D	; 125
    39bc:	ff 4f       	sbci	r31, 0xFF	; 255
    39be:	80 81       	ld	r24, Z
    39c0:	91 81       	ldd	r25, Z+1	; 0x01
    39c2:	01 97       	sbiw	r24, 0x01	; 1
    39c4:	11 96       	adiw	r26, 0x01	; 1
    39c6:	9c 93       	st	X, r25
    39c8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39ca:	fe 01       	movw	r30, r28
    39cc:	ed 57       	subi	r30, 0x7D	; 125
    39ce:	ff 4f       	sbci	r31, 0xFF	; 255
    39d0:	80 81       	ld	r24, Z
    39d2:	91 81       	ldd	r25, Z+1	; 0x01
    39d4:	00 97       	sbiw	r24, 0x00	; 0
    39d6:	d1 f6       	brne	.-76     	; 0x398c <main+0x117c>
    39d8:	6d c8       	rjmp	.-3878   	; 0x2ab4 <main+0x2a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39da:	8e 01       	movw	r16, r28
    39dc:	0d 57       	subi	r16, 0x7D	; 125
    39de:	1f 4f       	sbci	r17, 0xFF	; 255
    39e0:	fe 01       	movw	r30, r28
    39e2:	eb 57       	subi	r30, 0x7B	; 123
    39e4:	ff 4f       	sbci	r31, 0xFF	; 255
    39e6:	60 81       	ld	r22, Z
    39e8:	71 81       	ldd	r23, Z+1	; 0x01
    39ea:	82 81       	ldd	r24, Z+2	; 0x02
    39ec:	93 81       	ldd	r25, Z+3	; 0x03
    39ee:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    39f2:	dc 01       	movw	r26, r24
    39f4:	cb 01       	movw	r24, r22
    39f6:	f8 01       	movw	r30, r16
    39f8:	91 83       	std	Z+1, r25	; 0x01
    39fa:	80 83       	st	Z, r24
    39fc:	de 01       	movw	r26, r28
    39fe:	a1 58       	subi	r26, 0x81	; 129
    3a00:	bf 4f       	sbci	r27, 0xFF	; 255
    3a02:	fe 01       	movw	r30, r28
    3a04:	ed 57       	subi	r30, 0x7D	; 125
    3a06:	ff 4f       	sbci	r31, 0xFF	; 255
    3a08:	80 81       	ld	r24, Z
    3a0a:	91 81       	ldd	r25, Z+1	; 0x01
    3a0c:	11 96       	adiw	r26, 0x01	; 1
    3a0e:	9c 93       	st	X, r25
    3a10:	8e 93       	st	-X, r24
    3a12:	fe 01       	movw	r30, r28
    3a14:	e1 58       	subi	r30, 0x81	; 129
    3a16:	ff 4f       	sbci	r31, 0xFF	; 255
    3a18:	80 81       	ld	r24, Z
    3a1a:	91 81       	ldd	r25, Z+1	; 0x01
    3a1c:	01 97       	sbiw	r24, 0x01	; 1
    3a1e:	f1 f7       	brne	.-4      	; 0x3a1c <main+0x120c>
    3a20:	fe 01       	movw	r30, r28
    3a22:	e1 58       	subi	r30, 0x81	; 129
    3a24:	ff 4f       	sbci	r31, 0xFF	; 255
    3a26:	91 83       	std	Z+1, r25	; 0x01
    3a28:	80 83       	st	Z, r24
    3a2a:	44 c8       	rjmp	.-3960   	; 0x2ab4 <main+0x2a4>
                            _delay_ms(2000); // Display error for a period
                            continue; // Exit this case
                        }

                        result1 = (float)num1 / (float)num2;
    3a2c:	fe 01       	movw	r30, r28
    3a2e:	e4 5f       	subi	r30, 0xF4	; 244
    3a30:	fe 4f       	sbci	r31, 0xFE	; 254
    3a32:	60 81       	ld	r22, Z
    3a34:	71 81       	ldd	r23, Z+1	; 0x01
    3a36:	82 81       	ldd	r24, Z+2	; 0x02
    3a38:	93 81       	ldd	r25, Z+3	; 0x03
    3a3a:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatsisf>
    3a3e:	7b 01       	movw	r14, r22
    3a40:	8c 01       	movw	r16, r24
    3a42:	fe 01       	movw	r30, r28
    3a44:	e8 5f       	subi	r30, 0xF8	; 248
    3a46:	fe 4f       	sbci	r31, 0xFE	; 254
    3a48:	60 81       	ld	r22, Z
    3a4a:	71 81       	ldd	r23, Z+1	; 0x01
    3a4c:	82 81       	ldd	r24, Z+2	; 0x02
    3a4e:	93 81       	ldd	r25, Z+3	; 0x03
    3a50:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatsisf>
    3a54:	9b 01       	movw	r18, r22
    3a56:	ac 01       	movw	r20, r24
    3a58:	cc 24       	eor	r12, r12
    3a5a:	dd 24       	eor	r13, r13
    3a5c:	68 94       	set
    3a5e:	d0 f8       	bld	r13, 0
    3a60:	cc 0e       	add	r12, r28
    3a62:	dd 1e       	adc	r13, r29
    3a64:	c8 01       	movw	r24, r16
    3a66:	b7 01       	movw	r22, r14
    3a68:	0e 94 1f 03 	call	0x63e	; 0x63e <__divsf3>
    3a6c:	dc 01       	movw	r26, r24
    3a6e:	cb 01       	movw	r24, r22
    3a70:	f6 01       	movw	r30, r12
    3a72:	80 83       	st	Z, r24
    3a74:	91 83       	std	Z+1, r25	; 0x01
    3a76:	a2 83       	std	Z+2, r26	; 0x02
    3a78:	b3 83       	std	Z+3, r27	; 0x03
                        break;
                    default:

                        continue;
                }
                if(op=='/')
    3a7a:	fe 01       	movw	r30, r28
    3a7c:	e3 50       	subi	r30, 0x03	; 3
    3a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a80:	80 81       	ld	r24, Z
    3a82:	8f 32       	cpi	r24, 0x2F	; 47
    3a84:	09 f0       	breq	.+2      	; 0x3a88 <main+0x1278>
    3a86:	cd c0       	rjmp	.+410    	; 0x3c22 <main+0x1412>
                {
                	floatToString(result1Str, result1);
    3a88:	ce 01       	movw	r24, r28
    3a8a:	8f 5c       	subi	r24, 0xCF	; 207
    3a8c:	9e 4f       	sbci	r25, 0xFE	; 254
    3a8e:	fe 01       	movw	r30, r28
    3a90:	e0 50       	subi	r30, 0x00	; 0
    3a92:	ff 4f       	sbci	r31, 0xFF	; 255
    3a94:	20 81       	ld	r18, Z
    3a96:	31 81       	ldd	r19, Z+1	; 0x01
    3a98:	42 81       	ldd	r20, Z+2	; 0x02
    3a9a:	53 81       	ldd	r21, Z+3	; 0x03
    3a9c:	ba 01       	movw	r22, r20
    3a9e:	a9 01       	movw	r20, r18
    3aa0:	0e 94 4d 12 	call	0x249a	; 0x249a <floatToString>
					LCD_Clear();
    3aa4:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_Clear>
					LCD_WriteString(result1Str, LCD_ROW_1, 0);
    3aa8:	ce 01       	movw	r24, r28
    3aaa:	8f 5c       	subi	r24, 0xCF	; 207
    3aac:	9e 4f       	sbci	r25, 0xFE	; 254
    3aae:	60 e0       	ldi	r22, 0x00	; 0
    3ab0:	40 e0       	ldi	r20, 0x00	; 0
    3ab2:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_WriteString>
    3ab6:	fe 01       	movw	r30, r28
    3ab8:	e5 58       	subi	r30, 0x85	; 133
    3aba:	ff 4f       	sbci	r31, 0xFF	; 255
    3abc:	80 e0       	ldi	r24, 0x00	; 0
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	aa ef       	ldi	r26, 0xFA	; 250
    3ac2:	b4 e4       	ldi	r27, 0x44	; 68
    3ac4:	80 83       	st	Z, r24
    3ac6:	91 83       	std	Z+1, r25	; 0x01
    3ac8:	a2 83       	std	Z+2, r26	; 0x02
    3aca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3acc:	8e 01       	movw	r16, r28
    3ace:	09 58       	subi	r16, 0x89	; 137
    3ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ad2:	fe 01       	movw	r30, r28
    3ad4:	e5 58       	subi	r30, 0x85	; 133
    3ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad8:	60 81       	ld	r22, Z
    3ada:	71 81       	ldd	r23, Z+1	; 0x01
    3adc:	82 81       	ldd	r24, Z+2	; 0x02
    3ade:	93 81       	ldd	r25, Z+3	; 0x03
    3ae0:	20 e0       	ldi	r18, 0x00	; 0
    3ae2:	30 e0       	ldi	r19, 0x00	; 0
    3ae4:	4a e7       	ldi	r20, 0x7A	; 122
    3ae6:	55 e4       	ldi	r21, 0x45	; 69
    3ae8:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    3aec:	dc 01       	movw	r26, r24
    3aee:	cb 01       	movw	r24, r22
    3af0:	f8 01       	movw	r30, r16
    3af2:	80 83       	st	Z, r24
    3af4:	91 83       	std	Z+1, r25	; 0x01
    3af6:	a2 83       	std	Z+2, r26	; 0x02
    3af8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3afa:	fe 01       	movw	r30, r28
    3afc:	e9 58       	subi	r30, 0x89	; 137
    3afe:	ff 4f       	sbci	r31, 0xFF	; 255
    3b00:	60 81       	ld	r22, Z
    3b02:	71 81       	ldd	r23, Z+1	; 0x01
    3b04:	82 81       	ldd	r24, Z+2	; 0x02
    3b06:	93 81       	ldd	r25, Z+3	; 0x03
    3b08:	20 e0       	ldi	r18, 0x00	; 0
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	40 e8       	ldi	r20, 0x80	; 128
    3b0e:	5f e3       	ldi	r21, 0x3F	; 63
    3b10:	0e 94 2b 04 	call	0x856	; 0x856 <__ltsf2>
    3b14:	88 23       	and	r24, r24
    3b16:	44 f4       	brge	.+16     	; 0x3b28 <main+0x1318>
		__ticks = 1;
    3b18:	fe 01       	movw	r30, r28
    3b1a:	eb 58       	subi	r30, 0x8B	; 139
    3b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1e:	81 e0       	ldi	r24, 0x01	; 1
    3b20:	90 e0       	ldi	r25, 0x00	; 0
    3b22:	91 83       	std	Z+1, r25	; 0x01
    3b24:	80 83       	st	Z, r24
    3b26:	64 c0       	rjmp	.+200    	; 0x3bf0 <main+0x13e0>
	else if (__tmp > 65535)
    3b28:	fe 01       	movw	r30, r28
    3b2a:	e9 58       	subi	r30, 0x89	; 137
    3b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2e:	60 81       	ld	r22, Z
    3b30:	71 81       	ldd	r23, Z+1	; 0x01
    3b32:	82 81       	ldd	r24, Z+2	; 0x02
    3b34:	93 81       	ldd	r25, Z+3	; 0x03
    3b36:	20 e0       	ldi	r18, 0x00	; 0
    3b38:	3f ef       	ldi	r19, 0xFF	; 255
    3b3a:	4f e7       	ldi	r20, 0x7F	; 127
    3b3c:	57 e4       	ldi	r21, 0x47	; 71
    3b3e:	0e 94 cb 03 	call	0x796	; 0x796 <__gtsf2>
    3b42:	18 16       	cp	r1, r24
    3b44:	0c f0       	brlt	.+2      	; 0x3b48 <main+0x1338>
    3b46:	43 c0       	rjmp	.+134    	; 0x3bce <main+0x13be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b48:	fe 01       	movw	r30, r28
    3b4a:	e5 58       	subi	r30, 0x85	; 133
    3b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4e:	60 81       	ld	r22, Z
    3b50:	71 81       	ldd	r23, Z+1	; 0x01
    3b52:	82 81       	ldd	r24, Z+2	; 0x02
    3b54:	93 81       	ldd	r25, Z+3	; 0x03
    3b56:	20 e0       	ldi	r18, 0x00	; 0
    3b58:	30 e0       	ldi	r19, 0x00	; 0
    3b5a:	40 e2       	ldi	r20, 0x20	; 32
    3b5c:	51 e4       	ldi	r21, 0x41	; 65
    3b5e:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    3b62:	dc 01       	movw	r26, r24
    3b64:	cb 01       	movw	r24, r22
    3b66:	8e 01       	movw	r16, r28
    3b68:	0b 58       	subi	r16, 0x8B	; 139
    3b6a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b6c:	bc 01       	movw	r22, r24
    3b6e:	cd 01       	movw	r24, r26
    3b70:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    3b74:	dc 01       	movw	r26, r24
    3b76:	cb 01       	movw	r24, r22
    3b78:	f8 01       	movw	r30, r16
    3b7a:	91 83       	std	Z+1, r25	; 0x01
    3b7c:	80 83       	st	Z, r24
    3b7e:	1f c0       	rjmp	.+62     	; 0x3bbe <main+0x13ae>
    3b80:	fe 01       	movw	r30, r28
    3b82:	ed 58       	subi	r30, 0x8D	; 141
    3b84:	ff 4f       	sbci	r31, 0xFF	; 255
    3b86:	80 e9       	ldi	r24, 0x90	; 144
    3b88:	91 e0       	ldi	r25, 0x01	; 1
    3b8a:	91 83       	std	Z+1, r25	; 0x01
    3b8c:	80 83       	st	Z, r24
    3b8e:	fe 01       	movw	r30, r28
    3b90:	ed 58       	subi	r30, 0x8D	; 141
    3b92:	ff 4f       	sbci	r31, 0xFF	; 255
    3b94:	80 81       	ld	r24, Z
    3b96:	91 81       	ldd	r25, Z+1	; 0x01
    3b98:	01 97       	sbiw	r24, 0x01	; 1
    3b9a:	f1 f7       	brne	.-4      	; 0x3b98 <main+0x1388>
    3b9c:	fe 01       	movw	r30, r28
    3b9e:	ed 58       	subi	r30, 0x8D	; 141
    3ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba2:	91 83       	std	Z+1, r25	; 0x01
    3ba4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ba6:	de 01       	movw	r26, r28
    3ba8:	ab 58       	subi	r26, 0x8B	; 139
    3baa:	bf 4f       	sbci	r27, 0xFF	; 255
    3bac:	fe 01       	movw	r30, r28
    3bae:	eb 58       	subi	r30, 0x8B	; 139
    3bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb2:	80 81       	ld	r24, Z
    3bb4:	91 81       	ldd	r25, Z+1	; 0x01
    3bb6:	01 97       	sbiw	r24, 0x01	; 1
    3bb8:	11 96       	adiw	r26, 0x01	; 1
    3bba:	9c 93       	st	X, r25
    3bbc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bbe:	fe 01       	movw	r30, r28
    3bc0:	eb 58       	subi	r30, 0x8B	; 139
    3bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc4:	80 81       	ld	r24, Z
    3bc6:	91 81       	ldd	r25, Z+1	; 0x01
    3bc8:	00 97       	sbiw	r24, 0x00	; 0
    3bca:	d1 f6       	brne	.-76     	; 0x3b80 <main+0x1370>
    3bcc:	27 c0       	rjmp	.+78     	; 0x3c1c <main+0x140c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bce:	8e 01       	movw	r16, r28
    3bd0:	0b 58       	subi	r16, 0x8B	; 139
    3bd2:	1f 4f       	sbci	r17, 0xFF	; 255
    3bd4:	fe 01       	movw	r30, r28
    3bd6:	e9 58       	subi	r30, 0x89	; 137
    3bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bda:	60 81       	ld	r22, Z
    3bdc:	71 81       	ldd	r23, Z+1	; 0x01
    3bde:	82 81       	ldd	r24, Z+2	; 0x02
    3be0:	93 81       	ldd	r25, Z+3	; 0x03
    3be2:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    3be6:	dc 01       	movw	r26, r24
    3be8:	cb 01       	movw	r24, r22
    3bea:	f8 01       	movw	r30, r16
    3bec:	91 83       	std	Z+1, r25	; 0x01
    3bee:	80 83       	st	Z, r24
    3bf0:	de 01       	movw	r26, r28
    3bf2:	af 58       	subi	r26, 0x8F	; 143
    3bf4:	bf 4f       	sbci	r27, 0xFF	; 255
    3bf6:	fe 01       	movw	r30, r28
    3bf8:	eb 58       	subi	r30, 0x8B	; 139
    3bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfc:	80 81       	ld	r24, Z
    3bfe:	91 81       	ldd	r25, Z+1	; 0x01
    3c00:	8d 93       	st	X+, r24
    3c02:	9c 93       	st	X, r25
    3c04:	fe 01       	movw	r30, r28
    3c06:	ef 58       	subi	r30, 0x8F	; 143
    3c08:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0a:	80 81       	ld	r24, Z
    3c0c:	91 81       	ldd	r25, Z+1	; 0x01
    3c0e:	01 97       	sbiw	r24, 0x01	; 1
    3c10:	f1 f7       	brne	.-4      	; 0x3c0e <main+0x13fe>
    3c12:	fe 01       	movw	r30, r28
    3c14:	ef 58       	subi	r30, 0x8F	; 143
    3c16:	ff 4f       	sbci	r31, 0xFF	; 255
    3c18:	91 83       	std	Z+1, r25	; 0x01
    3c1a:	80 83       	st	Z, r24
					_delay_ms(2000); // Allow time to read the result
					LCD_Clear();
    3c1c:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_Clear>
    3c20:	f1 c5       	rjmp	.+3042   	; 0x4804 <main+0x1ff4>
					break;
                }
                else{
                intToString(resultStr, result);
    3c22:	ce 01       	movw	r24, r28
    3c24:	8f 5e       	subi	r24, 0xEF	; 239
    3c26:	9e 4f       	sbci	r25, 0xFE	; 254
    3c28:	fe 01       	movw	r30, r28
    3c2a:	ec 5f       	subi	r30, 0xFC	; 252
    3c2c:	fe 4f       	sbci	r31, 0xFE	; 254
    3c2e:	20 81       	ld	r18, Z
    3c30:	31 81       	ldd	r19, Z+1	; 0x01
    3c32:	42 81       	ldd	r20, Z+2	; 0x02
    3c34:	53 81       	ldd	r21, Z+3	; 0x03
    3c36:	ba 01       	movw	r22, r20
    3c38:	a9 01       	movw	r20, r18
    3c3a:	0e 94 d6 12 	call	0x25ac	; 0x25ac <intToString>
                LCD_Clear();
    3c3e:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_Clear>
                LCD_WriteString(resultStr, LCD_ROW_1, 0);
    3c42:	ce 01       	movw	r24, r28
    3c44:	8f 5e       	subi	r24, 0xEF	; 239
    3c46:	9e 4f       	sbci	r25, 0xFE	; 254
    3c48:	60 e0       	ldi	r22, 0x00	; 0
    3c4a:	40 e0       	ldi	r20, 0x00	; 0
    3c4c:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_WriteString>
    3c50:	fe 01       	movw	r30, r28
    3c52:	e3 59       	subi	r30, 0x93	; 147
    3c54:	ff 4f       	sbci	r31, 0xFF	; 255
    3c56:	80 e0       	ldi	r24, 0x00	; 0
    3c58:	90 e0       	ldi	r25, 0x00	; 0
    3c5a:	aa ef       	ldi	r26, 0xFA	; 250
    3c5c:	b4 e4       	ldi	r27, 0x44	; 68
    3c5e:	80 83       	st	Z, r24
    3c60:	91 83       	std	Z+1, r25	; 0x01
    3c62:	a2 83       	std	Z+2, r26	; 0x02
    3c64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c66:	8e 01       	movw	r16, r28
    3c68:	07 59       	subi	r16, 0x97	; 151
    3c6a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c6c:	fe 01       	movw	r30, r28
    3c6e:	e3 59       	subi	r30, 0x93	; 147
    3c70:	ff 4f       	sbci	r31, 0xFF	; 255
    3c72:	60 81       	ld	r22, Z
    3c74:	71 81       	ldd	r23, Z+1	; 0x01
    3c76:	82 81       	ldd	r24, Z+2	; 0x02
    3c78:	93 81       	ldd	r25, Z+3	; 0x03
    3c7a:	20 e0       	ldi	r18, 0x00	; 0
    3c7c:	30 e0       	ldi	r19, 0x00	; 0
    3c7e:	4a e7       	ldi	r20, 0x7A	; 122
    3c80:	55 e4       	ldi	r21, 0x45	; 69
    3c82:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    3c86:	dc 01       	movw	r26, r24
    3c88:	cb 01       	movw	r24, r22
    3c8a:	f8 01       	movw	r30, r16
    3c8c:	80 83       	st	Z, r24
    3c8e:	91 83       	std	Z+1, r25	; 0x01
    3c90:	a2 83       	std	Z+2, r26	; 0x02
    3c92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c94:	fe 01       	movw	r30, r28
    3c96:	e7 59       	subi	r30, 0x97	; 151
    3c98:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9a:	60 81       	ld	r22, Z
    3c9c:	71 81       	ldd	r23, Z+1	; 0x01
    3c9e:	82 81       	ldd	r24, Z+2	; 0x02
    3ca0:	93 81       	ldd	r25, Z+3	; 0x03
    3ca2:	20 e0       	ldi	r18, 0x00	; 0
    3ca4:	30 e0       	ldi	r19, 0x00	; 0
    3ca6:	40 e8       	ldi	r20, 0x80	; 128
    3ca8:	5f e3       	ldi	r21, 0x3F	; 63
    3caa:	0e 94 2b 04 	call	0x856	; 0x856 <__ltsf2>
    3cae:	88 23       	and	r24, r24
    3cb0:	44 f4       	brge	.+16     	; 0x3cc2 <main+0x14b2>
		__ticks = 1;
    3cb2:	fe 01       	movw	r30, r28
    3cb4:	e9 59       	subi	r30, 0x99	; 153
    3cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb8:	81 e0       	ldi	r24, 0x01	; 1
    3cba:	90 e0       	ldi	r25, 0x00	; 0
    3cbc:	91 83       	std	Z+1, r25	; 0x01
    3cbe:	80 83       	st	Z, r24
    3cc0:	64 c0       	rjmp	.+200    	; 0x3d8a <main+0x157a>
	else if (__tmp > 65535)
    3cc2:	fe 01       	movw	r30, r28
    3cc4:	e7 59       	subi	r30, 0x97	; 151
    3cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc8:	60 81       	ld	r22, Z
    3cca:	71 81       	ldd	r23, Z+1	; 0x01
    3ccc:	82 81       	ldd	r24, Z+2	; 0x02
    3cce:	93 81       	ldd	r25, Z+3	; 0x03
    3cd0:	20 e0       	ldi	r18, 0x00	; 0
    3cd2:	3f ef       	ldi	r19, 0xFF	; 255
    3cd4:	4f e7       	ldi	r20, 0x7F	; 127
    3cd6:	57 e4       	ldi	r21, 0x47	; 71
    3cd8:	0e 94 cb 03 	call	0x796	; 0x796 <__gtsf2>
    3cdc:	18 16       	cp	r1, r24
    3cde:	0c f0       	brlt	.+2      	; 0x3ce2 <main+0x14d2>
    3ce0:	43 c0       	rjmp	.+134    	; 0x3d68 <main+0x1558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ce2:	fe 01       	movw	r30, r28
    3ce4:	e3 59       	subi	r30, 0x93	; 147
    3ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce8:	60 81       	ld	r22, Z
    3cea:	71 81       	ldd	r23, Z+1	; 0x01
    3cec:	82 81       	ldd	r24, Z+2	; 0x02
    3cee:	93 81       	ldd	r25, Z+3	; 0x03
    3cf0:	20 e0       	ldi	r18, 0x00	; 0
    3cf2:	30 e0       	ldi	r19, 0x00	; 0
    3cf4:	40 e2       	ldi	r20, 0x20	; 32
    3cf6:	51 e4       	ldi	r21, 0x41	; 65
    3cf8:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    3cfc:	dc 01       	movw	r26, r24
    3cfe:	cb 01       	movw	r24, r22
    3d00:	8e 01       	movw	r16, r28
    3d02:	09 59       	subi	r16, 0x99	; 153
    3d04:	1f 4f       	sbci	r17, 0xFF	; 255
    3d06:	bc 01       	movw	r22, r24
    3d08:	cd 01       	movw	r24, r26
    3d0a:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    3d0e:	dc 01       	movw	r26, r24
    3d10:	cb 01       	movw	r24, r22
    3d12:	f8 01       	movw	r30, r16
    3d14:	91 83       	std	Z+1, r25	; 0x01
    3d16:	80 83       	st	Z, r24
    3d18:	1f c0       	rjmp	.+62     	; 0x3d58 <main+0x1548>
    3d1a:	fe 01       	movw	r30, r28
    3d1c:	eb 59       	subi	r30, 0x9B	; 155
    3d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d20:	80 e9       	ldi	r24, 0x90	; 144
    3d22:	91 e0       	ldi	r25, 0x01	; 1
    3d24:	91 83       	std	Z+1, r25	; 0x01
    3d26:	80 83       	st	Z, r24
    3d28:	fe 01       	movw	r30, r28
    3d2a:	eb 59       	subi	r30, 0x9B	; 155
    3d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2e:	80 81       	ld	r24, Z
    3d30:	91 81       	ldd	r25, Z+1	; 0x01
    3d32:	01 97       	sbiw	r24, 0x01	; 1
    3d34:	f1 f7       	brne	.-4      	; 0x3d32 <main+0x1522>
    3d36:	fe 01       	movw	r30, r28
    3d38:	eb 59       	subi	r30, 0x9B	; 155
    3d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3c:	91 83       	std	Z+1, r25	; 0x01
    3d3e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d40:	de 01       	movw	r26, r28
    3d42:	a9 59       	subi	r26, 0x99	; 153
    3d44:	bf 4f       	sbci	r27, 0xFF	; 255
    3d46:	fe 01       	movw	r30, r28
    3d48:	e9 59       	subi	r30, 0x99	; 153
    3d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4c:	80 81       	ld	r24, Z
    3d4e:	91 81       	ldd	r25, Z+1	; 0x01
    3d50:	01 97       	sbiw	r24, 0x01	; 1
    3d52:	11 96       	adiw	r26, 0x01	; 1
    3d54:	9c 93       	st	X, r25
    3d56:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d58:	fe 01       	movw	r30, r28
    3d5a:	e9 59       	subi	r30, 0x99	; 153
    3d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5e:	80 81       	ld	r24, Z
    3d60:	91 81       	ldd	r25, Z+1	; 0x01
    3d62:	00 97       	sbiw	r24, 0x00	; 0
    3d64:	d1 f6       	brne	.-76     	; 0x3d1a <main+0x150a>
    3d66:	27 c0       	rjmp	.+78     	; 0x3db6 <main+0x15a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d68:	8e 01       	movw	r16, r28
    3d6a:	09 59       	subi	r16, 0x99	; 153
    3d6c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d6e:	fe 01       	movw	r30, r28
    3d70:	e7 59       	subi	r30, 0x97	; 151
    3d72:	ff 4f       	sbci	r31, 0xFF	; 255
    3d74:	60 81       	ld	r22, Z
    3d76:	71 81       	ldd	r23, Z+1	; 0x01
    3d78:	82 81       	ldd	r24, Z+2	; 0x02
    3d7a:	93 81       	ldd	r25, Z+3	; 0x03
    3d7c:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    3d80:	dc 01       	movw	r26, r24
    3d82:	cb 01       	movw	r24, r22
    3d84:	f8 01       	movw	r30, r16
    3d86:	91 83       	std	Z+1, r25	; 0x01
    3d88:	80 83       	st	Z, r24
    3d8a:	de 01       	movw	r26, r28
    3d8c:	ad 59       	subi	r26, 0x9D	; 157
    3d8e:	bf 4f       	sbci	r27, 0xFF	; 255
    3d90:	fe 01       	movw	r30, r28
    3d92:	e9 59       	subi	r30, 0x99	; 153
    3d94:	ff 4f       	sbci	r31, 0xFF	; 255
    3d96:	80 81       	ld	r24, Z
    3d98:	91 81       	ldd	r25, Z+1	; 0x01
    3d9a:	8d 93       	st	X+, r24
    3d9c:	9c 93       	st	X, r25
    3d9e:	fe 01       	movw	r30, r28
    3da0:	ed 59       	subi	r30, 0x9D	; 157
    3da2:	ff 4f       	sbci	r31, 0xFF	; 255
    3da4:	80 81       	ld	r24, Z
    3da6:	91 81       	ldd	r25, Z+1	; 0x01
    3da8:	01 97       	sbiw	r24, 0x01	; 1
    3daa:	f1 f7       	brne	.-4      	; 0x3da8 <main+0x1598>
    3dac:	fe 01       	movw	r30, r28
    3dae:	ed 59       	subi	r30, 0x9D	; 157
    3db0:	ff 4f       	sbci	r31, 0xFF	; 255
    3db2:	91 83       	std	Z+1, r25	; 0x01
    3db4:	80 83       	st	Z, r24
                _delay_ms(2000); // Allow time to read the result
                LCD_Clear();
    3db6:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_Clear>
    3dba:	24 c5       	rjmp	.+2632   	; 0x4804 <main+0x1ff4>
                break;
                }

            case STOPWATCH:
                if (!time_paused) {
    3dbc:	80 91 3f 02 	lds	r24, 0x023F
    3dc0:	88 23       	and	r24, r24
    3dc2:	e1 f5       	brne	.+120    	; 0x3e3c <main+0x162c>
                    seconds++;
    3dc4:	80 91 3d 02 	lds	r24, 0x023D
    3dc8:	90 91 3e 02 	lds	r25, 0x023E
    3dcc:	01 96       	adiw	r24, 0x01	; 1
    3dce:	90 93 3e 02 	sts	0x023E, r25
    3dd2:	80 93 3d 02 	sts	0x023D, r24
                    if (seconds >= 60) {
    3dd6:	80 91 3d 02 	lds	r24, 0x023D
    3dda:	90 91 3e 02 	lds	r25, 0x023E
    3dde:	8c 33       	cpi	r24, 0x3C	; 60
    3de0:	91 05       	cpc	r25, r1
    3de2:	60 f1       	brcs	.+88     	; 0x3e3c <main+0x162c>
                        seconds = 0;
    3de4:	10 92 3e 02 	sts	0x023E, r1
    3de8:	10 92 3d 02 	sts	0x023D, r1
                        minutes++;
    3dec:	80 91 3b 02 	lds	r24, 0x023B
    3df0:	90 91 3c 02 	lds	r25, 0x023C
    3df4:	01 96       	adiw	r24, 0x01	; 1
    3df6:	90 93 3c 02 	sts	0x023C, r25
    3dfa:	80 93 3b 02 	sts	0x023B, r24
                        if (minutes >= 60) {
    3dfe:	80 91 3b 02 	lds	r24, 0x023B
    3e02:	90 91 3c 02 	lds	r25, 0x023C
    3e06:	8c 33       	cpi	r24, 0x3C	; 60
    3e08:	91 05       	cpc	r25, r1
    3e0a:	c0 f0       	brcs	.+48     	; 0x3e3c <main+0x162c>
                            minutes = 0;
    3e0c:	10 92 3c 02 	sts	0x023C, r1
    3e10:	10 92 3b 02 	sts	0x023B, r1
                            hours++;
    3e14:	80 91 39 02 	lds	r24, 0x0239
    3e18:	90 91 3a 02 	lds	r25, 0x023A
    3e1c:	01 96       	adiw	r24, 0x01	; 1
    3e1e:	90 93 3a 02 	sts	0x023A, r25
    3e22:	80 93 39 02 	sts	0x0239, r24
                            if (hours >= 24) {
    3e26:	80 91 39 02 	lds	r24, 0x0239
    3e2a:	90 91 3a 02 	lds	r25, 0x023A
    3e2e:	88 31       	cpi	r24, 0x18	; 24
    3e30:	91 05       	cpc	r25, r1
    3e32:	20 f0       	brcs	.+8      	; 0x3e3c <main+0x162c>
                                hours = 0;
    3e34:	10 92 3a 02 	sts	0x023A, r1
    3e38:	10 92 39 02 	sts	0x0239, r1
                            }
                        }
                    }
                }
                char time_string[16]; // Buffer increased for NULL character
                sprintf(time_string, "%02d:%02d:%02d", hours, minutes, seconds);
    3e3c:	20 91 39 02 	lds	r18, 0x0239
    3e40:	30 91 3a 02 	lds	r19, 0x023A
    3e44:	40 91 3b 02 	lds	r20, 0x023B
    3e48:	50 91 3c 02 	lds	r21, 0x023C
    3e4c:	60 91 3d 02 	lds	r22, 0x023D
    3e50:	70 91 3e 02 	lds	r23, 0x023E
    3e54:	0d b7       	in	r16, 0x3d	; 61
    3e56:	1e b7       	in	r17, 0x3e	; 62
    3e58:	0a 50       	subi	r16, 0x0A	; 10
    3e5a:	10 40       	sbci	r17, 0x00	; 0
    3e5c:	0f b6       	in	r0, 0x3f	; 63
    3e5e:	f8 94       	cli
    3e60:	1e bf       	out	0x3e, r17	; 62
    3e62:	0f be       	out	0x3f, r0	; 63
    3e64:	0d bf       	out	0x3d, r16	; 61
    3e66:	ed b7       	in	r30, 0x3d	; 61
    3e68:	fe b7       	in	r31, 0x3e	; 62
    3e6a:	31 96       	adiw	r30, 0x01	; 1
    3e6c:	ce 01       	movw	r24, r28
    3e6e:	89 5a       	subi	r24, 0xA9	; 169
    3e70:	9e 4f       	sbci	r25, 0xFE	; 254
    3e72:	91 83       	std	Z+1, r25	; 0x01
    3e74:	80 83       	st	Z, r24
    3e76:	8d ed       	ldi	r24, 0xDD	; 221
    3e78:	90 e0       	ldi	r25, 0x00	; 0
    3e7a:	93 83       	std	Z+3, r25	; 0x03
    3e7c:	82 83       	std	Z+2, r24	; 0x02
    3e7e:	35 83       	std	Z+5, r19	; 0x05
    3e80:	24 83       	std	Z+4, r18	; 0x04
    3e82:	57 83       	std	Z+7, r21	; 0x07
    3e84:	46 83       	std	Z+6, r20	; 0x06
    3e86:	71 87       	std	Z+9, r23	; 0x09
    3e88:	60 87       	std	Z+8, r22	; 0x08
    3e8a:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <sprintf>
    3e8e:	2d b7       	in	r18, 0x3d	; 61
    3e90:	3e b7       	in	r19, 0x3e	; 62
    3e92:	26 5f       	subi	r18, 0xF6	; 246
    3e94:	3f 4f       	sbci	r19, 0xFF	; 255
    3e96:	0f b6       	in	r0, 0x3f	; 63
    3e98:	f8 94       	cli
    3e9a:	3e bf       	out	0x3e, r19	; 62
    3e9c:	0f be       	out	0x3f, r0	; 63
    3e9e:	2d bf       	out	0x3d, r18	; 61
                LCD_GoToPos(LCD_ROW_1, 0);
    3ea0:	80 e0       	ldi	r24, 0x00	; 0
    3ea2:	60 e0       	ldi	r22, 0x00	; 0
    3ea4:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <LCD_GoToPos>
                LCD_WriteString((uint8_t *)time_string, LCD_ROW_1, 0); // Cast to uint8_t pointer to fix warning
    3ea8:	ce 01       	movw	r24, r28
    3eaa:	89 5a       	subi	r24, 0xA9	; 169
    3eac:	9e 4f       	sbci	r25, 0xFE	; 254
    3eae:	60 e0       	ldi	r22, 0x00	; 0
    3eb0:	40 e0       	ldi	r20, 0x00	; 0
    3eb2:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_WriteString>
    3eb6:	a6 c4       	rjmp	.+2380   	; 0x4804 <main+0x1ff4>
                break;

            case TIMER:
                while (currentMode == TIMER) {
                    key = KEYPAD_getPressedKey(); // Get key press
    3eb8:	0e 94 ce 0a 	call	0x159c	; 0x159c <KEYPAD_getPressedKey>
    3ebc:	fe 01       	movw	r30, r28
    3ebe:	e0 5f       	subi	r30, 0xF0	; 240
    3ec0:	fe 4f       	sbci	r31, 0xFE	; 254
    3ec2:	80 83       	st	Z, r24
    3ec4:	fe 01       	movw	r30, r28
    3ec6:	e1 5a       	subi	r30, 0xA1	; 161
    3ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eca:	80 e0       	ldi	r24, 0x00	; 0
    3ecc:	90 e0       	ldi	r25, 0x00	; 0
    3ece:	a8 e4       	ldi	r26, 0x48	; 72
    3ed0:	b2 e4       	ldi	r27, 0x42	; 66
    3ed2:	80 83       	st	Z, r24
    3ed4:	91 83       	std	Z+1, r25	; 0x01
    3ed6:	a2 83       	std	Z+2, r26	; 0x02
    3ed8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3eda:	8e 01       	movw	r16, r28
    3edc:	05 5a       	subi	r16, 0xA5	; 165
    3ede:	1f 4f       	sbci	r17, 0xFF	; 255
    3ee0:	fe 01       	movw	r30, r28
    3ee2:	e1 5a       	subi	r30, 0xA1	; 161
    3ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee6:	60 81       	ld	r22, Z
    3ee8:	71 81       	ldd	r23, Z+1	; 0x01
    3eea:	82 81       	ldd	r24, Z+2	; 0x02
    3eec:	93 81       	ldd	r25, Z+3	; 0x03
    3eee:	20 e0       	ldi	r18, 0x00	; 0
    3ef0:	30 e0       	ldi	r19, 0x00	; 0
    3ef2:	4a e7       	ldi	r20, 0x7A	; 122
    3ef4:	55 e4       	ldi	r21, 0x45	; 69
    3ef6:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    3efa:	dc 01       	movw	r26, r24
    3efc:	cb 01       	movw	r24, r22
    3efe:	f8 01       	movw	r30, r16
    3f00:	80 83       	st	Z, r24
    3f02:	91 83       	std	Z+1, r25	; 0x01
    3f04:	a2 83       	std	Z+2, r26	; 0x02
    3f06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f08:	fe 01       	movw	r30, r28
    3f0a:	e5 5a       	subi	r30, 0xA5	; 165
    3f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0e:	60 81       	ld	r22, Z
    3f10:	71 81       	ldd	r23, Z+1	; 0x01
    3f12:	82 81       	ldd	r24, Z+2	; 0x02
    3f14:	93 81       	ldd	r25, Z+3	; 0x03
    3f16:	20 e0       	ldi	r18, 0x00	; 0
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	40 e8       	ldi	r20, 0x80	; 128
    3f1c:	5f e3       	ldi	r21, 0x3F	; 63
    3f1e:	0e 94 2b 04 	call	0x856	; 0x856 <__ltsf2>
    3f22:	88 23       	and	r24, r24
    3f24:	44 f4       	brge	.+16     	; 0x3f36 <main+0x1726>
		__ticks = 1;
    3f26:	fe 01       	movw	r30, r28
    3f28:	e7 5a       	subi	r30, 0xA7	; 167
    3f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2c:	81 e0       	ldi	r24, 0x01	; 1
    3f2e:	90 e0       	ldi	r25, 0x00	; 0
    3f30:	91 83       	std	Z+1, r25	; 0x01
    3f32:	80 83       	st	Z, r24
    3f34:	64 c0       	rjmp	.+200    	; 0x3ffe <main+0x17ee>
	else if (__tmp > 65535)
    3f36:	fe 01       	movw	r30, r28
    3f38:	e5 5a       	subi	r30, 0xA5	; 165
    3f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3c:	60 81       	ld	r22, Z
    3f3e:	71 81       	ldd	r23, Z+1	; 0x01
    3f40:	82 81       	ldd	r24, Z+2	; 0x02
    3f42:	93 81       	ldd	r25, Z+3	; 0x03
    3f44:	20 e0       	ldi	r18, 0x00	; 0
    3f46:	3f ef       	ldi	r19, 0xFF	; 255
    3f48:	4f e7       	ldi	r20, 0x7F	; 127
    3f4a:	57 e4       	ldi	r21, 0x47	; 71
    3f4c:	0e 94 cb 03 	call	0x796	; 0x796 <__gtsf2>
    3f50:	18 16       	cp	r1, r24
    3f52:	0c f0       	brlt	.+2      	; 0x3f56 <main+0x1746>
    3f54:	43 c0       	rjmp	.+134    	; 0x3fdc <main+0x17cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f56:	fe 01       	movw	r30, r28
    3f58:	e1 5a       	subi	r30, 0xA1	; 161
    3f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5c:	60 81       	ld	r22, Z
    3f5e:	71 81       	ldd	r23, Z+1	; 0x01
    3f60:	82 81       	ldd	r24, Z+2	; 0x02
    3f62:	93 81       	ldd	r25, Z+3	; 0x03
    3f64:	20 e0       	ldi	r18, 0x00	; 0
    3f66:	30 e0       	ldi	r19, 0x00	; 0
    3f68:	40 e2       	ldi	r20, 0x20	; 32
    3f6a:	51 e4       	ldi	r21, 0x41	; 65
    3f6c:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    3f70:	dc 01       	movw	r26, r24
    3f72:	cb 01       	movw	r24, r22
    3f74:	8e 01       	movw	r16, r28
    3f76:	07 5a       	subi	r16, 0xA7	; 167
    3f78:	1f 4f       	sbci	r17, 0xFF	; 255
    3f7a:	bc 01       	movw	r22, r24
    3f7c:	cd 01       	movw	r24, r26
    3f7e:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    3f82:	dc 01       	movw	r26, r24
    3f84:	cb 01       	movw	r24, r22
    3f86:	f8 01       	movw	r30, r16
    3f88:	91 83       	std	Z+1, r25	; 0x01
    3f8a:	80 83       	st	Z, r24
    3f8c:	1f c0       	rjmp	.+62     	; 0x3fcc <main+0x17bc>
    3f8e:	fe 01       	movw	r30, r28
    3f90:	e9 5a       	subi	r30, 0xA9	; 169
    3f92:	ff 4f       	sbci	r31, 0xFF	; 255
    3f94:	80 e9       	ldi	r24, 0x90	; 144
    3f96:	91 e0       	ldi	r25, 0x01	; 1
    3f98:	91 83       	std	Z+1, r25	; 0x01
    3f9a:	80 83       	st	Z, r24
    3f9c:	fe 01       	movw	r30, r28
    3f9e:	e9 5a       	subi	r30, 0xA9	; 169
    3fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa2:	80 81       	ld	r24, Z
    3fa4:	91 81       	ldd	r25, Z+1	; 0x01
    3fa6:	01 97       	sbiw	r24, 0x01	; 1
    3fa8:	f1 f7       	brne	.-4      	; 0x3fa6 <main+0x1796>
    3faa:	fe 01       	movw	r30, r28
    3fac:	e9 5a       	subi	r30, 0xA9	; 169
    3fae:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb0:	91 83       	std	Z+1, r25	; 0x01
    3fb2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fb4:	de 01       	movw	r26, r28
    3fb6:	a7 5a       	subi	r26, 0xA7	; 167
    3fb8:	bf 4f       	sbci	r27, 0xFF	; 255
    3fba:	fe 01       	movw	r30, r28
    3fbc:	e7 5a       	subi	r30, 0xA7	; 167
    3fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc0:	80 81       	ld	r24, Z
    3fc2:	91 81       	ldd	r25, Z+1	; 0x01
    3fc4:	01 97       	sbiw	r24, 0x01	; 1
    3fc6:	11 96       	adiw	r26, 0x01	; 1
    3fc8:	9c 93       	st	X, r25
    3fca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fcc:	fe 01       	movw	r30, r28
    3fce:	e7 5a       	subi	r30, 0xA7	; 167
    3fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd2:	80 81       	ld	r24, Z
    3fd4:	91 81       	ldd	r25, Z+1	; 0x01
    3fd6:	00 97       	sbiw	r24, 0x00	; 0
    3fd8:	d1 f6       	brne	.-76     	; 0x3f8e <main+0x177e>
    3fda:	28 c0       	rjmp	.+80     	; 0x402c <main+0x181c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fdc:	8e 01       	movw	r16, r28
    3fde:	07 5a       	subi	r16, 0xA7	; 167
    3fe0:	1f 4f       	sbci	r17, 0xFF	; 255
    3fe2:	fe 01       	movw	r30, r28
    3fe4:	e5 5a       	subi	r30, 0xA5	; 165
    3fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe8:	60 81       	ld	r22, Z
    3fea:	71 81       	ldd	r23, Z+1	; 0x01
    3fec:	82 81       	ldd	r24, Z+2	; 0x02
    3fee:	93 81       	ldd	r25, Z+3	; 0x03
    3ff0:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    3ff4:	dc 01       	movw	r26, r24
    3ff6:	cb 01       	movw	r24, r22
    3ff8:	f8 01       	movw	r30, r16
    3ffa:	91 83       	std	Z+1, r25	; 0x01
    3ffc:	80 83       	st	Z, r24
    3ffe:	de 01       	movw	r26, r28
    4000:	ab 5a       	subi	r26, 0xAB	; 171
    4002:	bf 4f       	sbci	r27, 0xFF	; 255
    4004:	fe 01       	movw	r30, r28
    4006:	e7 5a       	subi	r30, 0xA7	; 167
    4008:	ff 4f       	sbci	r31, 0xFF	; 255
    400a:	80 81       	ld	r24, Z
    400c:	91 81       	ldd	r25, Z+1	; 0x01
    400e:	11 96       	adiw	r26, 0x01	; 1
    4010:	9c 93       	st	X, r25
    4012:	8e 93       	st	-X, r24
    4014:	fe 01       	movw	r30, r28
    4016:	eb 5a       	subi	r30, 0xAB	; 171
    4018:	ff 4f       	sbci	r31, 0xFF	; 255
    401a:	80 81       	ld	r24, Z
    401c:	91 81       	ldd	r25, Z+1	; 0x01
    401e:	01 97       	sbiw	r24, 0x01	; 1
    4020:	f1 f7       	brne	.-4      	; 0x401e <main+0x180e>
    4022:	fe 01       	movw	r30, r28
    4024:	eb 5a       	subi	r30, 0xAB	; 171
    4026:	ff 4f       	sbci	r31, 0xFF	; 255
    4028:	91 83       	std	Z+1, r25	; 0x01
    402a:	80 83       	st	Z, r24
                    _delay_ms(50);
                    if (key >= '0' && key <= '9') {
    402c:	fe 01       	movw	r30, r28
    402e:	e0 5f       	subi	r30, 0xF0	; 240
    4030:	fe 4f       	sbci	r31, 0xFE	; 254
    4032:	80 81       	ld	r24, Z
    4034:	80 33       	cpi	r24, 0x30	; 48
    4036:	08 f4       	brcc	.+2      	; 0x403a <main+0x182a>
    4038:	31 c1       	rjmp	.+610    	; 0x429c <main+0x1a8c>
    403a:	fe 01       	movw	r30, r28
    403c:	e0 5f       	subi	r30, 0xF0	; 240
    403e:	fe 4f       	sbci	r31, 0xFE	; 254
    4040:	80 81       	ld	r24, Z
    4042:	8a 33       	cpi	r24, 0x3A	; 58
    4044:	08 f0       	brcs	.+2      	; 0x4048 <main+0x1838>
    4046:	2a c1       	rjmp	.+596    	; 0x429c <main+0x1a8c>
                        if (timeIndex == 0 || timeIndex == 1 || timeIndex == 3 || timeIndex == 4) {
    4048:	fe 01       	movw	r30, r28
    404a:	e2 50       	subi	r30, 0x02	; 2
    404c:	ff 4f       	sbci	r31, 0xFF	; 255
    404e:	80 81       	ld	r24, Z
    4050:	91 81       	ldd	r25, Z+1	; 0x01
    4052:	00 97       	sbiw	r24, 0x00	; 0
    4054:	c9 f0       	breq	.+50     	; 0x4088 <main+0x1878>
    4056:	fe 01       	movw	r30, r28
    4058:	e2 50       	subi	r30, 0x02	; 2
    405a:	ff 4f       	sbci	r31, 0xFF	; 255
    405c:	80 81       	ld	r24, Z
    405e:	91 81       	ldd	r25, Z+1	; 0x01
    4060:	81 30       	cpi	r24, 0x01	; 1
    4062:	91 05       	cpc	r25, r1
    4064:	89 f0       	breq	.+34     	; 0x4088 <main+0x1878>
    4066:	fe 01       	movw	r30, r28
    4068:	e2 50       	subi	r30, 0x02	; 2
    406a:	ff 4f       	sbci	r31, 0xFF	; 255
    406c:	80 81       	ld	r24, Z
    406e:	91 81       	ldd	r25, Z+1	; 0x01
    4070:	83 30       	cpi	r24, 0x03	; 3
    4072:	91 05       	cpc	r25, r1
    4074:	49 f0       	breq	.+18     	; 0x4088 <main+0x1878>
    4076:	fe 01       	movw	r30, r28
    4078:	e2 50       	subi	r30, 0x02	; 2
    407a:	ff 4f       	sbci	r31, 0xFF	; 255
    407c:	80 81       	ld	r24, Z
    407e:	91 81       	ldd	r25, Z+1	; 0x01
    4080:	84 30       	cpi	r24, 0x04	; 4
    4082:	91 05       	cpc	r25, r1
    4084:	09 f0       	breq	.+2      	; 0x4088 <main+0x1878>
    4086:	be c3       	rjmp	.+1916   	; 0x4804 <main+0x1ff4>
                            if (timeIndex == 3 && key >= '6') { // Check if tens digit of seconds is invalid
    4088:	fe 01       	movw	r30, r28
    408a:	e2 50       	subi	r30, 0x02	; 2
    408c:	ff 4f       	sbci	r31, 0xFF	; 255
    408e:	80 81       	ld	r24, Z
    4090:	91 81       	ldd	r25, Z+1	; 0x01
    4092:	83 30       	cpi	r24, 0x03	; 3
    4094:	91 05       	cpc	r25, r1
    4096:	39 f4       	brne	.+14     	; 0x40a6 <main+0x1896>
    4098:	fe 01       	movw	r30, r28
    409a:	e0 5f       	subi	r30, 0xF0	; 240
    409c:	fe 4f       	sbci	r31, 0xFE	; 254
    409e:	80 81       	ld	r24, Z
    40a0:	86 33       	cpi	r24, 0x36	; 54
    40a2:	08 f0       	brcs	.+2      	; 0x40a6 <main+0x1896>
    40a4:	aa c3       	rjmp	.+1876   	; 0x47fa <main+0x1fea>
                                continue;
                            }
                            timeInput[timeIndex] = key;  // Update the time input at the correct position
    40a6:	fe 01       	movw	r30, r28
    40a8:	e2 50       	subi	r30, 0x02	; 2
    40aa:	ff 4f       	sbci	r31, 0xFF	; 255
    40ac:	20 81       	ld	r18, Z
    40ae:	31 81       	ldd	r19, Z+1	; 0x01
    40b0:	ce 01       	movw	r24, r28
    40b2:	8f 5a       	subi	r24, 0xAF	; 175
    40b4:	9e 4f       	sbci	r25, 0xFE	; 254
    40b6:	dc 01       	movw	r26, r24
    40b8:	a2 0f       	add	r26, r18
    40ba:	b3 1f       	adc	r27, r19
    40bc:	fe 01       	movw	r30, r28
    40be:	e0 5f       	subi	r30, 0xF0	; 240
    40c0:	fe 4f       	sbci	r31, 0xFE	; 254
    40c2:	80 81       	ld	r24, Z
    40c4:	8c 93       	st	X, r24
                            LCD_GoToPos(LCD_ROW_2, timeIndex);
    40c6:	fe 01       	movw	r30, r28
    40c8:	e2 50       	subi	r30, 0x02	; 2
    40ca:	ff 4f       	sbci	r31, 0xFF	; 255
    40cc:	90 81       	ld	r25, Z
    40ce:	81 e0       	ldi	r24, 0x01	; 1
    40d0:	69 2f       	mov	r22, r25
    40d2:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <LCD_GoToPos>
                            LCD_WriteData(key);  // Display the digit
    40d6:	fe 01       	movw	r30, r28
    40d8:	e0 5f       	subi	r30, 0xF0	; 240
    40da:	fe 4f       	sbci	r31, 0xFE	; 254
    40dc:	80 81       	ld	r24, Z
    40de:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <LCD_WriteData>
                            if (timeIndex == 1 || timeIndex == 4) { // Auto-advance if at the last position of MM or SS
    40e2:	fe 01       	movw	r30, r28
    40e4:	e2 50       	subi	r30, 0x02	; 2
    40e6:	ff 4f       	sbci	r31, 0xFF	; 255
    40e8:	80 81       	ld	r24, Z
    40ea:	91 81       	ldd	r25, Z+1	; 0x01
    40ec:	81 30       	cpi	r24, 0x01	; 1
    40ee:	91 05       	cpc	r25, r1
    40f0:	41 f0       	breq	.+16     	; 0x4102 <main+0x18f2>
    40f2:	fe 01       	movw	r30, r28
    40f4:	e2 50       	subi	r30, 0x02	; 2
    40f6:	ff 4f       	sbci	r31, 0xFF	; 255
    40f8:	80 81       	ld	r24, Z
    40fa:	91 81       	ldd	r25, Z+1	; 0x01
    40fc:	84 30       	cpi	r24, 0x04	; 4
    40fe:	91 05       	cpc	r25, r1
    4100:	69 f4       	brne	.+26     	; 0x411c <main+0x190c>
                                timeIndex += 2;
    4102:	de 01       	movw	r26, r28
    4104:	a2 50       	subi	r26, 0x02	; 2
    4106:	bf 4f       	sbci	r27, 0xFF	; 255
    4108:	fe 01       	movw	r30, r28
    410a:	e2 50       	subi	r30, 0x02	; 2
    410c:	ff 4f       	sbci	r31, 0xFF	; 255
    410e:	80 81       	ld	r24, Z
    4110:	91 81       	ldd	r25, Z+1	; 0x01
    4112:	02 96       	adiw	r24, 0x02	; 2
    4114:	11 96       	adiw	r26, 0x01	; 1
    4116:	9c 93       	st	X, r25
    4118:	8e 93       	st	-X, r24
    411a:	0b c0       	rjmp	.+22     	; 0x4132 <main+0x1922>
                            } else {
                                timeIndex++;
    411c:	de 01       	movw	r26, r28
    411e:	a2 50       	subi	r26, 0x02	; 2
    4120:	bf 4f       	sbci	r27, 0xFF	; 255
    4122:	fe 01       	movw	r30, r28
    4124:	e2 50       	subi	r30, 0x02	; 2
    4126:	ff 4f       	sbci	r31, 0xFF	; 255
    4128:	80 81       	ld	r24, Z
    412a:	91 81       	ldd	r25, Z+1	; 0x01
    412c:	01 96       	adiw	r24, 0x01	; 1
    412e:	8d 93       	st	X+, r24
    4130:	9c 93       	st	X, r25
    4132:	fe 01       	movw	r30, r28
    4134:	ef 5a       	subi	r30, 0xAF	; 175
    4136:	ff 4f       	sbci	r31, 0xFF	; 255
    4138:	80 e0       	ldi	r24, 0x00	; 0
    413a:	90 e0       	ldi	r25, 0x00	; 0
    413c:	a8 e4       	ldi	r26, 0x48	; 72
    413e:	b2 e4       	ldi	r27, 0x42	; 66
    4140:	80 83       	st	Z, r24
    4142:	91 83       	std	Z+1, r25	; 0x01
    4144:	a2 83       	std	Z+2, r26	; 0x02
    4146:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4148:	8e 01       	movw	r16, r28
    414a:	03 5b       	subi	r16, 0xB3	; 179
    414c:	1f 4f       	sbci	r17, 0xFF	; 255
    414e:	fe 01       	movw	r30, r28
    4150:	ef 5a       	subi	r30, 0xAF	; 175
    4152:	ff 4f       	sbci	r31, 0xFF	; 255
    4154:	60 81       	ld	r22, Z
    4156:	71 81       	ldd	r23, Z+1	; 0x01
    4158:	82 81       	ldd	r24, Z+2	; 0x02
    415a:	93 81       	ldd	r25, Z+3	; 0x03
    415c:	20 e0       	ldi	r18, 0x00	; 0
    415e:	30 e0       	ldi	r19, 0x00	; 0
    4160:	4a e7       	ldi	r20, 0x7A	; 122
    4162:	55 e4       	ldi	r21, 0x45	; 69
    4164:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    4168:	dc 01       	movw	r26, r24
    416a:	cb 01       	movw	r24, r22
    416c:	f8 01       	movw	r30, r16
    416e:	80 83       	st	Z, r24
    4170:	91 83       	std	Z+1, r25	; 0x01
    4172:	a2 83       	std	Z+2, r26	; 0x02
    4174:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4176:	fe 01       	movw	r30, r28
    4178:	e3 5b       	subi	r30, 0xB3	; 179
    417a:	ff 4f       	sbci	r31, 0xFF	; 255
    417c:	60 81       	ld	r22, Z
    417e:	71 81       	ldd	r23, Z+1	; 0x01
    4180:	82 81       	ldd	r24, Z+2	; 0x02
    4182:	93 81       	ldd	r25, Z+3	; 0x03
    4184:	20 e0       	ldi	r18, 0x00	; 0
    4186:	30 e0       	ldi	r19, 0x00	; 0
    4188:	40 e8       	ldi	r20, 0x80	; 128
    418a:	5f e3       	ldi	r21, 0x3F	; 63
    418c:	0e 94 2b 04 	call	0x856	; 0x856 <__ltsf2>
    4190:	88 23       	and	r24, r24
    4192:	44 f4       	brge	.+16     	; 0x41a4 <main+0x1994>
		__ticks = 1;
    4194:	fe 01       	movw	r30, r28
    4196:	e5 5b       	subi	r30, 0xB5	; 181
    4198:	ff 4f       	sbci	r31, 0xFF	; 255
    419a:	81 e0       	ldi	r24, 0x01	; 1
    419c:	90 e0       	ldi	r25, 0x00	; 0
    419e:	91 83       	std	Z+1, r25	; 0x01
    41a0:	80 83       	st	Z, r24
    41a2:	64 c0       	rjmp	.+200    	; 0x426c <main+0x1a5c>
	else if (__tmp > 65535)
    41a4:	fe 01       	movw	r30, r28
    41a6:	e3 5b       	subi	r30, 0xB3	; 179
    41a8:	ff 4f       	sbci	r31, 0xFF	; 255
    41aa:	60 81       	ld	r22, Z
    41ac:	71 81       	ldd	r23, Z+1	; 0x01
    41ae:	82 81       	ldd	r24, Z+2	; 0x02
    41b0:	93 81       	ldd	r25, Z+3	; 0x03
    41b2:	20 e0       	ldi	r18, 0x00	; 0
    41b4:	3f ef       	ldi	r19, 0xFF	; 255
    41b6:	4f e7       	ldi	r20, 0x7F	; 127
    41b8:	57 e4       	ldi	r21, 0x47	; 71
    41ba:	0e 94 cb 03 	call	0x796	; 0x796 <__gtsf2>
    41be:	18 16       	cp	r1, r24
    41c0:	0c f0       	brlt	.+2      	; 0x41c4 <main+0x19b4>
    41c2:	43 c0       	rjmp	.+134    	; 0x424a <main+0x1a3a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41c4:	fe 01       	movw	r30, r28
    41c6:	ef 5a       	subi	r30, 0xAF	; 175
    41c8:	ff 4f       	sbci	r31, 0xFF	; 255
    41ca:	60 81       	ld	r22, Z
    41cc:	71 81       	ldd	r23, Z+1	; 0x01
    41ce:	82 81       	ldd	r24, Z+2	; 0x02
    41d0:	93 81       	ldd	r25, Z+3	; 0x03
    41d2:	20 e0       	ldi	r18, 0x00	; 0
    41d4:	30 e0       	ldi	r19, 0x00	; 0
    41d6:	40 e2       	ldi	r20, 0x20	; 32
    41d8:	51 e4       	ldi	r21, 0x41	; 65
    41da:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    41de:	dc 01       	movw	r26, r24
    41e0:	cb 01       	movw	r24, r22
    41e2:	8e 01       	movw	r16, r28
    41e4:	05 5b       	subi	r16, 0xB5	; 181
    41e6:	1f 4f       	sbci	r17, 0xFF	; 255
    41e8:	bc 01       	movw	r22, r24
    41ea:	cd 01       	movw	r24, r26
    41ec:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    41f0:	dc 01       	movw	r26, r24
    41f2:	cb 01       	movw	r24, r22
    41f4:	f8 01       	movw	r30, r16
    41f6:	91 83       	std	Z+1, r25	; 0x01
    41f8:	80 83       	st	Z, r24
    41fa:	1f c0       	rjmp	.+62     	; 0x423a <main+0x1a2a>
    41fc:	fe 01       	movw	r30, r28
    41fe:	e7 5b       	subi	r30, 0xB7	; 183
    4200:	ff 4f       	sbci	r31, 0xFF	; 255
    4202:	80 e9       	ldi	r24, 0x90	; 144
    4204:	91 e0       	ldi	r25, 0x01	; 1
    4206:	91 83       	std	Z+1, r25	; 0x01
    4208:	80 83       	st	Z, r24
    420a:	fe 01       	movw	r30, r28
    420c:	e7 5b       	subi	r30, 0xB7	; 183
    420e:	ff 4f       	sbci	r31, 0xFF	; 255
    4210:	80 81       	ld	r24, Z
    4212:	91 81       	ldd	r25, Z+1	; 0x01
    4214:	01 97       	sbiw	r24, 0x01	; 1
    4216:	f1 f7       	brne	.-4      	; 0x4214 <main+0x1a04>
    4218:	fe 01       	movw	r30, r28
    421a:	e7 5b       	subi	r30, 0xB7	; 183
    421c:	ff 4f       	sbci	r31, 0xFF	; 255
    421e:	91 83       	std	Z+1, r25	; 0x01
    4220:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4222:	de 01       	movw	r26, r28
    4224:	a5 5b       	subi	r26, 0xB5	; 181
    4226:	bf 4f       	sbci	r27, 0xFF	; 255
    4228:	fe 01       	movw	r30, r28
    422a:	e5 5b       	subi	r30, 0xB5	; 181
    422c:	ff 4f       	sbci	r31, 0xFF	; 255
    422e:	80 81       	ld	r24, Z
    4230:	91 81       	ldd	r25, Z+1	; 0x01
    4232:	01 97       	sbiw	r24, 0x01	; 1
    4234:	11 96       	adiw	r26, 0x01	; 1
    4236:	9c 93       	st	X, r25
    4238:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    423a:	fe 01       	movw	r30, r28
    423c:	e5 5b       	subi	r30, 0xB5	; 181
    423e:	ff 4f       	sbci	r31, 0xFF	; 255
    4240:	80 81       	ld	r24, Z
    4242:	91 81       	ldd	r25, Z+1	; 0x01
    4244:	00 97       	sbiw	r24, 0x00	; 0
    4246:	d1 f6       	brne	.-76     	; 0x41fc <main+0x19ec>
    4248:	dd c2       	rjmp	.+1466   	; 0x4804 <main+0x1ff4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    424a:	8e 01       	movw	r16, r28
    424c:	05 5b       	subi	r16, 0xB5	; 181
    424e:	1f 4f       	sbci	r17, 0xFF	; 255
    4250:	fe 01       	movw	r30, r28
    4252:	e3 5b       	subi	r30, 0xB3	; 179
    4254:	ff 4f       	sbci	r31, 0xFF	; 255
    4256:	60 81       	ld	r22, Z
    4258:	71 81       	ldd	r23, Z+1	; 0x01
    425a:	82 81       	ldd	r24, Z+2	; 0x02
    425c:	93 81       	ldd	r25, Z+3	; 0x03
    425e:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    4262:	dc 01       	movw	r26, r24
    4264:	cb 01       	movw	r24, r22
    4266:	f8 01       	movw	r30, r16
    4268:	91 83       	std	Z+1, r25	; 0x01
    426a:	80 83       	st	Z, r24
    426c:	de 01       	movw	r26, r28
    426e:	a9 5b       	subi	r26, 0xB9	; 185
    4270:	bf 4f       	sbci	r27, 0xFF	; 255
    4272:	fe 01       	movw	r30, r28
    4274:	e5 5b       	subi	r30, 0xB5	; 181
    4276:	ff 4f       	sbci	r31, 0xFF	; 255
    4278:	80 81       	ld	r24, Z
    427a:	91 81       	ldd	r25, Z+1	; 0x01
    427c:	11 96       	adiw	r26, 0x01	; 1
    427e:	9c 93       	st	X, r25
    4280:	8e 93       	st	-X, r24
    4282:	fe 01       	movw	r30, r28
    4284:	e9 5b       	subi	r30, 0xB9	; 185
    4286:	ff 4f       	sbci	r31, 0xFF	; 255
    4288:	80 81       	ld	r24, Z
    428a:	91 81       	ldd	r25, Z+1	; 0x01
    428c:	01 97       	sbiw	r24, 0x01	; 1
    428e:	f1 f7       	brne	.-4      	; 0x428c <main+0x1a7c>
    4290:	fe 01       	movw	r30, r28
    4292:	e9 5b       	subi	r30, 0xB9	; 185
    4294:	ff 4f       	sbci	r31, 0xFF	; 255
    4296:	91 83       	std	Z+1, r25	; 0x01
    4298:	80 83       	st	Z, r24
    429a:	b4 c2       	rjmp	.+1384   	; 0x4804 <main+0x1ff4>
                            }
                            _delay_ms(50); // Debounce delay
                        }
                    } else if (key == '=') {
    429c:	fe 01       	movw	r30, r28
    429e:	e0 5f       	subi	r30, 0xF0	; 240
    42a0:	fe 4f       	sbci	r31, 0xFE	; 254
    42a2:	80 81       	ld	r24, Z
    42a4:	8d 33       	cpi	r24, 0x3D	; 61
    42a6:	09 f0       	breq	.+2      	; 0x42aa <main+0x1a9a>
    42a8:	ad c2       	rjmp	.+1370   	; 0x4804 <main+0x1ff4>
                        sscanf(timeInput, "%2d:%2d", &minutes, &seconds);
    42aa:	0d b7       	in	r16, 0x3d	; 61
    42ac:	1e b7       	in	r17, 0x3e	; 62
    42ae:	08 50       	subi	r16, 0x08	; 8
    42b0:	10 40       	sbci	r17, 0x00	; 0
    42b2:	0f b6       	in	r0, 0x3f	; 63
    42b4:	f8 94       	cli
    42b6:	1e bf       	out	0x3e, r17	; 62
    42b8:	0f be       	out	0x3f, r0	; 63
    42ba:	0d bf       	out	0x3d, r16	; 61
    42bc:	ed b7       	in	r30, 0x3d	; 61
    42be:	fe b7       	in	r31, 0x3e	; 62
    42c0:	31 96       	adiw	r30, 0x01	; 1
    42c2:	ce 01       	movw	r24, r28
    42c4:	8f 5a       	subi	r24, 0xAF	; 175
    42c6:	9e 4f       	sbci	r25, 0xFE	; 254
    42c8:	91 83       	std	Z+1, r25	; 0x01
    42ca:	80 83       	st	Z, r24
    42cc:	8c ee       	ldi	r24, 0xEC	; 236
    42ce:	90 e0       	ldi	r25, 0x00	; 0
    42d0:	93 83       	std	Z+3, r25	; 0x03
    42d2:	82 83       	std	Z+2, r24	; 0x02
    42d4:	8b e3       	ldi	r24, 0x3B	; 59
    42d6:	92 e0       	ldi	r25, 0x02	; 2
    42d8:	95 83       	std	Z+5, r25	; 0x05
    42da:	84 83       	std	Z+4, r24	; 0x04
    42dc:	8d e3       	ldi	r24, 0x3D	; 61
    42de:	92 e0       	ldi	r25, 0x02	; 2
    42e0:	97 83       	std	Z+7, r25	; 0x07
    42e2:	86 83       	std	Z+6, r24	; 0x06
    42e4:	0e 94 18 25 	call	0x4a30	; 0x4a30 <sscanf>
    42e8:	2d b7       	in	r18, 0x3d	; 61
    42ea:	3e b7       	in	r19, 0x3e	; 62
    42ec:	28 5f       	subi	r18, 0xF8	; 248
    42ee:	3f 4f       	sbci	r19, 0xFF	; 255
    42f0:	0f b6       	in	r0, 0x3f	; 63
    42f2:	f8 94       	cli
    42f4:	3e bf       	out	0x3e, r19	; 62
    42f6:	0f be       	out	0x3f, r0	; 63
    42f8:	2d bf       	out	0x3d, r18	; 61
                        if (seconds > 59) {
    42fa:	80 91 3d 02 	lds	r24, 0x023D
    42fe:	90 91 3e 02 	lds	r25, 0x023E
    4302:	8c 33       	cpi	r24, 0x3C	; 60
    4304:	91 05       	cpc	r25, r1
    4306:	30 f0       	brcs	.+12     	; 0x4314 <main+0x1b04>
                            seconds = 59; // Correct seconds if out of range
    4308:	8b e3       	ldi	r24, 0x3B	; 59
    430a:	90 e0       	ldi	r25, 0x00	; 0
    430c:	90 93 3e 02 	sts	0x023E, r25
    4310:	80 93 3d 02 	sts	0x023D, r24
                        }
                        LCD_Clear();
    4314:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_Clear>
                        LCD_WriteString("Timer Starts", LCD_ROW_1, 0);
    4318:	84 ef       	ldi	r24, 0xF4	; 244
    431a:	90 e0       	ldi	r25, 0x00	; 0
    431c:	60 e0       	ldi	r22, 0x00	; 0
    431e:	40 e0       	ldi	r20, 0x00	; 0
    4320:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_WriteString>
    4324:	fe 01       	movw	r30, r28
    4326:	ed 5b       	subi	r30, 0xBD	; 189
    4328:	ff 4f       	sbci	r31, 0xFF	; 255
    432a:	80 e0       	ldi	r24, 0x00	; 0
    432c:	90 e0       	ldi	r25, 0x00	; 0
    432e:	aa e7       	ldi	r26, 0x7A	; 122
    4330:	b4 e4       	ldi	r27, 0x44	; 68
    4332:	80 83       	st	Z, r24
    4334:	91 83       	std	Z+1, r25	; 0x01
    4336:	a2 83       	std	Z+2, r26	; 0x02
    4338:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    433a:	8e 01       	movw	r16, r28
    433c:	01 5c       	subi	r16, 0xC1	; 193
    433e:	1f 4f       	sbci	r17, 0xFF	; 255
    4340:	fe 01       	movw	r30, r28
    4342:	ed 5b       	subi	r30, 0xBD	; 189
    4344:	ff 4f       	sbci	r31, 0xFF	; 255
    4346:	60 81       	ld	r22, Z
    4348:	71 81       	ldd	r23, Z+1	; 0x01
    434a:	82 81       	ldd	r24, Z+2	; 0x02
    434c:	93 81       	ldd	r25, Z+3	; 0x03
    434e:	20 e0       	ldi	r18, 0x00	; 0
    4350:	30 e0       	ldi	r19, 0x00	; 0
    4352:	4a e7       	ldi	r20, 0x7A	; 122
    4354:	55 e4       	ldi	r21, 0x45	; 69
    4356:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    435a:	dc 01       	movw	r26, r24
    435c:	cb 01       	movw	r24, r22
    435e:	f8 01       	movw	r30, r16
    4360:	80 83       	st	Z, r24
    4362:	91 83       	std	Z+1, r25	; 0x01
    4364:	a2 83       	std	Z+2, r26	; 0x02
    4366:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4368:	fe 01       	movw	r30, r28
    436a:	ff 96       	adiw	r30, 0x3f	; 63
    436c:	60 81       	ld	r22, Z
    436e:	71 81       	ldd	r23, Z+1	; 0x01
    4370:	82 81       	ldd	r24, Z+2	; 0x02
    4372:	93 81       	ldd	r25, Z+3	; 0x03
    4374:	20 e0       	ldi	r18, 0x00	; 0
    4376:	30 e0       	ldi	r19, 0x00	; 0
    4378:	40 e8       	ldi	r20, 0x80	; 128
    437a:	5f e3       	ldi	r21, 0x3F	; 63
    437c:	0e 94 2b 04 	call	0x856	; 0x856 <__ltsf2>
    4380:	88 23       	and	r24, r24
    4382:	2c f4       	brge	.+10     	; 0x438e <main+0x1b7e>
		__ticks = 1;
    4384:	81 e0       	ldi	r24, 0x01	; 1
    4386:	90 e0       	ldi	r25, 0x00	; 0
    4388:	9e af       	std	Y+62, r25	; 0x3e
    438a:	8d af       	std	Y+61, r24	; 0x3d
    438c:	46 c0       	rjmp	.+140    	; 0x441a <main+0x1c0a>
	else if (__tmp > 65535)
    438e:	fe 01       	movw	r30, r28
    4390:	ff 96       	adiw	r30, 0x3f	; 63
    4392:	60 81       	ld	r22, Z
    4394:	71 81       	ldd	r23, Z+1	; 0x01
    4396:	82 81       	ldd	r24, Z+2	; 0x02
    4398:	93 81       	ldd	r25, Z+3	; 0x03
    439a:	20 e0       	ldi	r18, 0x00	; 0
    439c:	3f ef       	ldi	r19, 0xFF	; 255
    439e:	4f e7       	ldi	r20, 0x7F	; 127
    43a0:	57 e4       	ldi	r21, 0x47	; 71
    43a2:	0e 94 cb 03 	call	0x796	; 0x796 <__gtsf2>
    43a6:	18 16       	cp	r1, r24
    43a8:	64 f5       	brge	.+88     	; 0x4402 <main+0x1bf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43aa:	fe 01       	movw	r30, r28
    43ac:	ed 5b       	subi	r30, 0xBD	; 189
    43ae:	ff 4f       	sbci	r31, 0xFF	; 255
    43b0:	60 81       	ld	r22, Z
    43b2:	71 81       	ldd	r23, Z+1	; 0x01
    43b4:	82 81       	ldd	r24, Z+2	; 0x02
    43b6:	93 81       	ldd	r25, Z+3	; 0x03
    43b8:	20 e0       	ldi	r18, 0x00	; 0
    43ba:	30 e0       	ldi	r19, 0x00	; 0
    43bc:	40 e2       	ldi	r20, 0x20	; 32
    43be:	51 e4       	ldi	r21, 0x41	; 65
    43c0:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    43c4:	dc 01       	movw	r26, r24
    43c6:	cb 01       	movw	r24, r22
    43c8:	bc 01       	movw	r22, r24
    43ca:	cd 01       	movw	r24, r26
    43cc:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    43d0:	dc 01       	movw	r26, r24
    43d2:	cb 01       	movw	r24, r22
    43d4:	9e af       	std	Y+62, r25	; 0x3e
    43d6:	8d af       	std	Y+61, r24	; 0x3d
    43d8:	0f c0       	rjmp	.+30     	; 0x43f8 <main+0x1be8>
    43da:	80 e9       	ldi	r24, 0x90	; 144
    43dc:	91 e0       	ldi	r25, 0x01	; 1
    43de:	9c af       	std	Y+60, r25	; 0x3c
    43e0:	8b af       	std	Y+59, r24	; 0x3b
    43e2:	8b ad       	ldd	r24, Y+59	; 0x3b
    43e4:	9c ad       	ldd	r25, Y+60	; 0x3c
    43e6:	01 97       	sbiw	r24, 0x01	; 1
    43e8:	f1 f7       	brne	.-4      	; 0x43e6 <main+0x1bd6>
    43ea:	9c af       	std	Y+60, r25	; 0x3c
    43ec:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    43f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    43f2:	01 97       	sbiw	r24, 0x01	; 1
    43f4:	9e af       	std	Y+62, r25	; 0x3e
    43f6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    43fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    43fc:	00 97       	sbiw	r24, 0x00	; 0
    43fe:	69 f7       	brne	.-38     	; 0x43da <main+0x1bca>
    4400:	16 c0       	rjmp	.+44     	; 0x442e <main+0x1c1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4402:	fe 01       	movw	r30, r28
    4404:	ff 96       	adiw	r30, 0x3f	; 63
    4406:	60 81       	ld	r22, Z
    4408:	71 81       	ldd	r23, Z+1	; 0x01
    440a:	82 81       	ldd	r24, Z+2	; 0x02
    440c:	93 81       	ldd	r25, Z+3	; 0x03
    440e:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    4412:	dc 01       	movw	r26, r24
    4414:	cb 01       	movw	r24, r22
    4416:	9e af       	std	Y+62, r25	; 0x3e
    4418:	8d af       	std	Y+61, r24	; 0x3d
    441a:	8d ad       	ldd	r24, Y+61	; 0x3d
    441c:	9e ad       	ldd	r25, Y+62	; 0x3e
    441e:	9a af       	std	Y+58, r25	; 0x3a
    4420:	89 af       	std	Y+57, r24	; 0x39
    4422:	89 ad       	ldd	r24, Y+57	; 0x39
    4424:	9a ad       	ldd	r25, Y+58	; 0x3a
    4426:	01 97       	sbiw	r24, 0x01	; 1
    4428:	f1 f7       	brne	.-4      	; 0x4426 <main+0x1c16>
    442a:	9a af       	std	Y+58, r25	; 0x3a
    442c:	89 af       	std	Y+57, r24	; 0x39
                        _delay_ms(1000);
                        LCD_Clear();
    442e:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_Clear>
    4432:	d0 c0       	rjmp	.+416    	; 0x45d4 <main+0x1dc4>

                        while ((minutes > 0 || seconds > 0) && currentMode == TIMER) {
                            sprintf(timeInput, "%02d:%02d", minutes, seconds);
    4434:	20 91 3b 02 	lds	r18, 0x023B
    4438:	30 91 3c 02 	lds	r19, 0x023C
    443c:	40 91 3d 02 	lds	r20, 0x023D
    4440:	50 91 3e 02 	lds	r21, 0x023E
    4444:	0d b7       	in	r16, 0x3d	; 61
    4446:	1e b7       	in	r17, 0x3e	; 62
    4448:	08 50       	subi	r16, 0x08	; 8
    444a:	10 40       	sbci	r17, 0x00	; 0
    444c:	0f b6       	in	r0, 0x3f	; 63
    444e:	f8 94       	cli
    4450:	1e bf       	out	0x3e, r17	; 62
    4452:	0f be       	out	0x3f, r0	; 63
    4454:	0d bf       	out	0x3d, r16	; 61
    4456:	ed b7       	in	r30, 0x3d	; 61
    4458:	fe b7       	in	r31, 0x3e	; 62
    445a:	31 96       	adiw	r30, 0x01	; 1
    445c:	ce 01       	movw	r24, r28
    445e:	8f 5a       	subi	r24, 0xAF	; 175
    4460:	9e 4f       	sbci	r25, 0xFE	; 254
    4462:	91 83       	std	Z+1, r25	; 0x01
    4464:	80 83       	st	Z, r24
    4466:	81 e0       	ldi	r24, 0x01	; 1
    4468:	91 e0       	ldi	r25, 0x01	; 1
    446a:	93 83       	std	Z+3, r25	; 0x03
    446c:	82 83       	std	Z+2, r24	; 0x02
    446e:	35 83       	std	Z+5, r19	; 0x05
    4470:	24 83       	std	Z+4, r18	; 0x04
    4472:	57 83       	std	Z+7, r21	; 0x07
    4474:	46 83       	std	Z+6, r20	; 0x06
    4476:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <sprintf>
    447a:	2d b7       	in	r18, 0x3d	; 61
    447c:	3e b7       	in	r19, 0x3e	; 62
    447e:	28 5f       	subi	r18, 0xF8	; 248
    4480:	3f 4f       	sbci	r19, 0xFF	; 255
    4482:	0f b6       	in	r0, 0x3f	; 63
    4484:	f8 94       	cli
    4486:	3e bf       	out	0x3e, r19	; 62
    4488:	0f be       	out	0x3f, r0	; 63
    448a:	2d bf       	out	0x3d, r18	; 61
                            LCD_WriteString(timeInput, LCD_ROW_1, 0);
    448c:	ce 01       	movw	r24, r28
    448e:	8f 5a       	subi	r24, 0xAF	; 175
    4490:	9e 4f       	sbci	r25, 0xFE	; 254
    4492:	60 e0       	ldi	r22, 0x00	; 0
    4494:	40 e0       	ldi	r20, 0x00	; 0
    4496:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_WriteString>
    449a:	80 e0       	ldi	r24, 0x00	; 0
    449c:	90 e0       	ldi	r25, 0x00	; 0
    449e:	aa e7       	ldi	r26, 0x7A	; 122
    44a0:	b4 e4       	ldi	r27, 0x44	; 68
    44a2:	8d ab       	std	Y+53, r24	; 0x35
    44a4:	9e ab       	std	Y+54, r25	; 0x36
    44a6:	af ab       	std	Y+55, r26	; 0x37
    44a8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44aa:	6d a9       	ldd	r22, Y+53	; 0x35
    44ac:	7e a9       	ldd	r23, Y+54	; 0x36
    44ae:	8f a9       	ldd	r24, Y+55	; 0x37
    44b0:	98 ad       	ldd	r25, Y+56	; 0x38
    44b2:	20 e0       	ldi	r18, 0x00	; 0
    44b4:	30 e0       	ldi	r19, 0x00	; 0
    44b6:	4a e7       	ldi	r20, 0x7A	; 122
    44b8:	55 e4       	ldi	r21, 0x45	; 69
    44ba:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    44be:	dc 01       	movw	r26, r24
    44c0:	cb 01       	movw	r24, r22
    44c2:	89 ab       	std	Y+49, r24	; 0x31
    44c4:	9a ab       	std	Y+50, r25	; 0x32
    44c6:	ab ab       	std	Y+51, r26	; 0x33
    44c8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    44ca:	69 a9       	ldd	r22, Y+49	; 0x31
    44cc:	7a a9       	ldd	r23, Y+50	; 0x32
    44ce:	8b a9       	ldd	r24, Y+51	; 0x33
    44d0:	9c a9       	ldd	r25, Y+52	; 0x34
    44d2:	20 e0       	ldi	r18, 0x00	; 0
    44d4:	30 e0       	ldi	r19, 0x00	; 0
    44d6:	40 e8       	ldi	r20, 0x80	; 128
    44d8:	5f e3       	ldi	r21, 0x3F	; 63
    44da:	0e 94 2b 04 	call	0x856	; 0x856 <__ltsf2>
    44de:	88 23       	and	r24, r24
    44e0:	2c f4       	brge	.+10     	; 0x44ec <main+0x1cdc>
		__ticks = 1;
    44e2:	81 e0       	ldi	r24, 0x01	; 1
    44e4:	90 e0       	ldi	r25, 0x00	; 0
    44e6:	98 ab       	std	Y+48, r25	; 0x30
    44e8:	8f a7       	std	Y+47, r24	; 0x2f
    44ea:	3f c0       	rjmp	.+126    	; 0x456a <main+0x1d5a>
	else if (__tmp > 65535)
    44ec:	69 a9       	ldd	r22, Y+49	; 0x31
    44ee:	7a a9       	ldd	r23, Y+50	; 0x32
    44f0:	8b a9       	ldd	r24, Y+51	; 0x33
    44f2:	9c a9       	ldd	r25, Y+52	; 0x34
    44f4:	20 e0       	ldi	r18, 0x00	; 0
    44f6:	3f ef       	ldi	r19, 0xFF	; 255
    44f8:	4f e7       	ldi	r20, 0x7F	; 127
    44fa:	57 e4       	ldi	r21, 0x47	; 71
    44fc:	0e 94 cb 03 	call	0x796	; 0x796 <__gtsf2>
    4500:	18 16       	cp	r1, r24
    4502:	4c f5       	brge	.+82     	; 0x4556 <main+0x1d46>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4504:	6d a9       	ldd	r22, Y+53	; 0x35
    4506:	7e a9       	ldd	r23, Y+54	; 0x36
    4508:	8f a9       	ldd	r24, Y+55	; 0x37
    450a:	98 ad       	ldd	r25, Y+56	; 0x38
    450c:	20 e0       	ldi	r18, 0x00	; 0
    450e:	30 e0       	ldi	r19, 0x00	; 0
    4510:	40 e2       	ldi	r20, 0x20	; 32
    4512:	51 e4       	ldi	r21, 0x41	; 65
    4514:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    4518:	dc 01       	movw	r26, r24
    451a:	cb 01       	movw	r24, r22
    451c:	bc 01       	movw	r22, r24
    451e:	cd 01       	movw	r24, r26
    4520:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    4524:	dc 01       	movw	r26, r24
    4526:	cb 01       	movw	r24, r22
    4528:	98 ab       	std	Y+48, r25	; 0x30
    452a:	8f a7       	std	Y+47, r24	; 0x2f
    452c:	0f c0       	rjmp	.+30     	; 0x454c <main+0x1d3c>
    452e:	80 e9       	ldi	r24, 0x90	; 144
    4530:	91 e0       	ldi	r25, 0x01	; 1
    4532:	9e a7       	std	Y+46, r25	; 0x2e
    4534:	8d a7       	std	Y+45, r24	; 0x2d
    4536:	8d a5       	ldd	r24, Y+45	; 0x2d
    4538:	9e a5       	ldd	r25, Y+46	; 0x2e
    453a:	01 97       	sbiw	r24, 0x01	; 1
    453c:	f1 f7       	brne	.-4      	; 0x453a <main+0x1d2a>
    453e:	9e a7       	std	Y+46, r25	; 0x2e
    4540:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4542:	8f a5       	ldd	r24, Y+47	; 0x2f
    4544:	98 a9       	ldd	r25, Y+48	; 0x30
    4546:	01 97       	sbiw	r24, 0x01	; 1
    4548:	98 ab       	std	Y+48, r25	; 0x30
    454a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    454c:	8f a5       	ldd	r24, Y+47	; 0x2f
    454e:	98 a9       	ldd	r25, Y+48	; 0x30
    4550:	00 97       	sbiw	r24, 0x00	; 0
    4552:	69 f7       	brne	.-38     	; 0x452e <main+0x1d1e>
    4554:	14 c0       	rjmp	.+40     	; 0x457e <main+0x1d6e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4556:	69 a9       	ldd	r22, Y+49	; 0x31
    4558:	7a a9       	ldd	r23, Y+50	; 0x32
    455a:	8b a9       	ldd	r24, Y+51	; 0x33
    455c:	9c a9       	ldd	r25, Y+52	; 0x34
    455e:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    4562:	dc 01       	movw	r26, r24
    4564:	cb 01       	movw	r24, r22
    4566:	98 ab       	std	Y+48, r25	; 0x30
    4568:	8f a7       	std	Y+47, r24	; 0x2f
    456a:	8f a5       	ldd	r24, Y+47	; 0x2f
    456c:	98 a9       	ldd	r25, Y+48	; 0x30
    456e:	9c a7       	std	Y+44, r25	; 0x2c
    4570:	8b a7       	std	Y+43, r24	; 0x2b
    4572:	8b a5       	ldd	r24, Y+43	; 0x2b
    4574:	9c a5       	ldd	r25, Y+44	; 0x2c
    4576:	01 97       	sbiw	r24, 0x01	; 1
    4578:	f1 f7       	brne	.-4      	; 0x4576 <main+0x1d66>
    457a:	9c a7       	std	Y+44, r25	; 0x2c
    457c:	8b a7       	std	Y+43, r24	; 0x2b
                            _delay_ms(1000);

                            if (!time_paused) {
    457e:	80 91 3f 02 	lds	r24, 0x023F
    4582:	88 23       	and	r24, r24
    4584:	39 f5       	brne	.+78     	; 0x45d4 <main+0x1dc4>
                                if (seconds == 0) {
    4586:	80 91 3d 02 	lds	r24, 0x023D
    458a:	90 91 3e 02 	lds	r25, 0x023E
    458e:	00 97       	sbiw	r24, 0x00	; 0
    4590:	b1 f4       	brne	.+44     	; 0x45be <main+0x1dae>
                                    if (minutes > 0) {
    4592:	80 91 3b 02 	lds	r24, 0x023B
    4596:	90 91 3c 02 	lds	r25, 0x023C
    459a:	00 97       	sbiw	r24, 0x00	; 0
    459c:	c9 f0       	breq	.+50     	; 0x45d0 <main+0x1dc0>
                                        minutes--;
    459e:	80 91 3b 02 	lds	r24, 0x023B
    45a2:	90 91 3c 02 	lds	r25, 0x023C
    45a6:	01 97       	sbiw	r24, 0x01	; 1
    45a8:	90 93 3c 02 	sts	0x023C, r25
    45ac:	80 93 3b 02 	sts	0x023B, r24
                                        seconds = 59;
    45b0:	8b e3       	ldi	r24, 0x3B	; 59
    45b2:	90 e0       	ldi	r25, 0x00	; 0
    45b4:	90 93 3e 02 	sts	0x023E, r25
    45b8:	80 93 3d 02 	sts	0x023D, r24
    45bc:	09 c0       	rjmp	.+18     	; 0x45d0 <main+0x1dc0>
                                    }
                                } else {
                                    seconds--;
    45be:	80 91 3d 02 	lds	r24, 0x023D
    45c2:	90 91 3e 02 	lds	r25, 0x023E
    45c6:	01 97       	sbiw	r24, 0x01	; 1
    45c8:	90 93 3e 02 	sts	0x023E, r25
    45cc:	80 93 3d 02 	sts	0x023D, r24
                                }
                                LCD_Clear(); // Clear the display for the next update
    45d0:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_Clear>
                        LCD_Clear();
                        LCD_WriteString("Timer Starts", LCD_ROW_1, 0);
                        _delay_ms(1000);
                        LCD_Clear();

                        while ((minutes > 0 || seconds > 0) && currentMode == TIMER) {
    45d4:	80 91 3b 02 	lds	r24, 0x023B
    45d8:	90 91 3c 02 	lds	r25, 0x023C
    45dc:	00 97       	sbiw	r24, 0x00	; 0
    45de:	31 f4       	brne	.+12     	; 0x45ec <main+0x1ddc>
    45e0:	80 91 3d 02 	lds	r24, 0x023D
    45e4:	90 91 3e 02 	lds	r25, 0x023E
    45e8:	00 97       	sbiw	r24, 0x00	; 0
    45ea:	29 f0       	breq	.+10     	; 0x45f6 <main+0x1de6>
    45ec:	80 91 37 02 	lds	r24, 0x0237
    45f0:	82 30       	cpi	r24, 0x02	; 2
    45f2:	09 f4       	brne	.+2      	; 0x45f6 <main+0x1de6>
    45f4:	1f cf       	rjmp	.-450    	; 0x4434 <main+0x1c24>
                                }
                                LCD_Clear(); // Clear the display for the next update
                            }
                        }

                        if (currentMode == TIMER) {
    45f6:	80 91 37 02 	lds	r24, 0x0237
    45fa:	82 30       	cpi	r24, 0x02	; 2
    45fc:	09 f0       	breq	.+2      	; 0x4600 <main+0x1df0>
    45fe:	02 c1       	rjmp	.+516    	; 0x4804 <main+0x1ff4>
                            LCD_WriteString("Time's Up!", LCD_ROW_1, 0);
    4600:	8b e0       	ldi	r24, 0x0B	; 11
    4602:	91 e0       	ldi	r25, 0x01	; 1
    4604:	60 e0       	ldi	r22, 0x00	; 0
    4606:	40 e0       	ldi	r20, 0x00	; 0
    4608:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_WriteString>
                            PORTD |= (1 << 4);
    460c:	a2 e3       	ldi	r26, 0x32	; 50
    460e:	b0 e0       	ldi	r27, 0x00	; 0
    4610:	e2 e3       	ldi	r30, 0x32	; 50
    4612:	f0 e0       	ldi	r31, 0x00	; 0
    4614:	80 81       	ld	r24, Z
    4616:	80 61       	ori	r24, 0x10	; 16
    4618:	8c 93       	st	X, r24
    461a:	80 e0       	ldi	r24, 0x00	; 0
    461c:	90 e0       	ldi	r25, 0x00	; 0
    461e:	aa e7       	ldi	r26, 0x7A	; 122
    4620:	b4 e4       	ldi	r27, 0x44	; 68
    4622:	8f a3       	std	Y+39, r24	; 0x27
    4624:	98 a7       	std	Y+40, r25	; 0x28
    4626:	a9 a7       	std	Y+41, r26	; 0x29
    4628:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    462a:	6f a1       	ldd	r22, Y+39	; 0x27
    462c:	78 a5       	ldd	r23, Y+40	; 0x28
    462e:	89 a5       	ldd	r24, Y+41	; 0x29
    4630:	9a a5       	ldd	r25, Y+42	; 0x2a
    4632:	20 e0       	ldi	r18, 0x00	; 0
    4634:	30 e0       	ldi	r19, 0x00	; 0
    4636:	4a e7       	ldi	r20, 0x7A	; 122
    4638:	55 e4       	ldi	r21, 0x45	; 69
    463a:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    463e:	dc 01       	movw	r26, r24
    4640:	cb 01       	movw	r24, r22
    4642:	8b a3       	std	Y+35, r24	; 0x23
    4644:	9c a3       	std	Y+36, r25	; 0x24
    4646:	ad a3       	std	Y+37, r26	; 0x25
    4648:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    464a:	6b a1       	ldd	r22, Y+35	; 0x23
    464c:	7c a1       	ldd	r23, Y+36	; 0x24
    464e:	8d a1       	ldd	r24, Y+37	; 0x25
    4650:	9e a1       	ldd	r25, Y+38	; 0x26
    4652:	20 e0       	ldi	r18, 0x00	; 0
    4654:	30 e0       	ldi	r19, 0x00	; 0
    4656:	40 e8       	ldi	r20, 0x80	; 128
    4658:	5f e3       	ldi	r21, 0x3F	; 63
    465a:	0e 94 2b 04 	call	0x856	; 0x856 <__ltsf2>
    465e:	88 23       	and	r24, r24
    4660:	2c f4       	brge	.+10     	; 0x466c <main+0x1e5c>
		__ticks = 1;
    4662:	81 e0       	ldi	r24, 0x01	; 1
    4664:	90 e0       	ldi	r25, 0x00	; 0
    4666:	9a a3       	std	Y+34, r25	; 0x22
    4668:	89 a3       	std	Y+33, r24	; 0x21
    466a:	3f c0       	rjmp	.+126    	; 0x46ea <main+0x1eda>
	else if (__tmp > 65535)
    466c:	6b a1       	ldd	r22, Y+35	; 0x23
    466e:	7c a1       	ldd	r23, Y+36	; 0x24
    4670:	8d a1       	ldd	r24, Y+37	; 0x25
    4672:	9e a1       	ldd	r25, Y+38	; 0x26
    4674:	20 e0       	ldi	r18, 0x00	; 0
    4676:	3f ef       	ldi	r19, 0xFF	; 255
    4678:	4f e7       	ldi	r20, 0x7F	; 127
    467a:	57 e4       	ldi	r21, 0x47	; 71
    467c:	0e 94 cb 03 	call	0x796	; 0x796 <__gtsf2>
    4680:	18 16       	cp	r1, r24
    4682:	4c f5       	brge	.+82     	; 0x46d6 <main+0x1ec6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4684:	6f a1       	ldd	r22, Y+39	; 0x27
    4686:	78 a5       	ldd	r23, Y+40	; 0x28
    4688:	89 a5       	ldd	r24, Y+41	; 0x29
    468a:	9a a5       	ldd	r25, Y+42	; 0x2a
    468c:	20 e0       	ldi	r18, 0x00	; 0
    468e:	30 e0       	ldi	r19, 0x00	; 0
    4690:	40 e2       	ldi	r20, 0x20	; 32
    4692:	51 e4       	ldi	r21, 0x41	; 65
    4694:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    4698:	dc 01       	movw	r26, r24
    469a:	cb 01       	movw	r24, r22
    469c:	bc 01       	movw	r22, r24
    469e:	cd 01       	movw	r24, r26
    46a0:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    46a4:	dc 01       	movw	r26, r24
    46a6:	cb 01       	movw	r24, r22
    46a8:	9a a3       	std	Y+34, r25	; 0x22
    46aa:	89 a3       	std	Y+33, r24	; 0x21
    46ac:	0f c0       	rjmp	.+30     	; 0x46cc <main+0x1ebc>
    46ae:	80 e9       	ldi	r24, 0x90	; 144
    46b0:	91 e0       	ldi	r25, 0x01	; 1
    46b2:	98 a3       	std	Y+32, r25	; 0x20
    46b4:	8f 8f       	std	Y+31, r24	; 0x1f
    46b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    46b8:	98 a1       	ldd	r25, Y+32	; 0x20
    46ba:	01 97       	sbiw	r24, 0x01	; 1
    46bc:	f1 f7       	brne	.-4      	; 0x46ba <main+0x1eaa>
    46be:	98 a3       	std	Y+32, r25	; 0x20
    46c0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46c2:	89 a1       	ldd	r24, Y+33	; 0x21
    46c4:	9a a1       	ldd	r25, Y+34	; 0x22
    46c6:	01 97       	sbiw	r24, 0x01	; 1
    46c8:	9a a3       	std	Y+34, r25	; 0x22
    46ca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46cc:	89 a1       	ldd	r24, Y+33	; 0x21
    46ce:	9a a1       	ldd	r25, Y+34	; 0x22
    46d0:	00 97       	sbiw	r24, 0x00	; 0
    46d2:	69 f7       	brne	.-38     	; 0x46ae <main+0x1e9e>
    46d4:	14 c0       	rjmp	.+40     	; 0x46fe <main+0x1eee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46d6:	6b a1       	ldd	r22, Y+35	; 0x23
    46d8:	7c a1       	ldd	r23, Y+36	; 0x24
    46da:	8d a1       	ldd	r24, Y+37	; 0x25
    46dc:	9e a1       	ldd	r25, Y+38	; 0x26
    46de:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    46e2:	dc 01       	movw	r26, r24
    46e4:	cb 01       	movw	r24, r22
    46e6:	9a a3       	std	Y+34, r25	; 0x22
    46e8:	89 a3       	std	Y+33, r24	; 0x21
    46ea:	89 a1       	ldd	r24, Y+33	; 0x21
    46ec:	9a a1       	ldd	r25, Y+34	; 0x22
    46ee:	9e 8f       	std	Y+30, r25	; 0x1e
    46f0:	8d 8f       	std	Y+29, r24	; 0x1d
    46f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    46f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    46f6:	01 97       	sbiw	r24, 0x01	; 1
    46f8:	f1 f7       	brne	.-4      	; 0x46f6 <main+0x1ee6>
    46fa:	9e 8f       	std	Y+30, r25	; 0x1e
    46fc:	8d 8f       	std	Y+29, r24	; 0x1d

                            _delay_ms(1000);
                            PORTD &= ~(1 << 4);
    46fe:	a2 e3       	ldi	r26, 0x32	; 50
    4700:	b0 e0       	ldi	r27, 0x00	; 0
    4702:	e2 e3       	ldi	r30, 0x32	; 50
    4704:	f0 e0       	ldi	r31, 0x00	; 0
    4706:	80 81       	ld	r24, Z
    4708:	8f 7e       	andi	r24, 0xEF	; 239
    470a:	8c 93       	st	X, r24
    470c:	80 e0       	ldi	r24, 0x00	; 0
    470e:	90 e0       	ldi	r25, 0x00	; 0
    4710:	aa e7       	ldi	r26, 0x7A	; 122
    4712:	b4 e4       	ldi	r27, 0x44	; 68
    4714:	89 8f       	std	Y+25, r24	; 0x19
    4716:	9a 8f       	std	Y+26, r25	; 0x1a
    4718:	ab 8f       	std	Y+27, r26	; 0x1b
    471a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    471c:	69 8d       	ldd	r22, Y+25	; 0x19
    471e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4720:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4722:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4724:	20 e0       	ldi	r18, 0x00	; 0
    4726:	30 e0       	ldi	r19, 0x00	; 0
    4728:	4a e7       	ldi	r20, 0x7A	; 122
    472a:	55 e4       	ldi	r21, 0x45	; 69
    472c:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    4730:	dc 01       	movw	r26, r24
    4732:	cb 01       	movw	r24, r22
    4734:	8d 8b       	std	Y+21, r24	; 0x15
    4736:	9e 8b       	std	Y+22, r25	; 0x16
    4738:	af 8b       	std	Y+23, r26	; 0x17
    473a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    473c:	6d 89       	ldd	r22, Y+21	; 0x15
    473e:	7e 89       	ldd	r23, Y+22	; 0x16
    4740:	8f 89       	ldd	r24, Y+23	; 0x17
    4742:	98 8d       	ldd	r25, Y+24	; 0x18
    4744:	20 e0       	ldi	r18, 0x00	; 0
    4746:	30 e0       	ldi	r19, 0x00	; 0
    4748:	40 e8       	ldi	r20, 0x80	; 128
    474a:	5f e3       	ldi	r21, 0x3F	; 63
    474c:	0e 94 2b 04 	call	0x856	; 0x856 <__ltsf2>
    4750:	88 23       	and	r24, r24
    4752:	2c f4       	brge	.+10     	; 0x475e <main+0x1f4e>
		__ticks = 1;
    4754:	81 e0       	ldi	r24, 0x01	; 1
    4756:	90 e0       	ldi	r25, 0x00	; 0
    4758:	9c 8b       	std	Y+20, r25	; 0x14
    475a:	8b 8b       	std	Y+19, r24	; 0x13
    475c:	3f c0       	rjmp	.+126    	; 0x47dc <main+0x1fcc>
	else if (__tmp > 65535)
    475e:	6d 89       	ldd	r22, Y+21	; 0x15
    4760:	7e 89       	ldd	r23, Y+22	; 0x16
    4762:	8f 89       	ldd	r24, Y+23	; 0x17
    4764:	98 8d       	ldd	r25, Y+24	; 0x18
    4766:	20 e0       	ldi	r18, 0x00	; 0
    4768:	3f ef       	ldi	r19, 0xFF	; 255
    476a:	4f e7       	ldi	r20, 0x7F	; 127
    476c:	57 e4       	ldi	r21, 0x47	; 71
    476e:	0e 94 cb 03 	call	0x796	; 0x796 <__gtsf2>
    4772:	18 16       	cp	r1, r24
    4774:	4c f5       	brge	.+82     	; 0x47c8 <main+0x1fb8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4776:	69 8d       	ldd	r22, Y+25	; 0x19
    4778:	7a 8d       	ldd	r23, Y+26	; 0x1a
    477a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    477c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    477e:	20 e0       	ldi	r18, 0x00	; 0
    4780:	30 e0       	ldi	r19, 0x00	; 0
    4782:	40 e2       	ldi	r20, 0x20	; 32
    4784:	51 e4       	ldi	r21, 0x41	; 65
    4786:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    478a:	dc 01       	movw	r26, r24
    478c:	cb 01       	movw	r24, r22
    478e:	bc 01       	movw	r22, r24
    4790:	cd 01       	movw	r24, r26
    4792:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    4796:	dc 01       	movw	r26, r24
    4798:	cb 01       	movw	r24, r22
    479a:	9c 8b       	std	Y+20, r25	; 0x14
    479c:	8b 8b       	std	Y+19, r24	; 0x13
    479e:	0f c0       	rjmp	.+30     	; 0x47be <main+0x1fae>
    47a0:	80 e9       	ldi	r24, 0x90	; 144
    47a2:	91 e0       	ldi	r25, 0x01	; 1
    47a4:	9a 8b       	std	Y+18, r25	; 0x12
    47a6:	89 8b       	std	Y+17, r24	; 0x11
    47a8:	89 89       	ldd	r24, Y+17	; 0x11
    47aa:	9a 89       	ldd	r25, Y+18	; 0x12
    47ac:	01 97       	sbiw	r24, 0x01	; 1
    47ae:	f1 f7       	brne	.-4      	; 0x47ac <main+0x1f9c>
    47b0:	9a 8b       	std	Y+18, r25	; 0x12
    47b2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47b4:	8b 89       	ldd	r24, Y+19	; 0x13
    47b6:	9c 89       	ldd	r25, Y+20	; 0x14
    47b8:	01 97       	sbiw	r24, 0x01	; 1
    47ba:	9c 8b       	std	Y+20, r25	; 0x14
    47bc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47be:	8b 89       	ldd	r24, Y+19	; 0x13
    47c0:	9c 89       	ldd	r25, Y+20	; 0x14
    47c2:	00 97       	sbiw	r24, 0x00	; 0
    47c4:	69 f7       	brne	.-38     	; 0x47a0 <main+0x1f90>
    47c6:	14 c0       	rjmp	.+40     	; 0x47f0 <main+0x1fe0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47c8:	6d 89       	ldd	r22, Y+21	; 0x15
    47ca:	7e 89       	ldd	r23, Y+22	; 0x16
    47cc:	8f 89       	ldd	r24, Y+23	; 0x17
    47ce:	98 8d       	ldd	r25, Y+24	; 0x18
    47d0:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    47d4:	dc 01       	movw	r26, r24
    47d6:	cb 01       	movw	r24, r22
    47d8:	9c 8b       	std	Y+20, r25	; 0x14
    47da:	8b 8b       	std	Y+19, r24	; 0x13
    47dc:	8b 89       	ldd	r24, Y+19	; 0x13
    47de:	9c 89       	ldd	r25, Y+20	; 0x14
    47e0:	98 8b       	std	Y+16, r25	; 0x10
    47e2:	8f 87       	std	Y+15, r24	; 0x0f
    47e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    47e6:	98 89       	ldd	r25, Y+16	; 0x10
    47e8:	01 97       	sbiw	r24, 0x01	; 1
    47ea:	f1 f7       	brne	.-4      	; 0x47e8 <main+0x1fd8>
    47ec:	98 8b       	std	Y+16, r25	; 0x10
    47ee:	8f 87       	std	Y+15, r24	; 0x0f
                            _delay_ms(1000);
                            currentMode = CALCULATOR; // Reset to clock mode or desired mode
    47f0:	10 92 37 02 	sts	0x0237, r1
                            LCD_Clear();
    47f4:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_Clear>
    47f8:	05 c0       	rjmp	.+10     	; 0x4804 <main+0x1ff4>
                LCD_GoToPos(LCD_ROW_1, 0);
                LCD_WriteString((uint8_t *)time_string, LCD_ROW_1, 0); // Cast to uint8_t pointer to fix warning
                break;

            case TIMER:
                while (currentMode == TIMER) {
    47fa:	80 91 37 02 	lds	r24, 0x0237
    47fe:	82 30       	cpi	r24, 0x02	; 2
    4800:	09 f4       	brne	.+2      	; 0x4804 <main+0x1ff4>
    4802:	5a cb       	rjmp	.-2380   	; 0x3eb8 <main+0x16a8>
    4804:	80 e0       	ldi	r24, 0x00	; 0
    4806:	90 e0       	ldi	r25, 0x00	; 0
    4808:	aa e7       	ldi	r26, 0x7A	; 122
    480a:	b4 e4       	ldi	r27, 0x44	; 68
    480c:	8b 87       	std	Y+11, r24	; 0x0b
    480e:	9c 87       	std	Y+12, r25	; 0x0c
    4810:	ad 87       	std	Y+13, r26	; 0x0d
    4812:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4814:	6b 85       	ldd	r22, Y+11	; 0x0b
    4816:	7c 85       	ldd	r23, Y+12	; 0x0c
    4818:	8d 85       	ldd	r24, Y+13	; 0x0d
    481a:	9e 85       	ldd	r25, Y+14	; 0x0e
    481c:	20 e0       	ldi	r18, 0x00	; 0
    481e:	30 e0       	ldi	r19, 0x00	; 0
    4820:	4a e7       	ldi	r20, 0x7A	; 122
    4822:	55 e4       	ldi	r21, 0x45	; 69
    4824:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    4828:	dc 01       	movw	r26, r24
    482a:	cb 01       	movw	r24, r22
    482c:	8f 83       	std	Y+7, r24	; 0x07
    482e:	98 87       	std	Y+8, r25	; 0x08
    4830:	a9 87       	std	Y+9, r26	; 0x09
    4832:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4834:	6f 81       	ldd	r22, Y+7	; 0x07
    4836:	78 85       	ldd	r23, Y+8	; 0x08
    4838:	89 85       	ldd	r24, Y+9	; 0x09
    483a:	9a 85       	ldd	r25, Y+10	; 0x0a
    483c:	20 e0       	ldi	r18, 0x00	; 0
    483e:	30 e0       	ldi	r19, 0x00	; 0
    4840:	40 e8       	ldi	r20, 0x80	; 128
    4842:	5f e3       	ldi	r21, 0x3F	; 63
    4844:	0e 94 2b 04 	call	0x856	; 0x856 <__ltsf2>
    4848:	88 23       	and	r24, r24
    484a:	2c f4       	brge	.+10     	; 0x4856 <main+0x2046>
		__ticks = 1;
    484c:	81 e0       	ldi	r24, 0x01	; 1
    484e:	90 e0       	ldi	r25, 0x00	; 0
    4850:	9e 83       	std	Y+6, r25	; 0x06
    4852:	8d 83       	std	Y+5, r24	; 0x05
    4854:	40 c0       	rjmp	.+128    	; 0x48d6 <main+0x20c6>
	else if (__tmp > 65535)
    4856:	6f 81       	ldd	r22, Y+7	; 0x07
    4858:	78 85       	ldd	r23, Y+8	; 0x08
    485a:	89 85       	ldd	r24, Y+9	; 0x09
    485c:	9a 85       	ldd	r25, Y+10	; 0x0a
    485e:	20 e0       	ldi	r18, 0x00	; 0
    4860:	3f ef       	ldi	r19, 0xFF	; 255
    4862:	4f e7       	ldi	r20, 0x7F	; 127
    4864:	57 e4       	ldi	r21, 0x47	; 71
    4866:	0e 94 cb 03 	call	0x796	; 0x796 <__gtsf2>
    486a:	18 16       	cp	r1, r24
    486c:	54 f5       	brge	.+84     	; 0x48c2 <main+0x20b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    486e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4870:	7c 85       	ldd	r23, Y+12	; 0x0c
    4872:	8d 85       	ldd	r24, Y+13	; 0x0d
    4874:	9e 85       	ldd	r25, Y+14	; 0x0e
    4876:	20 e0       	ldi	r18, 0x00	; 0
    4878:	30 e0       	ldi	r19, 0x00	; 0
    487a:	40 e2       	ldi	r20, 0x20	; 32
    487c:	51 e4       	ldi	r21, 0x41	; 65
    487e:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    4882:	dc 01       	movw	r26, r24
    4884:	cb 01       	movw	r24, r22
    4886:	bc 01       	movw	r22, r24
    4888:	cd 01       	movw	r24, r26
    488a:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    488e:	dc 01       	movw	r26, r24
    4890:	cb 01       	movw	r24, r22
    4892:	9e 83       	std	Y+6, r25	; 0x06
    4894:	8d 83       	std	Y+5, r24	; 0x05
    4896:	0f c0       	rjmp	.+30     	; 0x48b6 <main+0x20a6>
    4898:	80 e9       	ldi	r24, 0x90	; 144
    489a:	91 e0       	ldi	r25, 0x01	; 1
    489c:	9c 83       	std	Y+4, r25	; 0x04
    489e:	8b 83       	std	Y+3, r24	; 0x03
    48a0:	8b 81       	ldd	r24, Y+3	; 0x03
    48a2:	9c 81       	ldd	r25, Y+4	; 0x04
    48a4:	01 97       	sbiw	r24, 0x01	; 1
    48a6:	f1 f7       	brne	.-4      	; 0x48a4 <main+0x2094>
    48a8:	9c 83       	std	Y+4, r25	; 0x04
    48aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48ac:	8d 81       	ldd	r24, Y+5	; 0x05
    48ae:	9e 81       	ldd	r25, Y+6	; 0x06
    48b0:	01 97       	sbiw	r24, 0x01	; 1
    48b2:	9e 83       	std	Y+6, r25	; 0x06
    48b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48b6:	8d 81       	ldd	r24, Y+5	; 0x05
    48b8:	9e 81       	ldd	r25, Y+6	; 0x06
    48ba:	00 97       	sbiw	r24, 0x00	; 0
    48bc:	69 f7       	brne	.-38     	; 0x4898 <main+0x2088>
    48be:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <main+0x2a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48c2:	6f 81       	ldd	r22, Y+7	; 0x07
    48c4:	78 85       	ldd	r23, Y+8	; 0x08
    48c6:	89 85       	ldd	r24, Y+9	; 0x09
    48c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    48ca:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    48ce:	dc 01       	movw	r26, r24
    48d0:	cb 01       	movw	r24, r22
    48d2:	9e 83       	std	Y+6, r25	; 0x06
    48d4:	8d 83       	std	Y+5, r24	; 0x05
    48d6:	8d 81       	ldd	r24, Y+5	; 0x05
    48d8:	9e 81       	ldd	r25, Y+6	; 0x06
    48da:	9a 83       	std	Y+2, r25	; 0x02
    48dc:	89 83       	std	Y+1, r24	; 0x01
    48de:	89 81       	ldd	r24, Y+1	; 0x01
    48e0:	9a 81       	ldd	r25, Y+2	; 0x02
    48e2:	01 97       	sbiw	r24, 0x01	; 1
    48e4:	f1 f7       	brne	.-4      	; 0x48e2 <main+0x20d2>
    48e6:	9a 83       	std	Y+2, r25	; 0x02
    48e8:	89 83       	std	Y+1, r24	; 0x01
    48ea:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <main+0x2a4>

000048ee <__mulsi3>:
    48ee:	62 9f       	mul	r22, r18
    48f0:	d0 01       	movw	r26, r0
    48f2:	73 9f       	mul	r23, r19
    48f4:	f0 01       	movw	r30, r0
    48f6:	82 9f       	mul	r24, r18
    48f8:	e0 0d       	add	r30, r0
    48fa:	f1 1d       	adc	r31, r1
    48fc:	64 9f       	mul	r22, r20
    48fe:	e0 0d       	add	r30, r0
    4900:	f1 1d       	adc	r31, r1
    4902:	92 9f       	mul	r25, r18
    4904:	f0 0d       	add	r31, r0
    4906:	83 9f       	mul	r24, r19
    4908:	f0 0d       	add	r31, r0
    490a:	74 9f       	mul	r23, r20
    490c:	f0 0d       	add	r31, r0
    490e:	65 9f       	mul	r22, r21
    4910:	f0 0d       	add	r31, r0
    4912:	99 27       	eor	r25, r25
    4914:	72 9f       	mul	r23, r18
    4916:	b0 0d       	add	r27, r0
    4918:	e1 1d       	adc	r30, r1
    491a:	f9 1f       	adc	r31, r25
    491c:	63 9f       	mul	r22, r19
    491e:	b0 0d       	add	r27, r0
    4920:	e1 1d       	adc	r30, r1
    4922:	f9 1f       	adc	r31, r25
    4924:	bd 01       	movw	r22, r26
    4926:	cf 01       	movw	r24, r30
    4928:	11 24       	eor	r1, r1
    492a:	08 95       	ret

0000492c <__divmodhi4>:
    492c:	97 fb       	bst	r25, 7
    492e:	09 2e       	mov	r0, r25
    4930:	07 26       	eor	r0, r23
    4932:	0a d0       	rcall	.+20     	; 0x4948 <__divmodhi4_neg1>
    4934:	77 fd       	sbrc	r23, 7
    4936:	04 d0       	rcall	.+8      	; 0x4940 <__divmodhi4_neg2>
    4938:	0c d0       	rcall	.+24     	; 0x4952 <__udivmodhi4>
    493a:	06 d0       	rcall	.+12     	; 0x4948 <__divmodhi4_neg1>
    493c:	00 20       	and	r0, r0
    493e:	1a f4       	brpl	.+6      	; 0x4946 <__divmodhi4_exit>

00004940 <__divmodhi4_neg2>:
    4940:	70 95       	com	r23
    4942:	61 95       	neg	r22
    4944:	7f 4f       	sbci	r23, 0xFF	; 255

00004946 <__divmodhi4_exit>:
    4946:	08 95       	ret

00004948 <__divmodhi4_neg1>:
    4948:	f6 f7       	brtc	.-4      	; 0x4946 <__divmodhi4_exit>
    494a:	90 95       	com	r25
    494c:	81 95       	neg	r24
    494e:	9f 4f       	sbci	r25, 0xFF	; 255
    4950:	08 95       	ret

00004952 <__udivmodhi4>:
    4952:	aa 1b       	sub	r26, r26
    4954:	bb 1b       	sub	r27, r27
    4956:	51 e1       	ldi	r21, 0x11	; 17
    4958:	07 c0       	rjmp	.+14     	; 0x4968 <__udivmodhi4_ep>

0000495a <__udivmodhi4_loop>:
    495a:	aa 1f       	adc	r26, r26
    495c:	bb 1f       	adc	r27, r27
    495e:	a6 17       	cp	r26, r22
    4960:	b7 07       	cpc	r27, r23
    4962:	10 f0       	brcs	.+4      	; 0x4968 <__udivmodhi4_ep>
    4964:	a6 1b       	sub	r26, r22
    4966:	b7 0b       	sbc	r27, r23

00004968 <__udivmodhi4_ep>:
    4968:	88 1f       	adc	r24, r24
    496a:	99 1f       	adc	r25, r25
    496c:	5a 95       	dec	r21
    496e:	a9 f7       	brne	.-22     	; 0x495a <__udivmodhi4_loop>
    4970:	80 95       	com	r24
    4972:	90 95       	com	r25
    4974:	bc 01       	movw	r22, r24
    4976:	cd 01       	movw	r24, r26
    4978:	08 95       	ret

0000497a <__prologue_saves__>:
    497a:	2f 92       	push	r2
    497c:	3f 92       	push	r3
    497e:	4f 92       	push	r4
    4980:	5f 92       	push	r5
    4982:	6f 92       	push	r6
    4984:	7f 92       	push	r7
    4986:	8f 92       	push	r8
    4988:	9f 92       	push	r9
    498a:	af 92       	push	r10
    498c:	bf 92       	push	r11
    498e:	cf 92       	push	r12
    4990:	df 92       	push	r13
    4992:	ef 92       	push	r14
    4994:	ff 92       	push	r15
    4996:	0f 93       	push	r16
    4998:	1f 93       	push	r17
    499a:	cf 93       	push	r28
    499c:	df 93       	push	r29
    499e:	cd b7       	in	r28, 0x3d	; 61
    49a0:	de b7       	in	r29, 0x3e	; 62
    49a2:	ca 1b       	sub	r28, r26
    49a4:	db 0b       	sbc	r29, r27
    49a6:	0f b6       	in	r0, 0x3f	; 63
    49a8:	f8 94       	cli
    49aa:	de bf       	out	0x3e, r29	; 62
    49ac:	0f be       	out	0x3f, r0	; 63
    49ae:	cd bf       	out	0x3d, r28	; 61
    49b0:	09 94       	ijmp

000049b2 <__epilogue_restores__>:
    49b2:	2a 88       	ldd	r2, Y+18	; 0x12
    49b4:	39 88       	ldd	r3, Y+17	; 0x11
    49b6:	48 88       	ldd	r4, Y+16	; 0x10
    49b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    49ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    49bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    49be:	8c 84       	ldd	r8, Y+12	; 0x0c
    49c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    49c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    49c4:	b9 84       	ldd	r11, Y+9	; 0x09
    49c6:	c8 84       	ldd	r12, Y+8	; 0x08
    49c8:	df 80       	ldd	r13, Y+7	; 0x07
    49ca:	ee 80       	ldd	r14, Y+6	; 0x06
    49cc:	fd 80       	ldd	r15, Y+5	; 0x05
    49ce:	0c 81       	ldd	r16, Y+4	; 0x04
    49d0:	1b 81       	ldd	r17, Y+3	; 0x03
    49d2:	aa 81       	ldd	r26, Y+2	; 0x02
    49d4:	b9 81       	ldd	r27, Y+1	; 0x01
    49d6:	ce 0f       	add	r28, r30
    49d8:	d1 1d       	adc	r29, r1
    49da:	0f b6       	in	r0, 0x3f	; 63
    49dc:	f8 94       	cli
    49de:	de bf       	out	0x3e, r29	; 62
    49e0:	0f be       	out	0x3f, r0	; 63
    49e2:	cd bf       	out	0x3d, r28	; 61
    49e4:	ed 01       	movw	r28, r26
    49e6:	08 95       	ret

000049e8 <sprintf>:
    49e8:	ae e0       	ldi	r26, 0x0E	; 14
    49ea:	b0 e0       	ldi	r27, 0x00	; 0
    49ec:	ea ef       	ldi	r30, 0xFA	; 250
    49ee:	f4 e2       	ldi	r31, 0x24	; 36
    49f0:	0c 94 cb 24 	jmp	0x4996	; 0x4996 <__prologue_saves__+0x1c>
    49f4:	0d 89       	ldd	r16, Y+21	; 0x15
    49f6:	1e 89       	ldd	r17, Y+22	; 0x16
    49f8:	86 e0       	ldi	r24, 0x06	; 6
    49fa:	8c 83       	std	Y+4, r24	; 0x04
    49fc:	1a 83       	std	Y+2, r17	; 0x02
    49fe:	09 83       	std	Y+1, r16	; 0x01
    4a00:	8f ef       	ldi	r24, 0xFF	; 255
    4a02:	9f e7       	ldi	r25, 0x7F	; 127
    4a04:	9e 83       	std	Y+6, r25	; 0x06
    4a06:	8d 83       	std	Y+5, r24	; 0x05
    4a08:	9e 01       	movw	r18, r28
    4a0a:	27 5e       	subi	r18, 0xE7	; 231
    4a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    4a0e:	ce 01       	movw	r24, r28
    4a10:	01 96       	adiw	r24, 0x01	; 1
    4a12:	6f 89       	ldd	r22, Y+23	; 0x17
    4a14:	78 8d       	ldd	r23, Y+24	; 0x18
    4a16:	a9 01       	movw	r20, r18
    4a18:	0e 94 39 25 	call	0x4a72	; 0x4a72 <vfprintf>
    4a1c:	2f 81       	ldd	r18, Y+7	; 0x07
    4a1e:	38 85       	ldd	r19, Y+8	; 0x08
    4a20:	02 0f       	add	r16, r18
    4a22:	13 1f       	adc	r17, r19
    4a24:	f8 01       	movw	r30, r16
    4a26:	10 82       	st	Z, r1
    4a28:	2e 96       	adiw	r28, 0x0e	; 14
    4a2a:	e4 e0       	ldi	r30, 0x04	; 4
    4a2c:	0c 94 e7 24 	jmp	0x49ce	; 0x49ce <__epilogue_restores__+0x1c>

00004a30 <sscanf>:
    4a30:	ae e0       	ldi	r26, 0x0E	; 14
    4a32:	b0 e0       	ldi	r27, 0x00	; 0
    4a34:	ee e1       	ldi	r30, 0x1E	; 30
    4a36:	f5 e2       	ldi	r31, 0x25	; 37
    4a38:	0c 94 cd 24 	jmp	0x499a	; 0x499a <__prologue_saves__+0x20>
    4a3c:	85 e0       	ldi	r24, 0x05	; 5
    4a3e:	8c 83       	std	Y+4, r24	; 0x04
    4a40:	8b 89       	ldd	r24, Y+19	; 0x13
    4a42:	9c 89       	ldd	r25, Y+20	; 0x14
    4a44:	9a 83       	std	Y+2, r25	; 0x02
    4a46:	89 83       	std	Y+1, r24	; 0x01
    4a48:	9e 01       	movw	r18, r28
    4a4a:	29 5e       	subi	r18, 0xE9	; 233
    4a4c:	3f 4f       	sbci	r19, 0xFF	; 255
    4a4e:	ce 01       	movw	r24, r28
    4a50:	01 96       	adiw	r24, 0x01	; 1
    4a52:	6d 89       	ldd	r22, Y+21	; 0x15
    4a54:	7e 89       	ldd	r23, Y+22	; 0x16
    4a56:	a9 01       	movw	r20, r18
    4a58:	0e 94 9a 28 	call	0x5134	; 0x5134 <vfscanf>
    4a5c:	2e 96       	adiw	r28, 0x0e	; 14
    4a5e:	e2 e0       	ldi	r30, 0x02	; 2
    4a60:	0c 94 e9 24 	jmp	0x49d2	; 0x49d2 <__epilogue_restores__+0x20>

00004a64 <trunc>:
    4a64:	b0 d5       	rcall	.+2912   	; 0x55c6 <__fp_trunc>
    4a66:	20 f0       	brcs	.+8      	; 0x4a70 <trunc+0xc>
    4a68:	9f 37       	cpi	r25, 0x7F	; 127
    4a6a:	08 f4       	brcc	.+2      	; 0x4a6e <trunc+0xa>
    4a6c:	c4 c5       	rjmp	.+2952   	; 0x55f6 <__fp_szero>
    4a6e:	82 c5       	rjmp	.+2820   	; 0x5574 <__fp_mintl>
    4a70:	9c c5       	rjmp	.+2872   	; 0x55aa <__fp_mpack>

00004a72 <vfprintf>:
    4a72:	ab e0       	ldi	r26, 0x0B	; 11
    4a74:	b0 e0       	ldi	r27, 0x00	; 0
    4a76:	ef e3       	ldi	r30, 0x3F	; 63
    4a78:	f5 e2       	ldi	r31, 0x25	; 37
    4a7a:	0c 94 bd 24 	jmp	0x497a	; 0x497a <__prologue_saves__>
    4a7e:	3c 01       	movw	r6, r24
    4a80:	2b 01       	movw	r4, r22
    4a82:	5a 01       	movw	r10, r20
    4a84:	fc 01       	movw	r30, r24
    4a86:	17 82       	std	Z+7, r1	; 0x07
    4a88:	16 82       	std	Z+6, r1	; 0x06
    4a8a:	83 81       	ldd	r24, Z+3	; 0x03
    4a8c:	81 fd       	sbrc	r24, 1
    4a8e:	03 c0       	rjmp	.+6      	; 0x4a96 <vfprintf+0x24>
    4a90:	6f ef       	ldi	r22, 0xFF	; 255
    4a92:	7f ef       	ldi	r23, 0xFF	; 255
    4a94:	c6 c1       	rjmp	.+908    	; 0x4e22 <vfprintf+0x3b0>
    4a96:	9a e0       	ldi	r25, 0x0A	; 10
    4a98:	89 2e       	mov	r8, r25
    4a9a:	1e 01       	movw	r2, r28
    4a9c:	08 94       	sec
    4a9e:	21 1c       	adc	r2, r1
    4aa0:	31 1c       	adc	r3, r1
    4aa2:	f3 01       	movw	r30, r6
    4aa4:	23 81       	ldd	r18, Z+3	; 0x03
    4aa6:	f2 01       	movw	r30, r4
    4aa8:	23 fd       	sbrc	r18, 3
    4aaa:	85 91       	lpm	r24, Z+
    4aac:	23 ff       	sbrs	r18, 3
    4aae:	81 91       	ld	r24, Z+
    4ab0:	2f 01       	movw	r4, r30
    4ab2:	88 23       	and	r24, r24
    4ab4:	09 f4       	brne	.+2      	; 0x4ab8 <vfprintf+0x46>
    4ab6:	b2 c1       	rjmp	.+868    	; 0x4e1c <vfprintf+0x3aa>
    4ab8:	85 32       	cpi	r24, 0x25	; 37
    4aba:	39 f4       	brne	.+14     	; 0x4aca <vfprintf+0x58>
    4abc:	23 fd       	sbrc	r18, 3
    4abe:	85 91       	lpm	r24, Z+
    4ac0:	23 ff       	sbrs	r18, 3
    4ac2:	81 91       	ld	r24, Z+
    4ac4:	2f 01       	movw	r4, r30
    4ac6:	85 32       	cpi	r24, 0x25	; 37
    4ac8:	29 f4       	brne	.+10     	; 0x4ad4 <vfprintf+0x62>
    4aca:	90 e0       	ldi	r25, 0x00	; 0
    4acc:	b3 01       	movw	r22, r6
    4ace:	0e 94 16 2a 	call	0x542c	; 0x542c <fputc>
    4ad2:	e7 cf       	rjmp	.-50     	; 0x4aa2 <vfprintf+0x30>
    4ad4:	98 2f       	mov	r25, r24
    4ad6:	ff 24       	eor	r15, r15
    4ad8:	ee 24       	eor	r14, r14
    4ada:	99 24       	eor	r9, r9
    4adc:	ff e1       	ldi	r31, 0x1F	; 31
    4ade:	ff 15       	cp	r31, r15
    4ae0:	d0 f0       	brcs	.+52     	; 0x4b16 <vfprintf+0xa4>
    4ae2:	9b 32       	cpi	r25, 0x2B	; 43
    4ae4:	69 f0       	breq	.+26     	; 0x4b00 <vfprintf+0x8e>
    4ae6:	9c 32       	cpi	r25, 0x2C	; 44
    4ae8:	28 f4       	brcc	.+10     	; 0x4af4 <vfprintf+0x82>
    4aea:	90 32       	cpi	r25, 0x20	; 32
    4aec:	59 f0       	breq	.+22     	; 0x4b04 <vfprintf+0x92>
    4aee:	93 32       	cpi	r25, 0x23	; 35
    4af0:	91 f4       	brne	.+36     	; 0x4b16 <vfprintf+0xa4>
    4af2:	0e c0       	rjmp	.+28     	; 0x4b10 <vfprintf+0x9e>
    4af4:	9d 32       	cpi	r25, 0x2D	; 45
    4af6:	49 f0       	breq	.+18     	; 0x4b0a <vfprintf+0x98>
    4af8:	90 33       	cpi	r25, 0x30	; 48
    4afa:	69 f4       	brne	.+26     	; 0x4b16 <vfprintf+0xa4>
    4afc:	41 e0       	ldi	r20, 0x01	; 1
    4afe:	24 c0       	rjmp	.+72     	; 0x4b48 <vfprintf+0xd6>
    4b00:	52 e0       	ldi	r21, 0x02	; 2
    4b02:	f5 2a       	or	r15, r21
    4b04:	84 e0       	ldi	r24, 0x04	; 4
    4b06:	f8 2a       	or	r15, r24
    4b08:	28 c0       	rjmp	.+80     	; 0x4b5a <vfprintf+0xe8>
    4b0a:	98 e0       	ldi	r25, 0x08	; 8
    4b0c:	f9 2a       	or	r15, r25
    4b0e:	25 c0       	rjmp	.+74     	; 0x4b5a <vfprintf+0xe8>
    4b10:	e0 e1       	ldi	r30, 0x10	; 16
    4b12:	fe 2a       	or	r15, r30
    4b14:	22 c0       	rjmp	.+68     	; 0x4b5a <vfprintf+0xe8>
    4b16:	f7 fc       	sbrc	r15, 7
    4b18:	29 c0       	rjmp	.+82     	; 0x4b6c <vfprintf+0xfa>
    4b1a:	89 2f       	mov	r24, r25
    4b1c:	80 53       	subi	r24, 0x30	; 48
    4b1e:	8a 30       	cpi	r24, 0x0A	; 10
    4b20:	70 f4       	brcc	.+28     	; 0x4b3e <vfprintf+0xcc>
    4b22:	f6 fe       	sbrs	r15, 6
    4b24:	05 c0       	rjmp	.+10     	; 0x4b30 <vfprintf+0xbe>
    4b26:	98 9c       	mul	r9, r8
    4b28:	90 2c       	mov	r9, r0
    4b2a:	11 24       	eor	r1, r1
    4b2c:	98 0e       	add	r9, r24
    4b2e:	15 c0       	rjmp	.+42     	; 0x4b5a <vfprintf+0xe8>
    4b30:	e8 9c       	mul	r14, r8
    4b32:	e0 2c       	mov	r14, r0
    4b34:	11 24       	eor	r1, r1
    4b36:	e8 0e       	add	r14, r24
    4b38:	f0 e2       	ldi	r31, 0x20	; 32
    4b3a:	ff 2a       	or	r15, r31
    4b3c:	0e c0       	rjmp	.+28     	; 0x4b5a <vfprintf+0xe8>
    4b3e:	9e 32       	cpi	r25, 0x2E	; 46
    4b40:	29 f4       	brne	.+10     	; 0x4b4c <vfprintf+0xda>
    4b42:	f6 fc       	sbrc	r15, 6
    4b44:	6b c1       	rjmp	.+726    	; 0x4e1c <vfprintf+0x3aa>
    4b46:	40 e4       	ldi	r20, 0x40	; 64
    4b48:	f4 2a       	or	r15, r20
    4b4a:	07 c0       	rjmp	.+14     	; 0x4b5a <vfprintf+0xe8>
    4b4c:	9c 36       	cpi	r25, 0x6C	; 108
    4b4e:	19 f4       	brne	.+6      	; 0x4b56 <vfprintf+0xe4>
    4b50:	50 e8       	ldi	r21, 0x80	; 128
    4b52:	f5 2a       	or	r15, r21
    4b54:	02 c0       	rjmp	.+4      	; 0x4b5a <vfprintf+0xe8>
    4b56:	98 36       	cpi	r25, 0x68	; 104
    4b58:	49 f4       	brne	.+18     	; 0x4b6c <vfprintf+0xfa>
    4b5a:	f2 01       	movw	r30, r4
    4b5c:	23 fd       	sbrc	r18, 3
    4b5e:	95 91       	lpm	r25, Z+
    4b60:	23 ff       	sbrs	r18, 3
    4b62:	91 91       	ld	r25, Z+
    4b64:	2f 01       	movw	r4, r30
    4b66:	99 23       	and	r25, r25
    4b68:	09 f0       	breq	.+2      	; 0x4b6c <vfprintf+0xfa>
    4b6a:	b8 cf       	rjmp	.-144    	; 0x4adc <vfprintf+0x6a>
    4b6c:	89 2f       	mov	r24, r25
    4b6e:	85 54       	subi	r24, 0x45	; 69
    4b70:	83 30       	cpi	r24, 0x03	; 3
    4b72:	18 f0       	brcs	.+6      	; 0x4b7a <vfprintf+0x108>
    4b74:	80 52       	subi	r24, 0x20	; 32
    4b76:	83 30       	cpi	r24, 0x03	; 3
    4b78:	38 f4       	brcc	.+14     	; 0x4b88 <vfprintf+0x116>
    4b7a:	44 e0       	ldi	r20, 0x04	; 4
    4b7c:	50 e0       	ldi	r21, 0x00	; 0
    4b7e:	a4 0e       	add	r10, r20
    4b80:	b5 1e       	adc	r11, r21
    4b82:	5f e3       	ldi	r21, 0x3F	; 63
    4b84:	59 83       	std	Y+1, r21	; 0x01
    4b86:	0f c0       	rjmp	.+30     	; 0x4ba6 <vfprintf+0x134>
    4b88:	93 36       	cpi	r25, 0x63	; 99
    4b8a:	31 f0       	breq	.+12     	; 0x4b98 <vfprintf+0x126>
    4b8c:	93 37       	cpi	r25, 0x73	; 115
    4b8e:	79 f0       	breq	.+30     	; 0x4bae <vfprintf+0x13c>
    4b90:	93 35       	cpi	r25, 0x53	; 83
    4b92:	09 f0       	breq	.+2      	; 0x4b96 <vfprintf+0x124>
    4b94:	56 c0       	rjmp	.+172    	; 0x4c42 <vfprintf+0x1d0>
    4b96:	20 c0       	rjmp	.+64     	; 0x4bd8 <vfprintf+0x166>
    4b98:	f5 01       	movw	r30, r10
    4b9a:	80 81       	ld	r24, Z
    4b9c:	89 83       	std	Y+1, r24	; 0x01
    4b9e:	42 e0       	ldi	r20, 0x02	; 2
    4ba0:	50 e0       	ldi	r21, 0x00	; 0
    4ba2:	a4 0e       	add	r10, r20
    4ba4:	b5 1e       	adc	r11, r21
    4ba6:	61 01       	movw	r12, r2
    4ba8:	01 e0       	ldi	r16, 0x01	; 1
    4baa:	10 e0       	ldi	r17, 0x00	; 0
    4bac:	12 c0       	rjmp	.+36     	; 0x4bd2 <vfprintf+0x160>
    4bae:	f5 01       	movw	r30, r10
    4bb0:	c0 80       	ld	r12, Z
    4bb2:	d1 80       	ldd	r13, Z+1	; 0x01
    4bb4:	f6 fc       	sbrc	r15, 6
    4bb6:	03 c0       	rjmp	.+6      	; 0x4bbe <vfprintf+0x14c>
    4bb8:	6f ef       	ldi	r22, 0xFF	; 255
    4bba:	7f ef       	ldi	r23, 0xFF	; 255
    4bbc:	02 c0       	rjmp	.+4      	; 0x4bc2 <vfprintf+0x150>
    4bbe:	69 2d       	mov	r22, r9
    4bc0:	70 e0       	ldi	r23, 0x00	; 0
    4bc2:	42 e0       	ldi	r20, 0x02	; 2
    4bc4:	50 e0       	ldi	r21, 0x00	; 0
    4bc6:	a4 0e       	add	r10, r20
    4bc8:	b5 1e       	adc	r11, r21
    4bca:	c6 01       	movw	r24, r12
    4bcc:	0e 94 c9 29 	call	0x5392	; 0x5392 <strnlen>
    4bd0:	8c 01       	movw	r16, r24
    4bd2:	5f e7       	ldi	r21, 0x7F	; 127
    4bd4:	f5 22       	and	r15, r21
    4bd6:	14 c0       	rjmp	.+40     	; 0x4c00 <vfprintf+0x18e>
    4bd8:	f5 01       	movw	r30, r10
    4bda:	c0 80       	ld	r12, Z
    4bdc:	d1 80       	ldd	r13, Z+1	; 0x01
    4bde:	f6 fc       	sbrc	r15, 6
    4be0:	03 c0       	rjmp	.+6      	; 0x4be8 <vfprintf+0x176>
    4be2:	6f ef       	ldi	r22, 0xFF	; 255
    4be4:	7f ef       	ldi	r23, 0xFF	; 255
    4be6:	02 c0       	rjmp	.+4      	; 0x4bec <vfprintf+0x17a>
    4be8:	69 2d       	mov	r22, r9
    4bea:	70 e0       	ldi	r23, 0x00	; 0
    4bec:	42 e0       	ldi	r20, 0x02	; 2
    4bee:	50 e0       	ldi	r21, 0x00	; 0
    4bf0:	a4 0e       	add	r10, r20
    4bf2:	b5 1e       	adc	r11, r21
    4bf4:	c6 01       	movw	r24, r12
    4bf6:	0e 94 be 29 	call	0x537c	; 0x537c <strnlen_P>
    4bfa:	8c 01       	movw	r16, r24
    4bfc:	50 e8       	ldi	r21, 0x80	; 128
    4bfe:	f5 2a       	or	r15, r21
    4c00:	f3 fe       	sbrs	r15, 3
    4c02:	07 c0       	rjmp	.+14     	; 0x4c12 <vfprintf+0x1a0>
    4c04:	1a c0       	rjmp	.+52     	; 0x4c3a <vfprintf+0x1c8>
    4c06:	80 e2       	ldi	r24, 0x20	; 32
    4c08:	90 e0       	ldi	r25, 0x00	; 0
    4c0a:	b3 01       	movw	r22, r6
    4c0c:	0e 94 16 2a 	call	0x542c	; 0x542c <fputc>
    4c10:	ea 94       	dec	r14
    4c12:	8e 2d       	mov	r24, r14
    4c14:	90 e0       	ldi	r25, 0x00	; 0
    4c16:	08 17       	cp	r16, r24
    4c18:	19 07       	cpc	r17, r25
    4c1a:	a8 f3       	brcs	.-22     	; 0x4c06 <vfprintf+0x194>
    4c1c:	0e c0       	rjmp	.+28     	; 0x4c3a <vfprintf+0x1c8>
    4c1e:	f6 01       	movw	r30, r12
    4c20:	f7 fc       	sbrc	r15, 7
    4c22:	85 91       	lpm	r24, Z+
    4c24:	f7 fe       	sbrs	r15, 7
    4c26:	81 91       	ld	r24, Z+
    4c28:	6f 01       	movw	r12, r30
    4c2a:	90 e0       	ldi	r25, 0x00	; 0
    4c2c:	b3 01       	movw	r22, r6
    4c2e:	0e 94 16 2a 	call	0x542c	; 0x542c <fputc>
    4c32:	e1 10       	cpse	r14, r1
    4c34:	ea 94       	dec	r14
    4c36:	01 50       	subi	r16, 0x01	; 1
    4c38:	10 40       	sbci	r17, 0x00	; 0
    4c3a:	01 15       	cp	r16, r1
    4c3c:	11 05       	cpc	r17, r1
    4c3e:	79 f7       	brne	.-34     	; 0x4c1e <vfprintf+0x1ac>
    4c40:	ea c0       	rjmp	.+468    	; 0x4e16 <vfprintf+0x3a4>
    4c42:	94 36       	cpi	r25, 0x64	; 100
    4c44:	11 f0       	breq	.+4      	; 0x4c4a <vfprintf+0x1d8>
    4c46:	99 36       	cpi	r25, 0x69	; 105
    4c48:	69 f5       	brne	.+90     	; 0x4ca4 <vfprintf+0x232>
    4c4a:	f7 fe       	sbrs	r15, 7
    4c4c:	08 c0       	rjmp	.+16     	; 0x4c5e <vfprintf+0x1ec>
    4c4e:	f5 01       	movw	r30, r10
    4c50:	20 81       	ld	r18, Z
    4c52:	31 81       	ldd	r19, Z+1	; 0x01
    4c54:	42 81       	ldd	r20, Z+2	; 0x02
    4c56:	53 81       	ldd	r21, Z+3	; 0x03
    4c58:	84 e0       	ldi	r24, 0x04	; 4
    4c5a:	90 e0       	ldi	r25, 0x00	; 0
    4c5c:	0a c0       	rjmp	.+20     	; 0x4c72 <vfprintf+0x200>
    4c5e:	f5 01       	movw	r30, r10
    4c60:	80 81       	ld	r24, Z
    4c62:	91 81       	ldd	r25, Z+1	; 0x01
    4c64:	9c 01       	movw	r18, r24
    4c66:	44 27       	eor	r20, r20
    4c68:	37 fd       	sbrc	r19, 7
    4c6a:	40 95       	com	r20
    4c6c:	54 2f       	mov	r21, r20
    4c6e:	82 e0       	ldi	r24, 0x02	; 2
    4c70:	90 e0       	ldi	r25, 0x00	; 0
    4c72:	a8 0e       	add	r10, r24
    4c74:	b9 1e       	adc	r11, r25
    4c76:	9f e6       	ldi	r25, 0x6F	; 111
    4c78:	f9 22       	and	r15, r25
    4c7a:	57 ff       	sbrs	r21, 7
    4c7c:	09 c0       	rjmp	.+18     	; 0x4c90 <vfprintf+0x21e>
    4c7e:	50 95       	com	r21
    4c80:	40 95       	com	r20
    4c82:	30 95       	com	r19
    4c84:	21 95       	neg	r18
    4c86:	3f 4f       	sbci	r19, 0xFF	; 255
    4c88:	4f 4f       	sbci	r20, 0xFF	; 255
    4c8a:	5f 4f       	sbci	r21, 0xFF	; 255
    4c8c:	e0 e8       	ldi	r30, 0x80	; 128
    4c8e:	fe 2a       	or	r15, r30
    4c90:	ca 01       	movw	r24, r20
    4c92:	b9 01       	movw	r22, r18
    4c94:	a1 01       	movw	r20, r2
    4c96:	2a e0       	ldi	r18, 0x0A	; 10
    4c98:	30 e0       	ldi	r19, 0x00	; 0
    4c9a:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <__ultoa_invert>
    4c9e:	d8 2e       	mov	r13, r24
    4ca0:	d2 18       	sub	r13, r2
    4ca2:	40 c0       	rjmp	.+128    	; 0x4d24 <vfprintf+0x2b2>
    4ca4:	95 37       	cpi	r25, 0x75	; 117
    4ca6:	29 f4       	brne	.+10     	; 0x4cb2 <vfprintf+0x240>
    4ca8:	1f 2d       	mov	r17, r15
    4caa:	1f 7e       	andi	r17, 0xEF	; 239
    4cac:	2a e0       	ldi	r18, 0x0A	; 10
    4cae:	30 e0       	ldi	r19, 0x00	; 0
    4cb0:	1d c0       	rjmp	.+58     	; 0x4cec <vfprintf+0x27a>
    4cb2:	1f 2d       	mov	r17, r15
    4cb4:	19 7f       	andi	r17, 0xF9	; 249
    4cb6:	9f 36       	cpi	r25, 0x6F	; 111
    4cb8:	61 f0       	breq	.+24     	; 0x4cd2 <vfprintf+0x260>
    4cba:	90 37       	cpi	r25, 0x70	; 112
    4cbc:	20 f4       	brcc	.+8      	; 0x4cc6 <vfprintf+0x254>
    4cbe:	98 35       	cpi	r25, 0x58	; 88
    4cc0:	09 f0       	breq	.+2      	; 0x4cc4 <vfprintf+0x252>
    4cc2:	ac c0       	rjmp	.+344    	; 0x4e1c <vfprintf+0x3aa>
    4cc4:	0f c0       	rjmp	.+30     	; 0x4ce4 <vfprintf+0x272>
    4cc6:	90 37       	cpi	r25, 0x70	; 112
    4cc8:	39 f0       	breq	.+14     	; 0x4cd8 <vfprintf+0x266>
    4cca:	98 37       	cpi	r25, 0x78	; 120
    4ccc:	09 f0       	breq	.+2      	; 0x4cd0 <vfprintf+0x25e>
    4cce:	a6 c0       	rjmp	.+332    	; 0x4e1c <vfprintf+0x3aa>
    4cd0:	04 c0       	rjmp	.+8      	; 0x4cda <vfprintf+0x268>
    4cd2:	28 e0       	ldi	r18, 0x08	; 8
    4cd4:	30 e0       	ldi	r19, 0x00	; 0
    4cd6:	0a c0       	rjmp	.+20     	; 0x4cec <vfprintf+0x27a>
    4cd8:	10 61       	ori	r17, 0x10	; 16
    4cda:	14 fd       	sbrc	r17, 4
    4cdc:	14 60       	ori	r17, 0x04	; 4
    4cde:	20 e1       	ldi	r18, 0x10	; 16
    4ce0:	30 e0       	ldi	r19, 0x00	; 0
    4ce2:	04 c0       	rjmp	.+8      	; 0x4cec <vfprintf+0x27a>
    4ce4:	14 fd       	sbrc	r17, 4
    4ce6:	16 60       	ori	r17, 0x06	; 6
    4ce8:	20 e1       	ldi	r18, 0x10	; 16
    4cea:	32 e0       	ldi	r19, 0x02	; 2
    4cec:	17 ff       	sbrs	r17, 7
    4cee:	08 c0       	rjmp	.+16     	; 0x4d00 <vfprintf+0x28e>
    4cf0:	f5 01       	movw	r30, r10
    4cf2:	60 81       	ld	r22, Z
    4cf4:	71 81       	ldd	r23, Z+1	; 0x01
    4cf6:	82 81       	ldd	r24, Z+2	; 0x02
    4cf8:	93 81       	ldd	r25, Z+3	; 0x03
    4cfa:	44 e0       	ldi	r20, 0x04	; 4
    4cfc:	50 e0       	ldi	r21, 0x00	; 0
    4cfe:	08 c0       	rjmp	.+16     	; 0x4d10 <vfprintf+0x29e>
    4d00:	f5 01       	movw	r30, r10
    4d02:	80 81       	ld	r24, Z
    4d04:	91 81       	ldd	r25, Z+1	; 0x01
    4d06:	bc 01       	movw	r22, r24
    4d08:	80 e0       	ldi	r24, 0x00	; 0
    4d0a:	90 e0       	ldi	r25, 0x00	; 0
    4d0c:	42 e0       	ldi	r20, 0x02	; 2
    4d0e:	50 e0       	ldi	r21, 0x00	; 0
    4d10:	a4 0e       	add	r10, r20
    4d12:	b5 1e       	adc	r11, r21
    4d14:	a1 01       	movw	r20, r2
    4d16:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <__ultoa_invert>
    4d1a:	d8 2e       	mov	r13, r24
    4d1c:	d2 18       	sub	r13, r2
    4d1e:	8f e7       	ldi	r24, 0x7F	; 127
    4d20:	f8 2e       	mov	r15, r24
    4d22:	f1 22       	and	r15, r17
    4d24:	f6 fe       	sbrs	r15, 6
    4d26:	0b c0       	rjmp	.+22     	; 0x4d3e <vfprintf+0x2cc>
    4d28:	5e ef       	ldi	r21, 0xFE	; 254
    4d2a:	f5 22       	and	r15, r21
    4d2c:	d9 14       	cp	r13, r9
    4d2e:	38 f4       	brcc	.+14     	; 0x4d3e <vfprintf+0x2cc>
    4d30:	f4 fe       	sbrs	r15, 4
    4d32:	07 c0       	rjmp	.+14     	; 0x4d42 <vfprintf+0x2d0>
    4d34:	f2 fc       	sbrc	r15, 2
    4d36:	05 c0       	rjmp	.+10     	; 0x4d42 <vfprintf+0x2d0>
    4d38:	8f ee       	ldi	r24, 0xEF	; 239
    4d3a:	f8 22       	and	r15, r24
    4d3c:	02 c0       	rjmp	.+4      	; 0x4d42 <vfprintf+0x2d0>
    4d3e:	1d 2d       	mov	r17, r13
    4d40:	01 c0       	rjmp	.+2      	; 0x4d44 <vfprintf+0x2d2>
    4d42:	19 2d       	mov	r17, r9
    4d44:	f4 fe       	sbrs	r15, 4
    4d46:	0d c0       	rjmp	.+26     	; 0x4d62 <vfprintf+0x2f0>
    4d48:	fe 01       	movw	r30, r28
    4d4a:	ed 0d       	add	r30, r13
    4d4c:	f1 1d       	adc	r31, r1
    4d4e:	80 81       	ld	r24, Z
    4d50:	80 33       	cpi	r24, 0x30	; 48
    4d52:	19 f4       	brne	.+6      	; 0x4d5a <vfprintf+0x2e8>
    4d54:	99 ee       	ldi	r25, 0xE9	; 233
    4d56:	f9 22       	and	r15, r25
    4d58:	08 c0       	rjmp	.+16     	; 0x4d6a <vfprintf+0x2f8>
    4d5a:	1f 5f       	subi	r17, 0xFF	; 255
    4d5c:	f2 fe       	sbrs	r15, 2
    4d5e:	05 c0       	rjmp	.+10     	; 0x4d6a <vfprintf+0x2f8>
    4d60:	03 c0       	rjmp	.+6      	; 0x4d68 <vfprintf+0x2f6>
    4d62:	8f 2d       	mov	r24, r15
    4d64:	86 78       	andi	r24, 0x86	; 134
    4d66:	09 f0       	breq	.+2      	; 0x4d6a <vfprintf+0x2f8>
    4d68:	1f 5f       	subi	r17, 0xFF	; 255
    4d6a:	0f 2d       	mov	r16, r15
    4d6c:	f3 fc       	sbrc	r15, 3
    4d6e:	14 c0       	rjmp	.+40     	; 0x4d98 <vfprintf+0x326>
    4d70:	f0 fe       	sbrs	r15, 0
    4d72:	0f c0       	rjmp	.+30     	; 0x4d92 <vfprintf+0x320>
    4d74:	1e 15       	cp	r17, r14
    4d76:	10 f0       	brcs	.+4      	; 0x4d7c <vfprintf+0x30a>
    4d78:	9d 2c       	mov	r9, r13
    4d7a:	0b c0       	rjmp	.+22     	; 0x4d92 <vfprintf+0x320>
    4d7c:	9d 2c       	mov	r9, r13
    4d7e:	9e 0c       	add	r9, r14
    4d80:	91 1a       	sub	r9, r17
    4d82:	1e 2d       	mov	r17, r14
    4d84:	06 c0       	rjmp	.+12     	; 0x4d92 <vfprintf+0x320>
    4d86:	80 e2       	ldi	r24, 0x20	; 32
    4d88:	90 e0       	ldi	r25, 0x00	; 0
    4d8a:	b3 01       	movw	r22, r6
    4d8c:	0e 94 16 2a 	call	0x542c	; 0x542c <fputc>
    4d90:	1f 5f       	subi	r17, 0xFF	; 255
    4d92:	1e 15       	cp	r17, r14
    4d94:	c0 f3       	brcs	.-16     	; 0x4d86 <vfprintf+0x314>
    4d96:	04 c0       	rjmp	.+8      	; 0x4da0 <vfprintf+0x32e>
    4d98:	1e 15       	cp	r17, r14
    4d9a:	10 f4       	brcc	.+4      	; 0x4da0 <vfprintf+0x32e>
    4d9c:	e1 1a       	sub	r14, r17
    4d9e:	01 c0       	rjmp	.+2      	; 0x4da2 <vfprintf+0x330>
    4da0:	ee 24       	eor	r14, r14
    4da2:	04 ff       	sbrs	r16, 4
    4da4:	0f c0       	rjmp	.+30     	; 0x4dc4 <vfprintf+0x352>
    4da6:	80 e3       	ldi	r24, 0x30	; 48
    4da8:	90 e0       	ldi	r25, 0x00	; 0
    4daa:	b3 01       	movw	r22, r6
    4dac:	0e 94 16 2a 	call	0x542c	; 0x542c <fputc>
    4db0:	02 ff       	sbrs	r16, 2
    4db2:	1d c0       	rjmp	.+58     	; 0x4dee <vfprintf+0x37c>
    4db4:	01 fd       	sbrc	r16, 1
    4db6:	03 c0       	rjmp	.+6      	; 0x4dbe <vfprintf+0x34c>
    4db8:	88 e7       	ldi	r24, 0x78	; 120
    4dba:	90 e0       	ldi	r25, 0x00	; 0
    4dbc:	0e c0       	rjmp	.+28     	; 0x4dda <vfprintf+0x368>
    4dbe:	88 e5       	ldi	r24, 0x58	; 88
    4dc0:	90 e0       	ldi	r25, 0x00	; 0
    4dc2:	0b c0       	rjmp	.+22     	; 0x4dda <vfprintf+0x368>
    4dc4:	80 2f       	mov	r24, r16
    4dc6:	86 78       	andi	r24, 0x86	; 134
    4dc8:	91 f0       	breq	.+36     	; 0x4dee <vfprintf+0x37c>
    4dca:	01 ff       	sbrs	r16, 1
    4dcc:	02 c0       	rjmp	.+4      	; 0x4dd2 <vfprintf+0x360>
    4dce:	8b e2       	ldi	r24, 0x2B	; 43
    4dd0:	01 c0       	rjmp	.+2      	; 0x4dd4 <vfprintf+0x362>
    4dd2:	80 e2       	ldi	r24, 0x20	; 32
    4dd4:	f7 fc       	sbrc	r15, 7
    4dd6:	8d e2       	ldi	r24, 0x2D	; 45
    4dd8:	90 e0       	ldi	r25, 0x00	; 0
    4dda:	b3 01       	movw	r22, r6
    4ddc:	0e 94 16 2a 	call	0x542c	; 0x542c <fputc>
    4de0:	06 c0       	rjmp	.+12     	; 0x4dee <vfprintf+0x37c>
    4de2:	80 e3       	ldi	r24, 0x30	; 48
    4de4:	90 e0       	ldi	r25, 0x00	; 0
    4de6:	b3 01       	movw	r22, r6
    4de8:	0e 94 16 2a 	call	0x542c	; 0x542c <fputc>
    4dec:	9a 94       	dec	r9
    4dee:	d9 14       	cp	r13, r9
    4df0:	c0 f3       	brcs	.-16     	; 0x4de2 <vfprintf+0x370>
    4df2:	da 94       	dec	r13
    4df4:	f1 01       	movw	r30, r2
    4df6:	ed 0d       	add	r30, r13
    4df8:	f1 1d       	adc	r31, r1
    4dfa:	80 81       	ld	r24, Z
    4dfc:	90 e0       	ldi	r25, 0x00	; 0
    4dfe:	b3 01       	movw	r22, r6
    4e00:	0e 94 16 2a 	call	0x542c	; 0x542c <fputc>
    4e04:	dd 20       	and	r13, r13
    4e06:	a9 f7       	brne	.-22     	; 0x4df2 <vfprintf+0x380>
    4e08:	06 c0       	rjmp	.+12     	; 0x4e16 <vfprintf+0x3a4>
    4e0a:	80 e2       	ldi	r24, 0x20	; 32
    4e0c:	90 e0       	ldi	r25, 0x00	; 0
    4e0e:	b3 01       	movw	r22, r6
    4e10:	0e 94 16 2a 	call	0x542c	; 0x542c <fputc>
    4e14:	ea 94       	dec	r14
    4e16:	ee 20       	and	r14, r14
    4e18:	c1 f7       	brne	.-16     	; 0x4e0a <vfprintf+0x398>
    4e1a:	43 ce       	rjmp	.-890    	; 0x4aa2 <vfprintf+0x30>
    4e1c:	f3 01       	movw	r30, r6
    4e1e:	66 81       	ldd	r22, Z+6	; 0x06
    4e20:	77 81       	ldd	r23, Z+7	; 0x07
    4e22:	cb 01       	movw	r24, r22
    4e24:	2b 96       	adiw	r28, 0x0b	; 11
    4e26:	e2 e1       	ldi	r30, 0x12	; 18
    4e28:	0c 94 d9 24 	jmp	0x49b2	; 0x49b2 <__epilogue_restores__>

00004e2c <putval>:
    4e2c:	fc 01       	movw	r30, r24
    4e2e:	20 fd       	sbrc	r18, 0
    4e30:	08 c0       	rjmp	.+16     	; 0x4e42 <putval+0x16>
    4e32:	23 fd       	sbrc	r18, 3
    4e34:	05 c0       	rjmp	.+10     	; 0x4e40 <putval+0x14>
    4e36:	22 ff       	sbrs	r18, 2
    4e38:	02 c0       	rjmp	.+4      	; 0x4e3e <putval+0x12>
    4e3a:	73 83       	std	Z+3, r23	; 0x03
    4e3c:	62 83       	std	Z+2, r22	; 0x02
    4e3e:	51 83       	std	Z+1, r21	; 0x01
    4e40:	40 83       	st	Z, r20
    4e42:	08 95       	ret

00004e44 <mulacc>:
    4e44:	ef 92       	push	r14
    4e46:	ff 92       	push	r15
    4e48:	0f 93       	push	r16
    4e4a:	1f 93       	push	r17
    4e4c:	44 ff       	sbrs	r20, 4
    4e4e:	02 c0       	rjmp	.+4      	; 0x4e54 <mulacc+0x10>
    4e50:	33 e0       	ldi	r19, 0x03	; 3
    4e52:	11 c0       	rjmp	.+34     	; 0x4e76 <mulacc+0x32>
    4e54:	46 ff       	sbrs	r20, 6
    4e56:	02 c0       	rjmp	.+4      	; 0x4e5c <mulacc+0x18>
    4e58:	34 e0       	ldi	r19, 0x04	; 4
    4e5a:	0d c0       	rjmp	.+26     	; 0x4e76 <mulacc+0x32>
    4e5c:	db 01       	movw	r26, r22
    4e5e:	fc 01       	movw	r30, r24
    4e60:	aa 0f       	add	r26, r26
    4e62:	bb 1f       	adc	r27, r27
    4e64:	ee 1f       	adc	r30, r30
    4e66:	ff 1f       	adc	r31, r31
    4e68:	10 94       	com	r1
    4e6a:	d1 f7       	brne	.-12     	; 0x4e60 <mulacc+0x1c>
    4e6c:	6a 0f       	add	r22, r26
    4e6e:	7b 1f       	adc	r23, r27
    4e70:	8e 1f       	adc	r24, r30
    4e72:	9f 1f       	adc	r25, r31
    4e74:	31 e0       	ldi	r19, 0x01	; 1
    4e76:	66 0f       	add	r22, r22
    4e78:	77 1f       	adc	r23, r23
    4e7a:	88 1f       	adc	r24, r24
    4e7c:	99 1f       	adc	r25, r25
    4e7e:	31 50       	subi	r19, 0x01	; 1
    4e80:	d1 f7       	brne	.-12     	; 0x4e76 <mulacc+0x32>
    4e82:	7b 01       	movw	r14, r22
    4e84:	8c 01       	movw	r16, r24
    4e86:	e2 0e       	add	r14, r18
    4e88:	f1 1c       	adc	r15, r1
    4e8a:	01 1d       	adc	r16, r1
    4e8c:	11 1d       	adc	r17, r1
    4e8e:	a8 01       	movw	r20, r16
    4e90:	97 01       	movw	r18, r14
    4e92:	b7 01       	movw	r22, r14
    4e94:	ca 01       	movw	r24, r20
    4e96:	1f 91       	pop	r17
    4e98:	0f 91       	pop	r16
    4e9a:	ff 90       	pop	r15
    4e9c:	ef 90       	pop	r14
    4e9e:	08 95       	ret

00004ea0 <skip_spaces>:
    4ea0:	0f 93       	push	r16
    4ea2:	1f 93       	push	r17
    4ea4:	cf 93       	push	r28
    4ea6:	df 93       	push	r29
    4ea8:	8c 01       	movw	r16, r24
    4eaa:	c8 01       	movw	r24, r16
    4eac:	0e 94 d4 29 	call	0x53a8	; 0x53a8 <fgetc>
    4eb0:	ec 01       	movw	r28, r24
    4eb2:	97 fd       	sbrc	r25, 7
    4eb4:	08 c0       	rjmp	.+16     	; 0x4ec6 <skip_spaces+0x26>
    4eb6:	0e 94 ab 29 	call	0x5356	; 0x5356 <isspace>
    4eba:	89 2b       	or	r24, r25
    4ebc:	b1 f7       	brne	.-20     	; 0x4eaa <skip_spaces+0xa>
    4ebe:	ce 01       	movw	r24, r28
    4ec0:	b8 01       	movw	r22, r16
    4ec2:	0e 94 42 2a 	call	0x5484	; 0x5484 <ungetc>
    4ec6:	ce 01       	movw	r24, r28
    4ec8:	df 91       	pop	r29
    4eca:	cf 91       	pop	r28
    4ecc:	1f 91       	pop	r17
    4ece:	0f 91       	pop	r16
    4ed0:	08 95       	ret

00004ed2 <conv_int>:
    4ed2:	a0 e0       	ldi	r26, 0x00	; 0
    4ed4:	b0 e0       	ldi	r27, 0x00	; 0
    4ed6:	ef e6       	ldi	r30, 0x6F	; 111
    4ed8:	f7 e2       	ldi	r31, 0x27	; 39
    4eda:	0c 94 c5 24 	jmp	0x498a	; 0x498a <__prologue_saves__+0x10>
    4ede:	ec 01       	movw	r28, r24
    4ee0:	c6 2e       	mov	r12, r22
    4ee2:	5a 01       	movw	r10, r20
    4ee4:	12 2f       	mov	r17, r18
    4ee6:	0e 94 d4 29 	call	0x53a8	; 0x53a8 <fgetc>
    4eea:	ac 01       	movw	r20, r24
    4eec:	8b 32       	cpi	r24, 0x2B	; 43
    4eee:	19 f0       	breq	.+6      	; 0x4ef6 <conv_int+0x24>
    4ef0:	8d 32       	cpi	r24, 0x2D	; 45
    4ef2:	51 f4       	brne	.+20     	; 0x4f08 <conv_int+0x36>
    4ef4:	10 68       	ori	r17, 0x80	; 128
    4ef6:	ca 94       	dec	r12
    4ef8:	09 f4       	brne	.+2      	; 0x4efc <conv_int+0x2a>
    4efa:	6d c0       	rjmp	.+218    	; 0x4fd6 <conv_int+0x104>
    4efc:	ce 01       	movw	r24, r28
    4efe:	0e 94 d4 29 	call	0x53a8	; 0x53a8 <fgetc>
    4f02:	ac 01       	movw	r20, r24
    4f04:	97 fd       	sbrc	r25, 7
    4f06:	67 c0       	rjmp	.+206    	; 0x4fd6 <conv_int+0x104>
    4f08:	6d ef       	ldi	r22, 0xFD	; 253
    4f0a:	d6 2e       	mov	r13, r22
    4f0c:	d1 22       	and	r13, r17
    4f0e:	8d 2d       	mov	r24, r13
    4f10:	80 73       	andi	r24, 0x30	; 48
    4f12:	01 f5       	brne	.+64     	; 0x4f54 <conv_int+0x82>
    4f14:	40 33       	cpi	r20, 0x30	; 48
    4f16:	f1 f4       	brne	.+60     	; 0x4f54 <conv_int+0x82>
    4f18:	ca 94       	dec	r12
    4f1a:	09 f4       	brne	.+2      	; 0x4f1e <conv_int+0x4c>
    4f1c:	47 c0       	rjmp	.+142    	; 0x4fac <conv_int+0xda>
    4f1e:	ce 01       	movw	r24, r28
    4f20:	0e 94 d4 29 	call	0x53a8	; 0x53a8 <fgetc>
    4f24:	ac 01       	movw	r20, r24
    4f26:	97 fd       	sbrc	r25, 7
    4f28:	41 c0       	rjmp	.+130    	; 0x4fac <conv_int+0xda>
    4f2a:	82 e0       	ldi	r24, 0x02	; 2
    4f2c:	d8 2a       	or	r13, r24
    4f2e:	48 37       	cpi	r20, 0x78	; 120
    4f30:	11 f0       	breq	.+4      	; 0x4f36 <conv_int+0x64>
    4f32:	48 35       	cpi	r20, 0x58	; 88
    4f34:	59 f4       	brne	.+22     	; 0x4f4c <conv_int+0x7a>
    4f36:	80 e4       	ldi	r24, 0x40	; 64
    4f38:	d8 2a       	or	r13, r24
    4f3a:	ca 94       	dec	r12
    4f3c:	b9 f1       	breq	.+110    	; 0x4fac <conv_int+0xda>
    4f3e:	ce 01       	movw	r24, r28
    4f40:	0e 94 d4 29 	call	0x53a8	; 0x53a8 <fgetc>
    4f44:	ac 01       	movw	r20, r24
    4f46:	99 23       	and	r25, r25
    4f48:	2c f4       	brge	.+10     	; 0x4f54 <conv_int+0x82>
    4f4a:	30 c0       	rjmp	.+96     	; 0x4fac <conv_int+0xda>
    4f4c:	d6 fc       	sbrc	r13, 6
    4f4e:	02 c0       	rjmp	.+4      	; 0x4f54 <conv_int+0x82>
    4f50:	80 e1       	ldi	r24, 0x10	; 16
    4f52:	d8 2a       	or	r13, r24
    4f54:	ee 24       	eor	r14, r14
    4f56:	ff 24       	eor	r15, r15
    4f58:	87 01       	movw	r16, r14
    4f5a:	24 2f       	mov	r18, r20
    4f5c:	20 53       	subi	r18, 0x30	; 48
    4f5e:	28 30       	cpi	r18, 0x08	; 8
    4f60:	88 f0       	brcs	.+34     	; 0x4f84 <conv_int+0xb2>
    4f62:	d4 fc       	sbrc	r13, 4
    4f64:	09 c0       	rjmp	.+18     	; 0x4f78 <conv_int+0xa6>
    4f66:	2a 30       	cpi	r18, 0x0A	; 10
    4f68:	68 f0       	brcs	.+26     	; 0x4f84 <conv_int+0xb2>
    4f6a:	d6 fe       	sbrs	r13, 6
    4f6c:	05 c0       	rjmp	.+10     	; 0x4f78 <conv_int+0xa6>
    4f6e:	2f 7d       	andi	r18, 0xDF	; 223
    4f70:	82 2f       	mov	r24, r18
    4f72:	81 51       	subi	r24, 0x11	; 17
    4f74:	86 30       	cpi	r24, 0x06	; 6
    4f76:	28 f0       	brcs	.+10     	; 0x4f82 <conv_int+0xb0>
    4f78:	ca 01       	movw	r24, r20
    4f7a:	be 01       	movw	r22, r28
    4f7c:	0e 94 42 2a 	call	0x5484	; 0x5484 <ungetc>
    4f80:	12 c0       	rjmp	.+36     	; 0x4fa6 <conv_int+0xd4>
    4f82:	27 50       	subi	r18, 0x07	; 7
    4f84:	c8 01       	movw	r24, r16
    4f86:	b7 01       	movw	r22, r14
    4f88:	4d 2d       	mov	r20, r13
    4f8a:	0e 94 22 27 	call	0x4e44	; 0x4e44 <mulacc>
    4f8e:	7b 01       	movw	r14, r22
    4f90:	8c 01       	movw	r16, r24
    4f92:	82 e0       	ldi	r24, 0x02	; 2
    4f94:	d8 2a       	or	r13, r24
    4f96:	ca 94       	dec	r12
    4f98:	61 f0       	breq	.+24     	; 0x4fb2 <conv_int+0xe0>
    4f9a:	ce 01       	movw	r24, r28
    4f9c:	0e 94 d4 29 	call	0x53a8	; 0x53a8 <fgetc>
    4fa0:	ac 01       	movw	r20, r24
    4fa2:	97 ff       	sbrs	r25, 7
    4fa4:	da cf       	rjmp	.-76     	; 0x4f5a <conv_int+0x88>
    4fa6:	d1 fc       	sbrc	r13, 1
    4fa8:	04 c0       	rjmp	.+8      	; 0x4fb2 <conv_int+0xe0>
    4faa:	15 c0       	rjmp	.+42     	; 0x4fd6 <conv_int+0x104>
    4fac:	ee 24       	eor	r14, r14
    4fae:	ff 24       	eor	r15, r15
    4fb0:	87 01       	movw	r16, r14
    4fb2:	d7 fe       	sbrs	r13, 7
    4fb4:	08 c0       	rjmp	.+16     	; 0x4fc6 <conv_int+0xf4>
    4fb6:	10 95       	com	r17
    4fb8:	00 95       	com	r16
    4fba:	f0 94       	com	r15
    4fbc:	e0 94       	com	r14
    4fbe:	e1 1c       	adc	r14, r1
    4fc0:	f1 1c       	adc	r15, r1
    4fc2:	01 1d       	adc	r16, r1
    4fc4:	11 1d       	adc	r17, r1
    4fc6:	c5 01       	movw	r24, r10
    4fc8:	b8 01       	movw	r22, r16
    4fca:	a7 01       	movw	r20, r14
    4fcc:	2d 2d       	mov	r18, r13
    4fce:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <putval>
    4fd2:	81 e0       	ldi	r24, 0x01	; 1
    4fd4:	01 c0       	rjmp	.+2      	; 0x4fd8 <conv_int+0x106>
    4fd6:	80 e0       	ldi	r24, 0x00	; 0
    4fd8:	cd b7       	in	r28, 0x3d	; 61
    4fda:	de b7       	in	r29, 0x3e	; 62
    4fdc:	ea e0       	ldi	r30, 0x0A	; 10
    4fde:	0c 94 e1 24 	jmp	0x49c2	; 0x49c2 <__epilogue_restores__+0x10>

00004fe2 <conv_brk>:
    4fe2:	a0 e2       	ldi	r26, 0x20	; 32
    4fe4:	b0 e0       	ldi	r27, 0x00	; 0
    4fe6:	e7 ef       	ldi	r30, 0xF7	; 247
    4fe8:	f7 e2       	ldi	r31, 0x27	; 39
    4fea:	0c 94 c1 24 	jmp	0x4982	; 0x4982 <__prologue_saves__+0x8>
    4fee:	6c 01       	movw	r12, r24
    4ff0:	a6 2e       	mov	r10, r22
    4ff2:	8a 01       	movw	r16, r20
    4ff4:	79 01       	movw	r14, r18
    4ff6:	fe 01       	movw	r30, r28
    4ff8:	31 96       	adiw	r30, 0x01	; 1
    4ffa:	80 e2       	ldi	r24, 0x20	; 32
    4ffc:	df 01       	movw	r26, r30
    4ffe:	1d 92       	st	X+, r1
    5000:	8a 95       	dec	r24
    5002:	e9 f7       	brne	.-6      	; 0x4ffe <conv_brk+0x1c>
    5004:	70 e0       	ldi	r23, 0x00	; 0
    5006:	30 e0       	ldi	r19, 0x00	; 0
    5008:	60 e0       	ldi	r22, 0x00	; 0
    500a:	40 e0       	ldi	r20, 0x00	; 0
    500c:	50 e0       	ldi	r21, 0x00	; 0
    500e:	4f 01       	movw	r8, r30
    5010:	a1 e0       	ldi	r26, 0x01	; 1
    5012:	b0 e0       	ldi	r27, 0x00	; 0
    5014:	f6 01       	movw	r30, r12
    5016:	83 81       	ldd	r24, Z+3	; 0x03
    5018:	f7 01       	movw	r30, r14
    501a:	83 fd       	sbrc	r24, 3
    501c:	25 91       	lpm	r18, Z+
    501e:	83 ff       	sbrs	r24, 3
    5020:	21 91       	ld	r18, Z+
    5022:	7f 01       	movw	r14, r30
    5024:	22 23       	and	r18, r18
    5026:	09 f4       	brne	.+2      	; 0x502a <conv_brk+0x48>
    5028:	7e c0       	rjmp	.+252    	; 0x5126 <conv_brk+0x144>
    502a:	2e 35       	cpi	r18, 0x5E	; 94
    502c:	19 f4       	brne	.+6      	; 0x5034 <conv_brk+0x52>
    502e:	41 15       	cp	r20, r1
    5030:	51 05       	cpc	r21, r1
    5032:	69 f1       	breq	.+90     	; 0x508e <conv_brk+0xac>
    5034:	87 2f       	mov	r24, r23
    5036:	90 e0       	ldi	r25, 0x00	; 0
    5038:	84 17       	cp	r24, r20
    503a:	95 07       	cpc	r25, r21
    503c:	44 f4       	brge	.+16     	; 0x504e <conv_brk+0x6c>
    503e:	2d 35       	cpi	r18, 0x5D	; 93
    5040:	51 f1       	breq	.+84     	; 0x5096 <conv_brk+0xb4>
    5042:	2d 32       	cpi	r18, 0x2D	; 45
    5044:	21 f4       	brne	.+8      	; 0x504e <conv_brk+0x6c>
    5046:	33 23       	and	r19, r19
    5048:	29 f4       	brne	.+10     	; 0x5054 <conv_brk+0x72>
    504a:	31 e0       	ldi	r19, 0x01	; 1
    504c:	21 c0       	rjmp	.+66     	; 0x5090 <conv_brk+0xae>
    504e:	33 23       	and	r19, r19
    5050:	09 f4       	brne	.+2      	; 0x5054 <conv_brk+0x72>
    5052:	62 2f       	mov	r22, r18
    5054:	32 2f       	mov	r19, r18
    5056:	83 2f       	mov	r24, r19
    5058:	86 95       	lsr	r24
    505a:	86 95       	lsr	r24
    505c:	86 95       	lsr	r24
    505e:	f4 01       	movw	r30, r8
    5060:	e8 0f       	add	r30, r24
    5062:	f1 1d       	adc	r31, r1
    5064:	83 2f       	mov	r24, r19
    5066:	87 70       	andi	r24, 0x07	; 7
    5068:	3d 01       	movw	r6, r26
    506a:	02 c0       	rjmp	.+4      	; 0x5070 <conv_brk+0x8e>
    506c:	66 0c       	add	r6, r6
    506e:	77 1c       	adc	r7, r7
    5070:	8a 95       	dec	r24
    5072:	e2 f7       	brpl	.-8      	; 0x506c <conv_brk+0x8a>
    5074:	20 81       	ld	r18, Z
    5076:	26 29       	or	r18, r6
    5078:	20 83       	st	Z, r18
    507a:	36 17       	cp	r19, r22
    507c:	11 f4       	brne	.+4      	; 0x5082 <conv_brk+0xa0>
    507e:	30 e0       	ldi	r19, 0x00	; 0
    5080:	07 c0       	rjmp	.+14     	; 0x5090 <conv_brk+0xae>
    5082:	36 17       	cp	r19, r22
    5084:	10 f4       	brcc	.+4      	; 0x508a <conv_brk+0xa8>
    5086:	3f 5f       	subi	r19, 0xFF	; 255
    5088:	e6 cf       	rjmp	.-52     	; 0x5056 <conv_brk+0x74>
    508a:	31 50       	subi	r19, 0x01	; 1
    508c:	e4 cf       	rjmp	.-56     	; 0x5056 <conv_brk+0x74>
    508e:	71 e0       	ldi	r23, 0x01	; 1
    5090:	4f 5f       	subi	r20, 0xFF	; 255
    5092:	5f 4f       	sbci	r21, 0xFF	; 255
    5094:	bf cf       	rjmp	.-130    	; 0x5014 <conv_brk+0x32>
    5096:	33 23       	and	r19, r19
    5098:	19 f0       	breq	.+6      	; 0x50a0 <conv_brk+0xbe>
    509a:	8e 81       	ldd	r24, Y+6	; 0x06
    509c:	80 62       	ori	r24, 0x20	; 32
    509e:	8e 83       	std	Y+6, r24	; 0x06
    50a0:	77 23       	and	r23, r23
    50a2:	59 f0       	breq	.+22     	; 0x50ba <conv_brk+0xd8>
    50a4:	fe 01       	movw	r30, r28
    50a6:	31 96       	adiw	r30, 0x01	; 1
    50a8:	9e 01       	movw	r18, r28
    50aa:	2f 5d       	subi	r18, 0xDF	; 223
    50ac:	3f 4f       	sbci	r19, 0xFF	; 255
    50ae:	80 81       	ld	r24, Z
    50b0:	80 95       	com	r24
    50b2:	81 93       	st	Z+, r24
    50b4:	e2 17       	cp	r30, r18
    50b6:	f3 07       	cpc	r31, r19
    50b8:	d1 f7       	brne	.-12     	; 0x50ae <conv_brk+0xcc>
    50ba:	bb 24       	eor	r11, r11
    50bc:	b3 94       	inc	r11
    50be:	4e 01       	movw	r8, r28
    50c0:	08 94       	sec
    50c2:	81 1c       	adc	r8, r1
    50c4:	91 1c       	adc	r9, r1
    50c6:	c6 01       	movw	r24, r12
    50c8:	0e 94 d4 29 	call	0x53a8	; 0x53a8 <fgetc>
    50cc:	ac 01       	movw	r20, r24
    50ce:	97 fd       	sbrc	r25, 7
    50d0:	22 c0       	rjmp	.+68     	; 0x5116 <conv_brk+0x134>
    50d2:	86 95       	lsr	r24
    50d4:	86 95       	lsr	r24
    50d6:	86 95       	lsr	r24
    50d8:	f4 01       	movw	r30, r8
    50da:	e8 0f       	add	r30, r24
    50dc:	f1 1d       	adc	r31, r1
    50de:	80 81       	ld	r24, Z
    50e0:	90 e0       	ldi	r25, 0x00	; 0
    50e2:	9a 01       	movw	r18, r20
    50e4:	27 70       	andi	r18, 0x07	; 7
    50e6:	30 70       	andi	r19, 0x00	; 0
    50e8:	02 c0       	rjmp	.+4      	; 0x50ee <conv_brk+0x10c>
    50ea:	95 95       	asr	r25
    50ec:	87 95       	ror	r24
    50ee:	2a 95       	dec	r18
    50f0:	e2 f7       	brpl	.-8      	; 0x50ea <conv_brk+0x108>
    50f2:	80 fd       	sbrc	r24, 0
    50f4:	05 c0       	rjmp	.+10     	; 0x5100 <conv_brk+0x11e>
    50f6:	ca 01       	movw	r24, r20
    50f8:	b6 01       	movw	r22, r12
    50fa:	0e 94 42 2a 	call	0x5484	; 0x5484 <ungetc>
    50fe:	0b c0       	rjmp	.+22     	; 0x5116 <conv_brk+0x134>
    5100:	01 15       	cp	r16, r1
    5102:	11 05       	cpc	r17, r1
    5104:	19 f0       	breq	.+6      	; 0x510c <conv_brk+0x12a>
    5106:	d8 01       	movw	r26, r16
    5108:	4d 93       	st	X+, r20
    510a:	8d 01       	movw	r16, r26
    510c:	aa 94       	dec	r10
    510e:	bb 24       	eor	r11, r11
    5110:	aa 20       	and	r10, r10
    5112:	c9 f6       	brne	.-78     	; 0x50c6 <conv_brk+0xe4>
    5114:	02 c0       	rjmp	.+4      	; 0x511a <conv_brk+0x138>
    5116:	bb 20       	and	r11, r11
    5118:	31 f4       	brne	.+12     	; 0x5126 <conv_brk+0x144>
    511a:	01 15       	cp	r16, r1
    511c:	11 05       	cpc	r17, r1
    511e:	29 f0       	breq	.+10     	; 0x512a <conv_brk+0x148>
    5120:	f8 01       	movw	r30, r16
    5122:	10 82       	st	Z, r1
    5124:	02 c0       	rjmp	.+4      	; 0x512a <conv_brk+0x148>
    5126:	ee 24       	eor	r14, r14
    5128:	ff 24       	eor	r15, r15
    512a:	c7 01       	movw	r24, r14
    512c:	a0 96       	adiw	r28, 0x20	; 32
    512e:	ee e0       	ldi	r30, 0x0E	; 14
    5130:	0c 94 dd 24 	jmp	0x49ba	; 0x49ba <__epilogue_restores__+0x8>

00005134 <vfscanf>:
    5134:	a0 e0       	ldi	r26, 0x00	; 0
    5136:	b0 e0       	ldi	r27, 0x00	; 0
    5138:	e0 ea       	ldi	r30, 0xA0	; 160
    513a:	f8 e2       	ldi	r31, 0x28	; 40
    513c:	0c 94 c1 24 	jmp	0x4982	; 0x4982 <__prologue_saves__+0x8>
    5140:	5c 01       	movw	r10, r24
    5142:	6b 01       	movw	r12, r22
    5144:	3a 01       	movw	r6, r20
    5146:	fc 01       	movw	r30, r24
    5148:	17 82       	std	Z+7, r1	; 0x07
    514a:	16 82       	std	Z+6, r1	; 0x06
    514c:	88 24       	eor	r8, r8
    514e:	ea c0       	rjmp	.+468    	; 0x5324 <vfscanf+0x1f0>
    5150:	81 2f       	mov	r24, r17
    5152:	90 e0       	ldi	r25, 0x00	; 0
    5154:	0e 94 ab 29 	call	0x5356	; 0x5356 <isspace>
    5158:	89 2b       	or	r24, r25
    515a:	21 f0       	breq	.+8      	; 0x5164 <vfscanf+0x30>
    515c:	c5 01       	movw	r24, r10
    515e:	0e 94 50 27 	call	0x4ea0	; 0x4ea0 <skip_spaces>
    5162:	e0 c0       	rjmp	.+448    	; 0x5324 <vfscanf+0x1f0>
    5164:	15 32       	cpi	r17, 0x25	; 37
    5166:	49 f4       	brne	.+18     	; 0x517a <vfscanf+0x46>
    5168:	f6 01       	movw	r30, r12
    516a:	f3 fc       	sbrc	r15, 3
    516c:	65 91       	lpm	r22, Z+
    516e:	f3 fe       	sbrs	r15, 3
    5170:	61 91       	ld	r22, Z+
    5172:	6f 01       	movw	r12, r30
    5174:	65 32       	cpi	r22, 0x25	; 37
    5176:	69 f4       	brne	.+26     	; 0x5192 <vfscanf+0x5e>
    5178:	15 e2       	ldi	r17, 0x25	; 37
    517a:	c5 01       	movw	r24, r10
    517c:	0e 94 d4 29 	call	0x53a8	; 0x53a8 <fgetc>
    5180:	97 fd       	sbrc	r25, 7
    5182:	dc c0       	rjmp	.+440    	; 0x533c <vfscanf+0x208>
    5184:	18 17       	cp	r17, r24
    5186:	09 f4       	brne	.+2      	; 0x518a <vfscanf+0x56>
    5188:	cd c0       	rjmp	.+410    	; 0x5324 <vfscanf+0x1f0>
    518a:	b5 01       	movw	r22, r10
    518c:	0e 94 42 2a 	call	0x5484	; 0x5484 <ungetc>
    5190:	da c0       	rjmp	.+436    	; 0x5346 <vfscanf+0x212>
    5192:	6a 32       	cpi	r22, 0x2A	; 42
    5194:	19 f0       	breq	.+6      	; 0x519c <vfscanf+0x68>
    5196:	16 2f       	mov	r17, r22
    5198:	00 e0       	ldi	r16, 0x00	; 0
    519a:	06 c0       	rjmp	.+12     	; 0x51a8 <vfscanf+0x74>
    519c:	f3 fc       	sbrc	r15, 3
    519e:	15 91       	lpm	r17, Z+
    51a0:	f3 fe       	sbrs	r15, 3
    51a2:	11 91       	ld	r17, Z+
    51a4:	6f 01       	movw	r12, r30
    51a6:	01 e0       	ldi	r16, 0x01	; 1
    51a8:	99 24       	eor	r9, r9
    51aa:	0f c0       	rjmp	.+30     	; 0x51ca <vfscanf+0x96>
    51ac:	02 60       	ori	r16, 0x02	; 2
    51ae:	69 2d       	mov	r22, r9
    51b0:	70 e0       	ldi	r23, 0x00	; 0
    51b2:	80 e0       	ldi	r24, 0x00	; 0
    51b4:	90 e0       	ldi	r25, 0x00	; 0
    51b6:	40 e2       	ldi	r20, 0x20	; 32
    51b8:	0e 94 22 27 	call	0x4e44	; 0x4e44 <mulacc>
    51bc:	96 2e       	mov	r9, r22
    51be:	f6 01       	movw	r30, r12
    51c0:	f3 fc       	sbrc	r15, 3
    51c2:	15 91       	lpm	r17, Z+
    51c4:	f3 fe       	sbrs	r15, 3
    51c6:	11 91       	ld	r17, Z+
    51c8:	6f 01       	movw	r12, r30
    51ca:	21 2f       	mov	r18, r17
    51cc:	20 53       	subi	r18, 0x30	; 48
    51ce:	2a 30       	cpi	r18, 0x0A	; 10
    51d0:	68 f3       	brcs	.-38     	; 0x51ac <vfscanf+0x78>
    51d2:	01 fd       	sbrc	r16, 1
    51d4:	03 c0       	rjmp	.+6      	; 0x51dc <vfscanf+0xa8>
    51d6:	99 24       	eor	r9, r9
    51d8:	9a 94       	dec	r9
    51da:	03 c0       	rjmp	.+6      	; 0x51e2 <vfscanf+0xae>
    51dc:	99 20       	and	r9, r9
    51de:	09 f4       	brne	.+2      	; 0x51e2 <vfscanf+0xae>
    51e0:	b2 c0       	rjmp	.+356    	; 0x5346 <vfscanf+0x212>
    51e2:	18 36       	cpi	r17, 0x68	; 104
    51e4:	21 f0       	breq	.+8      	; 0x51ee <vfscanf+0xba>
    51e6:	1c 36       	cpi	r17, 0x6C	; 108
    51e8:	99 f4       	brne	.+38     	; 0x5210 <vfscanf+0xdc>
    51ea:	f6 01       	movw	r30, r12
    51ec:	0b c0       	rjmp	.+22     	; 0x5204 <vfscanf+0xd0>
    51ee:	f6 01       	movw	r30, r12
    51f0:	f3 fc       	sbrc	r15, 3
    51f2:	65 91       	lpm	r22, Z+
    51f4:	f3 fe       	sbrs	r15, 3
    51f6:	61 91       	ld	r22, Z+
    51f8:	68 36       	cpi	r22, 0x68	; 104
    51fa:	19 f0       	breq	.+6      	; 0x5202 <vfscanf+0xce>
    51fc:	6f 01       	movw	r12, r30
    51fe:	16 2f       	mov	r17, r22
    5200:	07 c0       	rjmp	.+14     	; 0x5210 <vfscanf+0xdc>
    5202:	08 60       	ori	r16, 0x08	; 8
    5204:	04 60       	ori	r16, 0x04	; 4
    5206:	f3 fc       	sbrc	r15, 3
    5208:	15 91       	lpm	r17, Z+
    520a:	f3 fe       	sbrs	r15, 3
    520c:	11 91       	ld	r17, Z+
    520e:	6f 01       	movw	r12, r30
    5210:	11 23       	and	r17, r17
    5212:	09 f4       	brne	.+2      	; 0x5216 <vfscanf+0xe2>
    5214:	98 c0       	rjmp	.+304    	; 0x5346 <vfscanf+0x212>
    5216:	84 e5       	ldi	r24, 0x54	; 84
    5218:	90 e0       	ldi	r25, 0x00	; 0
    521a:	61 2f       	mov	r22, r17
    521c:	70 e0       	ldi	r23, 0x00	; 0
    521e:	0e 94 b3 29 	call	0x5366	; 0x5366 <strchr_P>
    5222:	89 2b       	or	r24, r25
    5224:	09 f4       	brne	.+2      	; 0x5228 <vfscanf+0xf4>
    5226:	8f c0       	rjmp	.+286    	; 0x5346 <vfscanf+0x212>
    5228:	80 2f       	mov	r24, r16
    522a:	00 ff       	sbrs	r16, 0
    522c:	03 c0       	rjmp	.+6      	; 0x5234 <vfscanf+0x100>
    522e:	ee 24       	eor	r14, r14
    5230:	ff 24       	eor	r15, r15
    5232:	07 c0       	rjmp	.+14     	; 0x5242 <vfscanf+0x10e>
    5234:	f3 01       	movw	r30, r6
    5236:	e0 80       	ld	r14, Z
    5238:	f1 80       	ldd	r15, Z+1	; 0x01
    523a:	22 e0       	ldi	r18, 0x02	; 2
    523c:	30 e0       	ldi	r19, 0x00	; 0
    523e:	62 0e       	add	r6, r18
    5240:	73 1e       	adc	r7, r19
    5242:	1e 36       	cpi	r17, 0x6E	; 110
    5244:	51 f4       	brne	.+20     	; 0x525a <vfscanf+0x126>
    5246:	f5 01       	movw	r30, r10
    5248:	46 81       	ldd	r20, Z+6	; 0x06
    524a:	57 81       	ldd	r21, Z+7	; 0x07
    524c:	60 e0       	ldi	r22, 0x00	; 0
    524e:	70 e0       	ldi	r23, 0x00	; 0
    5250:	c7 01       	movw	r24, r14
    5252:	20 2f       	mov	r18, r16
    5254:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <putval>
    5258:	65 c0       	rjmp	.+202    	; 0x5324 <vfscanf+0x1f0>
    525a:	13 36       	cpi	r17, 0x63	; 99
    525c:	91 f4       	brne	.+36     	; 0x5282 <vfscanf+0x14e>
    525e:	81 fd       	sbrc	r24, 1
    5260:	02 c0       	rjmp	.+4      	; 0x5266 <vfscanf+0x132>
    5262:	99 24       	eor	r9, r9
    5264:	93 94       	inc	r9
    5266:	c5 01       	movw	r24, r10
    5268:	0e 94 d4 29 	call	0x53a8	; 0x53a8 <fgetc>
    526c:	97 fd       	sbrc	r25, 7
    526e:	66 c0       	rjmp	.+204    	; 0x533c <vfscanf+0x208>
    5270:	e1 14       	cp	r14, r1
    5272:	f1 04       	cpc	r15, r1
    5274:	19 f0       	breq	.+6      	; 0x527c <vfscanf+0x148>
    5276:	f7 01       	movw	r30, r14
    5278:	81 93       	st	Z+, r24
    527a:	7f 01       	movw	r14, r30
    527c:	9a 94       	dec	r9
    527e:	99 f7       	brne	.-26     	; 0x5266 <vfscanf+0x132>
    5280:	4f c0       	rjmp	.+158    	; 0x5320 <vfscanf+0x1ec>
    5282:	1b 35       	cpi	r17, 0x5B	; 91
    5284:	59 f4       	brne	.+22     	; 0x529c <vfscanf+0x168>
    5286:	c5 01       	movw	r24, r10
    5288:	69 2d       	mov	r22, r9
    528a:	a7 01       	movw	r20, r14
    528c:	96 01       	movw	r18, r12
    528e:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <conv_brk>
    5292:	6c 01       	movw	r12, r24
    5294:	00 97       	sbiw	r24, 0x00	; 0
    5296:	09 f0       	breq	.+2      	; 0x529a <vfscanf+0x166>
    5298:	43 c0       	rjmp	.+134    	; 0x5320 <vfscanf+0x1ec>
    529a:	3d c0       	rjmp	.+122    	; 0x5316 <vfscanf+0x1e2>
    529c:	c5 01       	movw	r24, r10
    529e:	0e 94 50 27 	call	0x4ea0	; 0x4ea0 <skip_spaces>
    52a2:	97 fd       	sbrc	r25, 7
    52a4:	4b c0       	rjmp	.+150    	; 0x533c <vfscanf+0x208>
    52a6:	1f 36       	cpi	r17, 0x6F	; 111
    52a8:	59 f1       	breq	.+86     	; 0x5300 <vfscanf+0x1cc>
    52aa:	10 37       	cpi	r17, 0x70	; 112
    52ac:	28 f4       	brcc	.+10     	; 0x52b8 <vfscanf+0x184>
    52ae:	14 36       	cpi	r17, 0x64	; 100
    52b0:	29 f1       	breq	.+74     	; 0x52fc <vfscanf+0x1c8>
    52b2:	19 36       	cpi	r17, 0x69	; 105
    52b4:	39 f5       	brne	.+78     	; 0x5304 <vfscanf+0x1d0>
    52b6:	27 c0       	rjmp	.+78     	; 0x5306 <vfscanf+0x1d2>
    52b8:	13 37       	cpi	r17, 0x73	; 115
    52ba:	19 f0       	breq	.+6      	; 0x52c2 <vfscanf+0x18e>
    52bc:	15 37       	cpi	r17, 0x75	; 117
    52be:	11 f5       	brne	.+68     	; 0x5304 <vfscanf+0x1d0>
    52c0:	1d c0       	rjmp	.+58     	; 0x52fc <vfscanf+0x1c8>
    52c2:	c5 01       	movw	r24, r10
    52c4:	0e 94 d4 29 	call	0x53a8	; 0x53a8 <fgetc>
    52c8:	ec 01       	movw	r28, r24
    52ca:	97 fd       	sbrc	r25, 7
    52cc:	11 c0       	rjmp	.+34     	; 0x52f0 <vfscanf+0x1bc>
    52ce:	0e 94 ab 29 	call	0x5356	; 0x5356 <isspace>
    52d2:	89 2b       	or	r24, r25
    52d4:	29 f0       	breq	.+10     	; 0x52e0 <vfscanf+0x1ac>
    52d6:	ce 01       	movw	r24, r28
    52d8:	b5 01       	movw	r22, r10
    52da:	0e 94 42 2a 	call	0x5484	; 0x5484 <ungetc>
    52de:	08 c0       	rjmp	.+16     	; 0x52f0 <vfscanf+0x1bc>
    52e0:	e1 14       	cp	r14, r1
    52e2:	f1 04       	cpc	r15, r1
    52e4:	19 f0       	breq	.+6      	; 0x52ec <vfscanf+0x1b8>
    52e6:	f7 01       	movw	r30, r14
    52e8:	c1 93       	st	Z+, r28
    52ea:	7f 01       	movw	r14, r30
    52ec:	9a 94       	dec	r9
    52ee:	49 f7       	brne	.-46     	; 0x52c2 <vfscanf+0x18e>
    52f0:	e1 14       	cp	r14, r1
    52f2:	f1 04       	cpc	r15, r1
    52f4:	a9 f0       	breq	.+42     	; 0x5320 <vfscanf+0x1ec>
    52f6:	f7 01       	movw	r30, r14
    52f8:	10 82       	st	Z, r1
    52fa:	12 c0       	rjmp	.+36     	; 0x5320 <vfscanf+0x1ec>
    52fc:	00 62       	ori	r16, 0x20	; 32
    52fe:	03 c0       	rjmp	.+6      	; 0x5306 <vfscanf+0x1d2>
    5300:	00 61       	ori	r16, 0x10	; 16
    5302:	01 c0       	rjmp	.+2      	; 0x5306 <vfscanf+0x1d2>
    5304:	00 64       	ori	r16, 0x40	; 64
    5306:	c5 01       	movw	r24, r10
    5308:	69 2d       	mov	r22, r9
    530a:	a7 01       	movw	r20, r14
    530c:	20 2f       	mov	r18, r16
    530e:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <conv_int>
    5312:	88 23       	and	r24, r24
    5314:	29 f4       	brne	.+10     	; 0x5320 <vfscanf+0x1ec>
    5316:	f5 01       	movw	r30, r10
    5318:	83 81       	ldd	r24, Z+3	; 0x03
    531a:	80 73       	andi	r24, 0x30	; 48
    531c:	79 f4       	brne	.+30     	; 0x533c <vfscanf+0x208>
    531e:	13 c0       	rjmp	.+38     	; 0x5346 <vfscanf+0x212>
    5320:	00 ff       	sbrs	r16, 0
    5322:	83 94       	inc	r8
    5324:	f5 01       	movw	r30, r10
    5326:	f3 80       	ldd	r15, Z+3	; 0x03
    5328:	f6 01       	movw	r30, r12
    532a:	f3 fc       	sbrc	r15, 3
    532c:	15 91       	lpm	r17, Z+
    532e:	f3 fe       	sbrs	r15, 3
    5330:	11 91       	ld	r17, Z+
    5332:	6f 01       	movw	r12, r30
    5334:	11 23       	and	r17, r17
    5336:	09 f0       	breq	.+2      	; 0x533a <vfscanf+0x206>
    5338:	0b cf       	rjmp	.-490    	; 0x5150 <vfscanf+0x1c>
    533a:	05 c0       	rjmp	.+10     	; 0x5346 <vfscanf+0x212>
    533c:	88 20       	and	r8, r8
    533e:	19 f4       	brne	.+6      	; 0x5346 <vfscanf+0x212>
    5340:	2f ef       	ldi	r18, 0xFF	; 255
    5342:	3f ef       	ldi	r19, 0xFF	; 255
    5344:	02 c0       	rjmp	.+4      	; 0x534a <vfscanf+0x216>
    5346:	28 2d       	mov	r18, r8
    5348:	30 e0       	ldi	r19, 0x00	; 0
    534a:	c9 01       	movw	r24, r18
    534c:	cd b7       	in	r28, 0x3d	; 61
    534e:	de b7       	in	r29, 0x3e	; 62
    5350:	ee e0       	ldi	r30, 0x0E	; 14
    5352:	0c 94 dd 24 	jmp	0x49ba	; 0x49ba <__epilogue_restores__+0x8>

00005356 <isspace>:
    5356:	91 11       	cpse	r25, r1
    5358:	54 c1       	rjmp	.+680    	; 0x5602 <__ctype_isfalse>
    535a:	80 32       	cpi	r24, 0x20	; 32
    535c:	19 f0       	breq	.+6      	; 0x5364 <isspace+0xe>
    535e:	89 50       	subi	r24, 0x09	; 9
    5360:	85 50       	subi	r24, 0x05	; 5
    5362:	d0 f7       	brcc	.-12     	; 0x5358 <isspace+0x2>
    5364:	08 95       	ret

00005366 <strchr_P>:
    5366:	fc 01       	movw	r30, r24
    5368:	05 90       	lpm	r0, Z+
    536a:	06 16       	cp	r0, r22
    536c:	21 f0       	breq	.+8      	; 0x5376 <strchr_P+0x10>
    536e:	00 20       	and	r0, r0
    5370:	d9 f7       	brne	.-10     	; 0x5368 <strchr_P+0x2>
    5372:	c0 01       	movw	r24, r0
    5374:	08 95       	ret
    5376:	31 97       	sbiw	r30, 0x01	; 1
    5378:	cf 01       	movw	r24, r30
    537a:	08 95       	ret

0000537c <strnlen_P>:
    537c:	fc 01       	movw	r30, r24
    537e:	05 90       	lpm	r0, Z+
    5380:	61 50       	subi	r22, 0x01	; 1
    5382:	70 40       	sbci	r23, 0x00	; 0
    5384:	01 10       	cpse	r0, r1
    5386:	d8 f7       	brcc	.-10     	; 0x537e <strnlen_P+0x2>
    5388:	80 95       	com	r24
    538a:	90 95       	com	r25
    538c:	8e 0f       	add	r24, r30
    538e:	9f 1f       	adc	r25, r31
    5390:	08 95       	ret

00005392 <strnlen>:
    5392:	fc 01       	movw	r30, r24
    5394:	61 50       	subi	r22, 0x01	; 1
    5396:	70 40       	sbci	r23, 0x00	; 0
    5398:	01 90       	ld	r0, Z+
    539a:	01 10       	cpse	r0, r1
    539c:	d8 f7       	brcc	.-10     	; 0x5394 <strnlen+0x2>
    539e:	80 95       	com	r24
    53a0:	90 95       	com	r25
    53a2:	8e 0f       	add	r24, r30
    53a4:	9f 1f       	adc	r25, r31
    53a6:	08 95       	ret

000053a8 <fgetc>:
    53a8:	cf 93       	push	r28
    53aa:	df 93       	push	r29
    53ac:	ec 01       	movw	r28, r24
    53ae:	4b 81       	ldd	r20, Y+3	; 0x03
    53b0:	40 ff       	sbrs	r20, 0
    53b2:	1a c0       	rjmp	.+52     	; 0x53e8 <fgetc+0x40>
    53b4:	46 ff       	sbrs	r20, 6
    53b6:	0a c0       	rjmp	.+20     	; 0x53cc <fgetc+0x24>
    53b8:	4f 7b       	andi	r20, 0xBF	; 191
    53ba:	4b 83       	std	Y+3, r20	; 0x03
    53bc:	8e 81       	ldd	r24, Y+6	; 0x06
    53be:	9f 81       	ldd	r25, Y+7	; 0x07
    53c0:	01 96       	adiw	r24, 0x01	; 1
    53c2:	9f 83       	std	Y+7, r25	; 0x07
    53c4:	8e 83       	std	Y+6, r24	; 0x06
    53c6:	8a 81       	ldd	r24, Y+2	; 0x02
    53c8:	28 2f       	mov	r18, r24
    53ca:	2b c0       	rjmp	.+86     	; 0x5422 <fgetc+0x7a>
    53cc:	42 ff       	sbrs	r20, 2
    53ce:	13 c0       	rjmp	.+38     	; 0x53f6 <fgetc+0x4e>
    53d0:	e8 81       	ld	r30, Y
    53d2:	f9 81       	ldd	r31, Y+1	; 0x01
    53d4:	80 81       	ld	r24, Z
    53d6:	28 2f       	mov	r18, r24
    53d8:	33 27       	eor	r19, r19
    53da:	27 fd       	sbrc	r18, 7
    53dc:	30 95       	com	r19
    53de:	21 15       	cp	r18, r1
    53e0:	31 05       	cpc	r19, r1
    53e2:	29 f4       	brne	.+10     	; 0x53ee <fgetc+0x46>
    53e4:	40 62       	ori	r20, 0x20	; 32
    53e6:	4b 83       	std	Y+3, r20	; 0x03
    53e8:	2f ef       	ldi	r18, 0xFF	; 255
    53ea:	3f ef       	ldi	r19, 0xFF	; 255
    53ec:	1b c0       	rjmp	.+54     	; 0x5424 <fgetc+0x7c>
    53ee:	31 96       	adiw	r30, 0x01	; 1
    53f0:	f9 83       	std	Y+1, r31	; 0x01
    53f2:	e8 83       	st	Y, r30
    53f4:	11 c0       	rjmp	.+34     	; 0x5418 <fgetc+0x70>
    53f6:	ea 85       	ldd	r30, Y+10	; 0x0a
    53f8:	fb 85       	ldd	r31, Y+11	; 0x0b
    53fa:	ce 01       	movw	r24, r28
    53fc:	09 95       	icall
    53fe:	9c 01       	movw	r18, r24
    5400:	97 ff       	sbrs	r25, 7
    5402:	0a c0       	rjmp	.+20     	; 0x5418 <fgetc+0x70>
    5404:	9b 81       	ldd	r25, Y+3	; 0x03
    5406:	2f 5f       	subi	r18, 0xFF	; 255
    5408:	3f 4f       	sbci	r19, 0xFF	; 255
    540a:	11 f0       	breq	.+4      	; 0x5410 <fgetc+0x68>
    540c:	80 e2       	ldi	r24, 0x20	; 32
    540e:	01 c0       	rjmp	.+2      	; 0x5412 <fgetc+0x6a>
    5410:	80 e1       	ldi	r24, 0x10	; 16
    5412:	89 2b       	or	r24, r25
    5414:	8b 83       	std	Y+3, r24	; 0x03
    5416:	e8 cf       	rjmp	.-48     	; 0x53e8 <fgetc+0x40>
    5418:	8e 81       	ldd	r24, Y+6	; 0x06
    541a:	9f 81       	ldd	r25, Y+7	; 0x07
    541c:	01 96       	adiw	r24, 0x01	; 1
    541e:	9f 83       	std	Y+7, r25	; 0x07
    5420:	8e 83       	std	Y+6, r24	; 0x06
    5422:	30 e0       	ldi	r19, 0x00	; 0
    5424:	c9 01       	movw	r24, r18
    5426:	df 91       	pop	r29
    5428:	cf 91       	pop	r28
    542a:	08 95       	ret

0000542c <fputc>:
    542c:	0f 93       	push	r16
    542e:	1f 93       	push	r17
    5430:	cf 93       	push	r28
    5432:	df 93       	push	r29
    5434:	8c 01       	movw	r16, r24
    5436:	eb 01       	movw	r28, r22
    5438:	8b 81       	ldd	r24, Y+3	; 0x03
    543a:	81 ff       	sbrs	r24, 1
    543c:	1b c0       	rjmp	.+54     	; 0x5474 <fputc+0x48>
    543e:	82 ff       	sbrs	r24, 2
    5440:	0d c0       	rjmp	.+26     	; 0x545c <fputc+0x30>
    5442:	2e 81       	ldd	r18, Y+6	; 0x06
    5444:	3f 81       	ldd	r19, Y+7	; 0x07
    5446:	8c 81       	ldd	r24, Y+4	; 0x04
    5448:	9d 81       	ldd	r25, Y+5	; 0x05
    544a:	28 17       	cp	r18, r24
    544c:	39 07       	cpc	r19, r25
    544e:	64 f4       	brge	.+24     	; 0x5468 <fputc+0x3c>
    5450:	e8 81       	ld	r30, Y
    5452:	f9 81       	ldd	r31, Y+1	; 0x01
    5454:	01 93       	st	Z+, r16
    5456:	f9 83       	std	Y+1, r31	; 0x01
    5458:	e8 83       	st	Y, r30
    545a:	06 c0       	rjmp	.+12     	; 0x5468 <fputc+0x3c>
    545c:	e8 85       	ldd	r30, Y+8	; 0x08
    545e:	f9 85       	ldd	r31, Y+9	; 0x09
    5460:	80 2f       	mov	r24, r16
    5462:	09 95       	icall
    5464:	89 2b       	or	r24, r25
    5466:	31 f4       	brne	.+12     	; 0x5474 <fputc+0x48>
    5468:	8e 81       	ldd	r24, Y+6	; 0x06
    546a:	9f 81       	ldd	r25, Y+7	; 0x07
    546c:	01 96       	adiw	r24, 0x01	; 1
    546e:	9f 83       	std	Y+7, r25	; 0x07
    5470:	8e 83       	std	Y+6, r24	; 0x06
    5472:	02 c0       	rjmp	.+4      	; 0x5478 <fputc+0x4c>
    5474:	0f ef       	ldi	r16, 0xFF	; 255
    5476:	1f ef       	ldi	r17, 0xFF	; 255
    5478:	c8 01       	movw	r24, r16
    547a:	df 91       	pop	r29
    547c:	cf 91       	pop	r28
    547e:	1f 91       	pop	r17
    5480:	0f 91       	pop	r16
    5482:	08 95       	ret

00005484 <ungetc>:
    5484:	9c 01       	movw	r18, r24
    5486:	fb 01       	movw	r30, r22
    5488:	83 81       	ldd	r24, Z+3	; 0x03
    548a:	80 ff       	sbrs	r24, 0
    548c:	11 c0       	rjmp	.+34     	; 0x54b0 <ungetc+0x2c>
    548e:	86 fd       	sbrc	r24, 6
    5490:	0f c0       	rjmp	.+30     	; 0x54b0 <ungetc+0x2c>
    5492:	9f ef       	ldi	r25, 0xFF	; 255
    5494:	2f 3f       	cpi	r18, 0xFF	; 255
    5496:	39 07       	cpc	r19, r25
    5498:	59 f0       	breq	.+22     	; 0x54b0 <ungetc+0x2c>
    549a:	22 83       	std	Z+2, r18	; 0x02
    549c:	80 64       	ori	r24, 0x40	; 64
    549e:	8f 7d       	andi	r24, 0xDF	; 223
    54a0:	83 83       	std	Z+3, r24	; 0x03
    54a2:	86 81       	ldd	r24, Z+6	; 0x06
    54a4:	97 81       	ldd	r25, Z+7	; 0x07
    54a6:	01 97       	sbiw	r24, 0x01	; 1
    54a8:	97 83       	std	Z+7, r25	; 0x07
    54aa:	86 83       	std	Z+6, r24	; 0x06
    54ac:	30 e0       	ldi	r19, 0x00	; 0
    54ae:	02 c0       	rjmp	.+4      	; 0x54b4 <ungetc+0x30>
    54b0:	2f ef       	ldi	r18, 0xFF	; 255
    54b2:	3f ef       	ldi	r19, 0xFF	; 255
    54b4:	c9 01       	movw	r24, r18
    54b6:	08 95       	ret

000054b8 <__ultoa_invert>:
    54b8:	fa 01       	movw	r30, r20
    54ba:	aa 27       	eor	r26, r26
    54bc:	28 30       	cpi	r18, 0x08	; 8
    54be:	51 f1       	breq	.+84     	; 0x5514 <__ultoa_invert+0x5c>
    54c0:	20 31       	cpi	r18, 0x10	; 16
    54c2:	81 f1       	breq	.+96     	; 0x5524 <__ultoa_invert+0x6c>
    54c4:	e8 94       	clt
    54c6:	6f 93       	push	r22
    54c8:	6e 7f       	andi	r22, 0xFE	; 254
    54ca:	6e 5f       	subi	r22, 0xFE	; 254
    54cc:	7f 4f       	sbci	r23, 0xFF	; 255
    54ce:	8f 4f       	sbci	r24, 0xFF	; 255
    54d0:	9f 4f       	sbci	r25, 0xFF	; 255
    54d2:	af 4f       	sbci	r26, 0xFF	; 255
    54d4:	b1 e0       	ldi	r27, 0x01	; 1
    54d6:	3e d0       	rcall	.+124    	; 0x5554 <__ultoa_invert+0x9c>
    54d8:	b4 e0       	ldi	r27, 0x04	; 4
    54da:	3c d0       	rcall	.+120    	; 0x5554 <__ultoa_invert+0x9c>
    54dc:	67 0f       	add	r22, r23
    54de:	78 1f       	adc	r23, r24
    54e0:	89 1f       	adc	r24, r25
    54e2:	9a 1f       	adc	r25, r26
    54e4:	a1 1d       	adc	r26, r1
    54e6:	68 0f       	add	r22, r24
    54e8:	79 1f       	adc	r23, r25
    54ea:	8a 1f       	adc	r24, r26
    54ec:	91 1d       	adc	r25, r1
    54ee:	a1 1d       	adc	r26, r1
    54f0:	6a 0f       	add	r22, r26
    54f2:	71 1d       	adc	r23, r1
    54f4:	81 1d       	adc	r24, r1
    54f6:	91 1d       	adc	r25, r1
    54f8:	a1 1d       	adc	r26, r1
    54fa:	20 d0       	rcall	.+64     	; 0x553c <__ultoa_invert+0x84>
    54fc:	09 f4       	brne	.+2      	; 0x5500 <__ultoa_invert+0x48>
    54fe:	68 94       	set
    5500:	3f 91       	pop	r19
    5502:	2a e0       	ldi	r18, 0x0A	; 10
    5504:	26 9f       	mul	r18, r22
    5506:	11 24       	eor	r1, r1
    5508:	30 19       	sub	r19, r0
    550a:	30 5d       	subi	r19, 0xD0	; 208
    550c:	31 93       	st	Z+, r19
    550e:	de f6       	brtc	.-74     	; 0x54c6 <__ultoa_invert+0xe>
    5510:	cf 01       	movw	r24, r30
    5512:	08 95       	ret
    5514:	46 2f       	mov	r20, r22
    5516:	47 70       	andi	r20, 0x07	; 7
    5518:	40 5d       	subi	r20, 0xD0	; 208
    551a:	41 93       	st	Z+, r20
    551c:	b3 e0       	ldi	r27, 0x03	; 3
    551e:	0f d0       	rcall	.+30     	; 0x553e <__ultoa_invert+0x86>
    5520:	c9 f7       	brne	.-14     	; 0x5514 <__ultoa_invert+0x5c>
    5522:	f6 cf       	rjmp	.-20     	; 0x5510 <__ultoa_invert+0x58>
    5524:	46 2f       	mov	r20, r22
    5526:	4f 70       	andi	r20, 0x0F	; 15
    5528:	40 5d       	subi	r20, 0xD0	; 208
    552a:	4a 33       	cpi	r20, 0x3A	; 58
    552c:	18 f0       	brcs	.+6      	; 0x5534 <__ultoa_invert+0x7c>
    552e:	49 5d       	subi	r20, 0xD9	; 217
    5530:	31 fd       	sbrc	r19, 1
    5532:	40 52       	subi	r20, 0x20	; 32
    5534:	41 93       	st	Z+, r20
    5536:	02 d0       	rcall	.+4      	; 0x553c <__ultoa_invert+0x84>
    5538:	a9 f7       	brne	.-22     	; 0x5524 <__ultoa_invert+0x6c>
    553a:	ea cf       	rjmp	.-44     	; 0x5510 <__ultoa_invert+0x58>
    553c:	b4 e0       	ldi	r27, 0x04	; 4
    553e:	a6 95       	lsr	r26
    5540:	97 95       	ror	r25
    5542:	87 95       	ror	r24
    5544:	77 95       	ror	r23
    5546:	67 95       	ror	r22
    5548:	ba 95       	dec	r27
    554a:	c9 f7       	brne	.-14     	; 0x553e <__ultoa_invert+0x86>
    554c:	00 97       	sbiw	r24, 0x00	; 0
    554e:	61 05       	cpc	r22, r1
    5550:	71 05       	cpc	r23, r1
    5552:	08 95       	ret
    5554:	9b 01       	movw	r18, r22
    5556:	ac 01       	movw	r20, r24
    5558:	0a 2e       	mov	r0, r26
    555a:	06 94       	lsr	r0
    555c:	57 95       	ror	r21
    555e:	47 95       	ror	r20
    5560:	37 95       	ror	r19
    5562:	27 95       	ror	r18
    5564:	ba 95       	dec	r27
    5566:	c9 f7       	brne	.-14     	; 0x555a <__ultoa_invert+0xa2>
    5568:	62 0f       	add	r22, r18
    556a:	73 1f       	adc	r23, r19
    556c:	84 1f       	adc	r24, r20
    556e:	95 1f       	adc	r25, r21
    5570:	a0 1d       	adc	r26, r0
    5572:	08 95       	ret

00005574 <__fp_mintl>:
    5574:	88 23       	and	r24, r24
    5576:	71 f4       	brne	.+28     	; 0x5594 <__fp_mintl+0x20>
    5578:	77 23       	and	r23, r23
    557a:	21 f0       	breq	.+8      	; 0x5584 <__fp_mintl+0x10>
    557c:	98 50       	subi	r25, 0x08	; 8
    557e:	87 2b       	or	r24, r23
    5580:	76 2f       	mov	r23, r22
    5582:	07 c0       	rjmp	.+14     	; 0x5592 <__fp_mintl+0x1e>
    5584:	66 23       	and	r22, r22
    5586:	11 f4       	brne	.+4      	; 0x558c <__fp_mintl+0x18>
    5588:	99 27       	eor	r25, r25
    558a:	0d c0       	rjmp	.+26     	; 0x55a6 <__fp_mintl+0x32>
    558c:	90 51       	subi	r25, 0x10	; 16
    558e:	86 2b       	or	r24, r22
    5590:	70 e0       	ldi	r23, 0x00	; 0
    5592:	60 e0       	ldi	r22, 0x00	; 0
    5594:	2a f0       	brmi	.+10     	; 0x55a0 <__fp_mintl+0x2c>
    5596:	9a 95       	dec	r25
    5598:	66 0f       	add	r22, r22
    559a:	77 1f       	adc	r23, r23
    559c:	88 1f       	adc	r24, r24
    559e:	da f7       	brpl	.-10     	; 0x5596 <__fp_mintl+0x22>
    55a0:	88 0f       	add	r24, r24
    55a2:	96 95       	lsr	r25
    55a4:	87 95       	ror	r24
    55a6:	97 f9       	bld	r25, 7
    55a8:	08 95       	ret

000055aa <__fp_mpack>:
    55aa:	9f 3f       	cpi	r25, 0xFF	; 255
    55ac:	31 f0       	breq	.+12     	; 0x55ba <__fp_mpack_finite+0xc>

000055ae <__fp_mpack_finite>:
    55ae:	91 50       	subi	r25, 0x01	; 1
    55b0:	20 f4       	brcc	.+8      	; 0x55ba <__fp_mpack_finite+0xc>
    55b2:	87 95       	ror	r24
    55b4:	77 95       	ror	r23
    55b6:	67 95       	ror	r22
    55b8:	b7 95       	ror	r27
    55ba:	88 0f       	add	r24, r24
    55bc:	91 1d       	adc	r25, r1
    55be:	96 95       	lsr	r25
    55c0:	87 95       	ror	r24
    55c2:	97 f9       	bld	r25, 7
    55c4:	08 95       	ret

000055c6 <__fp_trunc>:
    55c6:	28 d0       	rcall	.+80     	; 0x5618 <__fp_splitA>
    55c8:	a0 f0       	brcs	.+40     	; 0x55f2 <__fp_trunc+0x2c>
    55ca:	be e7       	ldi	r27, 0x7E	; 126
    55cc:	b9 17       	cp	r27, r25
    55ce:	88 f4       	brcc	.+34     	; 0x55f2 <__fp_trunc+0x2c>
    55d0:	bb 27       	eor	r27, r27
    55d2:	9f 38       	cpi	r25, 0x8F	; 143
    55d4:	60 f4       	brcc	.+24     	; 0x55ee <__fp_trunc+0x28>
    55d6:	16 16       	cp	r1, r22
    55d8:	b1 1d       	adc	r27, r1
    55da:	67 2f       	mov	r22, r23
    55dc:	78 2f       	mov	r23, r24
    55de:	88 27       	eor	r24, r24
    55e0:	98 5f       	subi	r25, 0xF8	; 248
    55e2:	f7 cf       	rjmp	.-18     	; 0x55d2 <__fp_trunc+0xc>
    55e4:	86 95       	lsr	r24
    55e6:	77 95       	ror	r23
    55e8:	67 95       	ror	r22
    55ea:	b1 1d       	adc	r27, r1
    55ec:	93 95       	inc	r25
    55ee:	96 39       	cpi	r25, 0x96	; 150
    55f0:	c8 f3       	brcs	.-14     	; 0x55e4 <__fp_trunc+0x1e>
    55f2:	08 95       	ret

000055f4 <__fp_zero>:
    55f4:	e8 94       	clt

000055f6 <__fp_szero>:
    55f6:	bb 27       	eor	r27, r27
    55f8:	66 27       	eor	r22, r22
    55fa:	77 27       	eor	r23, r23
    55fc:	cb 01       	movw	r24, r22
    55fe:	97 f9       	bld	r25, 7
    5600:	08 95       	ret

00005602 <__ctype_isfalse>:
    5602:	99 27       	eor	r25, r25
    5604:	88 27       	eor	r24, r24

00005606 <__ctype_istrue>:
    5606:	08 95       	ret

00005608 <__fp_split3>:
    5608:	57 fd       	sbrc	r21, 7
    560a:	90 58       	subi	r25, 0x80	; 128
    560c:	44 0f       	add	r20, r20
    560e:	55 1f       	adc	r21, r21
    5610:	59 f0       	breq	.+22     	; 0x5628 <__fp_splitA+0x10>
    5612:	5f 3f       	cpi	r21, 0xFF	; 255
    5614:	71 f0       	breq	.+28     	; 0x5632 <__fp_splitA+0x1a>
    5616:	47 95       	ror	r20

00005618 <__fp_splitA>:
    5618:	88 0f       	add	r24, r24
    561a:	97 fb       	bst	r25, 7
    561c:	99 1f       	adc	r25, r25
    561e:	61 f0       	breq	.+24     	; 0x5638 <__fp_splitA+0x20>
    5620:	9f 3f       	cpi	r25, 0xFF	; 255
    5622:	79 f0       	breq	.+30     	; 0x5642 <__fp_splitA+0x2a>
    5624:	87 95       	ror	r24
    5626:	08 95       	ret
    5628:	12 16       	cp	r1, r18
    562a:	13 06       	cpc	r1, r19
    562c:	14 06       	cpc	r1, r20
    562e:	55 1f       	adc	r21, r21
    5630:	f2 cf       	rjmp	.-28     	; 0x5616 <__fp_split3+0xe>
    5632:	46 95       	lsr	r20
    5634:	f1 df       	rcall	.-30     	; 0x5618 <__fp_splitA>
    5636:	08 c0       	rjmp	.+16     	; 0x5648 <__fp_splitA+0x30>
    5638:	16 16       	cp	r1, r22
    563a:	17 06       	cpc	r1, r23
    563c:	18 06       	cpc	r1, r24
    563e:	99 1f       	adc	r25, r25
    5640:	f1 cf       	rjmp	.-30     	; 0x5624 <__fp_splitA+0xc>
    5642:	86 95       	lsr	r24
    5644:	71 05       	cpc	r23, r1
    5646:	61 05       	cpc	r22, r1
    5648:	08 94       	sec
    564a:	08 95       	ret

0000564c <_exit>:
    564c:	f8 94       	cli

0000564e <__stop_program>:
    564e:	ff cf       	rjmp	.-2      	; 0x564e <__stop_program>
